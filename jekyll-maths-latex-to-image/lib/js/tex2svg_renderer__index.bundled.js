var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// tex2svg_renderer/impl/json_rpc_handler.js
var require_json_rpc_handler = __commonJS({
  "tex2svg_renderer/impl/json_rpc_handler.js"(exports2, module2) {
    var JsonRpcHandler = class {
      constructor(mathRenderer, logger, options = {}) {
        if (!mathRenderer || !logger || !options.inputStream || !options.outputStream) {
          throw new Error("Missing required parameters");
        }
        this.mathRenderer = mathRenderer;
        this.logger = logger;
        this.buffer = "";
        this.inputStream = options.inputStream;
        this.outputStream = options.outputStream;
        this.initializeServer();
      }
      async close() {
        this.inputStream.removeAllListeners("data");
      }
      createResponse(id, result) {
        return {
          jsonrpc: "2.0",
          id,
          result
        };
      }
      createErrorResponse(id, code, message) {
        return {
          jsonrpc: "2.0",
          id,
          error: {
            code,
            message
          }
        };
      }
      handlePing(request) {
        return this.createResponse(request.id, "pong");
      }
      async handleRequest(line) {
        try {
          if (!line.trim())
            return;
          this.logger(`Processing request: ${line}`);
          const request = JSON.parse(line);
          let response;
          if (request.method === "ping") {
            response = this.handlePing(request);
          } else if (request.method === "renderMath") {
            response = await this.handleRenderMath(request);
          }
          const responseStr = JSON.stringify(response);
          this.logger(`Sending response: ${responseStr}`);
          this.sendResponse(responseStr);
        } catch (error) {
          const errorResponse = this.createErrorResponse("unknown", -32700, `Parse error: ${error.message}`);
          this.sendResponse(JSON.stringify(errorResponse));
        }
      }
      async handleRenderMath(request) {
        try {
          const svg = await this.mathRenderer.renderMath(request.params);
          return this.createResponse(request.id, {
            success: true,
            svg: Buffer.from(svg).toString("base64")
          });
        } catch (error) {
          return this.createErrorResponse(request.id, -32002, error.message);
        }
      }
      sendResponse(response) {
        this.outputStream.write(response + "\n");
      }
      initializeServer() {
        this.inputStream.setEncoding("utf8");
        this.inputStream.on("data", async (chunk) => {
          this.buffer += chunk;
          const lines = this.buffer.split("\n");
          this.buffer = lines.pop();
          for (const line of lines) {
            await this.handleRequest(line);
          }
        });
        this.logger("JSON RPC server initialized");
      }
    };
    module2.exports = JsonRpcHandler;
  }
});

// node_modules/domelementtype/lib/index.js
var require_lib = __commonJS({
  "node_modules/domelementtype/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Doctype = exports2.CDATA = exports2.Tag = exports2.Style = exports2.Script = exports2.Comment = exports2.Directive = exports2.Text = exports2.Root = exports2.isTag = exports2.ElementType = void 0;
    var ElementType;
    (function(ElementType2) {
      ElementType2["Root"] = "root";
      ElementType2["Text"] = "text";
      ElementType2["Directive"] = "directive";
      ElementType2["Comment"] = "comment";
      ElementType2["Script"] = "script";
      ElementType2["Style"] = "style";
      ElementType2["Tag"] = "tag";
      ElementType2["CDATA"] = "cdata";
      ElementType2["Doctype"] = "doctype";
    })(ElementType = exports2.ElementType || (exports2.ElementType = {}));
    function isTag(elem) {
      return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;
    }
    exports2.isTag = isTag;
    exports2.Root = ElementType.Root;
    exports2.Text = ElementType.Text;
    exports2.Directive = ElementType.Directive;
    exports2.Comment = ElementType.Comment;
    exports2.Script = ElementType.Script;
    exports2.Style = ElementType.Style;
    exports2.Tag = ElementType.Tag;
    exports2.CDATA = ElementType.CDATA;
    exports2.Doctype = ElementType.Doctype;
  }
});

// node_modules/domhandler/lib/node.js
var require_node = __commonJS({
  "node_modules/domhandler/lib/node.js"(exports2) {
    "use strict";
    var __extends = exports2 && exports2.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports2 && exports2.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cloneNode = exports2.hasChildren = exports2.isDocument = exports2.isDirective = exports2.isComment = exports2.isText = exports2.isCDATA = exports2.isTag = exports2.Element = exports2.Document = exports2.NodeWithChildren = exports2.ProcessingInstruction = exports2.Comment = exports2.Text = exports2.DataNode = exports2.Node = void 0;
    var domelementtype_1 = require_lib();
    var nodeTypes = /* @__PURE__ */ new Map([
      [domelementtype_1.ElementType.Tag, 1],
      [domelementtype_1.ElementType.Script, 1],
      [domelementtype_1.ElementType.Style, 1],
      [domelementtype_1.ElementType.Directive, 1],
      [domelementtype_1.ElementType.Text, 3],
      [domelementtype_1.ElementType.CDATA, 4],
      [domelementtype_1.ElementType.Comment, 8],
      [domelementtype_1.ElementType.Root, 9]
    ]);
    var Node = (
      /** @class */
      function() {
        function Node2(type) {
          this.type = type;
          this.parent = null;
          this.prev = null;
          this.next = null;
          this.startIndex = null;
          this.endIndex = null;
        }
        Object.defineProperty(Node2.prototype, "nodeType", {
          // Read-only aliases
          /**
           * [DOM spec](https://dom.spec.whatwg.org/#dom-node-nodetype)-compatible
           * node {@link type}.
           */
          get: function() {
            var _a;
            return (_a = nodeTypes.get(this.type)) !== null && _a !== void 0 ? _a : 1;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Node2.prototype, "parentNode", {
          // Read-write aliases for properties
          /**
           * Same as {@link parent}.
           * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
           */
          get: function() {
            return this.parent;
          },
          set: function(parent) {
            this.parent = parent;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Node2.prototype, "previousSibling", {
          /**
           * Same as {@link prev}.
           * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
           */
          get: function() {
            return this.prev;
          },
          set: function(prev) {
            this.prev = prev;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Node2.prototype, "nextSibling", {
          /**
           * Same as {@link next}.
           * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
           */
          get: function() {
            return this.next;
          },
          set: function(next) {
            this.next = next;
          },
          enumerable: false,
          configurable: true
        });
        Node2.prototype.cloneNode = function(recursive) {
          if (recursive === void 0) {
            recursive = false;
          }
          return cloneNode(this, recursive);
        };
        return Node2;
      }()
    );
    exports2.Node = Node;
    var DataNode = (
      /** @class */
      function(_super) {
        __extends(DataNode2, _super);
        function DataNode2(type, data) {
          var _this = _super.call(this, type) || this;
          _this.data = data;
          return _this;
        }
        Object.defineProperty(DataNode2.prototype, "nodeValue", {
          /**
           * Same as {@link data}.
           * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
           */
          get: function() {
            return this.data;
          },
          set: function(data) {
            this.data = data;
          },
          enumerable: false,
          configurable: true
        });
        return DataNode2;
      }(Node)
    );
    exports2.DataNode = DataNode;
    var Text = (
      /** @class */
      function(_super) {
        __extends(Text2, _super);
        function Text2(data) {
          return _super.call(this, domelementtype_1.ElementType.Text, data) || this;
        }
        return Text2;
      }(DataNode)
    );
    exports2.Text = Text;
    var Comment = (
      /** @class */
      function(_super) {
        __extends(Comment2, _super);
        function Comment2(data) {
          return _super.call(this, domelementtype_1.ElementType.Comment, data) || this;
        }
        return Comment2;
      }(DataNode)
    );
    exports2.Comment = Comment;
    var ProcessingInstruction = (
      /** @class */
      function(_super) {
        __extends(ProcessingInstruction2, _super);
        function ProcessingInstruction2(name, data) {
          var _this = _super.call(this, domelementtype_1.ElementType.Directive, data) || this;
          _this.name = name;
          return _this;
        }
        return ProcessingInstruction2;
      }(DataNode)
    );
    exports2.ProcessingInstruction = ProcessingInstruction;
    var NodeWithChildren = (
      /** @class */
      function(_super) {
        __extends(NodeWithChildren2, _super);
        function NodeWithChildren2(type, children) {
          var _this = _super.call(this, type) || this;
          _this.children = children;
          return _this;
        }
        Object.defineProperty(NodeWithChildren2.prototype, "firstChild", {
          // Aliases
          /** First child of the node. */
          get: function() {
            var _a;
            return (_a = this.children[0]) !== null && _a !== void 0 ? _a : null;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(NodeWithChildren2.prototype, "lastChild", {
          /** Last child of the node. */
          get: function() {
            return this.children.length > 0 ? this.children[this.children.length - 1] : null;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(NodeWithChildren2.prototype, "childNodes", {
          /**
           * Same as {@link children}.
           * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
           */
          get: function() {
            return this.children;
          },
          set: function(children) {
            this.children = children;
          },
          enumerable: false,
          configurable: true
        });
        return NodeWithChildren2;
      }(Node)
    );
    exports2.NodeWithChildren = NodeWithChildren;
    var Document = (
      /** @class */
      function(_super) {
        __extends(Document2, _super);
        function Document2(children) {
          return _super.call(this, domelementtype_1.ElementType.Root, children) || this;
        }
        return Document2;
      }(NodeWithChildren)
    );
    exports2.Document = Document;
    var Element = (
      /** @class */
      function(_super) {
        __extends(Element2, _super);
        function Element2(name, attribs, children, type) {
          if (children === void 0) {
            children = [];
          }
          if (type === void 0) {
            type = name === "script" ? domelementtype_1.ElementType.Script : name === "style" ? domelementtype_1.ElementType.Style : domelementtype_1.ElementType.Tag;
          }
          var _this = _super.call(this, type, children) || this;
          _this.name = name;
          _this.attribs = attribs;
          return _this;
        }
        Object.defineProperty(Element2.prototype, "tagName", {
          // DOM Level 1 aliases
          /**
           * Same as {@link name}.
           * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
           */
          get: function() {
            return this.name;
          },
          set: function(name) {
            this.name = name;
          },
          enumerable: false,
          configurable: true
        });
        Object.defineProperty(Element2.prototype, "attributes", {
          get: function() {
            var _this = this;
            return Object.keys(this.attribs).map(function(name) {
              var _a, _b;
              return {
                name,
                value: _this.attribs[name],
                namespace: (_a = _this["x-attribsNamespace"]) === null || _a === void 0 ? void 0 : _a[name],
                prefix: (_b = _this["x-attribsPrefix"]) === null || _b === void 0 ? void 0 : _b[name]
              };
            });
          },
          enumerable: false,
          configurable: true
        });
        return Element2;
      }(NodeWithChildren)
    );
    exports2.Element = Element;
    function isTag(node) {
      return (0, domelementtype_1.isTag)(node);
    }
    exports2.isTag = isTag;
    function isCDATA(node) {
      return node.type === domelementtype_1.ElementType.CDATA;
    }
    exports2.isCDATA = isCDATA;
    function isText(node) {
      return node.type === domelementtype_1.ElementType.Text;
    }
    exports2.isText = isText;
    function isComment(node) {
      return node.type === domelementtype_1.ElementType.Comment;
    }
    exports2.isComment = isComment;
    function isDirective(node) {
      return node.type === domelementtype_1.ElementType.Directive;
    }
    exports2.isDirective = isDirective;
    function isDocument(node) {
      return node.type === domelementtype_1.ElementType.Root;
    }
    exports2.isDocument = isDocument;
    function hasChildren(node) {
      return Object.prototype.hasOwnProperty.call(node, "children");
    }
    exports2.hasChildren = hasChildren;
    function cloneNode(node, recursive) {
      if (recursive === void 0) {
        recursive = false;
      }
      var result;
      if (isText(node)) {
        result = new Text(node.data);
      } else if (isComment(node)) {
        result = new Comment(node.data);
      } else if (isTag(node)) {
        var children = recursive ? cloneChildren(node.children) : [];
        var clone_1 = new Element(node.name, __assign({}, node.attribs), children);
        children.forEach(function(child) {
          return child.parent = clone_1;
        });
        if (node.namespace != null) {
          clone_1.namespace = node.namespace;
        }
        if (node["x-attribsNamespace"]) {
          clone_1["x-attribsNamespace"] = __assign({}, node["x-attribsNamespace"]);
        }
        if (node["x-attribsPrefix"]) {
          clone_1["x-attribsPrefix"] = __assign({}, node["x-attribsPrefix"]);
        }
        result = clone_1;
      } else if (isCDATA(node)) {
        var children = recursive ? cloneChildren(node.children) : [];
        var clone_2 = new NodeWithChildren(domelementtype_1.ElementType.CDATA, children);
        children.forEach(function(child) {
          return child.parent = clone_2;
        });
        result = clone_2;
      } else if (isDocument(node)) {
        var children = recursive ? cloneChildren(node.children) : [];
        var clone_3 = new Document(children);
        children.forEach(function(child) {
          return child.parent = clone_3;
        });
        if (node["x-mode"]) {
          clone_3["x-mode"] = node["x-mode"];
        }
        result = clone_3;
      } else if (isDirective(node)) {
        var instruction = new ProcessingInstruction(node.name, node.data);
        if (node["x-name"] != null) {
          instruction["x-name"] = node["x-name"];
          instruction["x-publicId"] = node["x-publicId"];
          instruction["x-systemId"] = node["x-systemId"];
        }
        result = instruction;
      } else {
        throw new Error("Not implemented yet: ".concat(node.type));
      }
      result.startIndex = node.startIndex;
      result.endIndex = node.endIndex;
      if (node.sourceCodeLocation != null) {
        result.sourceCodeLocation = node.sourceCodeLocation;
      }
      return result;
    }
    exports2.cloneNode = cloneNode;
    function cloneChildren(childs) {
      var children = childs.map(function(child) {
        return cloneNode(child, true);
      });
      for (var i = 1; i < children.length; i++) {
        children[i].prev = children[i - 1];
        children[i - 1].next = children[i];
      }
      return children;
    }
  }
});

// node_modules/domhandler/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/domhandler/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DomHandler = void 0;
    var domelementtype_1 = require_lib();
    var node_1 = require_node();
    __exportStar(require_node(), exports2);
    var reWhitespace = /\s+/g;
    var defaultOpts = {
      normalizeWhitespace: false,
      withStartIndices: false,
      withEndIndices: false,
      xmlMode: false
    };
    var DomHandler = (
      /** @class */
      function() {
        function DomHandler2(callback, options, elementCB) {
          this.dom = [];
          this.root = new node_1.Document(this.dom);
          this.done = false;
          this.tagStack = [this.root];
          this.lastNode = null;
          this.parser = null;
          if (typeof options === "function") {
            elementCB = options;
            options = defaultOpts;
          }
          if (typeof callback === "object") {
            options = callback;
            callback = void 0;
          }
          this.callback = callback !== null && callback !== void 0 ? callback : null;
          this.options = options !== null && options !== void 0 ? options : defaultOpts;
          this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
        }
        DomHandler2.prototype.onparserinit = function(parser) {
          this.parser = parser;
        };
        DomHandler2.prototype.onreset = function() {
          this.dom = [];
          this.root = new node_1.Document(this.dom);
          this.done = false;
          this.tagStack = [this.root];
          this.lastNode = null;
          this.parser = null;
        };
        DomHandler2.prototype.onend = function() {
          if (this.done)
            return;
          this.done = true;
          this.parser = null;
          this.handleCallback(null);
        };
        DomHandler2.prototype.onerror = function(error) {
          this.handleCallback(error);
        };
        DomHandler2.prototype.onclosetag = function() {
          this.lastNode = null;
          var elem = this.tagStack.pop();
          if (this.options.withEndIndices) {
            elem.endIndex = this.parser.endIndex;
          }
          if (this.elementCB)
            this.elementCB(elem);
        };
        DomHandler2.prototype.onopentag = function(name, attribs) {
          var type = this.options.xmlMode ? domelementtype_1.ElementType.Tag : void 0;
          var element = new node_1.Element(name, attribs, void 0, type);
          this.addNode(element);
          this.tagStack.push(element);
        };
        DomHandler2.prototype.ontext = function(data) {
          var normalizeWhitespace = this.options.normalizeWhitespace;
          var lastNode = this.lastNode;
          if (lastNode && lastNode.type === domelementtype_1.ElementType.Text) {
            if (normalizeWhitespace) {
              lastNode.data = (lastNode.data + data).replace(reWhitespace, " ");
            } else {
              lastNode.data += data;
            }
            if (this.options.withEndIndices) {
              lastNode.endIndex = this.parser.endIndex;
            }
          } else {
            if (normalizeWhitespace) {
              data = data.replace(reWhitespace, " ");
            }
            var node = new node_1.Text(data);
            this.addNode(node);
            this.lastNode = node;
          }
        };
        DomHandler2.prototype.oncomment = function(data) {
          if (this.lastNode && this.lastNode.type === domelementtype_1.ElementType.Comment) {
            this.lastNode.data += data;
            return;
          }
          var node = new node_1.Comment(data);
          this.addNode(node);
          this.lastNode = node;
        };
        DomHandler2.prototype.oncommentend = function() {
          this.lastNode = null;
        };
        DomHandler2.prototype.oncdatastart = function() {
          var text = new node_1.Text("");
          var node = new node_1.NodeWithChildren(domelementtype_1.ElementType.CDATA, [text]);
          this.addNode(node);
          text.parent = node;
          this.lastNode = text;
        };
        DomHandler2.prototype.oncdataend = function() {
          this.lastNode = null;
        };
        DomHandler2.prototype.onprocessinginstruction = function(name, data) {
          var node = new node_1.ProcessingInstruction(name, data);
          this.addNode(node);
        };
        DomHandler2.prototype.handleCallback = function(error) {
          if (typeof this.callback === "function") {
            this.callback(error, this.dom);
          } else if (error) {
            throw error;
          }
        };
        DomHandler2.prototype.addNode = function(node) {
          var parent = this.tagStack[this.tagStack.length - 1];
          var previousSibling = parent.children[parent.children.length - 1];
          if (this.options.withStartIndices) {
            node.startIndex = this.parser.startIndex;
          }
          if (this.options.withEndIndices) {
            node.endIndex = this.parser.endIndex;
          }
          parent.children.push(node);
          if (previousSibling) {
            node.prev = previousSibling;
            previousSibling.next = node;
          }
          node.parent = parent;
          this.lastNode = null;
        };
        return DomHandler2;
      }()
    );
    exports2.DomHandler = DomHandler;
    exports2.default = DomHandler;
  }
});

// node_modules/entities/lib/maps/entities.json
var require_entities = __commonJS({
  "node_modules/entities/lib/maps/entities.json"(exports2, module2) {
    module2.exports = { Aacute: "\xC1", aacute: "\xE1", Abreve: "\u0102", abreve: "\u0103", ac: "\u223E", acd: "\u223F", acE: "\u223E\u0333", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", Acy: "\u0410", acy: "\u0430", AElig: "\xC6", aelig: "\xE6", af: "\u2061", Afr: "\u{1D504}", afr: "\u{1D51E}", Agrave: "\xC0", agrave: "\xE0", alefsym: "\u2135", aleph: "\u2135", Alpha: "\u0391", alpha: "\u03B1", Amacr: "\u0100", amacr: "\u0101", amalg: "\u2A3F", amp: "&", AMP: "&", andand: "\u2A55", And: "\u2A53", and: "\u2227", andd: "\u2A5C", andslope: "\u2A58", andv: "\u2A5A", ang: "\u2220", ange: "\u29A4", angle: "\u2220", angmsdaa: "\u29A8", angmsdab: "\u29A9", angmsdac: "\u29AA", angmsdad: "\u29AB", angmsdae: "\u29AC", angmsdaf: "\u29AD", angmsdag: "\u29AE", angmsdah: "\u29AF", angmsd: "\u2221", angrt: "\u221F", angrtvb: "\u22BE", angrtvbd: "\u299D", angsph: "\u2222", angst: "\xC5", angzarr: "\u237C", Aogon: "\u0104", aogon: "\u0105", Aopf: "\u{1D538}", aopf: "\u{1D552}", apacir: "\u2A6F", ap: "\u2248", apE: "\u2A70", ape: "\u224A", apid: "\u224B", apos: "'", ApplyFunction: "\u2061", approx: "\u2248", approxeq: "\u224A", Aring: "\xC5", aring: "\xE5", Ascr: "\u{1D49C}", ascr: "\u{1D4B6}", Assign: "\u2254", ast: "*", asymp: "\u2248", asympeq: "\u224D", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", awconint: "\u2233", awint: "\u2A11", backcong: "\u224C", backepsilon: "\u03F6", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", Backslash: "\u2216", Barv: "\u2AE7", barvee: "\u22BD", barwed: "\u2305", Barwed: "\u2306", barwedge: "\u2305", bbrk: "\u23B5", bbrktbrk: "\u23B6", bcong: "\u224C", Bcy: "\u0411", bcy: "\u0431", bdquo: "\u201E", becaus: "\u2235", because: "\u2235", Because: "\u2235", bemptyv: "\u29B0", bepsi: "\u03F6", bernou: "\u212C", Bernoullis: "\u212C", Beta: "\u0392", beta: "\u03B2", beth: "\u2136", between: "\u226C", Bfr: "\u{1D505}", bfr: "\u{1D51F}", bigcap: "\u22C2", bigcirc: "\u25EF", bigcup: "\u22C3", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", bigvee: "\u22C1", bigwedge: "\u22C0", bkarow: "\u290D", blacklozenge: "\u29EB", blacksquare: "\u25AA", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", blacktriangleright: "\u25B8", blank: "\u2423", blk12: "\u2592", blk14: "\u2591", blk34: "\u2593", block: "\u2588", bne: "=\u20E5", bnequiv: "\u2261\u20E5", bNot: "\u2AED", bnot: "\u2310", Bopf: "\u{1D539}", bopf: "\u{1D553}", bot: "\u22A5", bottom: "\u22A5", bowtie: "\u22C8", boxbox: "\u29C9", boxdl: "\u2510", boxdL: "\u2555", boxDl: "\u2556", boxDL: "\u2557", boxdr: "\u250C", boxdR: "\u2552", boxDr: "\u2553", boxDR: "\u2554", boxh: "\u2500", boxH: "\u2550", boxhd: "\u252C", boxHd: "\u2564", boxhD: "\u2565", boxHD: "\u2566", boxhu: "\u2534", boxHu: "\u2567", boxhU: "\u2568", boxHU: "\u2569", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxul: "\u2518", boxuL: "\u255B", boxUl: "\u255C", boxUL: "\u255D", boxur: "\u2514", boxuR: "\u2558", boxUr: "\u2559", boxUR: "\u255A", boxv: "\u2502", boxV: "\u2551", boxvh: "\u253C", boxvH: "\u256A", boxVh: "\u256B", boxVH: "\u256C", boxvl: "\u2524", boxvL: "\u2561", boxVl: "\u2562", boxVL: "\u2563", boxvr: "\u251C", boxvR: "\u255E", boxVr: "\u255F", boxVR: "\u2560", bprime: "\u2035", breve: "\u02D8", Breve: "\u02D8", brvbar: "\xA6", bscr: "\u{1D4B7}", Bscr: "\u212C", bsemi: "\u204F", bsim: "\u223D", bsime: "\u22CD", bsolb: "\u29C5", bsol: "\\", bsolhsub: "\u27C8", bull: "\u2022", bullet: "\u2022", bump: "\u224E", bumpE: "\u2AAE", bumpe: "\u224F", Bumpeq: "\u224E", bumpeq: "\u224F", Cacute: "\u0106", cacute: "\u0107", capand: "\u2A44", capbrcup: "\u2A49", capcap: "\u2A4B", cap: "\u2229", Cap: "\u22D2", capcup: "\u2A47", capdot: "\u2A40", CapitalDifferentialD: "\u2145", caps: "\u2229\uFE00", caret: "\u2041", caron: "\u02C7", Cayleys: "\u212D", ccaps: "\u2A4D", Ccaron: "\u010C", ccaron: "\u010D", Ccedil: "\xC7", ccedil: "\xE7", Ccirc: "\u0108", ccirc: "\u0109", Cconint: "\u2230", ccups: "\u2A4C", ccupssm: "\u2A50", Cdot: "\u010A", cdot: "\u010B", cedil: "\xB8", Cedilla: "\xB8", cemptyv: "\u29B2", cent: "\xA2", centerdot: "\xB7", CenterDot: "\xB7", cfr: "\u{1D520}", Cfr: "\u212D", CHcy: "\u0427", chcy: "\u0447", check: "\u2713", checkmark: "\u2713", Chi: "\u03A7", chi: "\u03C7", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", CircleDot: "\u2299", circledR: "\xAE", circledS: "\u24C8", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", cir: "\u25CB", cirE: "\u29C3", cire: "\u2257", cirfnint: "\u2A10", cirmid: "\u2AEF", cirscir: "\u29C2", ClockwiseContourIntegral: "\u2232", CloseCurlyDoubleQuote: "\u201D", CloseCurlyQuote: "\u2019", clubs: "\u2663", clubsuit: "\u2663", colon: ":", Colon: "\u2237", Colone: "\u2A74", colone: "\u2254", coloneq: "\u2254", comma: ",", commat: "@", comp: "\u2201", compfn: "\u2218", complement: "\u2201", complexes: "\u2102", cong: "\u2245", congdot: "\u2A6D", Congruent: "\u2261", conint: "\u222E", Conint: "\u222F", ContourIntegral: "\u222E", copf: "\u{1D554}", Copf: "\u2102", coprod: "\u2210", Coproduct: "\u2210", copy: "\xA9", COPY: "\xA9", copysr: "\u2117", CounterClockwiseContourIntegral: "\u2233", crarr: "\u21B5", cross: "\u2717", Cross: "\u2A2F", Cscr: "\u{1D49E}", cscr: "\u{1D4B8}", csub: "\u2ACF", csube: "\u2AD1", csup: "\u2AD0", csupe: "\u2AD2", ctdot: "\u22EF", cudarrl: "\u2938", cudarrr: "\u2935", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cularrp: "\u293D", cupbrcap: "\u2A48", cupcap: "\u2A46", CupCap: "\u224D", cup: "\u222A", Cup: "\u22D3", cupcup: "\u2A4A", cupdot: "\u228D", cupor: "\u2A45", cups: "\u222A\uFE00", curarr: "\u21B7", curarrm: "\u293C", curlyeqprec: "\u22DE", curlyeqsucc: "\u22DF", curlyvee: "\u22CE", curlywedge: "\u22CF", curren: "\xA4", curvearrowleft: "\u21B6", curvearrowright: "\u21B7", cuvee: "\u22CE", cuwed: "\u22CF", cwconint: "\u2232", cwint: "\u2231", cylcty: "\u232D", dagger: "\u2020", Dagger: "\u2021", daleth: "\u2138", darr: "\u2193", Darr: "\u21A1", dArr: "\u21D3", dash: "\u2010", Dashv: "\u2AE4", dashv: "\u22A3", dbkarow: "\u290F", dblac: "\u02DD", Dcaron: "\u010E", dcaron: "\u010F", Dcy: "\u0414", dcy: "\u0434", ddagger: "\u2021", ddarr: "\u21CA", DD: "\u2145", dd: "\u2146", DDotrahd: "\u2911", ddotseq: "\u2A77", deg: "\xB0", Del: "\u2207", Delta: "\u0394", delta: "\u03B4", demptyv: "\u29B1", dfisht: "\u297F", Dfr: "\u{1D507}", dfr: "\u{1D521}", dHar: "\u2965", dharl: "\u21C3", dharr: "\u21C2", DiacriticalAcute: "\xB4", DiacriticalDot: "\u02D9", DiacriticalDoubleAcute: "\u02DD", DiacriticalGrave: "`", DiacriticalTilde: "\u02DC", diam: "\u22C4", diamond: "\u22C4", Diamond: "\u22C4", diamondsuit: "\u2666", diams: "\u2666", die: "\xA8", DifferentialD: "\u2146", digamma: "\u03DD", disin: "\u22F2", div: "\xF7", divide: "\xF7", divideontimes: "\u22C7", divonx: "\u22C7", DJcy: "\u0402", djcy: "\u0452", dlcorn: "\u231E", dlcrop: "\u230D", dollar: "$", Dopf: "\u{1D53B}", dopf: "\u{1D555}", Dot: "\xA8", dot: "\u02D9", DotDot: "\u20DC", doteq: "\u2250", doteqdot: "\u2251", DotEqual: "\u2250", dotminus: "\u2238", dotplus: "\u2214", dotsquare: "\u22A1", doublebarwedge: "\u2306", DoubleContourIntegral: "\u222F", DoubleDot: "\xA8", DoubleDownArrow: "\u21D3", DoubleLeftArrow: "\u21D0", DoubleLeftRightArrow: "\u21D4", DoubleLeftTee: "\u2AE4", DoubleLongLeftArrow: "\u27F8", DoubleLongLeftRightArrow: "\u27FA", DoubleLongRightArrow: "\u27F9", DoubleRightArrow: "\u21D2", DoubleRightTee: "\u22A8", DoubleUpArrow: "\u21D1", DoubleUpDownArrow: "\u21D5", DoubleVerticalBar: "\u2225", DownArrowBar: "\u2913", downarrow: "\u2193", DownArrow: "\u2193", Downarrow: "\u21D3", DownArrowUpArrow: "\u21F5", DownBreve: "\u0311", downdownarrows: "\u21CA", downharpoonleft: "\u21C3", downharpoonright: "\u21C2", DownLeftRightVector: "\u2950", DownLeftTeeVector: "\u295E", DownLeftVectorBar: "\u2956", DownLeftVector: "\u21BD", DownRightTeeVector: "\u295F", DownRightVectorBar: "\u2957", DownRightVector: "\u21C1", DownTeeArrow: "\u21A7", DownTee: "\u22A4", drbkarow: "\u2910", drcorn: "\u231F", drcrop: "\u230C", Dscr: "\u{1D49F}", dscr: "\u{1D4B9}", DScy: "\u0405", dscy: "\u0455", dsol: "\u29F6", Dstrok: "\u0110", dstrok: "\u0111", dtdot: "\u22F1", dtri: "\u25BF", dtrif: "\u25BE", duarr: "\u21F5", duhar: "\u296F", dwangle: "\u29A6", DZcy: "\u040F", dzcy: "\u045F", dzigrarr: "\u27FF", Eacute: "\xC9", eacute: "\xE9", easter: "\u2A6E", Ecaron: "\u011A", ecaron: "\u011B", Ecirc: "\xCA", ecirc: "\xEA", ecir: "\u2256", ecolon: "\u2255", Ecy: "\u042D", ecy: "\u044D", eDDot: "\u2A77", Edot: "\u0116", edot: "\u0117", eDot: "\u2251", ee: "\u2147", efDot: "\u2252", Efr: "\u{1D508}", efr: "\u{1D522}", eg: "\u2A9A", Egrave: "\xC8", egrave: "\xE8", egs: "\u2A96", egsdot: "\u2A98", el: "\u2A99", Element: "\u2208", elinters: "\u23E7", ell: "\u2113", els: "\u2A95", elsdot: "\u2A97", Emacr: "\u0112", emacr: "\u0113", empty: "\u2205", emptyset: "\u2205", EmptySmallSquare: "\u25FB", emptyv: "\u2205", EmptyVerySmallSquare: "\u25AB", emsp13: "\u2004", emsp14: "\u2005", emsp: "\u2003", ENG: "\u014A", eng: "\u014B", ensp: "\u2002", Eogon: "\u0118", eogon: "\u0119", Eopf: "\u{1D53C}", eopf: "\u{1D556}", epar: "\u22D5", eparsl: "\u29E3", eplus: "\u2A71", epsi: "\u03B5", Epsilon: "\u0395", epsilon: "\u03B5", epsiv: "\u03F5", eqcirc: "\u2256", eqcolon: "\u2255", eqsim: "\u2242", eqslantgtr: "\u2A96", eqslantless: "\u2A95", Equal: "\u2A75", equals: "=", EqualTilde: "\u2242", equest: "\u225F", Equilibrium: "\u21CC", equiv: "\u2261", equivDD: "\u2A78", eqvparsl: "\u29E5", erarr: "\u2971", erDot: "\u2253", escr: "\u212F", Escr: "\u2130", esdot: "\u2250", Esim: "\u2A73", esim: "\u2242", Eta: "\u0397", eta: "\u03B7", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", euro: "\u20AC", excl: "!", exist: "\u2203", Exists: "\u2203", expectation: "\u2130", exponentiale: "\u2147", ExponentialE: "\u2147", fallingdotseq: "\u2252", Fcy: "\u0424", fcy: "\u0444", female: "\u2640", ffilig: "\uFB03", fflig: "\uFB00", ffllig: "\uFB04", Ffr: "\u{1D509}", ffr: "\u{1D523}", filig: "\uFB01", FilledSmallSquare: "\u25FC", FilledVerySmallSquare: "\u25AA", fjlig: "fj", flat: "\u266D", fllig: "\uFB02", fltns: "\u25B1", fnof: "\u0192", Fopf: "\u{1D53D}", fopf: "\u{1D557}", forall: "\u2200", ForAll: "\u2200", fork: "\u22D4", forkv: "\u2AD9", Fouriertrf: "\u2131", fpartint: "\u2A0D", frac12: "\xBD", frac13: "\u2153", frac14: "\xBC", frac15: "\u2155", frac16: "\u2159", frac18: "\u215B", frac23: "\u2154", frac25: "\u2156", frac34: "\xBE", frac35: "\u2157", frac38: "\u215C", frac45: "\u2158", frac56: "\u215A", frac58: "\u215D", frac78: "\u215E", frasl: "\u2044", frown: "\u2322", fscr: "\u{1D4BB}", Fscr: "\u2131", gacute: "\u01F5", Gamma: "\u0393", gamma: "\u03B3", Gammad: "\u03DC", gammad: "\u03DD", gap: "\u2A86", Gbreve: "\u011E", gbreve: "\u011F", Gcedil: "\u0122", Gcirc: "\u011C", gcirc: "\u011D", Gcy: "\u0413", gcy: "\u0433", Gdot: "\u0120", gdot: "\u0121", ge: "\u2265", gE: "\u2267", gEl: "\u2A8C", gel: "\u22DB", geq: "\u2265", geqq: "\u2267", geqslant: "\u2A7E", gescc: "\u2AA9", ges: "\u2A7E", gesdot: "\u2A80", gesdoto: "\u2A82", gesdotol: "\u2A84", gesl: "\u22DB\uFE00", gesles: "\u2A94", Gfr: "\u{1D50A}", gfr: "\u{1D524}", gg: "\u226B", Gg: "\u22D9", ggg: "\u22D9", gimel: "\u2137", GJcy: "\u0403", gjcy: "\u0453", gla: "\u2AA5", gl: "\u2277", glE: "\u2A92", glj: "\u2AA4", gnap: "\u2A8A", gnapprox: "\u2A8A", gne: "\u2A88", gnE: "\u2269", gneq: "\u2A88", gneqq: "\u2269", gnsim: "\u22E7", Gopf: "\u{1D53E}", gopf: "\u{1D558}", grave: "`", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterGreater: "\u2AA2", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", Gscr: "\u{1D4A2}", gscr: "\u210A", gsim: "\u2273", gsime: "\u2A8E", gsiml: "\u2A90", gtcc: "\u2AA7", gtcir: "\u2A7A", gt: ">", GT: ">", Gt: "\u226B", gtdot: "\u22D7", gtlPar: "\u2995", gtquest: "\u2A7C", gtrapprox: "\u2A86", gtrarr: "\u2978", gtrdot: "\u22D7", gtreqless: "\u22DB", gtreqqless: "\u2A8C", gtrless: "\u2277", gtrsim: "\u2273", gvertneqq: "\u2269\uFE00", gvnE: "\u2269\uFE00", Hacek: "\u02C7", hairsp: "\u200A", half: "\xBD", hamilt: "\u210B", HARDcy: "\u042A", hardcy: "\u044A", harrcir: "\u2948", harr: "\u2194", hArr: "\u21D4", harrw: "\u21AD", Hat: "^", hbar: "\u210F", Hcirc: "\u0124", hcirc: "\u0125", hearts: "\u2665", heartsuit: "\u2665", hellip: "\u2026", hercon: "\u22B9", hfr: "\u{1D525}", Hfr: "\u210C", HilbertSpace: "\u210B", hksearow: "\u2925", hkswarow: "\u2926", hoarr: "\u21FF", homtht: "\u223B", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", hopf: "\u{1D559}", Hopf: "\u210D", horbar: "\u2015", HorizontalLine: "\u2500", hscr: "\u{1D4BD}", Hscr: "\u210B", hslash: "\u210F", Hstrok: "\u0126", hstrok: "\u0127", HumpDownHump: "\u224E", HumpEqual: "\u224F", hybull: "\u2043", hyphen: "\u2010", Iacute: "\xCD", iacute: "\xED", ic: "\u2063", Icirc: "\xCE", icirc: "\xEE", Icy: "\u0418", icy: "\u0438", Idot: "\u0130", IEcy: "\u0415", iecy: "\u0435", iexcl: "\xA1", iff: "\u21D4", ifr: "\u{1D526}", Ifr: "\u2111", Igrave: "\xCC", igrave: "\xEC", ii: "\u2148", iiiint: "\u2A0C", iiint: "\u222D", iinfin: "\u29DC", iiota: "\u2129", IJlig: "\u0132", ijlig: "\u0133", Imacr: "\u012A", imacr: "\u012B", image: "\u2111", ImaginaryI: "\u2148", imagline: "\u2110", imagpart: "\u2111", imath: "\u0131", Im: "\u2111", imof: "\u22B7", imped: "\u01B5", Implies: "\u21D2", incare: "\u2105", in: "\u2208", infin: "\u221E", infintie: "\u29DD", inodot: "\u0131", intcal: "\u22BA", int: "\u222B", Int: "\u222C", integers: "\u2124", Integral: "\u222B", intercal: "\u22BA", Intersection: "\u22C2", intlarhk: "\u2A17", intprod: "\u2A3C", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", IOcy: "\u0401", iocy: "\u0451", Iogon: "\u012E", iogon: "\u012F", Iopf: "\u{1D540}", iopf: "\u{1D55A}", Iota: "\u0399", iota: "\u03B9", iprod: "\u2A3C", iquest: "\xBF", iscr: "\u{1D4BE}", Iscr: "\u2110", isin: "\u2208", isindot: "\u22F5", isinE: "\u22F9", isins: "\u22F4", isinsv: "\u22F3", isinv: "\u2208", it: "\u2062", Itilde: "\u0128", itilde: "\u0129", Iukcy: "\u0406", iukcy: "\u0456", Iuml: "\xCF", iuml: "\xEF", Jcirc: "\u0134", jcirc: "\u0135", Jcy: "\u0419", jcy: "\u0439", Jfr: "\u{1D50D}", jfr: "\u{1D527}", jmath: "\u0237", Jopf: "\u{1D541}", jopf: "\u{1D55B}", Jscr: "\u{1D4A5}", jscr: "\u{1D4BF}", Jsercy: "\u0408", jsercy: "\u0458", Jukcy: "\u0404", jukcy: "\u0454", Kappa: "\u039A", kappa: "\u03BA", kappav: "\u03F0", Kcedil: "\u0136", kcedil: "\u0137", Kcy: "\u041A", kcy: "\u043A", Kfr: "\u{1D50E}", kfr: "\u{1D528}", kgreen: "\u0138", KHcy: "\u0425", khcy: "\u0445", KJcy: "\u040C", kjcy: "\u045C", Kopf: "\u{1D542}", kopf: "\u{1D55C}", Kscr: "\u{1D4A6}", kscr: "\u{1D4C0}", lAarr: "\u21DA", Lacute: "\u0139", lacute: "\u013A", laemptyv: "\u29B4", lagran: "\u2112", Lambda: "\u039B", lambda: "\u03BB", lang: "\u27E8", Lang: "\u27EA", langd: "\u2991", langle: "\u27E8", lap: "\u2A85", Laplacetrf: "\u2112", laquo: "\xAB", larrb: "\u21E4", larrbfs: "\u291F", larr: "\u2190", Larr: "\u219E", lArr: "\u21D0", larrfs: "\u291D", larrhk: "\u21A9", larrlp: "\u21AB", larrpl: "\u2939", larrsim: "\u2973", larrtl: "\u21A2", latail: "\u2919", lAtail: "\u291B", lat: "\u2AAB", late: "\u2AAD", lates: "\u2AAD\uFE00", lbarr: "\u290C", lBarr: "\u290E", lbbrk: "\u2772", lbrace: "{", lbrack: "[", lbrke: "\u298B", lbrksld: "\u298F", lbrkslu: "\u298D", Lcaron: "\u013D", lcaron: "\u013E", Lcedil: "\u013B", lcedil: "\u013C", lceil: "\u2308", lcub: "{", Lcy: "\u041B", lcy: "\u043B", ldca: "\u2936", ldquo: "\u201C", ldquor: "\u201E", ldrdhar: "\u2967", ldrushar: "\u294B", ldsh: "\u21B2", le: "\u2264", lE: "\u2266", LeftAngleBracket: "\u27E8", LeftArrowBar: "\u21E4", leftarrow: "\u2190", LeftArrow: "\u2190", Leftarrow: "\u21D0", LeftArrowRightArrow: "\u21C6", leftarrowtail: "\u21A2", LeftCeiling: "\u2308", LeftDoubleBracket: "\u27E6", LeftDownTeeVector: "\u2961", LeftDownVectorBar: "\u2959", LeftDownVector: "\u21C3", LeftFloor: "\u230A", leftharpoondown: "\u21BD", leftharpoonup: "\u21BC", leftleftarrows: "\u21C7", leftrightarrow: "\u2194", LeftRightArrow: "\u2194", Leftrightarrow: "\u21D4", leftrightarrows: "\u21C6", leftrightharpoons: "\u21CB", leftrightsquigarrow: "\u21AD", LeftRightVector: "\u294E", LeftTeeArrow: "\u21A4", LeftTee: "\u22A3", LeftTeeVector: "\u295A", leftthreetimes: "\u22CB", LeftTriangleBar: "\u29CF", LeftTriangle: "\u22B2", LeftTriangleEqual: "\u22B4", LeftUpDownVector: "\u2951", LeftUpTeeVector: "\u2960", LeftUpVectorBar: "\u2958", LeftUpVector: "\u21BF", LeftVectorBar: "\u2952", LeftVector: "\u21BC", lEg: "\u2A8B", leg: "\u22DA", leq: "\u2264", leqq: "\u2266", leqslant: "\u2A7D", lescc: "\u2AA8", les: "\u2A7D", lesdot: "\u2A7F", lesdoto: "\u2A81", lesdotor: "\u2A83", lesg: "\u22DA\uFE00", lesges: "\u2A93", lessapprox: "\u2A85", lessdot: "\u22D6", lesseqgtr: "\u22DA", lesseqqgtr: "\u2A8B", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", lessgtr: "\u2276", LessLess: "\u2AA1", lesssim: "\u2272", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", lfisht: "\u297C", lfloor: "\u230A", Lfr: "\u{1D50F}", lfr: "\u{1D529}", lg: "\u2276", lgE: "\u2A91", lHar: "\u2962", lhard: "\u21BD", lharu: "\u21BC", lharul: "\u296A", lhblk: "\u2584", LJcy: "\u0409", ljcy: "\u0459", llarr: "\u21C7", ll: "\u226A", Ll: "\u22D8", llcorner: "\u231E", Lleftarrow: "\u21DA", llhard: "\u296B", lltri: "\u25FA", Lmidot: "\u013F", lmidot: "\u0140", lmoustache: "\u23B0", lmoust: "\u23B0", lnap: "\u2A89", lnapprox: "\u2A89", lne: "\u2A87", lnE: "\u2268", lneq: "\u2A87", lneqq: "\u2268", lnsim: "\u22E6", loang: "\u27EC", loarr: "\u21FD", lobrk: "\u27E6", longleftarrow: "\u27F5", LongLeftArrow: "\u27F5", Longleftarrow: "\u27F8", longleftrightarrow: "\u27F7", LongLeftRightArrow: "\u27F7", Longleftrightarrow: "\u27FA", longmapsto: "\u27FC", longrightarrow: "\u27F6", LongRightArrow: "\u27F6", Longrightarrow: "\u27F9", looparrowleft: "\u21AB", looparrowright: "\u21AC", lopar: "\u2985", Lopf: "\u{1D543}", lopf: "\u{1D55D}", loplus: "\u2A2D", lotimes: "\u2A34", lowast: "\u2217", lowbar: "_", LowerLeftArrow: "\u2199", LowerRightArrow: "\u2198", loz: "\u25CA", lozenge: "\u25CA", lozf: "\u29EB", lpar: "(", lparlt: "\u2993", lrarr: "\u21C6", lrcorner: "\u231F", lrhar: "\u21CB", lrhard: "\u296D", lrm: "\u200E", lrtri: "\u22BF", lsaquo: "\u2039", lscr: "\u{1D4C1}", Lscr: "\u2112", lsh: "\u21B0", Lsh: "\u21B0", lsim: "\u2272", lsime: "\u2A8D", lsimg: "\u2A8F", lsqb: "[", lsquo: "\u2018", lsquor: "\u201A", Lstrok: "\u0141", lstrok: "\u0142", ltcc: "\u2AA6", ltcir: "\u2A79", lt: "<", LT: "<", Lt: "\u226A", ltdot: "\u22D6", lthree: "\u22CB", ltimes: "\u22C9", ltlarr: "\u2976", ltquest: "\u2A7B", ltri: "\u25C3", ltrie: "\u22B4", ltrif: "\u25C2", ltrPar: "\u2996", lurdshar: "\u294A", luruhar: "\u2966", lvertneqq: "\u2268\uFE00", lvnE: "\u2268\uFE00", macr: "\xAF", male: "\u2642", malt: "\u2720", maltese: "\u2720", Map: "\u2905", map: "\u21A6", mapsto: "\u21A6", mapstodown: "\u21A7", mapstoleft: "\u21A4", mapstoup: "\u21A5", marker: "\u25AE", mcomma: "\u2A29", Mcy: "\u041C", mcy: "\u043C", mdash: "\u2014", mDDot: "\u223A", measuredangle: "\u2221", MediumSpace: "\u205F", Mellintrf: "\u2133", Mfr: "\u{1D510}", mfr: "\u{1D52A}", mho: "\u2127", micro: "\xB5", midast: "*", midcir: "\u2AF0", mid: "\u2223", middot: "\xB7", minusb: "\u229F", minus: "\u2212", minusd: "\u2238", minusdu: "\u2A2A", MinusPlus: "\u2213", mlcp: "\u2ADB", mldr: "\u2026", mnplus: "\u2213", models: "\u22A7", Mopf: "\u{1D544}", mopf: "\u{1D55E}", mp: "\u2213", mscr: "\u{1D4C2}", Mscr: "\u2133", mstpos: "\u223E", Mu: "\u039C", mu: "\u03BC", multimap: "\u22B8", mumap: "\u22B8", nabla: "\u2207", Nacute: "\u0143", nacute: "\u0144", nang: "\u2220\u20D2", nap: "\u2249", napE: "\u2A70\u0338", napid: "\u224B\u0338", napos: "\u0149", napprox: "\u2249", natural: "\u266E", naturals: "\u2115", natur: "\u266E", nbsp: "\xA0", nbump: "\u224E\u0338", nbumpe: "\u224F\u0338", ncap: "\u2A43", Ncaron: "\u0147", ncaron: "\u0148", Ncedil: "\u0145", ncedil: "\u0146", ncong: "\u2247", ncongdot: "\u2A6D\u0338", ncup: "\u2A42", Ncy: "\u041D", ncy: "\u043D", ndash: "\u2013", nearhk: "\u2924", nearr: "\u2197", neArr: "\u21D7", nearrow: "\u2197", ne: "\u2260", nedot: "\u2250\u0338", NegativeMediumSpace: "\u200B", NegativeThickSpace: "\u200B", NegativeThinSpace: "\u200B", NegativeVeryThinSpace: "\u200B", nequiv: "\u2262", nesear: "\u2928", nesim: "\u2242\u0338", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NewLine: "\n", nexist: "\u2204", nexists: "\u2204", Nfr: "\u{1D511}", nfr: "\u{1D52B}", ngE: "\u2267\u0338", nge: "\u2271", ngeq: "\u2271", ngeqq: "\u2267\u0338", ngeqslant: "\u2A7E\u0338", nges: "\u2A7E\u0338", nGg: "\u22D9\u0338", ngsim: "\u2275", nGt: "\u226B\u20D2", ngt: "\u226F", ngtr: "\u226F", nGtv: "\u226B\u0338", nharr: "\u21AE", nhArr: "\u21CE", nhpar: "\u2AF2", ni: "\u220B", nis: "\u22FC", nisd: "\u22FA", niv: "\u220B", NJcy: "\u040A", njcy: "\u045A", nlarr: "\u219A", nlArr: "\u21CD", nldr: "\u2025", nlE: "\u2266\u0338", nle: "\u2270", nleftarrow: "\u219A", nLeftarrow: "\u21CD", nleftrightarrow: "\u21AE", nLeftrightarrow: "\u21CE", nleq: "\u2270", nleqq: "\u2266\u0338", nleqslant: "\u2A7D\u0338", nles: "\u2A7D\u0338", nless: "\u226E", nLl: "\u22D8\u0338", nlsim: "\u2274", nLt: "\u226A\u20D2", nlt: "\u226E", nltri: "\u22EA", nltrie: "\u22EC", nLtv: "\u226A\u0338", nmid: "\u2224", NoBreak: "\u2060", NonBreakingSpace: "\xA0", nopf: "\u{1D55F}", Nopf: "\u2115", Not: "\u2AEC", not: "\xAC", NotCongruent: "\u2262", NotCupCap: "\u226D", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotEqualTilde: "\u2242\u0338", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotGreaterFullEqual: "\u2267\u0338", NotGreaterGreater: "\u226B\u0338", NotGreaterLess: "\u2279", NotGreaterSlantEqual: "\u2A7E\u0338", NotGreaterTilde: "\u2275", NotHumpDownHump: "\u224E\u0338", NotHumpEqual: "\u224F\u0338", notin: "\u2209", notindot: "\u22F5\u0338", notinE: "\u22F9\u0338", notinva: "\u2209", notinvb: "\u22F7", notinvc: "\u22F6", NotLeftTriangleBar: "\u29CF\u0338", NotLeftTriangle: "\u22EA", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotLessGreater: "\u2278", NotLessLess: "\u226A\u0338", NotLessSlantEqual: "\u2A7D\u0338", NotLessTilde: "\u2274", NotNestedGreaterGreater: "\u2AA2\u0338", NotNestedLessLess: "\u2AA1\u0338", notni: "\u220C", notniva: "\u220C", notnivb: "\u22FE", notnivc: "\u22FD", NotPrecedes: "\u2280", NotPrecedesEqual: "\u2AAF\u0338", NotPrecedesSlantEqual: "\u22E0", NotReverseElement: "\u220C", NotRightTriangleBar: "\u29D0\u0338", NotRightTriangle: "\u22EB", NotRightTriangleEqual: "\u22ED", NotSquareSubset: "\u228F\u0338", NotSquareSubsetEqual: "\u22E2", NotSquareSuperset: "\u2290\u0338", NotSquareSupersetEqual: "\u22E3", NotSubset: "\u2282\u20D2", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsEqual: "\u2AB0\u0338", NotSucceedsSlantEqual: "\u22E1", NotSucceedsTilde: "\u227F\u0338", NotSuperset: "\u2283\u20D2", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotTildeEqual: "\u2244", NotTildeFullEqual: "\u2247", NotTildeTilde: "\u2249", NotVerticalBar: "\u2224", nparallel: "\u2226", npar: "\u2226", nparsl: "\u2AFD\u20E5", npart: "\u2202\u0338", npolint: "\u2A14", npr: "\u2280", nprcue: "\u22E0", nprec: "\u2280", npreceq: "\u2AAF\u0338", npre: "\u2AAF\u0338", nrarrc: "\u2933\u0338", nrarr: "\u219B", nrArr: "\u21CF", nrarrw: "\u219D\u0338", nrightarrow: "\u219B", nRightarrow: "\u21CF", nrtri: "\u22EB", nrtrie: "\u22ED", nsc: "\u2281", nsccue: "\u22E1", nsce: "\u2AB0\u0338", Nscr: "\u{1D4A9}", nscr: "\u{1D4C3}", nshortmid: "\u2224", nshortparallel: "\u2226", nsim: "\u2241", nsime: "\u2244", nsimeq: "\u2244", nsmid: "\u2224", nspar: "\u2226", nsqsube: "\u22E2", nsqsupe: "\u22E3", nsub: "\u2284", nsubE: "\u2AC5\u0338", nsube: "\u2288", nsubset: "\u2282\u20D2", nsubseteq: "\u2288", nsubseteqq: "\u2AC5\u0338", nsucc: "\u2281", nsucceq: "\u2AB0\u0338", nsup: "\u2285", nsupE: "\u2AC6\u0338", nsupe: "\u2289", nsupset: "\u2283\u20D2", nsupseteq: "\u2289", nsupseteqq: "\u2AC6\u0338", ntgl: "\u2279", Ntilde: "\xD1", ntilde: "\xF1", ntlg: "\u2278", ntriangleleft: "\u22EA", ntrianglelefteq: "\u22EC", ntriangleright: "\u22EB", ntrianglerighteq: "\u22ED", Nu: "\u039D", nu: "\u03BD", num: "#", numero: "\u2116", numsp: "\u2007", nvap: "\u224D\u20D2", nvdash: "\u22AC", nvDash: "\u22AD", nVdash: "\u22AE", nVDash: "\u22AF", nvge: "\u2265\u20D2", nvgt: ">\u20D2", nvHarr: "\u2904", nvinfin: "\u29DE", nvlArr: "\u2902", nvle: "\u2264\u20D2", nvlt: "<\u20D2", nvltrie: "\u22B4\u20D2", nvrArr: "\u2903", nvrtrie: "\u22B5\u20D2", nvsim: "\u223C\u20D2", nwarhk: "\u2923", nwarr: "\u2196", nwArr: "\u21D6", nwarrow: "\u2196", nwnear: "\u2927", Oacute: "\xD3", oacute: "\xF3", oast: "\u229B", Ocirc: "\xD4", ocirc: "\xF4", ocir: "\u229A", Ocy: "\u041E", ocy: "\u043E", odash: "\u229D", Odblac: "\u0150", odblac: "\u0151", odiv: "\u2A38", odot: "\u2299", odsold: "\u29BC", OElig: "\u0152", oelig: "\u0153", ofcir: "\u29BF", Ofr: "\u{1D512}", ofr: "\u{1D52C}", ogon: "\u02DB", Ograve: "\xD2", ograve: "\xF2", ogt: "\u29C1", ohbar: "\u29B5", ohm: "\u03A9", oint: "\u222E", olarr: "\u21BA", olcir: "\u29BE", olcross: "\u29BB", oline: "\u203E", olt: "\u29C0", Omacr: "\u014C", omacr: "\u014D", Omega: "\u03A9", omega: "\u03C9", Omicron: "\u039F", omicron: "\u03BF", omid: "\u29B6", ominus: "\u2296", Oopf: "\u{1D546}", oopf: "\u{1D560}", opar: "\u29B7", OpenCurlyDoubleQuote: "\u201C", OpenCurlyQuote: "\u2018", operp: "\u29B9", oplus: "\u2295", orarr: "\u21BB", Or: "\u2A54", or: "\u2228", ord: "\u2A5D", order: "\u2134", orderof: "\u2134", ordf: "\xAA", ordm: "\xBA", origof: "\u22B6", oror: "\u2A56", orslope: "\u2A57", orv: "\u2A5B", oS: "\u24C8", Oscr: "\u{1D4AA}", oscr: "\u2134", Oslash: "\xD8", oslash: "\xF8", osol: "\u2298", Otilde: "\xD5", otilde: "\xF5", otimesas: "\u2A36", Otimes: "\u2A37", otimes: "\u2297", Ouml: "\xD6", ouml: "\xF6", ovbar: "\u233D", OverBar: "\u203E", OverBrace: "\u23DE", OverBracket: "\u23B4", OverParenthesis: "\u23DC", para: "\xB6", parallel: "\u2225", par: "\u2225", parsim: "\u2AF3", parsl: "\u2AFD", part: "\u2202", PartialD: "\u2202", Pcy: "\u041F", pcy: "\u043F", percnt: "%", period: ".", permil: "\u2030", perp: "\u22A5", pertenk: "\u2031", Pfr: "\u{1D513}", pfr: "\u{1D52D}", Phi: "\u03A6", phi: "\u03C6", phiv: "\u03D5", phmmat: "\u2133", phone: "\u260E", Pi: "\u03A0", pi: "\u03C0", pitchfork: "\u22D4", piv: "\u03D6", planck: "\u210F", planckh: "\u210E", plankv: "\u210F", plusacir: "\u2A23", plusb: "\u229E", pluscir: "\u2A22", plus: "+", plusdo: "\u2214", plusdu: "\u2A25", pluse: "\u2A72", PlusMinus: "\xB1", plusmn: "\xB1", plussim: "\u2A26", plustwo: "\u2A27", pm: "\xB1", Poincareplane: "\u210C", pointint: "\u2A15", popf: "\u{1D561}", Popf: "\u2119", pound: "\xA3", prap: "\u2AB7", Pr: "\u2ABB", pr: "\u227A", prcue: "\u227C", precapprox: "\u2AB7", prec: "\u227A", preccurlyeq: "\u227C", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", preceq: "\u2AAF", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", pre: "\u2AAF", prE: "\u2AB3", precsim: "\u227E", prime: "\u2032", Prime: "\u2033", primes: "\u2119", prnap: "\u2AB9", prnE: "\u2AB5", prnsim: "\u22E8", prod: "\u220F", Product: "\u220F", profalar: "\u232E", profline: "\u2312", profsurf: "\u2313", prop: "\u221D", Proportional: "\u221D", Proportion: "\u2237", propto: "\u221D", prsim: "\u227E", prurel: "\u22B0", Pscr: "\u{1D4AB}", pscr: "\u{1D4C5}", Psi: "\u03A8", psi: "\u03C8", puncsp: "\u2008", Qfr: "\u{1D514}", qfr: "\u{1D52E}", qint: "\u2A0C", qopf: "\u{1D562}", Qopf: "\u211A", qprime: "\u2057", Qscr: "\u{1D4AC}", qscr: "\u{1D4C6}", quaternions: "\u210D", quatint: "\u2A16", quest: "?", questeq: "\u225F", quot: '"', QUOT: '"', rAarr: "\u21DB", race: "\u223D\u0331", Racute: "\u0154", racute: "\u0155", radic: "\u221A", raemptyv: "\u29B3", rang: "\u27E9", Rang: "\u27EB", rangd: "\u2992", range: "\u29A5", rangle: "\u27E9", raquo: "\xBB", rarrap: "\u2975", rarrb: "\u21E5", rarrbfs: "\u2920", rarrc: "\u2933", rarr: "\u2192", Rarr: "\u21A0", rArr: "\u21D2", rarrfs: "\u291E", rarrhk: "\u21AA", rarrlp: "\u21AC", rarrpl: "\u2945", rarrsim: "\u2974", Rarrtl: "\u2916", rarrtl: "\u21A3", rarrw: "\u219D", ratail: "\u291A", rAtail: "\u291C", ratio: "\u2236", rationals: "\u211A", rbarr: "\u290D", rBarr: "\u290F", RBarr: "\u2910", rbbrk: "\u2773", rbrace: "}", rbrack: "]", rbrke: "\u298C", rbrksld: "\u298E", rbrkslu: "\u2990", Rcaron: "\u0158", rcaron: "\u0159", Rcedil: "\u0156", rcedil: "\u0157", rceil: "\u2309", rcub: "}", Rcy: "\u0420", rcy: "\u0440", rdca: "\u2937", rdldhar: "\u2969", rdquo: "\u201D", rdquor: "\u201D", rdsh: "\u21B3", real: "\u211C", realine: "\u211B", realpart: "\u211C", reals: "\u211D", Re: "\u211C", rect: "\u25AD", reg: "\xAE", REG: "\xAE", ReverseElement: "\u220B", ReverseEquilibrium: "\u21CB", ReverseUpEquilibrium: "\u296F", rfisht: "\u297D", rfloor: "\u230B", rfr: "\u{1D52F}", Rfr: "\u211C", rHar: "\u2964", rhard: "\u21C1", rharu: "\u21C0", rharul: "\u296C", Rho: "\u03A1", rho: "\u03C1", rhov: "\u03F1", RightAngleBracket: "\u27E9", RightArrowBar: "\u21E5", rightarrow: "\u2192", RightArrow: "\u2192", Rightarrow: "\u21D2", RightArrowLeftArrow: "\u21C4", rightarrowtail: "\u21A3", RightCeiling: "\u2309", RightDoubleBracket: "\u27E7", RightDownTeeVector: "\u295D", RightDownVectorBar: "\u2955", RightDownVector: "\u21C2", RightFloor: "\u230B", rightharpoondown: "\u21C1", rightharpoonup: "\u21C0", rightleftarrows: "\u21C4", rightleftharpoons: "\u21CC", rightrightarrows: "\u21C9", rightsquigarrow: "\u219D", RightTeeArrow: "\u21A6", RightTee: "\u22A2", RightTeeVector: "\u295B", rightthreetimes: "\u22CC", RightTriangleBar: "\u29D0", RightTriangle: "\u22B3", RightTriangleEqual: "\u22B5", RightUpDownVector: "\u294F", RightUpTeeVector: "\u295C", RightUpVectorBar: "\u2954", RightUpVector: "\u21BE", RightVectorBar: "\u2953", RightVector: "\u21C0", ring: "\u02DA", risingdotseq: "\u2253", rlarr: "\u21C4", rlhar: "\u21CC", rlm: "\u200F", rmoustache: "\u23B1", rmoust: "\u23B1", rnmid: "\u2AEE", roang: "\u27ED", roarr: "\u21FE", robrk: "\u27E7", ropar: "\u2986", ropf: "\u{1D563}", Ropf: "\u211D", roplus: "\u2A2E", rotimes: "\u2A35", RoundImplies: "\u2970", rpar: ")", rpargt: "\u2994", rppolint: "\u2A12", rrarr: "\u21C9", Rrightarrow: "\u21DB", rsaquo: "\u203A", rscr: "\u{1D4C7}", Rscr: "\u211B", rsh: "\u21B1", Rsh: "\u21B1", rsqb: "]", rsquo: "\u2019", rsquor: "\u2019", rthree: "\u22CC", rtimes: "\u22CA", rtri: "\u25B9", rtrie: "\u22B5", rtrif: "\u25B8", rtriltri: "\u29CE", RuleDelayed: "\u29F4", ruluhar: "\u2968", rx: "\u211E", Sacute: "\u015A", sacute: "\u015B", sbquo: "\u201A", scap: "\u2AB8", Scaron: "\u0160", scaron: "\u0161", Sc: "\u2ABC", sc: "\u227B", sccue: "\u227D", sce: "\u2AB0", scE: "\u2AB4", Scedil: "\u015E", scedil: "\u015F", Scirc: "\u015C", scirc: "\u015D", scnap: "\u2ABA", scnE: "\u2AB6", scnsim: "\u22E9", scpolint: "\u2A13", scsim: "\u227F", Scy: "\u0421", scy: "\u0441", sdotb: "\u22A1", sdot: "\u22C5", sdote: "\u2A66", searhk: "\u2925", searr: "\u2198", seArr: "\u21D8", searrow: "\u2198", sect: "\xA7", semi: ";", seswar: "\u2929", setminus: "\u2216", setmn: "\u2216", sext: "\u2736", Sfr: "\u{1D516}", sfr: "\u{1D530}", sfrown: "\u2322", sharp: "\u266F", SHCHcy: "\u0429", shchcy: "\u0449", SHcy: "\u0428", shcy: "\u0448", ShortDownArrow: "\u2193", ShortLeftArrow: "\u2190", shortmid: "\u2223", shortparallel: "\u2225", ShortRightArrow: "\u2192", ShortUpArrow: "\u2191", shy: "\xAD", Sigma: "\u03A3", sigma: "\u03C3", sigmaf: "\u03C2", sigmav: "\u03C2", sim: "\u223C", simdot: "\u2A6A", sime: "\u2243", simeq: "\u2243", simg: "\u2A9E", simgE: "\u2AA0", siml: "\u2A9D", simlE: "\u2A9F", simne: "\u2246", simplus: "\u2A24", simrarr: "\u2972", slarr: "\u2190", SmallCircle: "\u2218", smallsetminus: "\u2216", smashp: "\u2A33", smeparsl: "\u29E4", smid: "\u2223", smile: "\u2323", smt: "\u2AAA", smte: "\u2AAC", smtes: "\u2AAC\uFE00", SOFTcy: "\u042C", softcy: "\u044C", solbar: "\u233F", solb: "\u29C4", sol: "/", Sopf: "\u{1D54A}", sopf: "\u{1D564}", spades: "\u2660", spadesuit: "\u2660", spar: "\u2225", sqcap: "\u2293", sqcaps: "\u2293\uFE00", sqcup: "\u2294", sqcups: "\u2294\uFE00", Sqrt: "\u221A", sqsub: "\u228F", sqsube: "\u2291", sqsubset: "\u228F", sqsubseteq: "\u2291", sqsup: "\u2290", sqsupe: "\u2292", sqsupset: "\u2290", sqsupseteq: "\u2292", square: "\u25A1", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", squarf: "\u25AA", squ: "\u25A1", squf: "\u25AA", srarr: "\u2192", Sscr: "\u{1D4AE}", sscr: "\u{1D4C8}", ssetmn: "\u2216", ssmile: "\u2323", sstarf: "\u22C6", Star: "\u22C6", star: "\u2606", starf: "\u2605", straightepsilon: "\u03F5", straightphi: "\u03D5", strns: "\xAF", sub: "\u2282", Sub: "\u22D0", subdot: "\u2ABD", subE: "\u2AC5", sube: "\u2286", subedot: "\u2AC3", submult: "\u2AC1", subnE: "\u2ACB", subne: "\u228A", subplus: "\u2ABF", subrarr: "\u2979", subset: "\u2282", Subset: "\u22D0", subseteq: "\u2286", subseteqq: "\u2AC5", SubsetEqual: "\u2286", subsetneq: "\u228A", subsetneqq: "\u2ACB", subsim: "\u2AC7", subsub: "\u2AD5", subsup: "\u2AD3", succapprox: "\u2AB8", succ: "\u227B", succcurlyeq: "\u227D", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", succeq: "\u2AB0", succnapprox: "\u2ABA", succneqq: "\u2AB6", succnsim: "\u22E9", succsim: "\u227F", SuchThat: "\u220B", sum: "\u2211", Sum: "\u2211", sung: "\u266A", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", sup: "\u2283", Sup: "\u22D1", supdot: "\u2ABE", supdsub: "\u2AD8", supE: "\u2AC6", supe: "\u2287", supedot: "\u2AC4", Superset: "\u2283", SupersetEqual: "\u2287", suphsol: "\u27C9", suphsub: "\u2AD7", suplarr: "\u297B", supmult: "\u2AC2", supnE: "\u2ACC", supne: "\u228B", supplus: "\u2AC0", supset: "\u2283", Supset: "\u22D1", supseteq: "\u2287", supseteqq: "\u2AC6", supsetneq: "\u228B", supsetneqq: "\u2ACC", supsim: "\u2AC8", supsub: "\u2AD4", supsup: "\u2AD6", swarhk: "\u2926", swarr: "\u2199", swArr: "\u21D9", swarrow: "\u2199", swnwar: "\u292A", szlig: "\xDF", Tab: "	", target: "\u2316", Tau: "\u03A4", tau: "\u03C4", tbrk: "\u23B4", Tcaron: "\u0164", tcaron: "\u0165", Tcedil: "\u0162", tcedil: "\u0163", Tcy: "\u0422", tcy: "\u0442", tdot: "\u20DB", telrec: "\u2315", Tfr: "\u{1D517}", tfr: "\u{1D531}", there4: "\u2234", therefore: "\u2234", Therefore: "\u2234", Theta: "\u0398", theta: "\u03B8", thetasym: "\u03D1", thetav: "\u03D1", thickapprox: "\u2248", thicksim: "\u223C", ThickSpace: "\u205F\u200A", ThinSpace: "\u2009", thinsp: "\u2009", thkap: "\u2248", thksim: "\u223C", THORN: "\xDE", thorn: "\xFE", tilde: "\u02DC", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", timesbar: "\u2A31", timesb: "\u22A0", times: "\xD7", timesd: "\u2A30", tint: "\u222D", toea: "\u2928", topbot: "\u2336", topcir: "\u2AF1", top: "\u22A4", Topf: "\u{1D54B}", topf: "\u{1D565}", topfork: "\u2ADA", tosa: "\u2929", tprime: "\u2034", trade: "\u2122", TRADE: "\u2122", triangle: "\u25B5", triangledown: "\u25BF", triangleleft: "\u25C3", trianglelefteq: "\u22B4", triangleq: "\u225C", triangleright: "\u25B9", trianglerighteq: "\u22B5", tridot: "\u25EC", trie: "\u225C", triminus: "\u2A3A", TripleDot: "\u20DB", triplus: "\u2A39", trisb: "\u29CD", tritime: "\u2A3B", trpezium: "\u23E2", Tscr: "\u{1D4AF}", tscr: "\u{1D4C9}", TScy: "\u0426", tscy: "\u0446", TSHcy: "\u040B", tshcy: "\u045B", Tstrok: "\u0166", tstrok: "\u0167", twixt: "\u226C", twoheadleftarrow: "\u219E", twoheadrightarrow: "\u21A0", Uacute: "\xDA", uacute: "\xFA", uarr: "\u2191", Uarr: "\u219F", uArr: "\u21D1", Uarrocir: "\u2949", Ubrcy: "\u040E", ubrcy: "\u045E", Ubreve: "\u016C", ubreve: "\u016D", Ucirc: "\xDB", ucirc: "\xFB", Ucy: "\u0423", ucy: "\u0443", udarr: "\u21C5", Udblac: "\u0170", udblac: "\u0171", udhar: "\u296E", ufisht: "\u297E", Ufr: "\u{1D518}", ufr: "\u{1D532}", Ugrave: "\xD9", ugrave: "\xF9", uHar: "\u2963", uharl: "\u21BF", uharr: "\u21BE", uhblk: "\u2580", ulcorn: "\u231C", ulcorner: "\u231C", ulcrop: "\u230F", ultri: "\u25F8", Umacr: "\u016A", umacr: "\u016B", uml: "\xA8", UnderBar: "_", UnderBrace: "\u23DF", UnderBracket: "\u23B5", UnderParenthesis: "\u23DD", Union: "\u22C3", UnionPlus: "\u228E", Uogon: "\u0172", uogon: "\u0173", Uopf: "\u{1D54C}", uopf: "\u{1D566}", UpArrowBar: "\u2912", uparrow: "\u2191", UpArrow: "\u2191", Uparrow: "\u21D1", UpArrowDownArrow: "\u21C5", updownarrow: "\u2195", UpDownArrow: "\u2195", Updownarrow: "\u21D5", UpEquilibrium: "\u296E", upharpoonleft: "\u21BF", upharpoonright: "\u21BE", uplus: "\u228E", UpperLeftArrow: "\u2196", UpperRightArrow: "\u2197", upsi: "\u03C5", Upsi: "\u03D2", upsih: "\u03D2", Upsilon: "\u03A5", upsilon: "\u03C5", UpTeeArrow: "\u21A5", UpTee: "\u22A5", upuparrows: "\u21C8", urcorn: "\u231D", urcorner: "\u231D", urcrop: "\u230E", Uring: "\u016E", uring: "\u016F", urtri: "\u25F9", Uscr: "\u{1D4B0}", uscr: "\u{1D4CA}", utdot: "\u22F0", Utilde: "\u0168", utilde: "\u0169", utri: "\u25B5", utrif: "\u25B4", uuarr: "\u21C8", Uuml: "\xDC", uuml: "\xFC", uwangle: "\u29A7", vangrt: "\u299C", varepsilon: "\u03F5", varkappa: "\u03F0", varnothing: "\u2205", varphi: "\u03D5", varpi: "\u03D6", varpropto: "\u221D", varr: "\u2195", vArr: "\u21D5", varrho: "\u03F1", varsigma: "\u03C2", varsubsetneq: "\u228A\uFE00", varsubsetneqq: "\u2ACB\uFE00", varsupsetneq: "\u228B\uFE00", varsupsetneqq: "\u2ACC\uFE00", vartheta: "\u03D1", vartriangleleft: "\u22B2", vartriangleright: "\u22B3", vBar: "\u2AE8", Vbar: "\u2AEB", vBarv: "\u2AE9", Vcy: "\u0412", vcy: "\u0432", vdash: "\u22A2", vDash: "\u22A8", Vdash: "\u22A9", VDash: "\u22AB", Vdashl: "\u2AE6", veebar: "\u22BB", vee: "\u2228", Vee: "\u22C1", veeeq: "\u225A", vellip: "\u22EE", verbar: "|", Verbar: "\u2016", vert: "|", Vert: "\u2016", VerticalBar: "\u2223", VerticalLine: "|", VerticalSeparator: "\u2758", VerticalTilde: "\u2240", VeryThinSpace: "\u200A", Vfr: "\u{1D519}", vfr: "\u{1D533}", vltri: "\u22B2", vnsub: "\u2282\u20D2", vnsup: "\u2283\u20D2", Vopf: "\u{1D54D}", vopf: "\u{1D567}", vprop: "\u221D", vrtri: "\u22B3", Vscr: "\u{1D4B1}", vscr: "\u{1D4CB}", vsubnE: "\u2ACB\uFE00", vsubne: "\u228A\uFE00", vsupnE: "\u2ACC\uFE00", vsupne: "\u228B\uFE00", Vvdash: "\u22AA", vzigzag: "\u299A", Wcirc: "\u0174", wcirc: "\u0175", wedbar: "\u2A5F", wedge: "\u2227", Wedge: "\u22C0", wedgeq: "\u2259", weierp: "\u2118", Wfr: "\u{1D51A}", wfr: "\u{1D534}", Wopf: "\u{1D54E}", wopf: "\u{1D568}", wp: "\u2118", wr: "\u2240", wreath: "\u2240", Wscr: "\u{1D4B2}", wscr: "\u{1D4CC}", xcap: "\u22C2", xcirc: "\u25EF", xcup: "\u22C3", xdtri: "\u25BD", Xfr: "\u{1D51B}", xfr: "\u{1D535}", xharr: "\u27F7", xhArr: "\u27FA", Xi: "\u039E", xi: "\u03BE", xlarr: "\u27F5", xlArr: "\u27F8", xmap: "\u27FC", xnis: "\u22FB", xodot: "\u2A00", Xopf: "\u{1D54F}", xopf: "\u{1D569}", xoplus: "\u2A01", xotime: "\u2A02", xrarr: "\u27F6", xrArr: "\u27F9", Xscr: "\u{1D4B3}", xscr: "\u{1D4CD}", xsqcup: "\u2A06", xuplus: "\u2A04", xutri: "\u25B3", xvee: "\u22C1", xwedge: "\u22C0", Yacute: "\xDD", yacute: "\xFD", YAcy: "\u042F", yacy: "\u044F", Ycirc: "\u0176", ycirc: "\u0177", Ycy: "\u042B", ycy: "\u044B", yen: "\xA5", Yfr: "\u{1D51C}", yfr: "\u{1D536}", YIcy: "\u0407", yicy: "\u0457", Yopf: "\u{1D550}", yopf: "\u{1D56A}", Yscr: "\u{1D4B4}", yscr: "\u{1D4CE}", YUcy: "\u042E", yucy: "\u044E", yuml: "\xFF", Yuml: "\u0178", Zacute: "\u0179", zacute: "\u017A", Zcaron: "\u017D", zcaron: "\u017E", Zcy: "\u0417", zcy: "\u0437", Zdot: "\u017B", zdot: "\u017C", zeetrf: "\u2128", ZeroWidthSpace: "\u200B", Zeta: "\u0396", zeta: "\u03B6", zfr: "\u{1D537}", Zfr: "\u2128", ZHcy: "\u0416", zhcy: "\u0436", zigrarr: "\u21DD", zopf: "\u{1D56B}", Zopf: "\u2124", Zscr: "\u{1D4B5}", zscr: "\u{1D4CF}", zwj: "\u200D", zwnj: "\u200C" };
  }
});

// node_modules/entities/lib/maps/legacy.json
var require_legacy = __commonJS({
  "node_modules/entities/lib/maps/legacy.json"(exports2, module2) {
    module2.exports = { Aacute: "\xC1", aacute: "\xE1", Acirc: "\xC2", acirc: "\xE2", acute: "\xB4", AElig: "\xC6", aelig: "\xE6", Agrave: "\xC0", agrave: "\xE0", amp: "&", AMP: "&", Aring: "\xC5", aring: "\xE5", Atilde: "\xC3", atilde: "\xE3", Auml: "\xC4", auml: "\xE4", brvbar: "\xA6", Ccedil: "\xC7", ccedil: "\xE7", cedil: "\xB8", cent: "\xA2", copy: "\xA9", COPY: "\xA9", curren: "\xA4", deg: "\xB0", divide: "\xF7", Eacute: "\xC9", eacute: "\xE9", Ecirc: "\xCA", ecirc: "\xEA", Egrave: "\xC8", egrave: "\xE8", ETH: "\xD0", eth: "\xF0", Euml: "\xCB", euml: "\xEB", frac12: "\xBD", frac14: "\xBC", frac34: "\xBE", gt: ">", GT: ">", Iacute: "\xCD", iacute: "\xED", Icirc: "\xCE", icirc: "\xEE", iexcl: "\xA1", Igrave: "\xCC", igrave: "\xEC", iquest: "\xBF", Iuml: "\xCF", iuml: "\xEF", laquo: "\xAB", lt: "<", LT: "<", macr: "\xAF", micro: "\xB5", middot: "\xB7", nbsp: "\xA0", not: "\xAC", Ntilde: "\xD1", ntilde: "\xF1", Oacute: "\xD3", oacute: "\xF3", Ocirc: "\xD4", ocirc: "\xF4", Ograve: "\xD2", ograve: "\xF2", ordf: "\xAA", ordm: "\xBA", Oslash: "\xD8", oslash: "\xF8", Otilde: "\xD5", otilde: "\xF5", Ouml: "\xD6", ouml: "\xF6", para: "\xB6", plusmn: "\xB1", pound: "\xA3", quot: '"', QUOT: '"', raquo: "\xBB", reg: "\xAE", REG: "\xAE", sect: "\xA7", shy: "\xAD", sup1: "\xB9", sup2: "\xB2", sup3: "\xB3", szlig: "\xDF", THORN: "\xDE", thorn: "\xFE", times: "\xD7", Uacute: "\xDA", uacute: "\xFA", Ucirc: "\xDB", ucirc: "\xFB", Ugrave: "\xD9", ugrave: "\xF9", uml: "\xA8", Uuml: "\xDC", uuml: "\xFC", Yacute: "\xDD", yacute: "\xFD", yen: "\xA5", yuml: "\xFF" };
  }
});

// node_modules/entities/lib/maps/xml.json
var require_xml = __commonJS({
  "node_modules/entities/lib/maps/xml.json"(exports2, module2) {
    module2.exports = { amp: "&", apos: "'", gt: ">", lt: "<", quot: '"' };
  }
});

// node_modules/entities/lib/maps/decode.json
var require_decode = __commonJS({
  "node_modules/entities/lib/maps/decode.json"(exports2, module2) {
    module2.exports = { "0": 65533, "128": 8364, "130": 8218, "131": 402, "132": 8222, "133": 8230, "134": 8224, "135": 8225, "136": 710, "137": 8240, "138": 352, "139": 8249, "140": 338, "142": 381, "145": 8216, "146": 8217, "147": 8220, "148": 8221, "149": 8226, "150": 8211, "151": 8212, "152": 732, "153": 8482, "154": 353, "155": 8250, "156": 339, "158": 382, "159": 376 };
  }
});

// node_modules/entities/lib/decode_codepoint.js
var require_decode_codepoint = __commonJS({
  "node_modules/entities/lib/decode_codepoint.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var decode_json_1 = __importDefault(require_decode());
    var fromCodePoint = (
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
      String.fromCodePoint || function(codePoint) {
        var output = "";
        if (codePoint > 65535) {
          codePoint -= 65536;
          output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        output += String.fromCharCode(codePoint);
        return output;
      }
    );
    function decodeCodePoint(codePoint) {
      if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
        return "\uFFFD";
      }
      if (codePoint in decode_json_1.default) {
        codePoint = decode_json_1.default[codePoint];
      }
      return fromCodePoint(codePoint);
    }
    exports2.default = decodeCodePoint;
  }
});

// node_modules/entities/lib/decode.js
var require_decode2 = __commonJS({
  "node_modules/entities/lib/decode.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeHTML = exports2.decodeHTMLStrict = exports2.decodeXML = void 0;
    var entities_json_1 = __importDefault(require_entities());
    var legacy_json_1 = __importDefault(require_legacy());
    var xml_json_1 = __importDefault(require_xml());
    var decode_codepoint_1 = __importDefault(require_decode_codepoint());
    var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\da-fA-F]+|#\d+);/g;
    exports2.decodeXML = getStrictDecoder(xml_json_1.default);
    exports2.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
    function getStrictDecoder(map) {
      var replace = getReplacer(map);
      return function(str) {
        return String(str).replace(strictEntityRe, replace);
      };
    }
    var sorter = function(a, b) {
      return a < b ? 1 : -1;
    };
    exports2.decodeHTML = function() {
      var legacy = Object.keys(legacy_json_1.default).sort(sorter);
      var keys = Object.keys(entities_json_1.default).sort(sorter);
      for (var i = 0, j = 0; i < keys.length; i++) {
        if (legacy[j] === keys[i]) {
          keys[i] += ";?";
          j++;
        } else {
          keys[i] += ";";
        }
      }
      var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
      var replace = getReplacer(entities_json_1.default);
      function replacer(str) {
        if (str.substr(-1) !== ";")
          str += ";";
        return replace(str);
      }
      return function(str) {
        return String(str).replace(re, replacer);
      };
    }();
    function getReplacer(map) {
      return function replace(str) {
        if (str.charAt(1) === "#") {
          var secondChar = str.charAt(2);
          if (secondChar === "X" || secondChar === "x") {
            return decode_codepoint_1.default(parseInt(str.substr(3), 16));
          }
          return decode_codepoint_1.default(parseInt(str.substr(2), 10));
        }
        return map[str.slice(1, -1)] || str;
      };
    }
  }
});

// node_modules/entities/lib/encode.js
var require_encode = __commonJS({
  "node_modules/entities/lib/encode.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeUTF8 = exports2.escape = exports2.encodeNonAsciiHTML = exports2.encodeHTML = exports2.encodeXML = void 0;
    var xml_json_1 = __importDefault(require_xml());
    var inverseXML = getInverseObj(xml_json_1.default);
    var xmlReplacer = getInverseReplacer(inverseXML);
    exports2.encodeXML = getASCIIEncoder(inverseXML);
    var entities_json_1 = __importDefault(require_entities());
    var inverseHTML = getInverseObj(entities_json_1.default);
    var htmlReplacer = getInverseReplacer(inverseHTML);
    exports2.encodeHTML = getInverse(inverseHTML, htmlReplacer);
    exports2.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
    function getInverseObj(obj) {
      return Object.keys(obj).sort().reduce(function(inverse, name) {
        inverse[obj[name]] = "&" + name + ";";
        return inverse;
      }, {});
    }
    function getInverseReplacer(inverse) {
      var single = [];
      var multiple = [];
      for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
        var k = _a[_i];
        if (k.length === 1) {
          single.push("\\" + k);
        } else {
          multiple.push(k);
        }
      }
      single.sort();
      for (var start = 0; start < single.length - 1; start++) {
        var end = start;
        while (end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
          end += 1;
        }
        var count = 1 + end - start;
        if (count < 3)
          continue;
        single.splice(start, count, single[start] + "-" + single[end]);
      }
      multiple.unshift("[" + single.join("") + "]");
      return new RegExp(multiple.join("|"), "g");
    }
    var reNonASCII = /(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;
    var getCodePoint = (
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
      String.prototype.codePointAt != null ? (
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        function(str) {
          return str.codePointAt(0);
        }
      ) : (
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        function(c) {
          return (c.charCodeAt(0) - 55296) * 1024 + c.charCodeAt(1) - 56320 + 65536;
        }
      )
    );
    function singleCharReplacer(c) {
      return "&#x" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0)).toString(16).toUpperCase() + ";";
    }
    function getInverse(inverse, re) {
      return function(data) {
        return data.replace(re, function(name) {
          return inverse[name];
        }).replace(reNonASCII, singleCharReplacer);
      };
    }
    var reEscapeChars = new RegExp(xmlReplacer.source + "|" + reNonASCII.source, "g");
    function escape(data) {
      return data.replace(reEscapeChars, singleCharReplacer);
    }
    exports2.escape = escape;
    function escapeUTF8(data) {
      return data.replace(xmlReplacer, singleCharReplacer);
    }
    exports2.escapeUTF8 = escapeUTF8;
    function getASCIIEncoder(obj) {
      return function(data) {
        return data.replace(reEscapeChars, function(c) {
          return obj[c] || singleCharReplacer(c);
        });
      };
    }
  }
});

// node_modules/entities/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/entities/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decodeXMLStrict = exports2.decodeHTML5Strict = exports2.decodeHTML4Strict = exports2.decodeHTML5 = exports2.decodeHTML4 = exports2.decodeHTMLStrict = exports2.decodeHTML = exports2.decodeXML = exports2.encodeHTML5 = exports2.encodeHTML4 = exports2.escapeUTF8 = exports2.escape = exports2.encodeNonAsciiHTML = exports2.encodeHTML = exports2.encodeXML = exports2.encode = exports2.decodeStrict = exports2.decode = void 0;
    var decode_1 = require_decode2();
    var encode_1 = require_encode();
    function decode(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
    }
    exports2.decode = decode;
    function decodeStrict(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
    }
    exports2.decodeStrict = decodeStrict;
    function encode(data, level) {
      return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
    }
    exports2.encode = encode;
    var encode_2 = require_encode();
    Object.defineProperty(exports2, "encodeXML", { enumerable: true, get: function() {
      return encode_2.encodeXML;
    } });
    Object.defineProperty(exports2, "encodeHTML", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    Object.defineProperty(exports2, "encodeNonAsciiHTML", { enumerable: true, get: function() {
      return encode_2.encodeNonAsciiHTML;
    } });
    Object.defineProperty(exports2, "escape", { enumerable: true, get: function() {
      return encode_2.escape;
    } });
    Object.defineProperty(exports2, "escapeUTF8", { enumerable: true, get: function() {
      return encode_2.escapeUTF8;
    } });
    Object.defineProperty(exports2, "encodeHTML4", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    Object.defineProperty(exports2, "encodeHTML5", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    var decode_2 = require_decode2();
    Object.defineProperty(exports2, "decodeXML", { enumerable: true, get: function() {
      return decode_2.decodeXML;
    } });
    Object.defineProperty(exports2, "decodeHTML", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports2, "decodeHTMLStrict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports2, "decodeHTML4", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports2, "decodeHTML5", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports2, "decodeHTML4Strict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports2, "decodeHTML5Strict", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports2, "decodeXMLStrict", { enumerable: true, get: function() {
      return decode_2.decodeXML;
    } });
  }
});

// node_modules/dom-serializer/lib/foreignNames.js
var require_foreignNames = __commonJS({
  "node_modules/dom-serializer/lib/foreignNames.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.attributeNames = exports2.elementNames = void 0;
    exports2.elementNames = /* @__PURE__ */ new Map([
      ["altglyph", "altGlyph"],
      ["altglyphdef", "altGlyphDef"],
      ["altglyphitem", "altGlyphItem"],
      ["animatecolor", "animateColor"],
      ["animatemotion", "animateMotion"],
      ["animatetransform", "animateTransform"],
      ["clippath", "clipPath"],
      ["feblend", "feBlend"],
      ["fecolormatrix", "feColorMatrix"],
      ["fecomponenttransfer", "feComponentTransfer"],
      ["fecomposite", "feComposite"],
      ["feconvolvematrix", "feConvolveMatrix"],
      ["fediffuselighting", "feDiffuseLighting"],
      ["fedisplacementmap", "feDisplacementMap"],
      ["fedistantlight", "feDistantLight"],
      ["fedropshadow", "feDropShadow"],
      ["feflood", "feFlood"],
      ["fefunca", "feFuncA"],
      ["fefuncb", "feFuncB"],
      ["fefuncg", "feFuncG"],
      ["fefuncr", "feFuncR"],
      ["fegaussianblur", "feGaussianBlur"],
      ["feimage", "feImage"],
      ["femerge", "feMerge"],
      ["femergenode", "feMergeNode"],
      ["femorphology", "feMorphology"],
      ["feoffset", "feOffset"],
      ["fepointlight", "fePointLight"],
      ["fespecularlighting", "feSpecularLighting"],
      ["fespotlight", "feSpotLight"],
      ["fetile", "feTile"],
      ["feturbulence", "feTurbulence"],
      ["foreignobject", "foreignObject"],
      ["glyphref", "glyphRef"],
      ["lineargradient", "linearGradient"],
      ["radialgradient", "radialGradient"],
      ["textpath", "textPath"]
    ]);
    exports2.attributeNames = /* @__PURE__ */ new Map([
      ["definitionurl", "definitionURL"],
      ["attributename", "attributeName"],
      ["attributetype", "attributeType"],
      ["basefrequency", "baseFrequency"],
      ["baseprofile", "baseProfile"],
      ["calcmode", "calcMode"],
      ["clippathunits", "clipPathUnits"],
      ["diffuseconstant", "diffuseConstant"],
      ["edgemode", "edgeMode"],
      ["filterunits", "filterUnits"],
      ["glyphref", "glyphRef"],
      ["gradienttransform", "gradientTransform"],
      ["gradientunits", "gradientUnits"],
      ["kernelmatrix", "kernelMatrix"],
      ["kernelunitlength", "kernelUnitLength"],
      ["keypoints", "keyPoints"],
      ["keysplines", "keySplines"],
      ["keytimes", "keyTimes"],
      ["lengthadjust", "lengthAdjust"],
      ["limitingconeangle", "limitingConeAngle"],
      ["markerheight", "markerHeight"],
      ["markerunits", "markerUnits"],
      ["markerwidth", "markerWidth"],
      ["maskcontentunits", "maskContentUnits"],
      ["maskunits", "maskUnits"],
      ["numoctaves", "numOctaves"],
      ["pathlength", "pathLength"],
      ["patterncontentunits", "patternContentUnits"],
      ["patterntransform", "patternTransform"],
      ["patternunits", "patternUnits"],
      ["pointsatx", "pointsAtX"],
      ["pointsaty", "pointsAtY"],
      ["pointsatz", "pointsAtZ"],
      ["preservealpha", "preserveAlpha"],
      ["preserveaspectratio", "preserveAspectRatio"],
      ["primitiveunits", "primitiveUnits"],
      ["refx", "refX"],
      ["refy", "refY"],
      ["repeatcount", "repeatCount"],
      ["repeatdur", "repeatDur"],
      ["requiredextensions", "requiredExtensions"],
      ["requiredfeatures", "requiredFeatures"],
      ["specularconstant", "specularConstant"],
      ["specularexponent", "specularExponent"],
      ["spreadmethod", "spreadMethod"],
      ["startoffset", "startOffset"],
      ["stddeviation", "stdDeviation"],
      ["stitchtiles", "stitchTiles"],
      ["surfacescale", "surfaceScale"],
      ["systemlanguage", "systemLanguage"],
      ["tablevalues", "tableValues"],
      ["targetx", "targetX"],
      ["targety", "targetY"],
      ["textlength", "textLength"],
      ["viewbox", "viewBox"],
      ["viewtarget", "viewTarget"],
      ["xchannelselector", "xChannelSelector"],
      ["ychannelselector", "yChannelSelector"],
      ["zoomandpan", "zoomAndPan"]
    ]);
  }
});

// node_modules/dom-serializer/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/dom-serializer/lib/index.js"(exports2) {
    "use strict";
    var __assign = exports2 && exports2.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    var ElementType = __importStar(require_lib());
    var entities_1 = require_lib3();
    var foreignNames_1 = require_foreignNames();
    var unencodedElements = /* @__PURE__ */ new Set([
      "style",
      "script",
      "xmp",
      "iframe",
      "noembed",
      "noframes",
      "plaintext",
      "noscript"
    ]);
    function formatAttributes(attributes, opts) {
      if (!attributes)
        return;
      return Object.keys(attributes).map(function(key) {
        var _a, _b;
        var value = (_a = attributes[key]) !== null && _a !== void 0 ? _a : "";
        if (opts.xmlMode === "foreign") {
          key = (_b = foreignNames_1.attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;
        }
        if (!opts.emptyAttrs && !opts.xmlMode && value === "") {
          return key;
        }
        return key + '="' + (opts.decodeEntities !== false ? entities_1.encodeXML(value) : value.replace(/"/g, "&quot;")) + '"';
      }).join(" ");
    }
    var singleTag = /* @__PURE__ */ new Set([
      "area",
      "base",
      "basefont",
      "br",
      "col",
      "command",
      "embed",
      "frame",
      "hr",
      "img",
      "input",
      "isindex",
      "keygen",
      "link",
      "meta",
      "param",
      "source",
      "track",
      "wbr"
    ]);
    function render(node, options) {
      if (options === void 0) {
        options = {};
      }
      var nodes = "length" in node ? node : [node];
      var output = "";
      for (var i = 0; i < nodes.length; i++) {
        output += renderNode(nodes[i], options);
      }
      return output;
    }
    exports2.default = render;
    function renderNode(node, options) {
      switch (node.type) {
        case ElementType.Root:
          return render(node.children, options);
        case ElementType.Directive:
        case ElementType.Doctype:
          return renderDirective(node);
        case ElementType.Comment:
          return renderComment(node);
        case ElementType.CDATA:
          return renderCdata(node);
        case ElementType.Script:
        case ElementType.Style:
        case ElementType.Tag:
          return renderTag(node, options);
        case ElementType.Text:
          return renderText(node, options);
      }
    }
    var foreignModeIntegrationPoints = /* @__PURE__ */ new Set([
      "mi",
      "mo",
      "mn",
      "ms",
      "mtext",
      "annotation-xml",
      "foreignObject",
      "desc",
      "title"
    ]);
    var foreignElements = /* @__PURE__ */ new Set(["svg", "math"]);
    function renderTag(elem, opts) {
      var _a;
      if (opts.xmlMode === "foreign") {
        elem.name = (_a = foreignNames_1.elementNames.get(elem.name)) !== null && _a !== void 0 ? _a : elem.name;
        if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {
          opts = __assign(__assign({}, opts), { xmlMode: false });
        }
      }
      if (!opts.xmlMode && foreignElements.has(elem.name)) {
        opts = __assign(__assign({}, opts), { xmlMode: "foreign" });
      }
      var tag = "<" + elem.name;
      var attribs = formatAttributes(elem.attribs, opts);
      if (attribs) {
        tag += " " + attribs;
      }
      if (elem.children.length === 0 && (opts.xmlMode ? (
        // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags
        opts.selfClosingTags !== false
      ) : (
        // User explicitly asked for self-closing tags, even in HTML mode
        opts.selfClosingTags && singleTag.has(elem.name)
      ))) {
        if (!opts.xmlMode)
          tag += " ";
        tag += "/>";
      } else {
        tag += ">";
        if (elem.children.length > 0) {
          tag += render(elem.children, opts);
        }
        if (opts.xmlMode || !singleTag.has(elem.name)) {
          tag += "</" + elem.name + ">";
        }
      }
      return tag;
    }
    function renderDirective(elem) {
      return "<" + elem.data + ">";
    }
    function renderText(elem, opts) {
      var data = elem.data || "";
      if (opts.decodeEntities !== false && !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))) {
        data = entities_1.encodeXML(data);
      }
      return data;
    }
    function renderCdata(elem) {
      return "<![CDATA[" + elem.children[0].data + "]]>";
    }
    function renderComment(elem) {
      return "<!--" + elem.data + "-->";
    }
  }
});

// node_modules/domutils/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/domutils/lib/stringify.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.innerText = exports2.textContent = exports2.getText = exports2.getInnerHTML = exports2.getOuterHTML = void 0;
    var domhandler_1 = require_lib2();
    var dom_serializer_1 = __importDefault(require_lib4());
    var domelementtype_1 = require_lib();
    function getOuterHTML(node, options) {
      return (0, dom_serializer_1.default)(node, options);
    }
    exports2.getOuterHTML = getOuterHTML;
    function getInnerHTML(node, options) {
      return (0, domhandler_1.hasChildren)(node) ? node.children.map(function(node2) {
        return getOuterHTML(node2, options);
      }).join("") : "";
    }
    exports2.getInnerHTML = getInnerHTML;
    function getText(node) {
      if (Array.isArray(node))
        return node.map(getText).join("");
      if ((0, domhandler_1.isTag)(node))
        return node.name === "br" ? "\n" : getText(node.children);
      if ((0, domhandler_1.isCDATA)(node))
        return getText(node.children);
      if ((0, domhandler_1.isText)(node))
        return node.data;
      return "";
    }
    exports2.getText = getText;
    function textContent(node) {
      if (Array.isArray(node))
        return node.map(textContent).join("");
      if ((0, domhandler_1.hasChildren)(node) && !(0, domhandler_1.isComment)(node)) {
        return textContent(node.children);
      }
      if ((0, domhandler_1.isText)(node))
        return node.data;
      return "";
    }
    exports2.textContent = textContent;
    function innerText(node) {
      if (Array.isArray(node))
        return node.map(innerText).join("");
      if ((0, domhandler_1.hasChildren)(node) && (node.type === domelementtype_1.ElementType.Tag || (0, domhandler_1.isCDATA)(node))) {
        return innerText(node.children);
      }
      if ((0, domhandler_1.isText)(node))
        return node.data;
      return "";
    }
    exports2.innerText = innerText;
  }
});

// node_modules/domutils/lib/traversal.js
var require_traversal = __commonJS({
  "node_modules/domutils/lib/traversal.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prevElementSibling = exports2.nextElementSibling = exports2.getName = exports2.hasAttrib = exports2.getAttributeValue = exports2.getSiblings = exports2.getParent = exports2.getChildren = void 0;
    var domhandler_1 = require_lib2();
    var emptyArray = [];
    function getChildren(elem) {
      var _a;
      return (_a = elem.children) !== null && _a !== void 0 ? _a : emptyArray;
    }
    exports2.getChildren = getChildren;
    function getParent(elem) {
      return elem.parent || null;
    }
    exports2.getParent = getParent;
    function getSiblings(elem) {
      var _a, _b;
      var parent = getParent(elem);
      if (parent != null)
        return getChildren(parent);
      var siblings = [elem];
      var prev = elem.prev, next = elem.next;
      while (prev != null) {
        siblings.unshift(prev);
        _a = prev, prev = _a.prev;
      }
      while (next != null) {
        siblings.push(next);
        _b = next, next = _b.next;
      }
      return siblings;
    }
    exports2.getSiblings = getSiblings;
    function getAttributeValue(elem, name) {
      var _a;
      return (_a = elem.attribs) === null || _a === void 0 ? void 0 : _a[name];
    }
    exports2.getAttributeValue = getAttributeValue;
    function hasAttrib(elem, name) {
      return elem.attribs != null && Object.prototype.hasOwnProperty.call(elem.attribs, name) && elem.attribs[name] != null;
    }
    exports2.hasAttrib = hasAttrib;
    function getName(elem) {
      return elem.name;
    }
    exports2.getName = getName;
    function nextElementSibling(elem) {
      var _a;
      var next = elem.next;
      while (next !== null && !(0, domhandler_1.isTag)(next))
        _a = next, next = _a.next;
      return next;
    }
    exports2.nextElementSibling = nextElementSibling;
    function prevElementSibling(elem) {
      var _a;
      var prev = elem.prev;
      while (prev !== null && !(0, domhandler_1.isTag)(prev))
        _a = prev, prev = _a.prev;
      return prev;
    }
    exports2.prevElementSibling = prevElementSibling;
  }
});

// node_modules/domutils/lib/manipulation.js
var require_manipulation = __commonJS({
  "node_modules/domutils/lib/manipulation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepend = exports2.prependChild = exports2.append = exports2.appendChild = exports2.replaceElement = exports2.removeElement = void 0;
    function removeElement(elem) {
      if (elem.prev)
        elem.prev.next = elem.next;
      if (elem.next)
        elem.next.prev = elem.prev;
      if (elem.parent) {
        var childs = elem.parent.children;
        childs.splice(childs.lastIndexOf(elem), 1);
      }
    }
    exports2.removeElement = removeElement;
    function replaceElement(elem, replacement) {
      var prev = replacement.prev = elem.prev;
      if (prev) {
        prev.next = replacement;
      }
      var next = replacement.next = elem.next;
      if (next) {
        next.prev = replacement;
      }
      var parent = replacement.parent = elem.parent;
      if (parent) {
        var childs = parent.children;
        childs[childs.lastIndexOf(elem)] = replacement;
      }
    }
    exports2.replaceElement = replaceElement;
    function appendChild(elem, child) {
      removeElement(child);
      child.next = null;
      child.parent = elem;
      if (elem.children.push(child) > 1) {
        var sibling = elem.children[elem.children.length - 2];
        sibling.next = child;
        child.prev = sibling;
      } else {
        child.prev = null;
      }
    }
    exports2.appendChild = appendChild;
    function append(elem, next) {
      removeElement(next);
      var parent = elem.parent;
      var currNext = elem.next;
      next.next = currNext;
      next.prev = elem;
      elem.next = next;
      next.parent = parent;
      if (currNext) {
        currNext.prev = next;
        if (parent) {
          var childs = parent.children;
          childs.splice(childs.lastIndexOf(currNext), 0, next);
        }
      } else if (parent) {
        parent.children.push(next);
      }
    }
    exports2.append = append;
    function prependChild(elem, child) {
      removeElement(child);
      child.parent = elem;
      child.prev = null;
      if (elem.children.unshift(child) !== 1) {
        var sibling = elem.children[1];
        sibling.prev = child;
        child.next = sibling;
      } else {
        child.next = null;
      }
    }
    exports2.prependChild = prependChild;
    function prepend(elem, prev) {
      removeElement(prev);
      var parent = elem.parent;
      if (parent) {
        var childs = parent.children;
        childs.splice(childs.indexOf(elem), 0, prev);
      }
      if (elem.prev) {
        elem.prev.next = prev;
      }
      prev.parent = parent;
      prev.prev = elem.prev;
      prev.next = elem;
      elem.prev = prev;
    }
    exports2.prepend = prepend;
  }
});

// node_modules/domutils/lib/querying.js
var require_querying = __commonJS({
  "node_modules/domutils/lib/querying.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.findAll = exports2.existsOne = exports2.findOne = exports2.findOneChild = exports2.find = exports2.filter = void 0;
    var domhandler_1 = require_lib2();
    function filter(test, node, recurse, limit) {
      if (recurse === void 0) {
        recurse = true;
      }
      if (limit === void 0) {
        limit = Infinity;
      }
      if (!Array.isArray(node))
        node = [node];
      return find(test, node, recurse, limit);
    }
    exports2.filter = filter;
    function find(test, nodes, recurse, limit) {
      var result = [];
      for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
        var elem = nodes_1[_i];
        if (test(elem)) {
          result.push(elem);
          if (--limit <= 0)
            break;
        }
        if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {
          var children = find(test, elem.children, recurse, limit);
          result.push.apply(result, children);
          limit -= children.length;
          if (limit <= 0)
            break;
        }
      }
      return result;
    }
    exports2.find = find;
    function findOneChild(test, nodes) {
      return nodes.find(test);
    }
    exports2.findOneChild = findOneChild;
    function findOne(test, nodes, recurse) {
      if (recurse === void 0) {
        recurse = true;
      }
      var elem = null;
      for (var i = 0; i < nodes.length && !elem; i++) {
        var checked = nodes[i];
        if (!(0, domhandler_1.isTag)(checked)) {
          continue;
        } else if (test(checked)) {
          elem = checked;
        } else if (recurse && checked.children.length > 0) {
          elem = findOne(test, checked.children);
        }
      }
      return elem;
    }
    exports2.findOne = findOne;
    function existsOne(test, nodes) {
      return nodes.some(function(checked) {
        return (0, domhandler_1.isTag)(checked) && (test(checked) || checked.children.length > 0 && existsOne(test, checked.children));
      });
    }
    exports2.existsOne = existsOne;
    function findAll(test, nodes) {
      var _a;
      var result = [];
      var stack = nodes.filter(domhandler_1.isTag);
      var elem;
      while (elem = stack.shift()) {
        var children = (_a = elem.children) === null || _a === void 0 ? void 0 : _a.filter(domhandler_1.isTag);
        if (children && children.length > 0) {
          stack.unshift.apply(stack, children);
        }
        if (test(elem))
          result.push(elem);
      }
      return result;
    }
    exports2.findAll = findAll;
  }
});

// node_modules/domutils/lib/legacy.js
var require_legacy2 = __commonJS({
  "node_modules/domutils/lib/legacy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getElementsByTagType = exports2.getElementsByTagName = exports2.getElementById = exports2.getElements = exports2.testElement = void 0;
    var domhandler_1 = require_lib2();
    var querying_1 = require_querying();
    var Checks = {
      tag_name: function(name) {
        if (typeof name === "function") {
          return function(elem) {
            return (0, domhandler_1.isTag)(elem) && name(elem.name);
          };
        } else if (name === "*") {
          return domhandler_1.isTag;
        }
        return function(elem) {
          return (0, domhandler_1.isTag)(elem) && elem.name === name;
        };
      },
      tag_type: function(type) {
        if (typeof type === "function") {
          return function(elem) {
            return type(elem.type);
          };
        }
        return function(elem) {
          return elem.type === type;
        };
      },
      tag_contains: function(data) {
        if (typeof data === "function") {
          return function(elem) {
            return (0, domhandler_1.isText)(elem) && data(elem.data);
          };
        }
        return function(elem) {
          return (0, domhandler_1.isText)(elem) && elem.data === data;
        };
      }
    };
    function getAttribCheck(attrib, value) {
      if (typeof value === "function") {
        return function(elem) {
          return (0, domhandler_1.isTag)(elem) && value(elem.attribs[attrib]);
        };
      }
      return function(elem) {
        return (0, domhandler_1.isTag)(elem) && elem.attribs[attrib] === value;
      };
    }
    function combineFuncs(a, b) {
      return function(elem) {
        return a(elem) || b(elem);
      };
    }
    function compileTest(options) {
      var funcs = Object.keys(options).map(function(key) {
        var value = options[key];
        return Object.prototype.hasOwnProperty.call(Checks, key) ? Checks[key](value) : getAttribCheck(key, value);
      });
      return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
    }
    function testElement(options, node) {
      var test = compileTest(options);
      return test ? test(node) : true;
    }
    exports2.testElement = testElement;
    function getElements(options, nodes, recurse, limit) {
      if (limit === void 0) {
        limit = Infinity;
      }
      var test = compileTest(options);
      return test ? (0, querying_1.filter)(test, nodes, recurse, limit) : [];
    }
    exports2.getElements = getElements;
    function getElementById(id, nodes, recurse) {
      if (recurse === void 0) {
        recurse = true;
      }
      if (!Array.isArray(nodes))
        nodes = [nodes];
      return (0, querying_1.findOne)(getAttribCheck("id", id), nodes, recurse);
    }
    exports2.getElementById = getElementById;
    function getElementsByTagName(tagName, nodes, recurse, limit) {
      if (recurse === void 0) {
        recurse = true;
      }
      if (limit === void 0) {
        limit = Infinity;
      }
      return (0, querying_1.filter)(Checks.tag_name(tagName), nodes, recurse, limit);
    }
    exports2.getElementsByTagName = getElementsByTagName;
    function getElementsByTagType(type, nodes, recurse, limit) {
      if (recurse === void 0) {
        recurse = true;
      }
      if (limit === void 0) {
        limit = Infinity;
      }
      return (0, querying_1.filter)(Checks.tag_type(type), nodes, recurse, limit);
    }
    exports2.getElementsByTagType = getElementsByTagType;
  }
});

// node_modules/domutils/lib/helpers.js
var require_helpers = __commonJS({
  "node_modules/domutils/lib/helpers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uniqueSort = exports2.compareDocumentPosition = exports2.removeSubsets = void 0;
    var domhandler_1 = require_lib2();
    function removeSubsets(nodes) {
      var idx = nodes.length;
      while (--idx >= 0) {
        var node = nodes[idx];
        if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
          nodes.splice(idx, 1);
          continue;
        }
        for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
          if (nodes.includes(ancestor)) {
            nodes.splice(idx, 1);
            break;
          }
        }
      }
      return nodes;
    }
    exports2.removeSubsets = removeSubsets;
    function compareDocumentPosition(nodeA, nodeB) {
      var aParents = [];
      var bParents = [];
      if (nodeA === nodeB) {
        return 0;
      }
      var current = (0, domhandler_1.hasChildren)(nodeA) ? nodeA : nodeA.parent;
      while (current) {
        aParents.unshift(current);
        current = current.parent;
      }
      current = (0, domhandler_1.hasChildren)(nodeB) ? nodeB : nodeB.parent;
      while (current) {
        bParents.unshift(current);
        current = current.parent;
      }
      var maxIdx = Math.min(aParents.length, bParents.length);
      var idx = 0;
      while (idx < maxIdx && aParents[idx] === bParents[idx]) {
        idx++;
      }
      if (idx === 0) {
        return 1;
      }
      var sharedParent = aParents[idx - 1];
      var siblings = sharedParent.children;
      var aSibling = aParents[idx];
      var bSibling = bParents[idx];
      if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
        if (sharedParent === nodeB) {
          return 4 | 16;
        }
        return 4;
      }
      if (sharedParent === nodeA) {
        return 2 | 8;
      }
      return 2;
    }
    exports2.compareDocumentPosition = compareDocumentPosition;
    function uniqueSort(nodes) {
      nodes = nodes.filter(function(node, i, arr) {
        return !arr.includes(node, i + 1);
      });
      nodes.sort(function(a, b) {
        var relative = compareDocumentPosition(a, b);
        if (relative & 2) {
          return -1;
        } else if (relative & 4) {
          return 1;
        }
        return 0;
      });
      return nodes;
    }
    exports2.uniqueSort = uniqueSort;
  }
});

// node_modules/domutils/lib/feeds.js
var require_feeds = __commonJS({
  "node_modules/domutils/lib/feeds.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getFeed = void 0;
    var stringify_1 = require_stringify();
    var legacy_1 = require_legacy2();
    function getFeed(doc) {
      var feedRoot = getOneElement(isValidFeed, doc);
      return !feedRoot ? null : feedRoot.name === "feed" ? getAtomFeed(feedRoot) : getRssFeed(feedRoot);
    }
    exports2.getFeed = getFeed;
    function getAtomFeed(feedRoot) {
      var _a;
      var childs = feedRoot.children;
      var feed = {
        type: "atom",
        items: (0, legacy_1.getElementsByTagName)("entry", childs).map(function(item) {
          var _a2;
          var children = item.children;
          var entry = { media: getMediaElements(children) };
          addConditionally(entry, "id", "id", children);
          addConditionally(entry, "title", "title", children);
          var href2 = (_a2 = getOneElement("link", children)) === null || _a2 === void 0 ? void 0 : _a2.attribs.href;
          if (href2) {
            entry.link = href2;
          }
          var description = fetch("summary", children) || fetch("content", children);
          if (description) {
            entry.description = description;
          }
          var pubDate = fetch("updated", children);
          if (pubDate) {
            entry.pubDate = new Date(pubDate);
          }
          return entry;
        })
      };
      addConditionally(feed, "id", "id", childs);
      addConditionally(feed, "title", "title", childs);
      var href = (_a = getOneElement("link", childs)) === null || _a === void 0 ? void 0 : _a.attribs.href;
      if (href) {
        feed.link = href;
      }
      addConditionally(feed, "description", "subtitle", childs);
      var updated = fetch("updated", childs);
      if (updated) {
        feed.updated = new Date(updated);
      }
      addConditionally(feed, "author", "email", childs, true);
      return feed;
    }
    function getRssFeed(feedRoot) {
      var _a, _b;
      var childs = (_b = (_a = getOneElement("channel", feedRoot.children)) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : [];
      var feed = {
        type: feedRoot.name.substr(0, 3),
        id: "",
        items: (0, legacy_1.getElementsByTagName)("item", feedRoot.children).map(function(item) {
          var children = item.children;
          var entry = { media: getMediaElements(children) };
          addConditionally(entry, "id", "guid", children);
          addConditionally(entry, "title", "title", children);
          addConditionally(entry, "link", "link", children);
          addConditionally(entry, "description", "description", children);
          var pubDate = fetch("pubDate", children);
          if (pubDate)
            entry.pubDate = new Date(pubDate);
          return entry;
        })
      };
      addConditionally(feed, "title", "title", childs);
      addConditionally(feed, "link", "link", childs);
      addConditionally(feed, "description", "description", childs);
      var updated = fetch("lastBuildDate", childs);
      if (updated) {
        feed.updated = new Date(updated);
      }
      addConditionally(feed, "author", "managingEditor", childs, true);
      return feed;
    }
    var MEDIA_KEYS_STRING = ["url", "type", "lang"];
    var MEDIA_KEYS_INT = [
      "fileSize",
      "bitrate",
      "framerate",
      "samplingrate",
      "channels",
      "duration",
      "height",
      "width"
    ];
    function getMediaElements(where) {
      return (0, legacy_1.getElementsByTagName)("media:content", where).map(function(elem) {
        var attribs = elem.attribs;
        var media = {
          medium: attribs.medium,
          isDefault: !!attribs.isDefault
        };
        for (var _i = 0, MEDIA_KEYS_STRING_1 = MEDIA_KEYS_STRING; _i < MEDIA_KEYS_STRING_1.length; _i++) {
          var attrib = MEDIA_KEYS_STRING_1[_i];
          if (attribs[attrib]) {
            media[attrib] = attribs[attrib];
          }
        }
        for (var _a = 0, MEDIA_KEYS_INT_1 = MEDIA_KEYS_INT; _a < MEDIA_KEYS_INT_1.length; _a++) {
          var attrib = MEDIA_KEYS_INT_1[_a];
          if (attribs[attrib]) {
            media[attrib] = parseInt(attribs[attrib], 10);
          }
        }
        if (attribs.expression) {
          media.expression = attribs.expression;
        }
        return media;
      });
    }
    function getOneElement(tagName, node) {
      return (0, legacy_1.getElementsByTagName)(tagName, node, true, 1)[0];
    }
    function fetch(tagName, where, recurse) {
      if (recurse === void 0) {
        recurse = false;
      }
      return (0, stringify_1.textContent)((0, legacy_1.getElementsByTagName)(tagName, where, recurse, 1)).trim();
    }
    function addConditionally(obj, prop, tagName, where, recurse) {
      if (recurse === void 0) {
        recurse = false;
      }
      var val = fetch(tagName, where, recurse);
      if (val)
        obj[prop] = val;
    }
    function isValidFeed(value) {
      return value === "rss" || value === "feed" || value === "rdf:RDF";
    }
  }
});

// node_modules/domutils/lib/index.js
var require_lib5 = __commonJS({
  "node_modules/domutils/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hasChildren = exports2.isDocument = exports2.isComment = exports2.isText = exports2.isCDATA = exports2.isTag = void 0;
    __exportStar(require_stringify(), exports2);
    __exportStar(require_traversal(), exports2);
    __exportStar(require_manipulation(), exports2);
    __exportStar(require_querying(), exports2);
    __exportStar(require_legacy2(), exports2);
    __exportStar(require_helpers(), exports2);
    __exportStar(require_feeds(), exports2);
    var domhandler_1 = require_lib2();
    Object.defineProperty(exports2, "isTag", { enumerable: true, get: function() {
      return domhandler_1.isTag;
    } });
    Object.defineProperty(exports2, "isCDATA", { enumerable: true, get: function() {
      return domhandler_1.isCDATA;
    } });
    Object.defineProperty(exports2, "isText", { enumerable: true, get: function() {
      return domhandler_1.isText;
    } });
    Object.defineProperty(exports2, "isComment", { enumerable: true, get: function() {
      return domhandler_1.isComment;
    } });
    Object.defineProperty(exports2, "isDocument", { enumerable: true, get: function() {
      return domhandler_1.isDocument;
    } });
    Object.defineProperty(exports2, "hasChildren", { enumerable: true, get: function() {
      return domhandler_1.hasChildren;
    } });
  }
});

// node_modules/boolbase/index.js
var require_boolbase = __commonJS({
  "node_modules/boolbase/index.js"(exports2, module2) {
    module2.exports = {
      trueFunc: function trueFunc() {
        return true;
      },
      falseFunc: function falseFunc() {
        return false;
      }
    };
  }
});

// node_modules/css-what/lib/commonjs/types.js
var require_types = __commonJS({
  "node_modules/css-what/lib/commonjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AttributeAction = exports2.IgnoreCaseMode = exports2.SelectorType = void 0;
    var SelectorType;
    (function(SelectorType2) {
      SelectorType2["Attribute"] = "attribute";
      SelectorType2["Pseudo"] = "pseudo";
      SelectorType2["PseudoElement"] = "pseudo-element";
      SelectorType2["Tag"] = "tag";
      SelectorType2["Universal"] = "universal";
      SelectorType2["Adjacent"] = "adjacent";
      SelectorType2["Child"] = "child";
      SelectorType2["Descendant"] = "descendant";
      SelectorType2["Parent"] = "parent";
      SelectorType2["Sibling"] = "sibling";
      SelectorType2["ColumnCombinator"] = "column-combinator";
    })(SelectorType = exports2.SelectorType || (exports2.SelectorType = {}));
    exports2.IgnoreCaseMode = {
      Unknown: null,
      QuirksMode: "quirks",
      IgnoreCase: true,
      CaseSensitive: false
    };
    var AttributeAction;
    (function(AttributeAction2) {
      AttributeAction2["Any"] = "any";
      AttributeAction2["Element"] = "element";
      AttributeAction2["End"] = "end";
      AttributeAction2["Equals"] = "equals";
      AttributeAction2["Exists"] = "exists";
      AttributeAction2["Hyphen"] = "hyphen";
      AttributeAction2["Not"] = "not";
      AttributeAction2["Start"] = "start";
    })(AttributeAction = exports2.AttributeAction || (exports2.AttributeAction = {}));
  }
});

// node_modules/css-what/lib/commonjs/parse.js
var require_parse = __commonJS({
  "node_modules/css-what/lib/commonjs/parse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parse = exports2.isTraversal = void 0;
    var types_1 = require_types();
    var reName = /^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/;
    var reEscape = /\\([\da-f]{1,6}\s?|(\s)|.)/gi;
    var actionTypes = /* @__PURE__ */ new Map([
      [126, types_1.AttributeAction.Element],
      [94, types_1.AttributeAction.Start],
      [36, types_1.AttributeAction.End],
      [42, types_1.AttributeAction.Any],
      [33, types_1.AttributeAction.Not],
      [124, types_1.AttributeAction.Hyphen]
    ]);
    var unpackPseudos = /* @__PURE__ */ new Set([
      "has",
      "not",
      "matches",
      "is",
      "where",
      "host",
      "host-context"
    ]);
    function isTraversal(selector) {
      switch (selector.type) {
        case types_1.SelectorType.Adjacent:
        case types_1.SelectorType.Child:
        case types_1.SelectorType.Descendant:
        case types_1.SelectorType.Parent:
        case types_1.SelectorType.Sibling:
        case types_1.SelectorType.ColumnCombinator:
          return true;
        default:
          return false;
      }
    }
    exports2.isTraversal = isTraversal;
    var stripQuotesFromPseudos = /* @__PURE__ */ new Set(["contains", "icontains"]);
    function funescape(_, escaped, escapedWhitespace) {
      var high = parseInt(escaped, 16) - 65536;
      return high !== high || escapedWhitespace ? escaped : high < 0 ? (
        // BMP codepoint
        String.fromCharCode(high + 65536)
      ) : (
        // Supplemental Plane codepoint (surrogate pair)
        String.fromCharCode(high >> 10 | 55296, high & 1023 | 56320)
      );
    }
    function unescapeCSS(str) {
      return str.replace(reEscape, funescape);
    }
    function isQuote(c) {
      return c === 39 || c === 34;
    }
    function isWhitespace(c) {
      return c === 32 || c === 9 || c === 10 || c === 12 || c === 13;
    }
    function parse(selector) {
      var subselects = [];
      var endIndex = parseSelector(subselects, "".concat(selector), 0);
      if (endIndex < selector.length) {
        throw new Error("Unmatched selector: ".concat(selector.slice(endIndex)));
      }
      return subselects;
    }
    exports2.parse = parse;
    function parseSelector(subselects, selector, selectorIndex) {
      var tokens = [];
      function getName(offset) {
        var match = selector.slice(selectorIndex + offset).match(reName);
        if (!match) {
          throw new Error("Expected name, found ".concat(selector.slice(selectorIndex)));
        }
        var name = match[0];
        selectorIndex += offset + name.length;
        return unescapeCSS(name);
      }
      function stripWhitespace(offset) {
        selectorIndex += offset;
        while (selectorIndex < selector.length && isWhitespace(selector.charCodeAt(selectorIndex))) {
          selectorIndex++;
        }
      }
      function readValueWithParenthesis() {
        selectorIndex += 1;
        var start = selectorIndex;
        var counter = 1;
        for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {
          if (selector.charCodeAt(selectorIndex) === 40 && !isEscaped(selectorIndex)) {
            counter++;
          } else if (selector.charCodeAt(selectorIndex) === 41 && !isEscaped(selectorIndex)) {
            counter--;
          }
        }
        if (counter) {
          throw new Error("Parenthesis not matched");
        }
        return unescapeCSS(selector.slice(start, selectorIndex - 1));
      }
      function isEscaped(pos) {
        var slashCount = 0;
        while (selector.charCodeAt(--pos) === 92)
          slashCount++;
        return (slashCount & 1) === 1;
      }
      function ensureNotTraversal() {
        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {
          throw new Error("Did not expect successive traversals.");
        }
      }
      function addTraversal(type) {
        if (tokens.length > 0 && tokens[tokens.length - 1].type === types_1.SelectorType.Descendant) {
          tokens[tokens.length - 1].type = type;
          return;
        }
        ensureNotTraversal();
        tokens.push({ type });
      }
      function addSpecialAttribute(name, action2) {
        tokens.push({
          type: types_1.SelectorType.Attribute,
          name,
          action: action2,
          value: getName(1),
          namespace: null,
          ignoreCase: "quirks"
        });
      }
      function finalizeSubselector() {
        if (tokens.length && tokens[tokens.length - 1].type === types_1.SelectorType.Descendant) {
          tokens.pop();
        }
        if (tokens.length === 0) {
          throw new Error("Empty sub-selector");
        }
        subselects.push(tokens);
      }
      stripWhitespace(0);
      if (selector.length === selectorIndex) {
        return selectorIndex;
      }
      loop:
        while (selectorIndex < selector.length) {
          var firstChar = selector.charCodeAt(selectorIndex);
          switch (firstChar) {
            case 32:
            case 9:
            case 10:
            case 12:
            case 13: {
              if (tokens.length === 0 || tokens[0].type !== types_1.SelectorType.Descendant) {
                ensureNotTraversal();
                tokens.push({ type: types_1.SelectorType.Descendant });
              }
              stripWhitespace(1);
              break;
            }
            case 62: {
              addTraversal(types_1.SelectorType.Child);
              stripWhitespace(1);
              break;
            }
            case 60: {
              addTraversal(types_1.SelectorType.Parent);
              stripWhitespace(1);
              break;
            }
            case 126: {
              addTraversal(types_1.SelectorType.Sibling);
              stripWhitespace(1);
              break;
            }
            case 43: {
              addTraversal(types_1.SelectorType.Adjacent);
              stripWhitespace(1);
              break;
            }
            case 46: {
              addSpecialAttribute("class", types_1.AttributeAction.Element);
              break;
            }
            case 35: {
              addSpecialAttribute("id", types_1.AttributeAction.Equals);
              break;
            }
            case 91: {
              stripWhitespace(1);
              var name_1 = void 0;
              var namespace = null;
              if (selector.charCodeAt(selectorIndex) === 124) {
                name_1 = getName(1);
              } else if (selector.startsWith("*|", selectorIndex)) {
                namespace = "*";
                name_1 = getName(2);
              } else {
                name_1 = getName(0);
                if (selector.charCodeAt(selectorIndex) === 124 && selector.charCodeAt(selectorIndex + 1) !== 61) {
                  namespace = name_1;
                  name_1 = getName(1);
                }
              }
              stripWhitespace(0);
              var action = types_1.AttributeAction.Exists;
              var possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));
              if (possibleAction) {
                action = possibleAction;
                if (selector.charCodeAt(selectorIndex + 1) !== 61) {
                  throw new Error("Expected `=`");
                }
                stripWhitespace(2);
              } else if (selector.charCodeAt(selectorIndex) === 61) {
                action = types_1.AttributeAction.Equals;
                stripWhitespace(1);
              }
              var value = "";
              var ignoreCase = null;
              if (action !== "exists") {
                if (isQuote(selector.charCodeAt(selectorIndex))) {
                  var quote = selector.charCodeAt(selectorIndex);
                  var sectionEnd = selectorIndex + 1;
                  while (sectionEnd < selector.length && (selector.charCodeAt(sectionEnd) !== quote || isEscaped(sectionEnd))) {
                    sectionEnd += 1;
                  }
                  if (selector.charCodeAt(sectionEnd) !== quote) {
                    throw new Error("Attribute value didn't end");
                  }
                  value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));
                  selectorIndex = sectionEnd + 1;
                } else {
                  var valueStart = selectorIndex;
                  while (selectorIndex < selector.length && (!isWhitespace(selector.charCodeAt(selectorIndex)) && selector.charCodeAt(selectorIndex) !== 93 || isEscaped(selectorIndex))) {
                    selectorIndex += 1;
                  }
                  value = unescapeCSS(selector.slice(valueStart, selectorIndex));
                }
                stripWhitespace(0);
                var forceIgnore = selector.charCodeAt(selectorIndex) | 32;
                if (forceIgnore === 115) {
                  ignoreCase = false;
                  stripWhitespace(1);
                } else if (forceIgnore === 105) {
                  ignoreCase = true;
                  stripWhitespace(1);
                }
              }
              if (selector.charCodeAt(selectorIndex) !== 93) {
                throw new Error("Attribute selector didn't terminate");
              }
              selectorIndex += 1;
              var attributeSelector = {
                type: types_1.SelectorType.Attribute,
                name: name_1,
                action,
                value,
                namespace,
                ignoreCase
              };
              tokens.push(attributeSelector);
              break;
            }
            case 58: {
              if (selector.charCodeAt(selectorIndex + 1) === 58) {
                tokens.push({
                  type: types_1.SelectorType.PseudoElement,
                  name: getName(2).toLowerCase(),
                  data: selector.charCodeAt(selectorIndex) === 40 ? readValueWithParenthesis() : null
                });
                continue;
              }
              var name_2 = getName(1).toLowerCase();
              var data = null;
              if (selector.charCodeAt(selectorIndex) === 40) {
                if (unpackPseudos.has(name_2)) {
                  if (isQuote(selector.charCodeAt(selectorIndex + 1))) {
                    throw new Error("Pseudo-selector ".concat(name_2, " cannot be quoted"));
                  }
                  data = [];
                  selectorIndex = parseSelector(data, selector, selectorIndex + 1);
                  if (selector.charCodeAt(selectorIndex) !== 41) {
                    throw new Error("Missing closing parenthesis in :".concat(name_2, " (").concat(selector, ")"));
                  }
                  selectorIndex += 1;
                } else {
                  data = readValueWithParenthesis();
                  if (stripQuotesFromPseudos.has(name_2)) {
                    var quot = data.charCodeAt(0);
                    if (quot === data.charCodeAt(data.length - 1) && isQuote(quot)) {
                      data = data.slice(1, -1);
                    }
                  }
                  data = unescapeCSS(data);
                }
              }
              tokens.push({ type: types_1.SelectorType.Pseudo, name: name_2, data });
              break;
            }
            case 44: {
              finalizeSubselector();
              tokens = [];
              stripWhitespace(1);
              break;
            }
            default: {
              if (selector.startsWith("/*", selectorIndex)) {
                var endIndex = selector.indexOf("*/", selectorIndex + 2);
                if (endIndex < 0) {
                  throw new Error("Comment was not terminated");
                }
                selectorIndex = endIndex + 2;
                if (tokens.length === 0) {
                  stripWhitespace(0);
                }
                break;
              }
              var namespace = null;
              var name_3 = void 0;
              if (firstChar === 42) {
                selectorIndex += 1;
                name_3 = "*";
              } else if (firstChar === 124) {
                name_3 = "";
                if (selector.charCodeAt(selectorIndex + 1) === 124) {
                  addTraversal(types_1.SelectorType.ColumnCombinator);
                  stripWhitespace(2);
                  break;
                }
              } else if (reName.test(selector.slice(selectorIndex))) {
                name_3 = getName(0);
              } else {
                break loop;
              }
              if (selector.charCodeAt(selectorIndex) === 124 && selector.charCodeAt(selectorIndex + 1) !== 124) {
                namespace = name_3;
                if (selector.charCodeAt(selectorIndex + 1) === 42) {
                  name_3 = "*";
                  selectorIndex += 2;
                } else {
                  name_3 = getName(1);
                }
              }
              tokens.push(name_3 === "*" ? { type: types_1.SelectorType.Universal, namespace } : { type: types_1.SelectorType.Tag, name: name_3, namespace });
            }
          }
        }
      finalizeSubselector();
      return selectorIndex;
    }
  }
});

// node_modules/css-what/lib/commonjs/stringify.js
var require_stringify2 = __commonJS({
  "node_modules/css-what/lib/commonjs/stringify.js"(exports2) {
    "use strict";
    var __spreadArray = exports2 && exports2.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringify = void 0;
    var types_1 = require_types();
    var attribValChars = ["\\", '"'];
    var pseudoValChars = __spreadArray(__spreadArray([], attribValChars, true), ["(", ")"], false);
    var charsToEscapeInAttributeValue = new Set(attribValChars.map(function(c) {
      return c.charCodeAt(0);
    }));
    var charsToEscapeInPseudoValue = new Set(pseudoValChars.map(function(c) {
      return c.charCodeAt(0);
    }));
    var charsToEscapeInName = new Set(__spreadArray(__spreadArray([], pseudoValChars, true), [
      "~",
      "^",
      "$",
      "*",
      "+",
      "!",
      "|",
      ":",
      "[",
      "]",
      " ",
      "."
    ], false).map(function(c) {
      return c.charCodeAt(0);
    }));
    function stringify(selector) {
      return selector.map(function(token) {
        return token.map(stringifyToken).join("");
      }).join(", ");
    }
    exports2.stringify = stringify;
    function stringifyToken(token, index, arr) {
      switch (token.type) {
        case types_1.SelectorType.Child:
          return index === 0 ? "> " : " > ";
        case types_1.SelectorType.Parent:
          return index === 0 ? "< " : " < ";
        case types_1.SelectorType.Sibling:
          return index === 0 ? "~ " : " ~ ";
        case types_1.SelectorType.Adjacent:
          return index === 0 ? "+ " : " + ";
        case types_1.SelectorType.Descendant:
          return " ";
        case types_1.SelectorType.ColumnCombinator:
          return index === 0 ? "|| " : " || ";
        case types_1.SelectorType.Universal:
          return token.namespace === "*" && index + 1 < arr.length && "name" in arr[index + 1] ? "" : "".concat(getNamespace(token.namespace), "*");
        case types_1.SelectorType.Tag:
          return getNamespacedName(token);
        case types_1.SelectorType.PseudoElement:
          return "::".concat(escapeName(token.name, charsToEscapeInName)).concat(token.data === null ? "" : "(".concat(escapeName(token.data, charsToEscapeInPseudoValue), ")"));
        case types_1.SelectorType.Pseudo:
          return ":".concat(escapeName(token.name, charsToEscapeInName)).concat(token.data === null ? "" : "(".concat(typeof token.data === "string" ? escapeName(token.data, charsToEscapeInPseudoValue) : stringify(token.data), ")"));
        case types_1.SelectorType.Attribute: {
          if (token.name === "id" && token.action === types_1.AttributeAction.Equals && token.ignoreCase === "quirks" && !token.namespace) {
            return "#".concat(escapeName(token.value, charsToEscapeInName));
          }
          if (token.name === "class" && token.action === types_1.AttributeAction.Element && token.ignoreCase === "quirks" && !token.namespace) {
            return ".".concat(escapeName(token.value, charsToEscapeInName));
          }
          var name_1 = getNamespacedName(token);
          if (token.action === types_1.AttributeAction.Exists) {
            return "[".concat(name_1, "]");
          }
          return "[".concat(name_1).concat(getActionValue(token.action), '="').concat(escapeName(token.value, charsToEscapeInAttributeValue), '"').concat(token.ignoreCase === null ? "" : token.ignoreCase ? " i" : " s", "]");
        }
      }
    }
    function getActionValue(action) {
      switch (action) {
        case types_1.AttributeAction.Equals:
          return "";
        case types_1.AttributeAction.Element:
          return "~";
        case types_1.AttributeAction.Start:
          return "^";
        case types_1.AttributeAction.End:
          return "$";
        case types_1.AttributeAction.Any:
          return "*";
        case types_1.AttributeAction.Not:
          return "!";
        case types_1.AttributeAction.Hyphen:
          return "|";
        case types_1.AttributeAction.Exists:
          throw new Error("Shouldn't be here");
      }
    }
    function getNamespacedName(token) {
      return "".concat(getNamespace(token.namespace)).concat(escapeName(token.name, charsToEscapeInName));
    }
    function getNamespace(namespace) {
      return namespace !== null ? "".concat(namespace === "*" ? "*" : escapeName(namespace, charsToEscapeInName), "|") : "";
    }
    function escapeName(str, charsToEscape) {
      var lastIdx = 0;
      var ret = "";
      for (var i = 0; i < str.length; i++) {
        if (charsToEscape.has(str.charCodeAt(i))) {
          ret += "".concat(str.slice(lastIdx, i), "\\").concat(str.charAt(i));
          lastIdx = i + 1;
        }
      }
      return ret.length > 0 ? ret + str.slice(lastIdx) : str;
    }
  }
});

// node_modules/css-what/lib/commonjs/index.js
var require_commonjs = __commonJS({
  "node_modules/css-what/lib/commonjs/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringify = exports2.parse = exports2.isTraversal = void 0;
    __exportStar(require_types(), exports2);
    var parse_1 = require_parse();
    Object.defineProperty(exports2, "isTraversal", { enumerable: true, get: function() {
      return parse_1.isTraversal;
    } });
    Object.defineProperty(exports2, "parse", { enumerable: true, get: function() {
      return parse_1.parse;
    } });
    var stringify_1 = require_stringify2();
    Object.defineProperty(exports2, "stringify", { enumerable: true, get: function() {
      return stringify_1.stringify;
    } });
  }
});

// node_modules/css-select/lib/procedure.js
var require_procedure = __commonJS({
  "node_modules/css-select/lib/procedure.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isTraversal = exports2.procedure = void 0;
    exports2.procedure = {
      universal: 50,
      tag: 30,
      attribute: 1,
      pseudo: 0,
      "pseudo-element": 0,
      "column-combinator": -1,
      descendant: -1,
      child: -1,
      parent: -1,
      sibling: -1,
      adjacent: -1,
      _flexibleDescendant: -1
    };
    function isTraversal(t) {
      return exports2.procedure[t.type] < 0;
    }
    exports2.isTraversal = isTraversal;
  }
});

// node_modules/css-select/lib/sort.js
var require_sort = __commonJS({
  "node_modules/css-select/lib/sort.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var css_what_1 = require_commonjs();
    var procedure_1 = require_procedure();
    var attributes = {
      exists: 10,
      equals: 8,
      not: 7,
      start: 6,
      end: 6,
      any: 5,
      hyphen: 4,
      element: 4
    };
    function sortByProcedure(arr) {
      var procs = arr.map(getProcedure);
      for (var i = 1; i < arr.length; i++) {
        var procNew = procs[i];
        if (procNew < 0)
          continue;
        for (var j = i - 1; j >= 0 && procNew < procs[j]; j--) {
          var token = arr[j + 1];
          arr[j + 1] = arr[j];
          arr[j] = token;
          procs[j + 1] = procs[j];
          procs[j] = procNew;
        }
      }
    }
    exports2.default = sortByProcedure;
    function getProcedure(token) {
      var proc = procedure_1.procedure[token.type];
      if (token.type === css_what_1.SelectorType.Attribute) {
        proc = attributes[token.action];
        if (proc === attributes.equals && token.name === "id") {
          proc = 9;
        }
        if (token.ignoreCase) {
          proc >>= 1;
        }
      } else if (token.type === css_what_1.SelectorType.Pseudo) {
        if (!token.data) {
          proc = 3;
        } else if (token.name === "has" || token.name === "contains") {
          proc = 0;
        } else if (Array.isArray(token.data)) {
          proc = 0;
          for (var i = 0; i < token.data.length; i++) {
            if (token.data[i].length !== 1)
              continue;
            var cur = getProcedure(token.data[i][0]);
            if (cur === 0) {
              proc = 0;
              break;
            }
            if (cur > proc)
              proc = cur;
          }
          if (token.data.length > 1 && proc > 0)
            proc -= 1;
        } else {
          proc = 1;
        }
      }
      return proc;
    }
  }
});

// node_modules/css-select/lib/attributes.js
var require_attributes = __commonJS({
  "node_modules/css-select/lib/attributes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.attributeRules = void 0;
    var boolbase_1 = require_boolbase();
    var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;
    function escapeRegex(value) {
      return value.replace(reChars, "\\$&");
    }
    var caseInsensitiveAttributes = /* @__PURE__ */ new Set([
      "accept",
      "accept-charset",
      "align",
      "alink",
      "axis",
      "bgcolor",
      "charset",
      "checked",
      "clear",
      "codetype",
      "color",
      "compact",
      "declare",
      "defer",
      "dir",
      "direction",
      "disabled",
      "enctype",
      "face",
      "frame",
      "hreflang",
      "http-equiv",
      "lang",
      "language",
      "link",
      "media",
      "method",
      "multiple",
      "nohref",
      "noresize",
      "noshade",
      "nowrap",
      "readonly",
      "rel",
      "rev",
      "rules",
      "scope",
      "scrolling",
      "selected",
      "shape",
      "target",
      "text",
      "type",
      "valign",
      "valuetype",
      "vlink"
    ]);
    function shouldIgnoreCase(selector, options) {
      return typeof selector.ignoreCase === "boolean" ? selector.ignoreCase : selector.ignoreCase === "quirks" ? !!options.quirksMode : !options.xmlMode && caseInsensitiveAttributes.has(selector.name);
    }
    exports2.attributeRules = {
      equals: function(next, data, options) {
        var adapter = options.adapter;
        var name = data.name;
        var value = data.value;
        if (shouldIgnoreCase(data, options)) {
          value = value.toLowerCase();
          return function(elem) {
            var attr = adapter.getAttributeValue(elem, name);
            return attr != null && attr.length === value.length && attr.toLowerCase() === value && next(elem);
          };
        }
        return function(elem) {
          return adapter.getAttributeValue(elem, name) === value && next(elem);
        };
      },
      hyphen: function(next, data, options) {
        var adapter = options.adapter;
        var name = data.name;
        var value = data.value;
        var len = value.length;
        if (shouldIgnoreCase(data, options)) {
          value = value.toLowerCase();
          return function hyphenIC(elem) {
            var attr = adapter.getAttributeValue(elem, name);
            return attr != null && (attr.length === len || attr.charAt(len) === "-") && attr.substr(0, len).toLowerCase() === value && next(elem);
          };
        }
        return function hyphen(elem) {
          var attr = adapter.getAttributeValue(elem, name);
          return attr != null && (attr.length === len || attr.charAt(len) === "-") && attr.substr(0, len) === value && next(elem);
        };
      },
      element: function(next, data, options) {
        var adapter = options.adapter;
        var name = data.name, value = data.value;
        if (/\s/.test(value)) {
          return boolbase_1.falseFunc;
        }
        var regex = new RegExp("(?:^|\\s)".concat(escapeRegex(value), "(?:$|\\s)"), shouldIgnoreCase(data, options) ? "i" : "");
        return function element(elem) {
          var attr = adapter.getAttributeValue(elem, name);
          return attr != null && attr.length >= value.length && regex.test(attr) && next(elem);
        };
      },
      exists: function(next, _a, _b) {
        var name = _a.name;
        var adapter = _b.adapter;
        return function(elem) {
          return adapter.hasAttrib(elem, name) && next(elem);
        };
      },
      start: function(next, data, options) {
        var adapter = options.adapter;
        var name = data.name;
        var value = data.value;
        var len = value.length;
        if (len === 0) {
          return boolbase_1.falseFunc;
        }
        if (shouldIgnoreCase(data, options)) {
          value = value.toLowerCase();
          return function(elem) {
            var attr = adapter.getAttributeValue(elem, name);
            return attr != null && attr.length >= len && attr.substr(0, len).toLowerCase() === value && next(elem);
          };
        }
        return function(elem) {
          var _a;
          return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.startsWith(value)) && next(elem);
        };
      },
      end: function(next, data, options) {
        var adapter = options.adapter;
        var name = data.name;
        var value = data.value;
        var len = -value.length;
        if (len === 0) {
          return boolbase_1.falseFunc;
        }
        if (shouldIgnoreCase(data, options)) {
          value = value.toLowerCase();
          return function(elem) {
            var _a;
            return ((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.substr(len).toLowerCase()) === value && next(elem);
          };
        }
        return function(elem) {
          var _a;
          return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.endsWith(value)) && next(elem);
        };
      },
      any: function(next, data, options) {
        var adapter = options.adapter;
        var name = data.name, value = data.value;
        if (value === "") {
          return boolbase_1.falseFunc;
        }
        if (shouldIgnoreCase(data, options)) {
          var regex_1 = new RegExp(escapeRegex(value), "i");
          return function anyIC(elem) {
            var attr = adapter.getAttributeValue(elem, name);
            return attr != null && attr.length >= value.length && regex_1.test(attr) && next(elem);
          };
        }
        return function(elem) {
          var _a;
          return !!((_a = adapter.getAttributeValue(elem, name)) === null || _a === void 0 ? void 0 : _a.includes(value)) && next(elem);
        };
      },
      not: function(next, data, options) {
        var adapter = options.adapter;
        var name = data.name;
        var value = data.value;
        if (value === "") {
          return function(elem) {
            return !!adapter.getAttributeValue(elem, name) && next(elem);
          };
        } else if (shouldIgnoreCase(data, options)) {
          value = value.toLowerCase();
          return function(elem) {
            var attr = adapter.getAttributeValue(elem, name);
            return (attr == null || attr.length !== value.length || attr.toLowerCase() !== value) && next(elem);
          };
        }
        return function(elem) {
          return adapter.getAttributeValue(elem, name) !== value && next(elem);
        };
      }
    };
  }
});

// node_modules/nth-check/lib/parse.js
var require_parse2 = __commonJS({
  "node_modules/nth-check/lib/parse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parse = void 0;
    var whitespace = /* @__PURE__ */ new Set([9, 10, 12, 13, 32]);
    var ZERO = "0".charCodeAt(0);
    var NINE = "9".charCodeAt(0);
    function parse(formula) {
      formula = formula.trim().toLowerCase();
      if (formula === "even") {
        return [2, 0];
      } else if (formula === "odd") {
        return [2, 1];
      }
      var idx = 0;
      var a = 0;
      var sign = readSign();
      var number = readNumber();
      if (idx < formula.length && formula.charAt(idx) === "n") {
        idx++;
        a = sign * (number !== null && number !== void 0 ? number : 1);
        skipWhitespace();
        if (idx < formula.length) {
          sign = readSign();
          skipWhitespace();
          number = readNumber();
        } else {
          sign = number = 0;
        }
      }
      if (number === null || idx < formula.length) {
        throw new Error("n-th rule couldn't be parsed ('".concat(formula, "')"));
      }
      return [a, sign * number];
      function readSign() {
        if (formula.charAt(idx) === "-") {
          idx++;
          return -1;
        }
        if (formula.charAt(idx) === "+") {
          idx++;
        }
        return 1;
      }
      function readNumber() {
        var start = idx;
        var value = 0;
        while (idx < formula.length && formula.charCodeAt(idx) >= ZERO && formula.charCodeAt(idx) <= NINE) {
          value = value * 10 + (formula.charCodeAt(idx) - ZERO);
          idx++;
        }
        return idx === start ? null : value;
      }
      function skipWhitespace() {
        while (idx < formula.length && whitespace.has(formula.charCodeAt(idx))) {
          idx++;
        }
      }
    }
    exports2.parse = parse;
  }
});

// node_modules/nth-check/lib/compile.js
var require_compile = __commonJS({
  "node_modules/nth-check/lib/compile.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.generate = exports2.compile = void 0;
    var boolbase_1 = __importDefault(require_boolbase());
    function compile(parsed) {
      var a = parsed[0];
      var b = parsed[1] - 1;
      if (b < 0 && a <= 0)
        return boolbase_1.default.falseFunc;
      if (a === -1)
        return function(index) {
          return index <= b;
        };
      if (a === 0)
        return function(index) {
          return index === b;
        };
      if (a === 1)
        return b < 0 ? boolbase_1.default.trueFunc : function(index) {
          return index >= b;
        };
      var absA = Math.abs(a);
      var bMod = (b % absA + absA) % absA;
      return a > 1 ? function(index) {
        return index >= b && index % absA === bMod;
      } : function(index) {
        return index <= b && index % absA === bMod;
      };
    }
    exports2.compile = compile;
    function generate(parsed) {
      var a = parsed[0];
      var b = parsed[1] - 1;
      var n = 0;
      if (a < 0) {
        var aPos_1 = -a;
        var minValue_1 = (b % aPos_1 + aPos_1) % aPos_1;
        return function() {
          var val = minValue_1 + aPos_1 * n++;
          return val > b ? null : val;
        };
      }
      if (a === 0)
        return b < 0 ? (
          // There are no result — always return `null`
          function() {
            return null;
          }
        ) : (
          // Return `b` exactly once
          function() {
            return n++ === 0 ? b : null;
          }
        );
      if (b < 0) {
        b += a * Math.ceil(-b / a);
      }
      return function() {
        return a * n++ + b;
      };
    }
    exports2.generate = generate;
  }
});

// node_modules/nth-check/lib/index.js
var require_lib6 = __commonJS({
  "node_modules/nth-check/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sequence = exports2.generate = exports2.compile = exports2.parse = void 0;
    var parse_js_1 = require_parse2();
    Object.defineProperty(exports2, "parse", { enumerable: true, get: function() {
      return parse_js_1.parse;
    } });
    var compile_js_1 = require_compile();
    Object.defineProperty(exports2, "compile", { enumerable: true, get: function() {
      return compile_js_1.compile;
    } });
    Object.defineProperty(exports2, "generate", { enumerable: true, get: function() {
      return compile_js_1.generate;
    } });
    function nthCheck(formula) {
      return (0, compile_js_1.compile)((0, parse_js_1.parse)(formula));
    }
    exports2.default = nthCheck;
    function sequence(formula) {
      return (0, compile_js_1.generate)((0, parse_js_1.parse)(formula));
    }
    exports2.sequence = sequence;
  }
});

// node_modules/css-select/lib/pseudo-selectors/filters.js
var require_filters = __commonJS({
  "node_modules/css-select/lib/pseudo-selectors/filters.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.filters = void 0;
    var nth_check_1 = __importDefault(require_lib6());
    var boolbase_1 = require_boolbase();
    function getChildFunc(next, adapter) {
      return function(elem) {
        var parent = adapter.getParent(elem);
        return parent != null && adapter.isTag(parent) && next(elem);
      };
    }
    exports2.filters = {
      contains: function(next, text, _a) {
        var adapter = _a.adapter;
        return function contains(elem) {
          return next(elem) && adapter.getText(elem).includes(text);
        };
      },
      icontains: function(next, text, _a) {
        var adapter = _a.adapter;
        var itext = text.toLowerCase();
        return function icontains(elem) {
          return next(elem) && adapter.getText(elem).toLowerCase().includes(itext);
        };
      },
      // Location specific methods
      "nth-child": function(next, rule, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var func = (0, nth_check_1.default)(rule);
        if (func === boolbase_1.falseFunc)
          return boolbase_1.falseFunc;
        if (func === boolbase_1.trueFunc)
          return getChildFunc(next, adapter);
        return function nthChild(elem) {
          var siblings = adapter.getSiblings(elem);
          var pos = 0;
          for (var i = 0; i < siblings.length; i++) {
            if (equals(elem, siblings[i]))
              break;
            if (adapter.isTag(siblings[i])) {
              pos++;
            }
          }
          return func(pos) && next(elem);
        };
      },
      "nth-last-child": function(next, rule, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var func = (0, nth_check_1.default)(rule);
        if (func === boolbase_1.falseFunc)
          return boolbase_1.falseFunc;
        if (func === boolbase_1.trueFunc)
          return getChildFunc(next, adapter);
        return function nthLastChild(elem) {
          var siblings = adapter.getSiblings(elem);
          var pos = 0;
          for (var i = siblings.length - 1; i >= 0; i--) {
            if (equals(elem, siblings[i]))
              break;
            if (adapter.isTag(siblings[i])) {
              pos++;
            }
          }
          return func(pos) && next(elem);
        };
      },
      "nth-of-type": function(next, rule, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var func = (0, nth_check_1.default)(rule);
        if (func === boolbase_1.falseFunc)
          return boolbase_1.falseFunc;
        if (func === boolbase_1.trueFunc)
          return getChildFunc(next, adapter);
        return function nthOfType(elem) {
          var siblings = adapter.getSiblings(elem);
          var pos = 0;
          for (var i = 0; i < siblings.length; i++) {
            var currentSibling = siblings[i];
            if (equals(elem, currentSibling))
              break;
            if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === adapter.getName(elem)) {
              pos++;
            }
          }
          return func(pos) && next(elem);
        };
      },
      "nth-last-of-type": function(next, rule, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var func = (0, nth_check_1.default)(rule);
        if (func === boolbase_1.falseFunc)
          return boolbase_1.falseFunc;
        if (func === boolbase_1.trueFunc)
          return getChildFunc(next, adapter);
        return function nthLastOfType(elem) {
          var siblings = adapter.getSiblings(elem);
          var pos = 0;
          for (var i = siblings.length - 1; i >= 0; i--) {
            var currentSibling = siblings[i];
            if (equals(elem, currentSibling))
              break;
            if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === adapter.getName(elem)) {
              pos++;
            }
          }
          return func(pos) && next(elem);
        };
      },
      // TODO determine the actual root element
      root: function(next, _rule, _a) {
        var adapter = _a.adapter;
        return function(elem) {
          var parent = adapter.getParent(elem);
          return (parent == null || !adapter.isTag(parent)) && next(elem);
        };
      },
      scope: function(next, rule, options, context) {
        var equals = options.equals;
        if (!context || context.length === 0) {
          return exports2.filters.root(next, rule, options);
        }
        if (context.length === 1) {
          return function(elem) {
            return equals(context[0], elem) && next(elem);
          };
        }
        return function(elem) {
          return context.includes(elem) && next(elem);
        };
      },
      hover: dynamicStatePseudo("isHovered"),
      visited: dynamicStatePseudo("isVisited"),
      active: dynamicStatePseudo("isActive")
    };
    function dynamicStatePseudo(name) {
      return function dynamicPseudo(next, _rule, _a) {
        var adapter = _a.adapter;
        var func = adapter[name];
        if (typeof func !== "function") {
          return boolbase_1.falseFunc;
        }
        return function active(elem) {
          return func(elem) && next(elem);
        };
      };
    }
  }
});

// node_modules/css-select/lib/pseudo-selectors/pseudos.js
var require_pseudos = __commonJS({
  "node_modules/css-select/lib/pseudo-selectors/pseudos.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.verifyPseudoArgs = exports2.pseudos = void 0;
    exports2.pseudos = {
      empty: function(elem, _a) {
        var adapter = _a.adapter;
        return !adapter.getChildren(elem).some(function(elem2) {
          return adapter.isTag(elem2) || adapter.getText(elem2) !== "";
        });
      },
      "first-child": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var firstChild = adapter.getSiblings(elem).find(function(elem2) {
          return adapter.isTag(elem2);
        });
        return firstChild != null && equals(elem, firstChild);
      },
      "last-child": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var siblings = adapter.getSiblings(elem);
        for (var i = siblings.length - 1; i >= 0; i--) {
          if (equals(elem, siblings[i]))
            return true;
          if (adapter.isTag(siblings[i]))
            break;
        }
        return false;
      },
      "first-of-type": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var siblings = adapter.getSiblings(elem);
        var elemName = adapter.getName(elem);
        for (var i = 0; i < siblings.length; i++) {
          var currentSibling = siblings[i];
          if (equals(elem, currentSibling))
            return true;
          if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === elemName) {
            break;
          }
        }
        return false;
      },
      "last-of-type": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var siblings = adapter.getSiblings(elem);
        var elemName = adapter.getName(elem);
        for (var i = siblings.length - 1; i >= 0; i--) {
          var currentSibling = siblings[i];
          if (equals(elem, currentSibling))
            return true;
          if (adapter.isTag(currentSibling) && adapter.getName(currentSibling) === elemName) {
            break;
          }
        }
        return false;
      },
      "only-of-type": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        var elemName = adapter.getName(elem);
        return adapter.getSiblings(elem).every(function(sibling) {
          return equals(elem, sibling) || !adapter.isTag(sibling) || adapter.getName(sibling) !== elemName;
        });
      },
      "only-child": function(elem, _a) {
        var adapter = _a.adapter, equals = _a.equals;
        return adapter.getSiblings(elem).every(function(sibling) {
          return equals(elem, sibling) || !adapter.isTag(sibling);
        });
      }
    };
    function verifyPseudoArgs(func, name, subselect) {
      if (subselect === null) {
        if (func.length > 2) {
          throw new Error("pseudo-selector :".concat(name, " requires an argument"));
        }
      } else if (func.length === 2) {
        throw new Error("pseudo-selector :".concat(name, " doesn't have any arguments"));
      }
    }
    exports2.verifyPseudoArgs = verifyPseudoArgs;
  }
});

// node_modules/css-select/lib/pseudo-selectors/aliases.js
var require_aliases = __commonJS({
  "node_modules/css-select/lib/pseudo-selectors/aliases.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.aliases = void 0;
    exports2.aliases = {
      // Links
      "any-link": ":is(a, area, link)[href]",
      link: ":any-link:not(:visited)",
      // Forms
      // https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements
      disabled: ":is(\n        :is(button, input, select, textarea, optgroup, option)[disabled],\n        optgroup[disabled] > option,\n        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)\n    )",
      enabled: ":not(:disabled)",
      checked: ":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",
      required: ":is(input, select, textarea)[required]",
      optional: ":is(input, select, textarea):not([required])",
      // JQuery extensions
      // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-selectedness
      selected: "option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",
      checkbox: "[type=checkbox]",
      file: "[type=file]",
      password: "[type=password]",
      radio: "[type=radio]",
      reset: "[type=reset]",
      image: "[type=image]",
      submit: "[type=submit]",
      parent: ":not(:empty)",
      header: ":is(h1, h2, h3, h4, h5, h6)",
      button: ":is(button, input[type=button])",
      input: ":is(input, textarea, select, button)",
      text: "input:is(:not([type!='']), [type=text])"
    };
  }
});

// node_modules/css-select/lib/pseudo-selectors/subselects.js
var require_subselects = __commonJS({
  "node_modules/css-select/lib/pseudo-selectors/subselects.js"(exports2) {
    "use strict";
    var __spreadArray = exports2 && exports2.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.subselects = exports2.getNextSiblings = exports2.ensureIsTag = exports2.PLACEHOLDER_ELEMENT = void 0;
    var boolbase_1 = require_boolbase();
    var procedure_1 = require_procedure();
    exports2.PLACEHOLDER_ELEMENT = {};
    function ensureIsTag(next, adapter) {
      if (next === boolbase_1.falseFunc)
        return boolbase_1.falseFunc;
      return function(elem) {
        return adapter.isTag(elem) && next(elem);
      };
    }
    exports2.ensureIsTag = ensureIsTag;
    function getNextSiblings(elem, adapter) {
      var siblings = adapter.getSiblings(elem);
      if (siblings.length <= 1)
        return [];
      var elemIndex = siblings.indexOf(elem);
      if (elemIndex < 0 || elemIndex === siblings.length - 1)
        return [];
      return siblings.slice(elemIndex + 1).filter(adapter.isTag);
    }
    exports2.getNextSiblings = getNextSiblings;
    var is = function(next, token, options, context, compileToken) {
      var opts = {
        xmlMode: !!options.xmlMode,
        adapter: options.adapter,
        equals: options.equals
      };
      var func = compileToken(token, opts, context);
      return function(elem) {
        return func(elem) && next(elem);
      };
    };
    exports2.subselects = {
      is,
      /**
       * `:matches` and `:where` are aliases for `:is`.
       */
      matches: is,
      where: is,
      not: function(next, token, options, context, compileToken) {
        var opts = {
          xmlMode: !!options.xmlMode,
          adapter: options.adapter,
          equals: options.equals
        };
        var func = compileToken(token, opts, context);
        if (func === boolbase_1.falseFunc)
          return next;
        if (func === boolbase_1.trueFunc)
          return boolbase_1.falseFunc;
        return function not(elem) {
          return !func(elem) && next(elem);
        };
      },
      has: function(next, subselect, options, _context, compileToken) {
        var adapter = options.adapter;
        var opts = {
          xmlMode: !!options.xmlMode,
          adapter,
          equals: options.equals
        };
        var context = subselect.some(function(s) {
          return s.some(procedure_1.isTraversal);
        }) ? [exports2.PLACEHOLDER_ELEMENT] : void 0;
        var compiled = compileToken(subselect, opts, context);
        if (compiled === boolbase_1.falseFunc)
          return boolbase_1.falseFunc;
        if (compiled === boolbase_1.trueFunc) {
          return function(elem) {
            return adapter.getChildren(elem).some(adapter.isTag) && next(elem);
          };
        }
        var hasElement = ensureIsTag(compiled, adapter);
        var _a = compiled.shouldTestNextSiblings, shouldTestNextSiblings = _a === void 0 ? false : _a;
        if (context) {
          return function(elem) {
            context[0] = elem;
            var childs = adapter.getChildren(elem);
            var nextElements = shouldTestNextSiblings ? __spreadArray(__spreadArray([], childs, true), getNextSiblings(elem, adapter), true) : childs;
            return next(elem) && adapter.existsOne(hasElement, nextElements);
          };
        }
        return function(elem) {
          return next(elem) && adapter.existsOne(hasElement, adapter.getChildren(elem));
        };
      }
    };
  }
});

// node_modules/css-select/lib/pseudo-selectors/index.js
var require_pseudo_selectors = __commonJS({
  "node_modules/css-select/lib/pseudo-selectors/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.compilePseudoSelector = exports2.aliases = exports2.pseudos = exports2.filters = void 0;
    var boolbase_1 = require_boolbase();
    var css_what_1 = require_commonjs();
    var filters_1 = require_filters();
    Object.defineProperty(exports2, "filters", { enumerable: true, get: function() {
      return filters_1.filters;
    } });
    var pseudos_1 = require_pseudos();
    Object.defineProperty(exports2, "pseudos", { enumerable: true, get: function() {
      return pseudos_1.pseudos;
    } });
    var aliases_1 = require_aliases();
    Object.defineProperty(exports2, "aliases", { enumerable: true, get: function() {
      return aliases_1.aliases;
    } });
    var subselects_1 = require_subselects();
    function compilePseudoSelector(next, selector, options, context, compileToken) {
      var name = selector.name, data = selector.data;
      if (Array.isArray(data)) {
        return subselects_1.subselects[name](next, data, options, context, compileToken);
      }
      if (name in aliases_1.aliases) {
        if (data != null) {
          throw new Error("Pseudo ".concat(name, " doesn't have any arguments"));
        }
        var alias = (0, css_what_1.parse)(aliases_1.aliases[name]);
        return subselects_1.subselects.is(next, alias, options, context, compileToken);
      }
      if (name in filters_1.filters) {
        return filters_1.filters[name](next, data, options, context);
      }
      if (name in pseudos_1.pseudos) {
        var pseudo_1 = pseudos_1.pseudos[name];
        (0, pseudos_1.verifyPseudoArgs)(pseudo_1, name, data);
        return pseudo_1 === boolbase_1.falseFunc ? boolbase_1.falseFunc : next === boolbase_1.trueFunc ? function(elem) {
          return pseudo_1(elem, options, data);
        } : function(elem) {
          return pseudo_1(elem, options, data) && next(elem);
        };
      }
      throw new Error("unmatched pseudo-class :".concat(name));
    }
    exports2.compilePseudoSelector = compilePseudoSelector;
  }
});

// node_modules/css-select/lib/general.js
var require_general = __commonJS({
  "node_modules/css-select/lib/general.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.compileGeneralSelector = void 0;
    var attributes_1 = require_attributes();
    var pseudo_selectors_1 = require_pseudo_selectors();
    var css_what_1 = require_commonjs();
    function compileGeneralSelector(next, selector, options, context, compileToken) {
      var adapter = options.adapter, equals = options.equals;
      switch (selector.type) {
        case css_what_1.SelectorType.PseudoElement: {
          throw new Error("Pseudo-elements are not supported by css-select");
        }
        case css_what_1.SelectorType.ColumnCombinator: {
          throw new Error("Column combinators are not yet supported by css-select");
        }
        case css_what_1.SelectorType.Attribute: {
          if (selector.namespace != null) {
            throw new Error("Namespaced attributes are not yet supported by css-select");
          }
          if (!options.xmlMode || options.lowerCaseAttributeNames) {
            selector.name = selector.name.toLowerCase();
          }
          return attributes_1.attributeRules[selector.action](next, selector, options);
        }
        case css_what_1.SelectorType.Pseudo: {
          return (0, pseudo_selectors_1.compilePseudoSelector)(next, selector, options, context, compileToken);
        }
        case css_what_1.SelectorType.Tag: {
          if (selector.namespace != null) {
            throw new Error("Namespaced tag names are not yet supported by css-select");
          }
          var name_1 = selector.name;
          if (!options.xmlMode || options.lowerCaseTags) {
            name_1 = name_1.toLowerCase();
          }
          return function tag(elem) {
            return adapter.getName(elem) === name_1 && next(elem);
          };
        }
        case css_what_1.SelectorType.Descendant: {
          if (options.cacheResults === false || typeof WeakSet === "undefined") {
            return function descendant(elem) {
              var current = elem;
              while (current = adapter.getParent(current)) {
                if (adapter.isTag(current) && next(current)) {
                  return true;
                }
              }
              return false;
            };
          }
          var isFalseCache_1 = /* @__PURE__ */ new WeakSet();
          return function cachedDescendant(elem) {
            var current = elem;
            while (current = adapter.getParent(current)) {
              if (!isFalseCache_1.has(current)) {
                if (adapter.isTag(current) && next(current)) {
                  return true;
                }
                isFalseCache_1.add(current);
              }
            }
            return false;
          };
        }
        case "_flexibleDescendant": {
          return function flexibleDescendant(elem) {
            var current = elem;
            do {
              if (adapter.isTag(current) && next(current))
                return true;
            } while (current = adapter.getParent(current));
            return false;
          };
        }
        case css_what_1.SelectorType.Parent: {
          return function parent(elem) {
            return adapter.getChildren(elem).some(function(elem2) {
              return adapter.isTag(elem2) && next(elem2);
            });
          };
        }
        case css_what_1.SelectorType.Child: {
          return function child(elem) {
            var parent = adapter.getParent(elem);
            return parent != null && adapter.isTag(parent) && next(parent);
          };
        }
        case css_what_1.SelectorType.Sibling: {
          return function sibling(elem) {
            var siblings = adapter.getSiblings(elem);
            for (var i = 0; i < siblings.length; i++) {
              var currentSibling = siblings[i];
              if (equals(elem, currentSibling))
                break;
              if (adapter.isTag(currentSibling) && next(currentSibling)) {
                return true;
              }
            }
            return false;
          };
        }
        case css_what_1.SelectorType.Adjacent: {
          if (adapter.prevElementSibling) {
            return function adjacent(elem) {
              var previous = adapter.prevElementSibling(elem);
              return previous != null && next(previous);
            };
          }
          return function adjacent(elem) {
            var siblings = adapter.getSiblings(elem);
            var lastElement;
            for (var i = 0; i < siblings.length; i++) {
              var currentSibling = siblings[i];
              if (equals(elem, currentSibling))
                break;
              if (adapter.isTag(currentSibling)) {
                lastElement = currentSibling;
              }
            }
            return !!lastElement && next(lastElement);
          };
        }
        case css_what_1.SelectorType.Universal: {
          if (selector.namespace != null && selector.namespace !== "*") {
            throw new Error("Namespaced universal selectors are not yet supported by css-select");
          }
          return next;
        }
      }
    }
    exports2.compileGeneralSelector = compileGeneralSelector;
  }
});

// node_modules/css-select/lib/compile.js
var require_compile2 = __commonJS({
  "node_modules/css-select/lib/compile.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.compileToken = exports2.compileUnsafe = exports2.compile = void 0;
    var css_what_1 = require_commonjs();
    var boolbase_1 = require_boolbase();
    var sort_1 = __importDefault(require_sort());
    var procedure_1 = require_procedure();
    var general_1 = require_general();
    var subselects_1 = require_subselects();
    function compile(selector, options, context) {
      var next = compileUnsafe(selector, options, context);
      return (0, subselects_1.ensureIsTag)(next, options.adapter);
    }
    exports2.compile = compile;
    function compileUnsafe(selector, options, context) {
      var token = typeof selector === "string" ? (0, css_what_1.parse)(selector) : selector;
      return compileToken(token, options, context);
    }
    exports2.compileUnsafe = compileUnsafe;
    function includesScopePseudo(t) {
      return t.type === "pseudo" && (t.name === "scope" || Array.isArray(t.data) && t.data.some(function(data) {
        return data.some(includesScopePseudo);
      }));
    }
    var DESCENDANT_TOKEN = { type: css_what_1.SelectorType.Descendant };
    var FLEXIBLE_DESCENDANT_TOKEN = {
      type: "_flexibleDescendant"
    };
    var SCOPE_TOKEN = {
      type: css_what_1.SelectorType.Pseudo,
      name: "scope",
      data: null
    };
    function absolutize(token, _a, context) {
      var adapter = _a.adapter;
      var hasContext = !!(context === null || context === void 0 ? void 0 : context.every(function(e) {
        var parent = adapter.isTag(e) && adapter.getParent(e);
        return e === subselects_1.PLACEHOLDER_ELEMENT || parent && adapter.isTag(parent);
      }));
      for (var _i = 0, token_1 = token; _i < token_1.length; _i++) {
        var t = token_1[_i];
        if (t.length > 0 && (0, procedure_1.isTraversal)(t[0]) && t[0].type !== "descendant") {
        } else if (hasContext && !t.some(includesScopePseudo)) {
          t.unshift(DESCENDANT_TOKEN);
        } else {
          continue;
        }
        t.unshift(SCOPE_TOKEN);
      }
    }
    function compileToken(token, options, context) {
      var _a;
      token = token.filter(function(t) {
        return t.length > 0;
      });
      token.forEach(sort_1.default);
      context = (_a = options.context) !== null && _a !== void 0 ? _a : context;
      var isArrayContext = Array.isArray(context);
      var finalContext = context && (Array.isArray(context) ? context : [context]);
      absolutize(token, options, finalContext);
      var shouldTestNextSiblings = false;
      var query = token.map(function(rules) {
        if (rules.length >= 2) {
          var first = rules[0], second = rules[1];
          if (first.type !== "pseudo" || first.name !== "scope") {
          } else if (isArrayContext && second.type === "descendant") {
            rules[1] = FLEXIBLE_DESCENDANT_TOKEN;
          } else if (second.type === "adjacent" || second.type === "sibling") {
            shouldTestNextSiblings = true;
          }
        }
        return compileRules(rules, options, finalContext);
      }).reduce(reduceRules, boolbase_1.falseFunc);
      query.shouldTestNextSiblings = shouldTestNextSiblings;
      return query;
    }
    exports2.compileToken = compileToken;
    function compileRules(rules, options, context) {
      var _a;
      return rules.reduce(function(previous, rule) {
        return previous === boolbase_1.falseFunc ? boolbase_1.falseFunc : (0, general_1.compileGeneralSelector)(previous, rule, options, context, compileToken);
      }, (_a = options.rootFunc) !== null && _a !== void 0 ? _a : boolbase_1.trueFunc);
    }
    function reduceRules(a, b) {
      if (b === boolbase_1.falseFunc || a === boolbase_1.trueFunc) {
        return a;
      }
      if (a === boolbase_1.falseFunc || b === boolbase_1.trueFunc) {
        return b;
      }
      return function combine(elem) {
        return a(elem) || b(elem);
      };
    }
  }
});

// node_modules/css-select/lib/index.js
var require_lib7 = __commonJS({
  "node_modules/css-select/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.aliases = exports2.pseudos = exports2.filters = exports2.is = exports2.selectOne = exports2.selectAll = exports2.prepareContext = exports2._compileToken = exports2._compileUnsafe = exports2.compile = void 0;
    var DomUtils = __importStar(require_lib5());
    var boolbase_1 = require_boolbase();
    var compile_1 = require_compile2();
    var subselects_1 = require_subselects();
    var defaultEquals = function(a, b) {
      return a === b;
    };
    var defaultOptions = {
      adapter: DomUtils,
      equals: defaultEquals
    };
    function convertOptionFormats(options) {
      var _a, _b, _c, _d;
      var opts = options !== null && options !== void 0 ? options : defaultOptions;
      (_a = opts.adapter) !== null && _a !== void 0 ? _a : opts.adapter = DomUtils;
      (_b = opts.equals) !== null && _b !== void 0 ? _b : opts.equals = (_d = (_c = opts.adapter) === null || _c === void 0 ? void 0 : _c.equals) !== null && _d !== void 0 ? _d : defaultEquals;
      return opts;
    }
    function wrapCompile(func) {
      return function addAdapter(selector, options, context) {
        var opts = convertOptionFormats(options);
        return func(selector, opts, context);
      };
    }
    exports2.compile = wrapCompile(compile_1.compile);
    exports2._compileUnsafe = wrapCompile(compile_1.compileUnsafe);
    exports2._compileToken = wrapCompile(compile_1.compileToken);
    function getSelectorFunc(searchFunc) {
      return function select(query, elements, options) {
        var opts = convertOptionFormats(options);
        if (typeof query !== "function") {
          query = (0, compile_1.compileUnsafe)(query, opts, elements);
        }
        var filteredElements = prepareContext(elements, opts.adapter, query.shouldTestNextSiblings);
        return searchFunc(query, filteredElements, opts);
      };
    }
    function prepareContext(elems, adapter, shouldTestNextSiblings) {
      if (shouldTestNextSiblings === void 0) {
        shouldTestNextSiblings = false;
      }
      if (shouldTestNextSiblings) {
        elems = appendNextSiblings(elems, adapter);
      }
      return Array.isArray(elems) ? adapter.removeSubsets(elems) : adapter.getChildren(elems);
    }
    exports2.prepareContext = prepareContext;
    function appendNextSiblings(elem, adapter) {
      var elems = Array.isArray(elem) ? elem.slice(0) : [elem];
      var elemsLength = elems.length;
      for (var i = 0; i < elemsLength; i++) {
        var nextSiblings = (0, subselects_1.getNextSiblings)(elems[i], adapter);
        elems.push.apply(elems, nextSiblings);
      }
      return elems;
    }
    exports2.selectAll = getSelectorFunc(function(query, elems, options) {
      return query === boolbase_1.falseFunc || !elems || elems.length === 0 ? [] : options.adapter.findAll(query, elems);
    });
    exports2.selectOne = getSelectorFunc(function(query, elems, options) {
      return query === boolbase_1.falseFunc || !elems || elems.length === 0 ? null : options.adapter.findOne(query, elems);
    });
    function is(elem, query, options) {
      var opts = convertOptionFormats(options);
      return (typeof query === "function" ? query : (0, compile_1.compile)(query, opts))(elem);
    }
    exports2.is = is;
    exports2.default = exports2.selectAll;
    var pseudo_selectors_1 = require_pseudo_selectors();
    Object.defineProperty(exports2, "filters", { enumerable: true, get: function() {
      return pseudo_selectors_1.filters;
    } });
    Object.defineProperty(exports2, "pseudos", { enumerable: true, get: function() {
      return pseudo_selectors_1.pseudos;
    } });
    Object.defineProperty(exports2, "aliases", { enumerable: true, get: function() {
      return pseudo_selectors_1.aliases;
    } });
  }
});

// node_modules/svgo/lib/svgo/css-select-adapter.js
var require_css_select_adapter = __commonJS({
  "node_modules/svgo/lib/svgo/css-select-adapter.js"(exports2, module2) {
    "use strict";
    var isTag = (node) => {
      return node.type === "element";
    };
    var existsOne = (test, elems) => {
      return elems.some((elem) => {
        if (isTag(elem)) {
          return test(elem) || existsOne(test, getChildren(elem));
        } else {
          return false;
        }
      });
    };
    var getAttributeValue = (elem, name) => {
      return elem.attributes[name];
    };
    var getChildren = (node) => {
      return node.children || [];
    };
    var getName = (elemAst) => {
      return elemAst.name;
    };
    var getParent = (node) => {
      return node.parentNode || null;
    };
    var getSiblings = (elem) => {
      var parent = getParent(elem);
      return parent ? getChildren(parent) : [];
    };
    var getText = (node) => {
      if (node.children[0].type === "text" && node.children[0].type === "cdata") {
        return node.children[0].value;
      }
      return "";
    };
    var hasAttrib = (elem, name) => {
      return elem.attributes[name] !== void 0;
    };
    var removeSubsets = (nodes) => {
      let idx = nodes.length;
      let node;
      let ancestor;
      let replace;
      while (--idx > -1) {
        node = ancestor = nodes[idx];
        nodes[idx] = null;
        replace = true;
        while (ancestor) {
          if (nodes.includes(ancestor)) {
            replace = false;
            nodes.splice(idx, 1);
            break;
          }
          ancestor = getParent(ancestor);
        }
        if (replace) {
          nodes[idx] = node;
        }
      }
      return nodes;
    };
    var findAll = (test, elems) => {
      const result = [];
      for (const elem of elems) {
        if (isTag(elem)) {
          if (test(elem)) {
            result.push(elem);
          }
          result.push(...findAll(test, getChildren(elem)));
        }
      }
      return result;
    };
    var findOne = (test, elems) => {
      for (const elem of elems) {
        if (isTag(elem)) {
          if (test(elem)) {
            return elem;
          }
          const result = findOne(test, getChildren(elem));
          if (result) {
            return result;
          }
        }
      }
      return null;
    };
    var svgoCssSelectAdapter = {
      isTag,
      existsOne,
      getAttributeValue,
      getChildren,
      getName,
      getParent,
      getSiblings,
      getText,
      hasAttrib,
      removeSubsets,
      findAll,
      findOne
    };
    module2.exports = svgoCssSelectAdapter;
  }
});

// node_modules/svgo/lib/xast.js
var require_xast = __commonJS({
  "node_modules/svgo/lib/xast.js"(exports2) {
    "use strict";
    var { selectAll, selectOne, is } = require_lib7();
    var xastAdaptor = require_css_select_adapter();
    var cssSelectOptions = {
      xmlMode: true,
      adapter: xastAdaptor
    };
    var querySelectorAll = (node, selector) => {
      return selectAll(selector, node, cssSelectOptions);
    };
    exports2.querySelectorAll = querySelectorAll;
    var querySelector = (node, selector) => {
      return selectOne(selector, node, cssSelectOptions);
    };
    exports2.querySelector = querySelector;
    var matches = (node, selector) => {
      return is(node, selector, cssSelectOptions);
    };
    exports2.matches = matches;
    var closestByName = (node, name) => {
      let currentNode = node;
      while (currentNode) {
        if (currentNode.type === "element" && currentNode.name === name) {
          return currentNode;
        }
        currentNode = currentNode.parentNode;
      }
      return null;
    };
    exports2.closestByName = closestByName;
    var visitSkip = Symbol();
    exports2.visitSkip = visitSkip;
    var visit = (node, visitor, parentNode) => {
      const callbacks = visitor[node.type];
      if (callbacks && callbacks.enter) {
        const symbol = callbacks.enter(node, parentNode);
        if (symbol === visitSkip) {
          return;
        }
      }
      if (node.type === "root") {
        for (const child of node.children) {
          visit(child, visitor, node);
        }
      }
      if (node.type === "element") {
        if (parentNode.children.includes(node)) {
          for (const child of node.children) {
            visit(child, visitor, node);
          }
        }
      }
      if (callbacks && callbacks.exit) {
        callbacks.exit(node, parentNode);
      }
    };
    exports2.visit = visit;
    var detachNodeFromParent = (node, parentNode) => {
      parentNode.children = parentNode.children.filter((child) => child !== node);
    };
    exports2.detachNodeFromParent = detachNodeFromParent;
  }
});

// node_modules/svgo/lib/svgo/plugins.js
var require_plugins = __commonJS({
  "node_modules/svgo/lib/svgo/plugins.js"(exports2) {
    "use strict";
    var { visit } = require_xast();
    var invokePlugins = (ast, info, plugins, overrides, globalOverrides) => {
      for (const plugin of plugins) {
        const override = overrides == null ? null : overrides[plugin.name];
        if (override === false) {
          continue;
        }
        const params = { ...plugin.params, ...globalOverrides, ...override };
        if (plugin.type === "perItem") {
          ast = perItem(ast, info, plugin, params);
        }
        if (plugin.type === "perItemReverse") {
          ast = perItem(ast, info, plugin, params, true);
        }
        if (plugin.type === "full") {
          if (plugin.active) {
            ast = plugin.fn(ast, params, info);
          }
        }
        if (plugin.type === "visitor") {
          if (plugin.active) {
            const visitor = plugin.fn(ast, params, info);
            if (visitor != null) {
              visit(ast, visitor);
            }
          }
        }
      }
      return ast;
    };
    exports2.invokePlugins = invokePlugins;
    function perItem(data, info, plugin, params, reverse) {
      function monkeys(items) {
        items.children = items.children.filter(function(item) {
          if (reverse && item.children) {
            monkeys(item);
          }
          let kept = true;
          if (plugin.active) {
            kept = plugin.fn(item, params, info) !== false;
          }
          if (!reverse && item.children) {
            monkeys(item);
          }
          return kept;
        });
        return items;
      }
      return monkeys(data);
    }
    var createPreset = ({ name, plugins }) => {
      return {
        name,
        type: "full",
        fn: (ast, params, info) => {
          const { floatPrecision, overrides } = params;
          const globalOverrides = {};
          if (floatPrecision != null) {
            globalOverrides.floatPrecision = floatPrecision;
          }
          if (overrides) {
            for (const [pluginName, override] of Object.entries(overrides)) {
              if (override === true) {
                console.warn(
                  `You are trying to enable ${pluginName} which is not part of preset.
Try to put it before or after preset, for example

plugins: [
  {
    name: 'preset-default',
  },
  'cleanupListOfValues'
]
`
                );
              }
            }
          }
          return invokePlugins(ast, info, plugins, overrides, globalOverrides);
        }
      };
    };
    exports2.createPreset = createPreset;
  }
});

// node_modules/svgo/plugins/removeDoctype.js
var require_removeDoctype = __commonJS({
  "node_modules/svgo/plugins/removeDoctype.js"(exports2) {
    "use strict";
    var { detachNodeFromParent } = require_xast();
    exports2.name = "removeDoctype";
    exports2.type = "visitor";
    exports2.active = true;
    exports2.description = "removes doctype declaration";
    exports2.fn = () => {
      return {
        doctype: {
          enter: (node, parentNode) => {
            detachNodeFromParent(node, parentNode);
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeXMLProcInst.js
var require_removeXMLProcInst = __commonJS({
  "node_modules/svgo/plugins/removeXMLProcInst.js"(exports2) {
    "use strict";
    var { detachNodeFromParent } = require_xast();
    exports2.name = "removeXMLProcInst";
    exports2.type = "visitor";
    exports2.active = true;
    exports2.description = "removes XML processing instructions";
    exports2.fn = () => {
      return {
        instruction: {
          enter: (node, parentNode) => {
            if (node.name === "xml") {
              detachNodeFromParent(node, parentNode);
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeComments.js
var require_removeComments = __commonJS({
  "node_modules/svgo/plugins/removeComments.js"(exports2) {
    "use strict";
    var { detachNodeFromParent } = require_xast();
    exports2.name = "removeComments";
    exports2.type = "visitor";
    exports2.active = true;
    exports2.description = "removes comments";
    exports2.fn = () => {
      return {
        comment: {
          enter: (node, parentNode) => {
            if (node.value.charAt(0) !== "!") {
              detachNodeFromParent(node, parentNode);
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeMetadata.js
var require_removeMetadata = __commonJS({
  "node_modules/svgo/plugins/removeMetadata.js"(exports2) {
    "use strict";
    var { detachNodeFromParent } = require_xast();
    exports2.name = "removeMetadata";
    exports2.type = "visitor";
    exports2.active = true;
    exports2.description = "removes <metadata>";
    exports2.fn = () => {
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name === "metadata") {
              detachNodeFromParent(node, parentNode);
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/_collections.js
var require_collections = __commonJS({
  "node_modules/svgo/plugins/_collections.js"(exports2) {
    "use strict";
    exports2.elemsGroups = {
      animation: [
        "animate",
        "animateColor",
        "animateMotion",
        "animateTransform",
        "set"
      ],
      descriptive: ["desc", "metadata", "title"],
      shape: ["circle", "ellipse", "line", "path", "polygon", "polyline", "rect"],
      structural: ["defs", "g", "svg", "symbol", "use"],
      paintServer: [
        "solidColor",
        "linearGradient",
        "radialGradient",
        "meshGradient",
        "pattern",
        "hatch"
      ],
      nonRendering: [
        "linearGradient",
        "radialGradient",
        "pattern",
        "clipPath",
        "mask",
        "marker",
        "symbol",
        "filter",
        "solidColor"
      ],
      container: [
        "a",
        "defs",
        "g",
        "marker",
        "mask",
        "missing-glyph",
        "pattern",
        "svg",
        "switch",
        "symbol",
        "foreignObject"
      ],
      textContent: [
        "altGlyph",
        "altGlyphDef",
        "altGlyphItem",
        "glyph",
        "glyphRef",
        "textPath",
        "text",
        "tref",
        "tspan"
      ],
      textContentChild: ["altGlyph", "textPath", "tref", "tspan"],
      lightSource: [
        "feDiffuseLighting",
        "feSpecularLighting",
        "feDistantLight",
        "fePointLight",
        "feSpotLight"
      ],
      filterPrimitive: [
        "feBlend",
        "feColorMatrix",
        "feComponentTransfer",
        "feComposite",
        "feConvolveMatrix",
        "feDiffuseLighting",
        "feDisplacementMap",
        "feDropShadow",
        "feFlood",
        "feFuncA",
        "feFuncB",
        "feFuncG",
        "feFuncR",
        "feGaussianBlur",
        "feImage",
        "feMerge",
        "feMergeNode",
        "feMorphology",
        "feOffset",
        "feSpecularLighting",
        "feTile",
        "feTurbulence"
      ]
    };
    exports2.textElems = exports2.elemsGroups.textContent.concat("title");
    exports2.pathElems = ["path", "glyph", "missing-glyph"];
    exports2.attrsGroups = {
      animationAddition: ["additive", "accumulate"],
      animationAttributeTarget: ["attributeType", "attributeName"],
      animationEvent: ["onbegin", "onend", "onrepeat", "onload"],
      animationTiming: [
        "begin",
        "dur",
        "end",
        "min",
        "max",
        "restart",
        "repeatCount",
        "repeatDur",
        "fill"
      ],
      animationValue: [
        "calcMode",
        "values",
        "keyTimes",
        "keySplines",
        "from",
        "to",
        "by"
      ],
      conditionalProcessing: [
        "requiredFeatures",
        "requiredExtensions",
        "systemLanguage"
      ],
      core: ["id", "tabindex", "xml:base", "xml:lang", "xml:space"],
      graphicalEvent: [
        "onfocusin",
        "onfocusout",
        "onactivate",
        "onclick",
        "onmousedown",
        "onmouseup",
        "onmouseover",
        "onmousemove",
        "onmouseout",
        "onload"
      ],
      presentation: [
        "alignment-baseline",
        "baseline-shift",
        "clip",
        "clip-path",
        "clip-rule",
        "color",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "cursor",
        "direction",
        "display",
        "dominant-baseline",
        "enable-background",
        "fill",
        "fill-opacity",
        "fill-rule",
        "filter",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "mask",
        "opacity",
        "overflow",
        "paint-order",
        "pointer-events",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "stroke",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-overflow",
        "text-rendering",
        "transform",
        "transform-origin",
        "unicode-bidi",
        "vector-effect",
        "visibility",
        "word-spacing",
        "writing-mode"
      ],
      xlink: [
        "xlink:href",
        "xlink:show",
        "xlink:actuate",
        "xlink:type",
        "xlink:role",
        "xlink:arcrole",
        "xlink:title"
      ],
      documentEvent: [
        "onunload",
        "onabort",
        "onerror",
        "onresize",
        "onscroll",
        "onzoom"
      ],
      filterPrimitive: ["x", "y", "width", "height", "result"],
      transferFunction: [
        "type",
        "tableValues",
        "slope",
        "intercept",
        "amplitude",
        "exponent",
        "offset"
      ]
    };
    exports2.attrsGroupsDefaults = {
      core: { "xml:space": "default" },
      presentation: {
        clip: "auto",
        "clip-path": "none",
        "clip-rule": "nonzero",
        mask: "none",
        opacity: "1",
        "stop-color": "#000",
        "stop-opacity": "1",
        "fill-opacity": "1",
        "fill-rule": "nonzero",
        fill: "#000",
        stroke: "none",
        "stroke-width": "1",
        "stroke-linecap": "butt",
        "stroke-linejoin": "miter",
        "stroke-miterlimit": "4",
        "stroke-dasharray": "none",
        "stroke-dashoffset": "0",
        "stroke-opacity": "1",
        "paint-order": "normal",
        "vector-effect": "none",
        display: "inline",
        visibility: "visible",
        "marker-start": "none",
        "marker-mid": "none",
        "marker-end": "none",
        "color-interpolation": "sRGB",
        "color-interpolation-filters": "linearRGB",
        "color-rendering": "auto",
        "shape-rendering": "auto",
        "text-rendering": "auto",
        "image-rendering": "auto",
        "font-style": "normal",
        "font-variant": "normal",
        "font-weight": "normal",
        "font-stretch": "normal",
        "font-size": "medium",
        "font-size-adjust": "none",
        kerning: "auto",
        "letter-spacing": "normal",
        "word-spacing": "normal",
        "text-decoration": "none",
        "text-anchor": "start",
        "text-overflow": "clip",
        "writing-mode": "lr-tb",
        "glyph-orientation-vertical": "auto",
        "glyph-orientation-horizontal": "0deg",
        direction: "ltr",
        "unicode-bidi": "normal",
        "dominant-baseline": "auto",
        "alignment-baseline": "baseline",
        "baseline-shift": "baseline"
      },
      transferFunction: {
        slope: "1",
        intercept: "0",
        amplitude: "1",
        exponent: "1",
        offset: "0"
      }
    };
    exports2.elems = {
      a: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation",
          "xlink"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "transform",
          "target"
        ],
        defaults: {
          target: "_self"
        },
        contentGroups: [
          "animation",
          "descriptive",
          "shape",
          "structural",
          "paintServer"
        ],
        content: [
          "a",
          "altGlyphDef",
          "clipPath",
          "color-profile",
          "cursor",
          "filter",
          "font",
          "font-face",
          "foreignObject",
          "image",
          "marker",
          "mask",
          "pattern",
          "script",
          "style",
          "switch",
          "text",
          "view",
          // not spec compliant
          "tspan"
        ]
      },
      altGlyph: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation",
          "xlink"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "x",
          "y",
          "dx",
          "dy",
          "glyphRef",
          "format",
          "rotate"
        ]
      },
      altGlyphDef: {
        attrsGroups: ["core"],
        content: ["glyphRef"]
      },
      altGlyphItem: {
        attrsGroups: ["core"],
        content: ["glyphRef", "altGlyphItem"]
      },
      animate: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "animationAddition",
          "animationAttributeTarget",
          "animationEvent",
          "animationTiming",
          "animationValue",
          "presentation",
          "xlink"
        ],
        attrs: ["externalResourcesRequired"],
        contentGroups: ["descriptive"]
      },
      animateColor: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "animationEvent",
          "xlink",
          "animationAttributeTarget",
          "animationTiming",
          "animationValue",
          "animationAddition",
          "presentation"
        ],
        attrs: ["externalResourcesRequired"],
        contentGroups: ["descriptive"]
      },
      animateMotion: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "animationEvent",
          "xlink",
          "animationTiming",
          "animationValue",
          "animationAddition"
        ],
        attrs: [
          "externalResourcesRequired",
          "path",
          "keyPoints",
          "rotate",
          "origin"
        ],
        defaults: {
          rotate: "0"
        },
        contentGroups: ["descriptive"],
        content: ["mpath"]
      },
      animateTransform: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "animationEvent",
          "xlink",
          "animationAttributeTarget",
          "animationTiming",
          "animationValue",
          "animationAddition"
        ],
        attrs: ["externalResourcesRequired", "type"],
        contentGroups: ["descriptive"]
      },
      circle: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "transform",
          "cx",
          "cy",
          "r"
        ],
        defaults: {
          cx: "0",
          cy: "0"
        },
        contentGroups: ["animation", "descriptive"]
      },
      clipPath: {
        attrsGroups: ["conditionalProcessing", "core", "presentation"],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "transform",
          "clipPathUnits"
        ],
        defaults: {
          clipPathUnits: "userSpaceOnUse"
        },
        contentGroups: ["animation", "descriptive", "shape"],
        content: ["text", "use"]
      },
      "color-profile": {
        attrsGroups: ["core", "xlink"],
        attrs: ["local", "name", "rendering-intent"],
        defaults: {
          name: "sRGB",
          "rendering-intent": "auto"
        },
        contentGroups: ["descriptive"]
      },
      cursor: {
        attrsGroups: ["core", "conditionalProcessing", "xlink"],
        attrs: ["externalResourcesRequired", "x", "y"],
        defaults: {
          x: "0",
          y: "0"
        },
        contentGroups: ["descriptive"]
      },
      defs: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation"
        ],
        attrs: ["class", "style", "externalResourcesRequired", "transform"],
        contentGroups: [
          "animation",
          "descriptive",
          "shape",
          "structural",
          "paintServer"
        ],
        content: [
          "a",
          "altGlyphDef",
          "clipPath",
          "color-profile",
          "cursor",
          "filter",
          "font",
          "font-face",
          "foreignObject",
          "image",
          "marker",
          "mask",
          "pattern",
          "script",
          "style",
          "switch",
          "text",
          "view"
        ]
      },
      desc: {
        attrsGroups: ["core"],
        attrs: ["class", "style"]
      },
      ellipse: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "transform",
          "cx",
          "cy",
          "rx",
          "ry"
        ],
        defaults: {
          cx: "0",
          cy: "0"
        },
        contentGroups: ["animation", "descriptive"]
      },
      feBlend: {
        attrsGroups: ["core", "presentation", "filterPrimitive"],
        attrs: [
          "class",
          "style",
          // TODO: in - 'If no value is provided and this is the first filter primitive,
          // then this filter primitive will use SourceGraphic as its input'
          "in",
          "in2",
          "mode"
        ],
        defaults: {
          mode: "normal"
        },
        content: ["animate", "set"]
      },
      feColorMatrix: {
        attrsGroups: ["core", "presentation", "filterPrimitive"],
        attrs: ["class", "style", "in", "type", "values"],
        defaults: {
          type: "matrix"
        },
        content: ["animate", "set"]
      },
      feComponentTransfer: {
        attrsGroups: ["core", "presentation", "filterPrimitive"],
        attrs: ["class", "style", "in"],
        content: ["feFuncA", "feFuncB", "feFuncG", "feFuncR"]
      },
      feComposite: {
        attrsGroups: ["core", "presentation", "filterPrimitive"],
        attrs: ["class", "style", "in", "in2", "operator", "k1", "k2", "k3", "k4"],
        defaults: {
          operator: "over",
          k1: "0",
          k2: "0",
          k3: "0",
          k4: "0"
        },
        content: ["animate", "set"]
      },
      feConvolveMatrix: {
        attrsGroups: ["core", "presentation", "filterPrimitive"],
        attrs: [
          "class",
          "style",
          "in",
          "order",
          "kernelMatrix",
          // TODO: divisor - 'The default value is the sum of all values in kernelMatrix,
          // with the exception that if the sum is zero, then the divisor is set to 1'
          "divisor",
          "bias",
          // TODO: targetX - 'By default, the convolution matrix is centered in X over each
          // pixel of the input image (i.e., targetX = floor ( orderX / 2 ))'
          "targetX",
          "targetY",
          "edgeMode",
          // TODO: kernelUnitLength - 'The first number is the <dx> value. The second number
          // is the <dy> value. If the <dy> value is not specified, it defaults to the same value as <dx>'
          "kernelUnitLength",
          "preserveAlpha"
        ],
        defaults: {
          order: "3",
          bias: "0",
          edgeMode: "duplicate",
          preserveAlpha: "false"
        },
        content: ["animate", "set"]
      },
      feDiffuseLighting: {
        attrsGroups: ["core", "presentation", "filterPrimitive"],
        attrs: [
          "class",
          "style",
          "in",
          "surfaceScale",
          "diffuseConstant",
          "kernelUnitLength"
        ],
        defaults: {
          surfaceScale: "1",
          diffuseConstant: "1"
        },
        contentGroups: ["descriptive"],
        content: [
          // TODO: 'exactly one light source element, in any order'
          "feDistantLight",
          "fePointLight",
          "feSpotLight"
        ]
      },
      feDisplacementMap: {
        attrsGroups: ["core", "presentation", "filterPrimitive"],
        attrs: [
          "class",
          "style",
          "in",
          "in2",
          "scale",
          "xChannelSelector",
          "yChannelSelector"
        ],
        defaults: {
          scale: "0",
          xChannelSelector: "A",
          yChannelSelector: "A"
        },
        content: ["animate", "set"]
      },
      feDistantLight: {
        attrsGroups: ["core"],
        attrs: ["azimuth", "elevation"],
        defaults: {
          azimuth: "0",
          elevation: "0"
        },
        content: ["animate", "set"]
      },
      feFlood: {
        attrsGroups: ["core", "presentation", "filterPrimitive"],
        attrs: ["class", "style"],
        content: ["animate", "animateColor", "set"]
      },
      feFuncA: {
        attrsGroups: ["core", "transferFunction"],
        content: ["set", "animate"]
      },
      feFuncB: {
        attrsGroups: ["core", "transferFunction"],
        content: ["set", "animate"]
      },
      feFuncG: {
        attrsGroups: ["core", "transferFunction"],
        content: ["set", "animate"]
      },
      feFuncR: {
        attrsGroups: ["core", "transferFunction"],
        content: ["set", "animate"]
      },
      feGaussianBlur: {
        attrsGroups: ["core", "presentation", "filterPrimitive"],
        attrs: ["class", "style", "in", "stdDeviation"],
        defaults: {
          stdDeviation: "0"
        },
        content: ["set", "animate"]
      },
      feImage: {
        attrsGroups: ["core", "presentation", "filterPrimitive", "xlink"],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "preserveAspectRatio",
          "href",
          "xlink:href"
        ],
        defaults: {
          preserveAspectRatio: "xMidYMid meet"
        },
        content: ["animate", "animateTransform", "set"]
      },
      feMerge: {
        attrsGroups: ["core", "presentation", "filterPrimitive"],
        attrs: ["class", "style"],
        content: ["feMergeNode"]
      },
      feMergeNode: {
        attrsGroups: ["core"],
        attrs: ["in"],
        content: ["animate", "set"]
      },
      feMorphology: {
        attrsGroups: ["core", "presentation", "filterPrimitive"],
        attrs: ["class", "style", "in", "operator", "radius"],
        defaults: {
          operator: "erode",
          radius: "0"
        },
        content: ["animate", "set"]
      },
      feOffset: {
        attrsGroups: ["core", "presentation", "filterPrimitive"],
        attrs: ["class", "style", "in", "dx", "dy"],
        defaults: {
          dx: "0",
          dy: "0"
        },
        content: ["animate", "set"]
      },
      fePointLight: {
        attrsGroups: ["core"],
        attrs: ["x", "y", "z"],
        defaults: {
          x: "0",
          y: "0",
          z: "0"
        },
        content: ["animate", "set"]
      },
      feSpecularLighting: {
        attrsGroups: ["core", "presentation", "filterPrimitive"],
        attrs: [
          "class",
          "style",
          "in",
          "surfaceScale",
          "specularConstant",
          "specularExponent",
          "kernelUnitLength"
        ],
        defaults: {
          surfaceScale: "1",
          specularConstant: "1",
          specularExponent: "1"
        },
        contentGroups: [
          "descriptive",
          // TODO: exactly one 'light source element'
          "lightSource"
        ]
      },
      feSpotLight: {
        attrsGroups: ["core"],
        attrs: [
          "x",
          "y",
          "z",
          "pointsAtX",
          "pointsAtY",
          "pointsAtZ",
          "specularExponent",
          "limitingConeAngle"
        ],
        defaults: {
          x: "0",
          y: "0",
          z: "0",
          pointsAtX: "0",
          pointsAtY: "0",
          pointsAtZ: "0",
          specularExponent: "1"
        },
        content: ["animate", "set"]
      },
      feTile: {
        attrsGroups: ["core", "presentation", "filterPrimitive"],
        attrs: ["class", "style", "in"],
        content: ["animate", "set"]
      },
      feTurbulence: {
        attrsGroups: ["core", "presentation", "filterPrimitive"],
        attrs: [
          "class",
          "style",
          "baseFrequency",
          "numOctaves",
          "seed",
          "stitchTiles",
          "type"
        ],
        defaults: {
          baseFrequency: "0",
          numOctaves: "1",
          seed: "0",
          stitchTiles: "noStitch",
          type: "turbulence"
        },
        content: ["animate", "set"]
      },
      filter: {
        attrsGroups: ["core", "presentation", "xlink"],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "x",
          "y",
          "width",
          "height",
          "filterRes",
          "filterUnits",
          "primitiveUnits",
          "href",
          "xlink:href"
        ],
        defaults: {
          primitiveUnits: "userSpaceOnUse",
          x: "-10%",
          y: "-10%",
          width: "120%",
          height: "120%"
        },
        contentGroups: ["descriptive", "filterPrimitive"],
        content: ["animate", "set"]
      },
      font: {
        attrsGroups: ["core", "presentation"],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "horiz-origin-x",
          "horiz-origin-y",
          "horiz-adv-x",
          "vert-origin-x",
          "vert-origin-y",
          "vert-adv-y"
        ],
        defaults: {
          "horiz-origin-x": "0",
          "horiz-origin-y": "0"
        },
        contentGroups: ["descriptive"],
        content: ["font-face", "glyph", "hkern", "missing-glyph", "vkern"]
      },
      "font-face": {
        attrsGroups: ["core"],
        attrs: [
          "font-family",
          "font-style",
          "font-variant",
          "font-weight",
          "font-stretch",
          "font-size",
          "unicode-range",
          "units-per-em",
          "panose-1",
          "stemv",
          "stemh",
          "slope",
          "cap-height",
          "x-height",
          "accent-height",
          "ascent",
          "descent",
          "widths",
          "bbox",
          "ideographic",
          "alphabetic",
          "mathematical",
          "hanging",
          "v-ideographic",
          "v-alphabetic",
          "v-mathematical",
          "v-hanging",
          "underline-position",
          "underline-thickness",
          "strikethrough-position",
          "strikethrough-thickness",
          "overline-position",
          "overline-thickness"
        ],
        defaults: {
          "font-style": "all",
          "font-variant": "normal",
          "font-weight": "all",
          "font-stretch": "normal",
          "unicode-range": "U+0-10FFFF",
          "units-per-em": "1000",
          "panose-1": "0 0 0 0 0 0 0 0 0 0",
          slope: "0"
        },
        contentGroups: ["descriptive"],
        content: [
          // TODO: "at most one 'font-face-src' element"
          "font-face-src"
        ]
      },
      // TODO: empty content
      "font-face-format": {
        attrsGroups: ["core"],
        attrs: ["string"]
      },
      "font-face-name": {
        attrsGroups: ["core"],
        attrs: ["name"]
      },
      "font-face-src": {
        attrsGroups: ["core"],
        content: ["font-face-name", "font-face-uri"]
      },
      "font-face-uri": {
        attrsGroups: ["core", "xlink"],
        attrs: ["href", "xlink:href"],
        content: ["font-face-format"]
      },
      foreignObject: {
        attrsGroups: [
          "core",
          "conditionalProcessing",
          "graphicalEvent",
          "presentation"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "transform",
          "x",
          "y",
          "width",
          "height"
        ],
        defaults: {
          x: "0",
          y: "0"
        }
      },
      g: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation"
        ],
        attrs: ["class", "style", "externalResourcesRequired", "transform"],
        contentGroups: [
          "animation",
          "descriptive",
          "shape",
          "structural",
          "paintServer"
        ],
        content: [
          "a",
          "altGlyphDef",
          "clipPath",
          "color-profile",
          "cursor",
          "filter",
          "font",
          "font-face",
          "foreignObject",
          "image",
          "marker",
          "mask",
          "pattern",
          "script",
          "style",
          "switch",
          "text",
          "view"
        ]
      },
      glyph: {
        attrsGroups: ["core", "presentation"],
        attrs: [
          "class",
          "style",
          "d",
          "horiz-adv-x",
          "vert-origin-x",
          "vert-origin-y",
          "vert-adv-y",
          "unicode",
          "glyph-name",
          "orientation",
          "arabic-form",
          "lang"
        ],
        defaults: {
          "arabic-form": "initial"
        },
        contentGroups: [
          "animation",
          "descriptive",
          "shape",
          "structural",
          "paintServer"
        ],
        content: [
          "a",
          "altGlyphDef",
          "clipPath",
          "color-profile",
          "cursor",
          "filter",
          "font",
          "font-face",
          "foreignObject",
          "image",
          "marker",
          "mask",
          "pattern",
          "script",
          "style",
          "switch",
          "text",
          "view"
        ]
      },
      glyphRef: {
        attrsGroups: ["core", "presentation"],
        attrs: [
          "class",
          "style",
          "d",
          "horiz-adv-x",
          "vert-origin-x",
          "vert-origin-y",
          "vert-adv-y"
        ],
        contentGroups: [
          "animation",
          "descriptive",
          "shape",
          "structural",
          "paintServer"
        ],
        content: [
          "a",
          "altGlyphDef",
          "clipPath",
          "color-profile",
          "cursor",
          "filter",
          "font",
          "font-face",
          "foreignObject",
          "image",
          "marker",
          "mask",
          "pattern",
          "script",
          "style",
          "switch",
          "text",
          "view"
        ]
      },
      hatch: {
        attrsGroups: ["core", "presentation", "xlink"],
        attrs: [
          "class",
          "style",
          "x",
          "y",
          "pitch",
          "rotate",
          "hatchUnits",
          "hatchContentUnits",
          "transform"
        ],
        defaults: {
          hatchUnits: "objectBoundingBox",
          hatchContentUnits: "userSpaceOnUse",
          x: "0",
          y: "0",
          pitch: "0",
          rotate: "0"
        },
        contentGroups: ["animation", "descriptive"],
        content: ["hatchPath"]
      },
      hatchPath: {
        attrsGroups: ["core", "presentation", "xlink"],
        attrs: ["class", "style", "d", "offset"],
        defaults: {
          offset: "0"
        },
        contentGroups: ["animation", "descriptive"]
      },
      hkern: {
        attrsGroups: ["core"],
        attrs: ["u1", "g1", "u2", "g2", "k"]
      },
      image: {
        attrsGroups: [
          "core",
          "conditionalProcessing",
          "graphicalEvent",
          "xlink",
          "presentation"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "preserveAspectRatio",
          "transform",
          "x",
          "y",
          "width",
          "height",
          "href",
          "xlink:href"
        ],
        defaults: {
          x: "0",
          y: "0",
          preserveAspectRatio: "xMidYMid meet"
        },
        contentGroups: ["animation", "descriptive"]
      },
      line: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "transform",
          "x1",
          "y1",
          "x2",
          "y2"
        ],
        defaults: {
          x1: "0",
          y1: "0",
          x2: "0",
          y2: "0"
        },
        contentGroups: ["animation", "descriptive"]
      },
      linearGradient: {
        attrsGroups: ["core", "presentation", "xlink"],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "x1",
          "y1",
          "x2",
          "y2",
          "gradientUnits",
          "gradientTransform",
          "spreadMethod",
          "href",
          "xlink:href"
        ],
        defaults: {
          x1: "0",
          y1: "0",
          x2: "100%",
          y2: "0",
          spreadMethod: "pad"
        },
        contentGroups: ["descriptive"],
        content: ["animate", "animateTransform", "set", "stop"]
      },
      marker: {
        attrsGroups: ["core", "presentation"],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "viewBox",
          "preserveAspectRatio",
          "refX",
          "refY",
          "markerUnits",
          "markerWidth",
          "markerHeight",
          "orient"
        ],
        defaults: {
          markerUnits: "strokeWidth",
          refX: "0",
          refY: "0",
          markerWidth: "3",
          markerHeight: "3"
        },
        contentGroups: [
          "animation",
          "descriptive",
          "shape",
          "structural",
          "paintServer"
        ],
        content: [
          "a",
          "altGlyphDef",
          "clipPath",
          "color-profile",
          "cursor",
          "filter",
          "font",
          "font-face",
          "foreignObject",
          "image",
          "marker",
          "mask",
          "pattern",
          "script",
          "style",
          "switch",
          "text",
          "view"
        ]
      },
      mask: {
        attrsGroups: ["conditionalProcessing", "core", "presentation"],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "x",
          "y",
          "width",
          "height",
          "mask-type",
          "maskUnits",
          "maskContentUnits"
        ],
        defaults: {
          maskUnits: "objectBoundingBox",
          maskContentUnits: "userSpaceOnUse",
          x: "-10%",
          y: "-10%",
          width: "120%",
          height: "120%"
        },
        contentGroups: [
          "animation",
          "descriptive",
          "shape",
          "structural",
          "paintServer"
        ],
        content: [
          "a",
          "altGlyphDef",
          "clipPath",
          "color-profile",
          "cursor",
          "filter",
          "font",
          "font-face",
          "foreignObject",
          "image",
          "marker",
          "mask",
          "pattern",
          "script",
          "style",
          "switch",
          "text",
          "view"
        ]
      },
      metadata: {
        attrsGroups: ["core"]
      },
      "missing-glyph": {
        attrsGroups: ["core", "presentation"],
        attrs: [
          "class",
          "style",
          "d",
          "horiz-adv-x",
          "vert-origin-x",
          "vert-origin-y",
          "vert-adv-y"
        ],
        contentGroups: [
          "animation",
          "descriptive",
          "shape",
          "structural",
          "paintServer"
        ],
        content: [
          "a",
          "altGlyphDef",
          "clipPath",
          "color-profile",
          "cursor",
          "filter",
          "font",
          "font-face",
          "foreignObject",
          "image",
          "marker",
          "mask",
          "pattern",
          "script",
          "style",
          "switch",
          "text",
          "view"
        ]
      },
      mpath: {
        attrsGroups: ["core", "xlink"],
        attrs: ["externalResourcesRequired", "href", "xlink:href"],
        contentGroups: ["descriptive"]
      },
      path: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "transform",
          "d",
          "pathLength"
        ],
        contentGroups: ["animation", "descriptive"]
      },
      pattern: {
        attrsGroups: ["conditionalProcessing", "core", "presentation", "xlink"],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "viewBox",
          "preserveAspectRatio",
          "x",
          "y",
          "width",
          "height",
          "patternUnits",
          "patternContentUnits",
          "patternTransform",
          "href",
          "xlink:href"
        ],
        defaults: {
          patternUnits: "objectBoundingBox",
          patternContentUnits: "userSpaceOnUse",
          x: "0",
          y: "0",
          width: "0",
          height: "0",
          preserveAspectRatio: "xMidYMid meet"
        },
        contentGroups: [
          "animation",
          "descriptive",
          "paintServer",
          "shape",
          "structural"
        ],
        content: [
          "a",
          "altGlyphDef",
          "clipPath",
          "color-profile",
          "cursor",
          "filter",
          "font",
          "font-face",
          "foreignObject",
          "image",
          "marker",
          "mask",
          "pattern",
          "script",
          "style",
          "switch",
          "text",
          "view"
        ]
      },
      polygon: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "transform",
          "points"
        ],
        contentGroups: ["animation", "descriptive"]
      },
      polyline: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "transform",
          "points"
        ],
        contentGroups: ["animation", "descriptive"]
      },
      radialGradient: {
        attrsGroups: ["core", "presentation", "xlink"],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "cx",
          "cy",
          "r",
          "fx",
          "fy",
          "fr",
          "gradientUnits",
          "gradientTransform",
          "spreadMethod",
          "href",
          "xlink:href"
        ],
        defaults: {
          gradientUnits: "objectBoundingBox",
          cx: "50%",
          cy: "50%",
          r: "50%"
        },
        contentGroups: ["descriptive"],
        content: ["animate", "animateTransform", "set", "stop"]
      },
      meshGradient: {
        attrsGroups: ["core", "presentation", "xlink"],
        attrs: ["class", "style", "x", "y", "gradientUnits", "transform"],
        contentGroups: ["descriptive", "paintServer", "animation"],
        content: ["meshRow"]
      },
      meshRow: {
        attrsGroups: ["core", "presentation"],
        attrs: ["class", "style"],
        contentGroups: ["descriptive"],
        content: ["meshPatch"]
      },
      meshPatch: {
        attrsGroups: ["core", "presentation"],
        attrs: ["class", "style"],
        contentGroups: ["descriptive"],
        content: ["stop"]
      },
      rect: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "transform",
          "x",
          "y",
          "width",
          "height",
          "rx",
          "ry"
        ],
        defaults: {
          x: "0",
          y: "0"
        },
        contentGroups: ["animation", "descriptive"]
      },
      script: {
        attrsGroups: ["core", "xlink"],
        attrs: ["externalResourcesRequired", "type", "href", "xlink:href"]
      },
      set: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "animation",
          "xlink",
          "animationAttributeTarget",
          "animationTiming"
        ],
        attrs: ["externalResourcesRequired", "to"],
        contentGroups: ["descriptive"]
      },
      solidColor: {
        attrsGroups: ["core", "presentation"],
        attrs: ["class", "style"],
        contentGroups: ["paintServer"]
      },
      stop: {
        attrsGroups: ["core", "presentation"],
        attrs: ["class", "style", "offset", "path"],
        content: ["animate", "animateColor", "set"]
      },
      style: {
        attrsGroups: ["core"],
        attrs: ["type", "media", "title"],
        defaults: {
          type: "text/css"
        }
      },
      svg: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "documentEvent",
          "graphicalEvent",
          "presentation"
        ],
        attrs: [
          "class",
          "style",
          "x",
          "y",
          "width",
          "height",
          "viewBox",
          "preserveAspectRatio",
          "zoomAndPan",
          "version",
          "baseProfile",
          "contentScriptType",
          "contentStyleType"
        ],
        defaults: {
          x: "0",
          y: "0",
          width: "100%",
          height: "100%",
          preserveAspectRatio: "xMidYMid meet",
          zoomAndPan: "magnify",
          version: "1.1",
          baseProfile: "none",
          contentScriptType: "application/ecmascript",
          contentStyleType: "text/css"
        },
        contentGroups: [
          "animation",
          "descriptive",
          "shape",
          "structural",
          "paintServer"
        ],
        content: [
          "a",
          "altGlyphDef",
          "clipPath",
          "color-profile",
          "cursor",
          "filter",
          "font",
          "font-face",
          "foreignObject",
          "image",
          "marker",
          "mask",
          "pattern",
          "script",
          "style",
          "switch",
          "text",
          "view"
        ]
      },
      switch: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation"
        ],
        attrs: ["class", "style", "externalResourcesRequired", "transform"],
        contentGroups: ["animation", "descriptive", "shape"],
        content: [
          "a",
          "foreignObject",
          "g",
          "image",
          "svg",
          "switch",
          "text",
          "use"
        ]
      },
      symbol: {
        attrsGroups: ["core", "graphicalEvent", "presentation"],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "preserveAspectRatio",
          "viewBox",
          "refX",
          "refY"
        ],
        defaults: {
          refX: "0",
          refY: "0"
        },
        contentGroups: [
          "animation",
          "descriptive",
          "shape",
          "structural",
          "paintServer"
        ],
        content: [
          "a",
          "altGlyphDef",
          "clipPath",
          "color-profile",
          "cursor",
          "filter",
          "font",
          "font-face",
          "foreignObject",
          "image",
          "marker",
          "mask",
          "pattern",
          "script",
          "style",
          "switch",
          "text",
          "view"
        ]
      },
      text: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "transform",
          "lengthAdjust",
          "x",
          "y",
          "dx",
          "dy",
          "rotate",
          "textLength"
        ],
        defaults: {
          x: "0",
          y: "0",
          lengthAdjust: "spacing"
        },
        contentGroups: ["animation", "descriptive", "textContentChild"],
        content: ["a"]
      },
      textPath: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation",
          "xlink"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "href",
          "xlink:href",
          "startOffset",
          "method",
          "spacing",
          "d"
        ],
        defaults: {
          startOffset: "0",
          method: "align",
          spacing: "exact"
        },
        contentGroups: ["descriptive"],
        content: [
          "a",
          "altGlyph",
          "animate",
          "animateColor",
          "set",
          "tref",
          "tspan"
        ]
      },
      title: {
        attrsGroups: ["core"],
        attrs: ["class", "style"]
      },
      tref: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation",
          "xlink"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "href",
          "xlink:href"
        ],
        contentGroups: ["descriptive"],
        content: ["animate", "animateColor", "set"]
      },
      tspan: {
        attrsGroups: [
          "conditionalProcessing",
          "core",
          "graphicalEvent",
          "presentation"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "x",
          "y",
          "dx",
          "dy",
          "rotate",
          "textLength",
          "lengthAdjust"
        ],
        contentGroups: ["descriptive"],
        content: [
          "a",
          "altGlyph",
          "animate",
          "animateColor",
          "set",
          "tref",
          "tspan"
        ]
      },
      use: {
        attrsGroups: [
          "core",
          "conditionalProcessing",
          "graphicalEvent",
          "presentation",
          "xlink"
        ],
        attrs: [
          "class",
          "style",
          "externalResourcesRequired",
          "transform",
          "x",
          "y",
          "width",
          "height",
          "href",
          "xlink:href"
        ],
        defaults: {
          x: "0",
          y: "0"
        },
        contentGroups: ["animation", "descriptive"]
      },
      view: {
        attrsGroups: ["core"],
        attrs: [
          "externalResourcesRequired",
          "viewBox",
          "preserveAspectRatio",
          "zoomAndPan",
          "viewTarget"
        ],
        contentGroups: ["descriptive"]
      },
      vkern: {
        attrsGroups: ["core"],
        attrs: ["u1", "g1", "u2", "g2", "k"]
      }
    };
    exports2.editorNamespaces = [
      "http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd",
      "http://inkscape.sourceforge.net/DTD/sodipodi-0.dtd",
      "http://www.inkscape.org/namespaces/inkscape",
      "http://www.bohemiancoding.com/sketch/ns",
      "http://ns.adobe.com/AdobeIllustrator/10.0/",
      "http://ns.adobe.com/Graphs/1.0/",
      "http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/",
      "http://ns.adobe.com/Variables/1.0/",
      "http://ns.adobe.com/SaveForWeb/1.0/",
      "http://ns.adobe.com/Extensibility/1.0/",
      "http://ns.adobe.com/Flows/1.0/",
      "http://ns.adobe.com/ImageReplacement/1.0/",
      "http://ns.adobe.com/GenericCustomNamespace/1.0/",
      "http://ns.adobe.com/XPath/1.0/",
      "http://schemas.microsoft.com/visio/2003/SVGExtensions/",
      "http://taptrix.com/vectorillustrator/svg_extensions",
      "http://www.figma.com/figma/ns",
      "http://purl.org/dc/elements/1.1/",
      "http://creativecommons.org/ns#",
      "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
      "http://www.serif.com/",
      "http://www.vector.evaxdesign.sk"
    ];
    exports2.referencesProps = [
      "clip-path",
      "color-profile",
      "fill",
      "filter",
      "marker-start",
      "marker-mid",
      "marker-end",
      "mask",
      "stroke",
      "style"
    ];
    exports2.inheritableAttrs = [
      "clip-rule",
      "color",
      "color-interpolation",
      "color-interpolation-filters",
      "color-profile",
      "color-rendering",
      "cursor",
      "direction",
      "dominant-baseline",
      "fill",
      "fill-opacity",
      "fill-rule",
      "font",
      "font-family",
      "font-size",
      "font-size-adjust",
      "font-stretch",
      "font-style",
      "font-variant",
      "font-weight",
      "glyph-orientation-horizontal",
      "glyph-orientation-vertical",
      "image-rendering",
      "letter-spacing",
      "marker",
      "marker-end",
      "marker-mid",
      "marker-start",
      "paint-order",
      "pointer-events",
      "shape-rendering",
      "stroke",
      "stroke-dasharray",
      "stroke-dashoffset",
      "stroke-linecap",
      "stroke-linejoin",
      "stroke-miterlimit",
      "stroke-opacity",
      "stroke-width",
      "text-anchor",
      "text-rendering",
      "transform",
      "visibility",
      "word-spacing",
      "writing-mode"
    ];
    exports2.presentationNonInheritableGroupAttrs = [
      "display",
      "clip-path",
      "filter",
      "mask",
      "opacity",
      "text-decoration",
      "transform",
      "unicode-bidi"
    ];
    exports2.colorsNames = {
      aliceblue: "#f0f8ff",
      antiquewhite: "#faebd7",
      aqua: "#0ff",
      aquamarine: "#7fffd4",
      azure: "#f0ffff",
      beige: "#f5f5dc",
      bisque: "#ffe4c4",
      black: "#000",
      blanchedalmond: "#ffebcd",
      blue: "#00f",
      blueviolet: "#8a2be2",
      brown: "#a52a2a",
      burlywood: "#deb887",
      cadetblue: "#5f9ea0",
      chartreuse: "#7fff00",
      chocolate: "#d2691e",
      coral: "#ff7f50",
      cornflowerblue: "#6495ed",
      cornsilk: "#fff8dc",
      crimson: "#dc143c",
      cyan: "#0ff",
      darkblue: "#00008b",
      darkcyan: "#008b8b",
      darkgoldenrod: "#b8860b",
      darkgray: "#a9a9a9",
      darkgreen: "#006400",
      darkgrey: "#a9a9a9",
      darkkhaki: "#bdb76b",
      darkmagenta: "#8b008b",
      darkolivegreen: "#556b2f",
      darkorange: "#ff8c00",
      darkorchid: "#9932cc",
      darkred: "#8b0000",
      darksalmon: "#e9967a",
      darkseagreen: "#8fbc8f",
      darkslateblue: "#483d8b",
      darkslategray: "#2f4f4f",
      darkslategrey: "#2f4f4f",
      darkturquoise: "#00ced1",
      darkviolet: "#9400d3",
      deeppink: "#ff1493",
      deepskyblue: "#00bfff",
      dimgray: "#696969",
      dimgrey: "#696969",
      dodgerblue: "#1e90ff",
      firebrick: "#b22222",
      floralwhite: "#fffaf0",
      forestgreen: "#228b22",
      fuchsia: "#f0f",
      gainsboro: "#dcdcdc",
      ghostwhite: "#f8f8ff",
      gold: "#ffd700",
      goldenrod: "#daa520",
      gray: "#808080",
      green: "#008000",
      greenyellow: "#adff2f",
      grey: "#808080",
      honeydew: "#f0fff0",
      hotpink: "#ff69b4",
      indianred: "#cd5c5c",
      indigo: "#4b0082",
      ivory: "#fffff0",
      khaki: "#f0e68c",
      lavender: "#e6e6fa",
      lavenderblush: "#fff0f5",
      lawngreen: "#7cfc00",
      lemonchiffon: "#fffacd",
      lightblue: "#add8e6",
      lightcoral: "#f08080",
      lightcyan: "#e0ffff",
      lightgoldenrodyellow: "#fafad2",
      lightgray: "#d3d3d3",
      lightgreen: "#90ee90",
      lightgrey: "#d3d3d3",
      lightpink: "#ffb6c1",
      lightsalmon: "#ffa07a",
      lightseagreen: "#20b2aa",
      lightskyblue: "#87cefa",
      lightslategray: "#789",
      lightslategrey: "#789",
      lightsteelblue: "#b0c4de",
      lightyellow: "#ffffe0",
      lime: "#0f0",
      limegreen: "#32cd32",
      linen: "#faf0e6",
      magenta: "#f0f",
      maroon: "#800000",
      mediumaquamarine: "#66cdaa",
      mediumblue: "#0000cd",
      mediumorchid: "#ba55d3",
      mediumpurple: "#9370db",
      mediumseagreen: "#3cb371",
      mediumslateblue: "#7b68ee",
      mediumspringgreen: "#00fa9a",
      mediumturquoise: "#48d1cc",
      mediumvioletred: "#c71585",
      midnightblue: "#191970",
      mintcream: "#f5fffa",
      mistyrose: "#ffe4e1",
      moccasin: "#ffe4b5",
      navajowhite: "#ffdead",
      navy: "#000080",
      oldlace: "#fdf5e6",
      olive: "#808000",
      olivedrab: "#6b8e23",
      orange: "#ffa500",
      orangered: "#ff4500",
      orchid: "#da70d6",
      palegoldenrod: "#eee8aa",
      palegreen: "#98fb98",
      paleturquoise: "#afeeee",
      palevioletred: "#db7093",
      papayawhip: "#ffefd5",
      peachpuff: "#ffdab9",
      peru: "#cd853f",
      pink: "#ffc0cb",
      plum: "#dda0dd",
      powderblue: "#b0e0e6",
      purple: "#800080",
      rebeccapurple: "#639",
      red: "#f00",
      rosybrown: "#bc8f8f",
      royalblue: "#4169e1",
      saddlebrown: "#8b4513",
      salmon: "#fa8072",
      sandybrown: "#f4a460",
      seagreen: "#2e8b57",
      seashell: "#fff5ee",
      sienna: "#a0522d",
      silver: "#c0c0c0",
      skyblue: "#87ceeb",
      slateblue: "#6a5acd",
      slategray: "#708090",
      slategrey: "#708090",
      snow: "#fffafa",
      springgreen: "#00ff7f",
      steelblue: "#4682b4",
      tan: "#d2b48c",
      teal: "#008080",
      thistle: "#d8bfd8",
      tomato: "#ff6347",
      turquoise: "#40e0d0",
      violet: "#ee82ee",
      wheat: "#f5deb3",
      white: "#fff",
      whitesmoke: "#f5f5f5",
      yellow: "#ff0",
      yellowgreen: "#9acd32"
    };
    exports2.colorsShortNames = {
      "#f0ffff": "azure",
      "#f5f5dc": "beige",
      "#ffe4c4": "bisque",
      "#a52a2a": "brown",
      "#ff7f50": "coral",
      "#ffd700": "gold",
      "#808080": "gray",
      "#008000": "green",
      "#4b0082": "indigo",
      "#fffff0": "ivory",
      "#f0e68c": "khaki",
      "#faf0e6": "linen",
      "#800000": "maroon",
      "#000080": "navy",
      "#808000": "olive",
      "#ffa500": "orange",
      "#da70d6": "orchid",
      "#cd853f": "peru",
      "#ffc0cb": "pink",
      "#dda0dd": "plum",
      "#800080": "purple",
      "#f00": "red",
      "#ff0000": "red",
      "#fa8072": "salmon",
      "#a0522d": "sienna",
      "#c0c0c0": "silver",
      "#fffafa": "snow",
      "#d2b48c": "tan",
      "#008080": "teal",
      "#ff6347": "tomato",
      "#ee82ee": "violet",
      "#f5deb3": "wheat"
    };
    exports2.colorsProps = [
      "color",
      "fill",
      "stroke",
      "stop-color",
      "flood-color",
      "lighting-color"
    ];
  }
});

// node_modules/svgo/plugins/removeEditorsNSData.js
var require_removeEditorsNSData = __commonJS({
  "node_modules/svgo/plugins/removeEditorsNSData.js"(exports2) {
    "use strict";
    var { detachNodeFromParent } = require_xast();
    var { editorNamespaces } = require_collections();
    exports2.type = "visitor";
    exports2.name = "removeEditorsNSData";
    exports2.active = true;
    exports2.description = "removes editors namespaces, elements and attributes";
    exports2.fn = (_root, params) => {
      let namespaces = editorNamespaces;
      if (Array.isArray(params.additionalNamespaces)) {
        namespaces = [...editorNamespaces, ...params.additionalNamespaces];
      }
      const prefixes = [];
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name === "svg") {
              for (const [name, value] of Object.entries(node.attributes)) {
                if (name.startsWith("xmlns:") && namespaces.includes(value)) {
                  prefixes.push(name.slice("xmlns:".length));
                  delete node.attributes[name];
                }
              }
            }
            for (const name of Object.keys(node.attributes)) {
              if (name.includes(":")) {
                const [prefix] = name.split(":");
                if (prefixes.includes(prefix)) {
                  delete node.attributes[name];
                }
              }
            }
            if (node.name.includes(":")) {
              const [prefix] = node.name.split(":");
              if (prefixes.includes(prefix)) {
                detachNodeFromParent(node, parentNode);
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/cleanupAttrs.js
var require_cleanupAttrs = __commonJS({
  "node_modules/svgo/plugins/cleanupAttrs.js"(exports2) {
    "use strict";
    exports2.name = "cleanupAttrs";
    exports2.type = "visitor";
    exports2.active = true;
    exports2.description = "cleanups attributes from newlines, trailing and repeating spaces";
    var regNewlinesNeedSpace = /(\S)\r?\n(\S)/g;
    var regNewlines = /\r?\n/g;
    var regSpaces = /\s{2,}/g;
    exports2.fn = (root, params) => {
      const { newlines = true, trim = true, spaces = true } = params;
      return {
        element: {
          enter: (node) => {
            for (const name of Object.keys(node.attributes)) {
              if (newlines) {
                node.attributes[name] = node.attributes[name].replace(
                  regNewlinesNeedSpace,
                  (match, p1, p2) => p1 + " " + p2
                );
                node.attributes[name] = node.attributes[name].replace(
                  regNewlines,
                  ""
                );
              }
              if (trim) {
                node.attributes[name] = node.attributes[name].trim();
              }
              if (spaces) {
                node.attributes[name] = node.attributes[name].replace(
                  regSpaces,
                  " "
                );
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/lib/svgo/css-class-list.js
var require_css_class_list = __commonJS({
  "node_modules/svgo/lib/svgo/css-class-list.js"(exports2, module2) {
    "use strict";
    var CSSClassList = function(node) {
      this.parentNode = node;
      this.classNames = /* @__PURE__ */ new Set();
      const value = node.attributes.class;
      if (value != null) {
        this.addClassValueHandler();
        this.setClassValue(value);
      }
    };
    CSSClassList.prototype.addClassValueHandler = function() {
      Object.defineProperty(this.parentNode.attributes, "class", {
        get: this.getClassValue.bind(this),
        set: this.setClassValue.bind(this),
        enumerable: true,
        configurable: true
      });
    };
    CSSClassList.prototype.getClassValue = function() {
      var arrClassNames = Array.from(this.classNames);
      return arrClassNames.join(" ");
    };
    CSSClassList.prototype.setClassValue = function(newValue) {
      if (typeof newValue === "undefined") {
        this.classNames.clear();
        return;
      }
      var arrClassNames = newValue.split(" ");
      this.classNames = new Set(arrClassNames);
    };
    CSSClassList.prototype.add = function() {
      this.addClassValueHandler();
      Object.values(arguments).forEach(this._addSingle.bind(this));
    };
    CSSClassList.prototype._addSingle = function(className) {
      this.classNames.add(className);
    };
    CSSClassList.prototype.remove = function() {
      this.addClassValueHandler();
      Object.values(arguments).forEach(this._removeSingle.bind(this));
    };
    CSSClassList.prototype._removeSingle = function(className) {
      this.classNames.delete(className);
    };
    CSSClassList.prototype.item = function(index) {
      var arrClassNames = Array.from(this.classNames);
      return arrClassNames[index];
    };
    CSSClassList.prototype.toggle = function(className, force) {
      if (this.contains(className) || force === false) {
        this.classNames.delete(className);
      }
      this.classNames.add(className);
    };
    CSSClassList.prototype.contains = function(className) {
      return this.classNames.has(className);
    };
    module2.exports = CSSClassList;
  }
});

// node_modules/css-tree/lib/common/List.js
var require_List = __commonJS({
  "node_modules/css-tree/lib/common/List.js"(exports2, module2) {
    function createItem(data) {
      return {
        prev: null,
        next: null,
        data
      };
    }
    function allocateCursor(node, prev, next) {
      var cursor;
      if (cursors !== null) {
        cursor = cursors;
        cursors = cursors.cursor;
        cursor.prev = prev;
        cursor.next = next;
        cursor.cursor = node.cursor;
      } else {
        cursor = {
          prev,
          next,
          cursor: node.cursor
        };
      }
      node.cursor = cursor;
      return cursor;
    }
    function releaseCursor(node) {
      var cursor = node.cursor;
      node.cursor = cursor.cursor;
      cursor.prev = null;
      cursor.next = null;
      cursor.cursor = cursors;
      cursors = cursor;
    }
    var cursors = null;
    var List = function() {
      this.cursor = null;
      this.head = null;
      this.tail = null;
    };
    List.createItem = createItem;
    List.prototype.createItem = createItem;
    List.prototype.updateCursors = function(prevOld, prevNew, nextOld, nextNew) {
      var cursor = this.cursor;
      while (cursor !== null) {
        if (cursor.prev === prevOld) {
          cursor.prev = prevNew;
        }
        if (cursor.next === nextOld) {
          cursor.next = nextNew;
        }
        cursor = cursor.cursor;
      }
    };
    List.prototype.getSize = function() {
      var size = 0;
      var cursor = this.head;
      while (cursor) {
        size++;
        cursor = cursor.next;
      }
      return size;
    };
    List.prototype.fromArray = function(array) {
      var cursor = null;
      this.head = null;
      for (var i = 0; i < array.length; i++) {
        var item = createItem(array[i]);
        if (cursor !== null) {
          cursor.next = item;
        } else {
          this.head = item;
        }
        item.prev = cursor;
        cursor = item;
      }
      this.tail = cursor;
      return this;
    };
    List.prototype.toArray = function() {
      var cursor = this.head;
      var result = [];
      while (cursor) {
        result.push(cursor.data);
        cursor = cursor.next;
      }
      return result;
    };
    List.prototype.toJSON = List.prototype.toArray;
    List.prototype.isEmpty = function() {
      return this.head === null;
    };
    List.prototype.first = function() {
      return this.head && this.head.data;
    };
    List.prototype.last = function() {
      return this.tail && this.tail.data;
    };
    List.prototype.each = function(fn, context) {
      var item;
      if (context === void 0) {
        context = this;
      }
      var cursor = allocateCursor(this, null, this.head);
      while (cursor.next !== null) {
        item = cursor.next;
        cursor.next = item.next;
        fn.call(context, item.data, item, this);
      }
      releaseCursor(this);
    };
    List.prototype.forEach = List.prototype.each;
    List.prototype.eachRight = function(fn, context) {
      var item;
      if (context === void 0) {
        context = this;
      }
      var cursor = allocateCursor(this, this.tail, null);
      while (cursor.prev !== null) {
        item = cursor.prev;
        cursor.prev = item.prev;
        fn.call(context, item.data, item, this);
      }
      releaseCursor(this);
    };
    List.prototype.forEachRight = List.prototype.eachRight;
    List.prototype.reduce = function(fn, initialValue, context) {
      var item;
      if (context === void 0) {
        context = this;
      }
      var cursor = allocateCursor(this, null, this.head);
      var acc = initialValue;
      while (cursor.next !== null) {
        item = cursor.next;
        cursor.next = item.next;
        acc = fn.call(context, acc, item.data, item, this);
      }
      releaseCursor(this);
      return acc;
    };
    List.prototype.reduceRight = function(fn, initialValue, context) {
      var item;
      if (context === void 0) {
        context = this;
      }
      var cursor = allocateCursor(this, this.tail, null);
      var acc = initialValue;
      while (cursor.prev !== null) {
        item = cursor.prev;
        cursor.prev = item.prev;
        acc = fn.call(context, acc, item.data, item, this);
      }
      releaseCursor(this);
      return acc;
    };
    List.prototype.nextUntil = function(start, fn, context) {
      if (start === null) {
        return;
      }
      var item;
      if (context === void 0) {
        context = this;
      }
      var cursor = allocateCursor(this, null, start);
      while (cursor.next !== null) {
        item = cursor.next;
        cursor.next = item.next;
        if (fn.call(context, item.data, item, this)) {
          break;
        }
      }
      releaseCursor(this);
    };
    List.prototype.prevUntil = function(start, fn, context) {
      if (start === null) {
        return;
      }
      var item;
      if (context === void 0) {
        context = this;
      }
      var cursor = allocateCursor(this, start, null);
      while (cursor.prev !== null) {
        item = cursor.prev;
        cursor.prev = item.prev;
        if (fn.call(context, item.data, item, this)) {
          break;
        }
      }
      releaseCursor(this);
    };
    List.prototype.some = function(fn, context) {
      var cursor = this.head;
      if (context === void 0) {
        context = this;
      }
      while (cursor !== null) {
        if (fn.call(context, cursor.data, cursor, this)) {
          return true;
        }
        cursor = cursor.next;
      }
      return false;
    };
    List.prototype.map = function(fn, context) {
      var result = new List();
      var cursor = this.head;
      if (context === void 0) {
        context = this;
      }
      while (cursor !== null) {
        result.appendData(fn.call(context, cursor.data, cursor, this));
        cursor = cursor.next;
      }
      return result;
    };
    List.prototype.filter = function(fn, context) {
      var result = new List();
      var cursor = this.head;
      if (context === void 0) {
        context = this;
      }
      while (cursor !== null) {
        if (fn.call(context, cursor.data, cursor, this)) {
          result.appendData(cursor.data);
        }
        cursor = cursor.next;
      }
      return result;
    };
    List.prototype.clear = function() {
      this.head = null;
      this.tail = null;
    };
    List.prototype.copy = function() {
      var result = new List();
      var cursor = this.head;
      while (cursor !== null) {
        result.insert(createItem(cursor.data));
        cursor = cursor.next;
      }
      return result;
    };
    List.prototype.prepend = function(item) {
      this.updateCursors(null, item, this.head, item);
      if (this.head !== null) {
        this.head.prev = item;
        item.next = this.head;
      } else {
        this.tail = item;
      }
      this.head = item;
      return this;
    };
    List.prototype.prependData = function(data) {
      return this.prepend(createItem(data));
    };
    List.prototype.append = function(item) {
      return this.insert(item);
    };
    List.prototype.appendData = function(data) {
      return this.insert(createItem(data));
    };
    List.prototype.insert = function(item, before) {
      if (before !== void 0 && before !== null) {
        this.updateCursors(before.prev, item, before, item);
        if (before.prev === null) {
          if (this.head !== before) {
            throw new Error("before doesn't belong to list");
          }
          this.head = item;
          before.prev = item;
          item.next = before;
          this.updateCursors(null, item);
        } else {
          before.prev.next = item;
          item.prev = before.prev;
          before.prev = item;
          item.next = before;
        }
      } else {
        this.updateCursors(this.tail, item, null, item);
        if (this.tail !== null) {
          this.tail.next = item;
          item.prev = this.tail;
        } else {
          this.head = item;
        }
        this.tail = item;
      }
      return this;
    };
    List.prototype.insertData = function(data, before) {
      return this.insert(createItem(data), before);
    };
    List.prototype.remove = function(item) {
      this.updateCursors(item, item.prev, item, item.next);
      if (item.prev !== null) {
        item.prev.next = item.next;
      } else {
        if (this.head !== item) {
          throw new Error("item doesn't belong to list");
        }
        this.head = item.next;
      }
      if (item.next !== null) {
        item.next.prev = item.prev;
      } else {
        if (this.tail !== item) {
          throw new Error("item doesn't belong to list");
        }
        this.tail = item.prev;
      }
      item.prev = null;
      item.next = null;
      return item;
    };
    List.prototype.push = function(data) {
      this.insert(createItem(data));
    };
    List.prototype.pop = function() {
      if (this.tail !== null) {
        return this.remove(this.tail);
      }
    };
    List.prototype.unshift = function(data) {
      this.prepend(createItem(data));
    };
    List.prototype.shift = function() {
      if (this.head !== null) {
        return this.remove(this.head);
      }
    };
    List.prototype.prependList = function(list) {
      return this.insertList(list, this.head);
    };
    List.prototype.appendList = function(list) {
      return this.insertList(list);
    };
    List.prototype.insertList = function(list, before) {
      if (list.head === null) {
        return this;
      }
      if (before !== void 0 && before !== null) {
        this.updateCursors(before.prev, list.tail, before, list.head);
        if (before.prev !== null) {
          before.prev.next = list.head;
          list.head.prev = before.prev;
        } else {
          this.head = list.head;
        }
        before.prev = list.tail;
        list.tail.next = before;
      } else {
        this.updateCursors(this.tail, list.tail, null, list.head);
        if (this.tail !== null) {
          this.tail.next = list.head;
          list.head.prev = this.tail;
        } else {
          this.head = list.head;
        }
        this.tail = list.tail;
      }
      list.head = null;
      list.tail = null;
      return this;
    };
    List.prototype.replace = function(oldItem, newItemOrList) {
      if ("head" in newItemOrList) {
        this.insertList(newItemOrList, oldItem);
      } else {
        this.insert(newItemOrList, oldItem);
      }
      this.remove(oldItem);
    };
    module2.exports = List;
  }
});

// node_modules/css-tree/lib/utils/createCustomError.js
var require_createCustomError = __commonJS({
  "node_modules/css-tree/lib/utils/createCustomError.js"(exports2, module2) {
    module2.exports = function createCustomError(name, message) {
      var error = Object.create(SyntaxError.prototype);
      var errorStack = new Error();
      error.name = name;
      error.message = message;
      Object.defineProperty(error, "stack", {
        get: function() {
          return (errorStack.stack || "").replace(/^(.+\n){1,3}/, name + ": " + message + "\n");
        }
      });
      return error;
    };
  }
});

// node_modules/css-tree/lib/common/SyntaxError.js
var require_SyntaxError = __commonJS({
  "node_modules/css-tree/lib/common/SyntaxError.js"(exports2, module2) {
    var createCustomError = require_createCustomError();
    var MAX_LINE_LENGTH = 100;
    var OFFSET_CORRECTION = 60;
    var TAB_REPLACEMENT = "    ";
    function sourceFragment(error, extraLines) {
      function processLines(start, end) {
        return lines.slice(start, end).map(function(line2, idx) {
          var num = String(start + idx + 1);
          while (num.length < maxNumLength) {
            num = " " + num;
          }
          return num + " |" + line2;
        }).join("\n");
      }
      var lines = error.source.split(/\r\n?|\n|\f/);
      var line = error.line;
      var column = error.column;
      var startLine = Math.max(1, line - extraLines) - 1;
      var endLine = Math.min(line + extraLines, lines.length + 1);
      var maxNumLength = Math.max(4, String(endLine).length) + 1;
      var cutLeft = 0;
      column += (TAB_REPLACEMENT.length - 1) * (lines[line - 1].substr(0, column - 1).match(/\t/g) || []).length;
      if (column > MAX_LINE_LENGTH) {
        cutLeft = column - OFFSET_CORRECTION + 3;
        column = OFFSET_CORRECTION - 2;
      }
      for (var i = startLine; i <= endLine; i++) {
        if (i >= 0 && i < lines.length) {
          lines[i] = lines[i].replace(/\t/g, TAB_REPLACEMENT);
          lines[i] = (cutLeft > 0 && lines[i].length > cutLeft ? "\u2026" : "") + lines[i].substr(cutLeft, MAX_LINE_LENGTH - 2) + (lines[i].length > cutLeft + MAX_LINE_LENGTH - 1 ? "\u2026" : "");
        }
      }
      return [
        processLines(startLine, line),
        new Array(column + maxNumLength + 2).join("-") + "^",
        processLines(line, endLine)
      ].filter(Boolean).join("\n");
    }
    var SyntaxError2 = function(message, source, offset, line, column) {
      var error = createCustomError("SyntaxError", message);
      error.source = source;
      error.offset = offset;
      error.line = line;
      error.column = column;
      error.sourceFragment = function(extraLines) {
        return sourceFragment(error, isNaN(extraLines) ? 0 : extraLines);
      };
      Object.defineProperty(error, "formattedMessage", {
        get: function() {
          return "Parse error: " + error.message + "\n" + sourceFragment(error, 2);
        }
      });
      error.parseError = {
        offset,
        line,
        column
      };
      return error;
    };
    module2.exports = SyntaxError2;
  }
});

// node_modules/css-tree/lib/tokenizer/const.js
var require_const = __commonJS({
  "node_modules/css-tree/lib/tokenizer/const.js"(exports2, module2) {
    var TYPE = {
      EOF: 0,
      // <EOF-token>
      Ident: 1,
      // <ident-token>
      Function: 2,
      // <function-token>
      AtKeyword: 3,
      // <at-keyword-token>
      Hash: 4,
      // <hash-token>
      String: 5,
      // <string-token>
      BadString: 6,
      // <bad-string-token>
      Url: 7,
      // <url-token>
      BadUrl: 8,
      // <bad-url-token>
      Delim: 9,
      // <delim-token>
      Number: 10,
      // <number-token>
      Percentage: 11,
      // <percentage-token>
      Dimension: 12,
      // <dimension-token>
      WhiteSpace: 13,
      // <whitespace-token>
      CDO: 14,
      // <CDO-token>
      CDC: 15,
      // <CDC-token>
      Colon: 16,
      // <colon-token>     :
      Semicolon: 17,
      // <semicolon-token> ;
      Comma: 18,
      // <comma-token>     ,
      LeftSquareBracket: 19,
      // <[-token>
      RightSquareBracket: 20,
      // <]-token>
      LeftParenthesis: 21,
      // <(-token>
      RightParenthesis: 22,
      // <)-token>
      LeftCurlyBracket: 23,
      // <{-token>
      RightCurlyBracket: 24,
      // <}-token>
      Comment: 25
    };
    var NAME = Object.keys(TYPE).reduce(function(result, key) {
      result[TYPE[key]] = key;
      return result;
    }, {});
    module2.exports = {
      TYPE,
      NAME
    };
  }
});

// node_modules/css-tree/lib/tokenizer/char-code-definitions.js
var require_char_code_definitions = __commonJS({
  "node_modules/css-tree/lib/tokenizer/char-code-definitions.js"(exports2, module2) {
    var EOF = 0;
    function isDigit(code) {
      return code >= 48 && code <= 57;
    }
    function isHexDigit(code) {
      return isDigit(code) || // 0 .. 9
      code >= 65 && code <= 70 || // A .. F
      code >= 97 && code <= 102;
    }
    function isUppercaseLetter(code) {
      return code >= 65 && code <= 90;
    }
    function isLowercaseLetter(code) {
      return code >= 97 && code <= 122;
    }
    function isLetter(code) {
      return isUppercaseLetter(code) || isLowercaseLetter(code);
    }
    function isNonAscii(code) {
      return code >= 128;
    }
    function isNameStart(code) {
      return isLetter(code) || isNonAscii(code) || code === 95;
    }
    function isName(code) {
      return isNameStart(code) || isDigit(code) || code === 45;
    }
    function isNonPrintable(code) {
      return code >= 0 && code <= 8 || code === 11 || code >= 14 && code <= 31 || code === 127;
    }
    function isNewline(code) {
      return code === 10 || code === 13 || code === 12;
    }
    function isWhiteSpace(code) {
      return isNewline(code) || code === 32 || code === 9;
    }
    function isValidEscape(first, second) {
      if (first !== 92) {
        return false;
      }
      if (isNewline(second) || second === EOF) {
        return false;
      }
      return true;
    }
    function isIdentifierStart(first, second, third) {
      if (first === 45) {
        return isNameStart(second) || second === 45 || isValidEscape(second, third);
      }
      if (isNameStart(first)) {
        return true;
      }
      if (first === 92) {
        return isValidEscape(first, second);
      }
      return false;
    }
    function isNumberStart(first, second, third) {
      if (first === 43 || first === 45) {
        if (isDigit(second)) {
          return 2;
        }
        return second === 46 && isDigit(third) ? 3 : 0;
      }
      if (first === 46) {
        return isDigit(second) ? 2 : 0;
      }
      if (isDigit(first)) {
        return 1;
      }
      return 0;
    }
    function isBOM(code) {
      if (code === 65279) {
        return 1;
      }
      if (code === 65534) {
        return 1;
      }
      return 0;
    }
    var CATEGORY = new Array(128);
    charCodeCategory.Eof = 128;
    charCodeCategory.WhiteSpace = 130;
    charCodeCategory.Digit = 131;
    charCodeCategory.NameStart = 132;
    charCodeCategory.NonPrintable = 133;
    for (i = 0; i < CATEGORY.length; i++) {
      switch (true) {
        case isWhiteSpace(i):
          CATEGORY[i] = charCodeCategory.WhiteSpace;
          break;
        case isDigit(i):
          CATEGORY[i] = charCodeCategory.Digit;
          break;
        case isNameStart(i):
          CATEGORY[i] = charCodeCategory.NameStart;
          break;
        case isNonPrintable(i):
          CATEGORY[i] = charCodeCategory.NonPrintable;
          break;
        default:
          CATEGORY[i] = i || charCodeCategory.Eof;
      }
    }
    var i;
    function charCodeCategory(code) {
      return code < 128 ? CATEGORY[code] : charCodeCategory.NameStart;
    }
    module2.exports = {
      isDigit,
      isHexDigit,
      isUppercaseLetter,
      isLowercaseLetter,
      isLetter,
      isNonAscii,
      isNameStart,
      isName,
      isNonPrintable,
      isNewline,
      isWhiteSpace,
      isValidEscape,
      isIdentifierStart,
      isNumberStart,
      isBOM,
      charCodeCategory
    };
  }
});

// node_modules/css-tree/lib/tokenizer/utils.js
var require_utils = __commonJS({
  "node_modules/css-tree/lib/tokenizer/utils.js"(exports2, module2) {
    var charCodeDef = require_char_code_definitions();
    var isDigit = charCodeDef.isDigit;
    var isHexDigit = charCodeDef.isHexDigit;
    var isUppercaseLetter = charCodeDef.isUppercaseLetter;
    var isName = charCodeDef.isName;
    var isWhiteSpace = charCodeDef.isWhiteSpace;
    var isValidEscape = charCodeDef.isValidEscape;
    function getCharCode(source, offset) {
      return offset < source.length ? source.charCodeAt(offset) : 0;
    }
    function getNewlineLength(source, offset, code) {
      if (code === 13 && getCharCode(source, offset + 1) === 10) {
        return 2;
      }
      return 1;
    }
    function cmpChar(testStr, offset, referenceCode) {
      var code = testStr.charCodeAt(offset);
      if (isUppercaseLetter(code)) {
        code = code | 32;
      }
      return code === referenceCode;
    }
    function cmpStr(testStr, start, end, referenceStr) {
      if (end - start !== referenceStr.length) {
        return false;
      }
      if (start < 0 || end > testStr.length) {
        return false;
      }
      for (var i = start; i < end; i++) {
        var testCode = testStr.charCodeAt(i);
        var referenceCode = referenceStr.charCodeAt(i - start);
        if (isUppercaseLetter(testCode)) {
          testCode = testCode | 32;
        }
        if (testCode !== referenceCode) {
          return false;
        }
      }
      return true;
    }
    function findWhiteSpaceStart(source, offset) {
      for (; offset >= 0; offset--) {
        if (!isWhiteSpace(source.charCodeAt(offset))) {
          break;
        }
      }
      return offset + 1;
    }
    function findWhiteSpaceEnd(source, offset) {
      for (; offset < source.length; offset++) {
        if (!isWhiteSpace(source.charCodeAt(offset))) {
          break;
        }
      }
      return offset;
    }
    function findDecimalNumberEnd(source, offset) {
      for (; offset < source.length; offset++) {
        if (!isDigit(source.charCodeAt(offset))) {
          break;
        }
      }
      return offset;
    }
    function consumeEscaped(source, offset) {
      offset += 2;
      if (isHexDigit(getCharCode(source, offset - 1))) {
        for (var maxOffset = Math.min(source.length, offset + 5); offset < maxOffset; offset++) {
          if (!isHexDigit(getCharCode(source, offset))) {
            break;
          }
        }
        var code = getCharCode(source, offset);
        if (isWhiteSpace(code)) {
          offset += getNewlineLength(source, offset, code);
        }
      }
      return offset;
    }
    function consumeName(source, offset) {
      for (; offset < source.length; offset++) {
        var code = source.charCodeAt(offset);
        if (isName(code)) {
          continue;
        }
        if (isValidEscape(code, getCharCode(source, offset + 1))) {
          offset = consumeEscaped(source, offset) - 1;
          continue;
        }
        break;
      }
      return offset;
    }
    function consumeNumber(source, offset) {
      var code = source.charCodeAt(offset);
      if (code === 43 || code === 45) {
        code = source.charCodeAt(offset += 1);
      }
      if (isDigit(code)) {
        offset = findDecimalNumberEnd(source, offset + 1);
        code = source.charCodeAt(offset);
      }
      if (code === 46 && isDigit(source.charCodeAt(offset + 1))) {
        code = source.charCodeAt(offset += 2);
        offset = findDecimalNumberEnd(source, offset);
      }
      if (cmpChar(
        source,
        offset,
        101
        /* e */
      )) {
        var sign = 0;
        code = source.charCodeAt(offset + 1);
        if (code === 45 || code === 43) {
          sign = 1;
          code = source.charCodeAt(offset + 2);
        }
        if (isDigit(code)) {
          offset = findDecimalNumberEnd(source, offset + 1 + sign + 1);
        }
      }
      return offset;
    }
    function consumeBadUrlRemnants(source, offset) {
      for (; offset < source.length; offset++) {
        var code = source.charCodeAt(offset);
        if (code === 41) {
          offset++;
          break;
        }
        if (isValidEscape(code, getCharCode(source, offset + 1))) {
          offset = consumeEscaped(source, offset);
        }
      }
      return offset;
    }
    module2.exports = {
      consumeEscaped,
      consumeName,
      consumeNumber,
      consumeBadUrlRemnants,
      cmpChar,
      cmpStr,
      getNewlineLength,
      findWhiteSpaceStart,
      findWhiteSpaceEnd
    };
  }
});

// node_modules/css-tree/lib/common/TokenStream.js
var require_TokenStream = __commonJS({
  "node_modules/css-tree/lib/common/TokenStream.js"(exports2, module2) {
    var constants = require_const();
    var TYPE = constants.TYPE;
    var NAME = constants.NAME;
    var utils = require_utils();
    var cmpStr = utils.cmpStr;
    var EOF = TYPE.EOF;
    var WHITESPACE = TYPE.WhiteSpace;
    var COMMENT = TYPE.Comment;
    var OFFSET_MASK = 16777215;
    var TYPE_SHIFT = 24;
    var TokenStream = function() {
      this.offsetAndType = null;
      this.balance = null;
      this.reset();
    };
    TokenStream.prototype = {
      reset: function() {
        this.eof = false;
        this.tokenIndex = -1;
        this.tokenType = 0;
        this.tokenStart = this.firstCharOffset;
        this.tokenEnd = this.firstCharOffset;
      },
      lookupType: function(offset) {
        offset += this.tokenIndex;
        if (offset < this.tokenCount) {
          return this.offsetAndType[offset] >> TYPE_SHIFT;
        }
        return EOF;
      },
      lookupOffset: function(offset) {
        offset += this.tokenIndex;
        if (offset < this.tokenCount) {
          return this.offsetAndType[offset - 1] & OFFSET_MASK;
        }
        return this.source.length;
      },
      lookupValue: function(offset, referenceStr) {
        offset += this.tokenIndex;
        if (offset < this.tokenCount) {
          return cmpStr(
            this.source,
            this.offsetAndType[offset - 1] & OFFSET_MASK,
            this.offsetAndType[offset] & OFFSET_MASK,
            referenceStr
          );
        }
        return false;
      },
      getTokenStart: function(tokenIndex) {
        if (tokenIndex === this.tokenIndex) {
          return this.tokenStart;
        }
        if (tokenIndex > 0) {
          return tokenIndex < this.tokenCount ? this.offsetAndType[tokenIndex - 1] & OFFSET_MASK : this.offsetAndType[this.tokenCount] & OFFSET_MASK;
        }
        return this.firstCharOffset;
      },
      // TODO: -> skipUntilBalanced
      getRawLength: function(startToken, mode) {
        var cursor = startToken;
        var balanceEnd;
        var offset = this.offsetAndType[Math.max(cursor - 1, 0)] & OFFSET_MASK;
        var type;
        loop:
          for (; cursor < this.tokenCount; cursor++) {
            balanceEnd = this.balance[cursor];
            if (balanceEnd < startToken) {
              break loop;
            }
            type = this.offsetAndType[cursor] >> TYPE_SHIFT;
            switch (mode(type, this.source, offset)) {
              case 1:
                break loop;
              case 2:
                cursor++;
                break loop;
              default:
                if (this.balance[balanceEnd] === cursor) {
                  cursor = balanceEnd;
                }
                offset = this.offsetAndType[cursor] & OFFSET_MASK;
            }
          }
        return cursor - this.tokenIndex;
      },
      isBalanceEdge: function(pos) {
        return this.balance[this.tokenIndex] < pos;
      },
      isDelim: function(code, offset) {
        if (offset) {
          return this.lookupType(offset) === TYPE.Delim && this.source.charCodeAt(this.lookupOffset(offset)) === code;
        }
        return this.tokenType === TYPE.Delim && this.source.charCodeAt(this.tokenStart) === code;
      },
      getTokenValue: function() {
        return this.source.substring(this.tokenStart, this.tokenEnd);
      },
      getTokenLength: function() {
        return this.tokenEnd - this.tokenStart;
      },
      substrToCursor: function(start) {
        return this.source.substring(start, this.tokenStart);
      },
      skipWS: function() {
        for (var i = this.tokenIndex, skipTokenCount = 0; i < this.tokenCount; i++, skipTokenCount++) {
          if (this.offsetAndType[i] >> TYPE_SHIFT !== WHITESPACE) {
            break;
          }
        }
        if (skipTokenCount > 0) {
          this.skip(skipTokenCount);
        }
      },
      skipSC: function() {
        while (this.tokenType === WHITESPACE || this.tokenType === COMMENT) {
          this.next();
        }
      },
      skip: function(tokenCount) {
        var next = this.tokenIndex + tokenCount;
        if (next < this.tokenCount) {
          this.tokenIndex = next;
          this.tokenStart = this.offsetAndType[next - 1] & OFFSET_MASK;
          next = this.offsetAndType[next];
          this.tokenType = next >> TYPE_SHIFT;
          this.tokenEnd = next & OFFSET_MASK;
        } else {
          this.tokenIndex = this.tokenCount;
          this.next();
        }
      },
      next: function() {
        var next = this.tokenIndex + 1;
        if (next < this.tokenCount) {
          this.tokenIndex = next;
          this.tokenStart = this.tokenEnd;
          next = this.offsetAndType[next];
          this.tokenType = next >> TYPE_SHIFT;
          this.tokenEnd = next & OFFSET_MASK;
        } else {
          this.tokenIndex = this.tokenCount;
          this.eof = true;
          this.tokenType = EOF;
          this.tokenStart = this.tokenEnd = this.source.length;
        }
      },
      forEachToken(fn) {
        for (var i = 0, offset = this.firstCharOffset; i < this.tokenCount; i++) {
          var start = offset;
          var item = this.offsetAndType[i];
          var end = item & OFFSET_MASK;
          var type = item >> TYPE_SHIFT;
          offset = end;
          fn(type, start, end, i);
        }
      },
      dump() {
        var tokens = new Array(this.tokenCount);
        this.forEachToken((type, start, end, index) => {
          tokens[index] = {
            idx: index,
            type: NAME[type],
            chunk: this.source.substring(start, end),
            balance: this.balance[index]
          };
        });
        return tokens;
      }
    };
    module2.exports = TokenStream;
  }
});

// node_modules/css-tree/lib/definition-syntax/generate.js
var require_generate = __commonJS({
  "node_modules/css-tree/lib/definition-syntax/generate.js"(exports2, module2) {
    function noop(value) {
      return value;
    }
    function generateMultiplier(multiplier) {
      if (multiplier.min === 0 && multiplier.max === 0) {
        return "*";
      }
      if (multiplier.min === 0 && multiplier.max === 1) {
        return "?";
      }
      if (multiplier.min === 1 && multiplier.max === 0) {
        return multiplier.comma ? "#" : "+";
      }
      if (multiplier.min === 1 && multiplier.max === 1) {
        return "";
      }
      return (multiplier.comma ? "#" : "") + (multiplier.min === multiplier.max ? "{" + multiplier.min + "}" : "{" + multiplier.min + "," + (multiplier.max !== 0 ? multiplier.max : "") + "}");
    }
    function generateTypeOpts(node) {
      switch (node.type) {
        case "Range":
          return " [" + (node.min === null ? "-\u221E" : node.min) + "," + (node.max === null ? "\u221E" : node.max) + "]";
        default:
          throw new Error("Unknown node type `" + node.type + "`");
      }
    }
    function generateSequence(node, decorate, forceBraces, compact) {
      var combinator = node.combinator === " " || compact ? node.combinator : " " + node.combinator + " ";
      var result = node.terms.map(function(term) {
        return generate(term, decorate, forceBraces, compact);
      }).join(combinator);
      if (node.explicit || forceBraces) {
        result = (compact || result[0] === "," ? "[" : "[ ") + result + (compact ? "]" : " ]");
      }
      return result;
    }
    function generate(node, decorate, forceBraces, compact) {
      var result;
      switch (node.type) {
        case "Group":
          result = generateSequence(node, decorate, forceBraces, compact) + (node.disallowEmpty ? "!" : "");
          break;
        case "Multiplier":
          return generate(node.term, decorate, forceBraces, compact) + decorate(generateMultiplier(node), node);
        case "Type":
          result = "<" + node.name + (node.opts ? decorate(generateTypeOpts(node.opts), node.opts) : "") + ">";
          break;
        case "Property":
          result = "<'" + node.name + "'>";
          break;
        case "Keyword":
          result = node.name;
          break;
        case "AtKeyword":
          result = "@" + node.name;
          break;
        case "Function":
          result = node.name + "(";
          break;
        case "String":
        case "Token":
          result = node.value;
          break;
        case "Comma":
          result = ",";
          break;
        default:
          throw new Error("Unknown node type `" + node.type + "`");
      }
      return decorate(result, node);
    }
    module2.exports = function(node, options) {
      var decorate = noop;
      var forceBraces = false;
      var compact = false;
      if (typeof options === "function") {
        decorate = options;
      } else if (options) {
        forceBraces = Boolean(options.forceBraces);
        compact = Boolean(options.compact);
        if (typeof options.decorate === "function") {
          decorate = options.decorate;
        }
      }
      return generate(node, decorate, forceBraces, compact);
    };
  }
});

// node_modules/css-tree/lib/lexer/error.js
var require_error = __commonJS({
  "node_modules/css-tree/lib/lexer/error.js"(exports2, module2) {
    var createCustomError = require_createCustomError();
    var generate = require_generate();
    var defaultLoc = { offset: 0, line: 1, column: 1 };
    function locateMismatch(matchResult, node) {
      const tokens = matchResult.tokens;
      const longestMatch = matchResult.longestMatch;
      const mismatchNode = longestMatch < tokens.length ? tokens[longestMatch].node || null : null;
      const badNode = mismatchNode !== node ? mismatchNode : null;
      let mismatchOffset = 0;
      let mismatchLength = 0;
      let entries = 0;
      let css = "";
      let start;
      let end;
      for (let i = 0; i < tokens.length; i++) {
        const token = tokens[i].value;
        if (i === longestMatch) {
          mismatchLength = token.length;
          mismatchOffset = css.length;
        }
        if (badNode !== null && tokens[i].node === badNode) {
          if (i <= longestMatch) {
            entries++;
          } else {
            entries = 0;
          }
        }
        css += token;
      }
      if (longestMatch === tokens.length || entries > 1) {
        start = fromLoc(badNode || node, "end") || buildLoc(defaultLoc, css);
        end = buildLoc(start);
      } else {
        start = fromLoc(badNode, "start") || buildLoc(fromLoc(node, "start") || defaultLoc, css.slice(0, mismatchOffset));
        end = fromLoc(badNode, "end") || buildLoc(start, css.substr(mismatchOffset, mismatchLength));
      }
      return {
        css,
        mismatchOffset,
        mismatchLength,
        start,
        end
      };
    }
    function fromLoc(node, point) {
      const value = node && node.loc && node.loc[point];
      if (value) {
        return "line" in value ? buildLoc(value) : value;
      }
      return null;
    }
    function buildLoc({ offset, line, column }, extra) {
      const loc = {
        offset,
        line,
        column
      };
      if (extra) {
        const lines = extra.split(/\n|\r\n?|\f/);
        loc.offset += extra.length;
        loc.line += lines.length - 1;
        loc.column = lines.length === 1 ? loc.column + extra.length : lines.pop().length + 1;
      }
      return loc;
    }
    var SyntaxReferenceError = function(type, referenceName) {
      const error = createCustomError(
        "SyntaxReferenceError",
        type + (referenceName ? " `" + referenceName + "`" : "")
      );
      error.reference = referenceName;
      return error;
    };
    var SyntaxMatchError = function(message, syntax, node, matchResult) {
      const error = createCustomError("SyntaxMatchError", message);
      const {
        css,
        mismatchOffset,
        mismatchLength,
        start,
        end
      } = locateMismatch(matchResult, node);
      error.rawMessage = message;
      error.syntax = syntax ? generate(syntax) : "<generic>";
      error.css = css;
      error.mismatchOffset = mismatchOffset;
      error.mismatchLength = mismatchLength;
      error.message = message + "\n  syntax: " + error.syntax + "\n   value: " + (css || "<empty string>") + "\n  --------" + new Array(error.mismatchOffset + 1).join("-") + "^";
      Object.assign(error, start);
      error.loc = {
        source: node && node.loc && node.loc.source || "<unknown>",
        start,
        end
      };
      return error;
    };
    module2.exports = {
      SyntaxReferenceError,
      SyntaxMatchError
    };
  }
});

// node_modules/css-tree/lib/utils/names.js
var require_names = __commonJS({
  "node_modules/css-tree/lib/utils/names.js"(exports2, module2) {
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var keywords = /* @__PURE__ */ Object.create(null);
    var properties = /* @__PURE__ */ Object.create(null);
    var HYPHENMINUS = 45;
    function isCustomProperty(str, offset) {
      offset = offset || 0;
      return str.length - offset >= 2 && str.charCodeAt(offset) === HYPHENMINUS && str.charCodeAt(offset + 1) === HYPHENMINUS;
    }
    function getVendorPrefix(str, offset) {
      offset = offset || 0;
      if (str.length - offset >= 3) {
        if (str.charCodeAt(offset) === HYPHENMINUS && str.charCodeAt(offset + 1) !== HYPHENMINUS) {
          var secondDashIndex = str.indexOf("-", offset + 2);
          if (secondDashIndex !== -1) {
            return str.substring(offset, secondDashIndex + 1);
          }
        }
      }
      return "";
    }
    function getKeywordDescriptor(keyword) {
      if (hasOwnProperty2.call(keywords, keyword)) {
        return keywords[keyword];
      }
      var name = keyword.toLowerCase();
      if (hasOwnProperty2.call(keywords, name)) {
        return keywords[keyword] = keywords[name];
      }
      var custom = isCustomProperty(name, 0);
      var vendor = !custom ? getVendorPrefix(name, 0) : "";
      return keywords[keyword] = Object.freeze({
        basename: name.substr(vendor.length),
        name,
        vendor,
        prefix: vendor,
        custom
      });
    }
    function getPropertyDescriptor(property) {
      if (hasOwnProperty2.call(properties, property)) {
        return properties[property];
      }
      var name = property;
      var hack = property[0];
      if (hack === "/") {
        hack = property[1] === "/" ? "//" : "/";
      } else if (hack !== "_" && hack !== "*" && hack !== "$" && hack !== "#" && hack !== "+" && hack !== "&") {
        hack = "";
      }
      var custom = isCustomProperty(name, hack.length);
      if (!custom) {
        name = name.toLowerCase();
        if (hasOwnProperty2.call(properties, name)) {
          return properties[property] = properties[name];
        }
      }
      var vendor = !custom ? getVendorPrefix(name, hack.length) : "";
      var prefix = name.substr(0, hack.length + vendor.length);
      return properties[property] = Object.freeze({
        basename: name.substr(prefix.length),
        name: name.substr(hack.length),
        hack,
        vendor,
        prefix,
        custom
      });
    }
    module2.exports = {
      keyword: getKeywordDescriptor,
      property: getPropertyDescriptor,
      isCustomProperty,
      vendorPrefix: getVendorPrefix
    };
  }
});

// node_modules/css-tree/lib/common/adopt-buffer.js
var require_adopt_buffer = __commonJS({
  "node_modules/css-tree/lib/common/adopt-buffer.js"(exports2, module2) {
    var MIN_SIZE = 16 * 1024;
    var SafeUint32Array = typeof Uint32Array !== "undefined" ? Uint32Array : Array;
    module2.exports = function adoptBuffer(buffer, size) {
      if (buffer === null || buffer.length < size) {
        return new SafeUint32Array(Math.max(size + 1024, MIN_SIZE));
      }
      return buffer;
    };
  }
});

// node_modules/css-tree/lib/tokenizer/index.js
var require_tokenizer = __commonJS({
  "node_modules/css-tree/lib/tokenizer/index.js"(exports2, module2) {
    var TokenStream = require_TokenStream();
    var adoptBuffer = require_adopt_buffer();
    var constants = require_const();
    var TYPE = constants.TYPE;
    var charCodeDefinitions = require_char_code_definitions();
    var isNewline = charCodeDefinitions.isNewline;
    var isName = charCodeDefinitions.isName;
    var isValidEscape = charCodeDefinitions.isValidEscape;
    var isNumberStart = charCodeDefinitions.isNumberStart;
    var isIdentifierStart = charCodeDefinitions.isIdentifierStart;
    var charCodeCategory = charCodeDefinitions.charCodeCategory;
    var isBOM = charCodeDefinitions.isBOM;
    var utils = require_utils();
    var cmpStr = utils.cmpStr;
    var getNewlineLength = utils.getNewlineLength;
    var findWhiteSpaceEnd = utils.findWhiteSpaceEnd;
    var consumeEscaped = utils.consumeEscaped;
    var consumeName = utils.consumeName;
    var consumeNumber = utils.consumeNumber;
    var consumeBadUrlRemnants = utils.consumeBadUrlRemnants;
    var OFFSET_MASK = 16777215;
    var TYPE_SHIFT = 24;
    function tokenize(source, stream) {
      function getCharCode(offset2) {
        return offset2 < sourceLength ? source.charCodeAt(offset2) : 0;
      }
      function consumeNumericToken() {
        offset = consumeNumber(source, offset);
        if (isIdentifierStart(getCharCode(offset), getCharCode(offset + 1), getCharCode(offset + 2))) {
          type = TYPE.Dimension;
          offset = consumeName(source, offset);
          return;
        }
        if (getCharCode(offset) === 37) {
          type = TYPE.Percentage;
          offset++;
          return;
        }
        type = TYPE.Number;
      }
      function consumeIdentLikeToken() {
        const nameStartOffset = offset;
        offset = consumeName(source, offset);
        if (cmpStr(source, nameStartOffset, offset, "url") && getCharCode(offset) === 40) {
          offset = findWhiteSpaceEnd(source, offset + 1);
          if (getCharCode(offset) === 34 || getCharCode(offset) === 39) {
            type = TYPE.Function;
            offset = nameStartOffset + 4;
            return;
          }
          consumeUrlToken();
          return;
        }
        if (getCharCode(offset) === 40) {
          type = TYPE.Function;
          offset++;
          return;
        }
        type = TYPE.Ident;
      }
      function consumeStringToken(endingCodePoint) {
        if (!endingCodePoint) {
          endingCodePoint = getCharCode(offset++);
        }
        type = TYPE.String;
        for (; offset < source.length; offset++) {
          var code2 = source.charCodeAt(offset);
          switch (charCodeCategory(code2)) {
            case endingCodePoint:
              offset++;
              return;
            case charCodeCategory.Eof:
              return;
            case charCodeCategory.WhiteSpace:
              if (isNewline(code2)) {
                offset += getNewlineLength(source, offset, code2);
                type = TYPE.BadString;
                return;
              }
              break;
            case 92:
              if (offset === source.length - 1) {
                break;
              }
              var nextCode = getCharCode(offset + 1);
              if (isNewline(nextCode)) {
                offset += getNewlineLength(source, offset + 1, nextCode);
              } else if (isValidEscape(code2, nextCode)) {
                offset = consumeEscaped(source, offset) - 1;
              }
              break;
          }
        }
      }
      function consumeUrlToken() {
        type = TYPE.Url;
        offset = findWhiteSpaceEnd(source, offset);
        for (; offset < source.length; offset++) {
          var code2 = source.charCodeAt(offset);
          switch (charCodeCategory(code2)) {
            case 41:
              offset++;
              return;
            case charCodeCategory.Eof:
              return;
            case charCodeCategory.WhiteSpace:
              offset = findWhiteSpaceEnd(source, offset);
              if (getCharCode(offset) === 41 || offset >= source.length) {
                if (offset < source.length) {
                  offset++;
                }
                return;
              }
              offset = consumeBadUrlRemnants(source, offset);
              type = TYPE.BadUrl;
              return;
            case 34:
            case 39:
            case 40:
            case charCodeCategory.NonPrintable:
              offset = consumeBadUrlRemnants(source, offset);
              type = TYPE.BadUrl;
              return;
            case 92:
              if (isValidEscape(code2, getCharCode(offset + 1))) {
                offset = consumeEscaped(source, offset) - 1;
                break;
              }
              offset = consumeBadUrlRemnants(source, offset);
              type = TYPE.BadUrl;
              return;
          }
        }
      }
      if (!stream) {
        stream = new TokenStream();
      }
      source = String(source || "");
      var sourceLength = source.length;
      var offsetAndType = adoptBuffer(stream.offsetAndType, sourceLength + 1);
      var balance = adoptBuffer(stream.balance, sourceLength + 1);
      var tokenCount = 0;
      var start = isBOM(getCharCode(0));
      var offset = start;
      var balanceCloseType = 0;
      var balanceStart = 0;
      var balancePrev = 0;
      while (offset < sourceLength) {
        var code = source.charCodeAt(offset);
        var type = 0;
        balance[tokenCount] = sourceLength;
        switch (charCodeCategory(code)) {
          case charCodeCategory.WhiteSpace:
            type = TYPE.WhiteSpace;
            offset = findWhiteSpaceEnd(source, offset + 1);
            break;
          case 34:
            consumeStringToken();
            break;
          case 35:
            if (isName(getCharCode(offset + 1)) || isValidEscape(getCharCode(offset + 1), getCharCode(offset + 2))) {
              type = TYPE.Hash;
              offset = consumeName(source, offset + 1);
            } else {
              type = TYPE.Delim;
              offset++;
            }
            break;
          case 39:
            consumeStringToken();
            break;
          case 40:
            type = TYPE.LeftParenthesis;
            offset++;
            break;
          case 41:
            type = TYPE.RightParenthesis;
            offset++;
            break;
          case 43:
            if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
              consumeNumericToken();
            } else {
              type = TYPE.Delim;
              offset++;
            }
            break;
          case 44:
            type = TYPE.Comma;
            offset++;
            break;
          case 45:
            if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
              consumeNumericToken();
            } else {
              if (getCharCode(offset + 1) === 45 && getCharCode(offset + 2) === 62) {
                type = TYPE.CDC;
                offset = offset + 3;
              } else {
                if (isIdentifierStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
                  consumeIdentLikeToken();
                } else {
                  type = TYPE.Delim;
                  offset++;
                }
              }
            }
            break;
          case 46:
            if (isNumberStart(code, getCharCode(offset + 1), getCharCode(offset + 2))) {
              consumeNumericToken();
            } else {
              type = TYPE.Delim;
              offset++;
            }
            break;
          case 47:
            if (getCharCode(offset + 1) === 42) {
              type = TYPE.Comment;
              offset = source.indexOf("*/", offset + 2) + 2;
              if (offset === 1) {
                offset = source.length;
              }
            } else {
              type = TYPE.Delim;
              offset++;
            }
            break;
          case 58:
            type = TYPE.Colon;
            offset++;
            break;
          case 59:
            type = TYPE.Semicolon;
            offset++;
            break;
          case 60:
            if (getCharCode(offset + 1) === 33 && getCharCode(offset + 2) === 45 && getCharCode(offset + 3) === 45) {
              type = TYPE.CDO;
              offset = offset + 4;
            } else {
              type = TYPE.Delim;
              offset++;
            }
            break;
          case 64:
            if (isIdentifierStart(getCharCode(offset + 1), getCharCode(offset + 2), getCharCode(offset + 3))) {
              type = TYPE.AtKeyword;
              offset = consumeName(source, offset + 1);
            } else {
              type = TYPE.Delim;
              offset++;
            }
            break;
          case 91:
            type = TYPE.LeftSquareBracket;
            offset++;
            break;
          case 92:
            if (isValidEscape(code, getCharCode(offset + 1))) {
              consumeIdentLikeToken();
            } else {
              type = TYPE.Delim;
              offset++;
            }
            break;
          case 93:
            type = TYPE.RightSquareBracket;
            offset++;
            break;
          case 123:
            type = TYPE.LeftCurlyBracket;
            offset++;
            break;
          case 125:
            type = TYPE.RightCurlyBracket;
            offset++;
            break;
          case charCodeCategory.Digit:
            consumeNumericToken();
            break;
          case charCodeCategory.NameStart:
            consumeIdentLikeToken();
            break;
          case charCodeCategory.Eof:
            break;
          default:
            type = TYPE.Delim;
            offset++;
        }
        switch (type) {
          case balanceCloseType:
            balancePrev = balanceStart & OFFSET_MASK;
            balanceStart = balance[balancePrev];
            balanceCloseType = balanceStart >> TYPE_SHIFT;
            balance[tokenCount] = balancePrev;
            balance[balancePrev++] = tokenCount;
            for (; balancePrev < tokenCount; balancePrev++) {
              if (balance[balancePrev] === sourceLength) {
                balance[balancePrev] = tokenCount;
              }
            }
            break;
          case TYPE.LeftParenthesis:
          case TYPE.Function:
            balance[tokenCount] = balanceStart;
            balanceCloseType = TYPE.RightParenthesis;
            balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;
            break;
          case TYPE.LeftSquareBracket:
            balance[tokenCount] = balanceStart;
            balanceCloseType = TYPE.RightSquareBracket;
            balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;
            break;
          case TYPE.LeftCurlyBracket:
            balance[tokenCount] = balanceStart;
            balanceCloseType = TYPE.RightCurlyBracket;
            balanceStart = balanceCloseType << TYPE_SHIFT | tokenCount;
            break;
        }
        offsetAndType[tokenCount++] = type << TYPE_SHIFT | offset;
      }
      offsetAndType[tokenCount] = TYPE.EOF << TYPE_SHIFT | offset;
      balance[tokenCount] = sourceLength;
      balance[sourceLength] = sourceLength;
      while (balanceStart !== 0) {
        balancePrev = balanceStart & OFFSET_MASK;
        balanceStart = balance[balancePrev];
        balance[balancePrev] = sourceLength;
      }
      stream.source = source;
      stream.firstCharOffset = start;
      stream.offsetAndType = offsetAndType;
      stream.tokenCount = tokenCount;
      stream.balance = balance;
      stream.reset();
      stream.next();
      return stream;
    }
    Object.keys(constants).forEach(function(key) {
      tokenize[key] = constants[key];
    });
    Object.keys(charCodeDefinitions).forEach(function(key) {
      tokenize[key] = charCodeDefinitions[key];
    });
    Object.keys(utils).forEach(function(key) {
      tokenize[key] = utils[key];
    });
    module2.exports = tokenize;
  }
});

// node_modules/css-tree/lib/lexer/generic-an-plus-b.js
var require_generic_an_plus_b = __commonJS({
  "node_modules/css-tree/lib/lexer/generic-an-plus-b.js"(exports2, module2) {
    var isDigit = require_tokenizer().isDigit;
    var cmpChar = require_tokenizer().cmpChar;
    var TYPE = require_tokenizer().TYPE;
    var DELIM = TYPE.Delim;
    var WHITESPACE = TYPE.WhiteSpace;
    var COMMENT = TYPE.Comment;
    var IDENT = TYPE.Ident;
    var NUMBER = TYPE.Number;
    var DIMENSION = TYPE.Dimension;
    var PLUSSIGN = 43;
    var HYPHENMINUS = 45;
    var N = 110;
    var DISALLOW_SIGN = true;
    var ALLOW_SIGN = false;
    function isDelim(token, code) {
      return token !== null && token.type === DELIM && token.value.charCodeAt(0) === code;
    }
    function skipSC(token, offset, getNextToken) {
      while (token !== null && (token.type === WHITESPACE || token.type === COMMENT)) {
        token = getNextToken(++offset);
      }
      return offset;
    }
    function checkInteger(token, valueOffset, disallowSign, offset) {
      if (!token) {
        return 0;
      }
      var code = token.value.charCodeAt(valueOffset);
      if (code === PLUSSIGN || code === HYPHENMINUS) {
        if (disallowSign) {
          return 0;
        }
        valueOffset++;
      }
      for (; valueOffset < token.value.length; valueOffset++) {
        if (!isDigit(token.value.charCodeAt(valueOffset))) {
          return 0;
        }
      }
      return offset + 1;
    }
    function consumeB(token, offset_, getNextToken) {
      var sign = false;
      var offset = skipSC(token, offset_, getNextToken);
      token = getNextToken(offset);
      if (token === null) {
        return offset_;
      }
      if (token.type !== NUMBER) {
        if (isDelim(token, PLUSSIGN) || isDelim(token, HYPHENMINUS)) {
          sign = true;
          offset = skipSC(getNextToken(++offset), offset, getNextToken);
          token = getNextToken(offset);
          if (token === null && token.type !== NUMBER) {
            return 0;
          }
        } else {
          return offset_;
        }
      }
      if (!sign) {
        var code = token.value.charCodeAt(0);
        if (code !== PLUSSIGN && code !== HYPHENMINUS) {
          return 0;
        }
      }
      return checkInteger(token, sign ? 0 : 1, sign, offset);
    }
    module2.exports = function anPlusB(token, getNextToken) {
      var offset = 0;
      if (!token) {
        return 0;
      }
      if (token.type === NUMBER) {
        return checkInteger(token, 0, ALLOW_SIGN, offset);
      } else if (token.type === IDENT && token.value.charCodeAt(0) === HYPHENMINUS) {
        if (!cmpChar(token.value, 1, N)) {
          return 0;
        }
        switch (token.value.length) {
          case 2:
            return consumeB(getNextToken(++offset), offset, getNextToken);
          case 3:
            if (token.value.charCodeAt(2) !== HYPHENMINUS) {
              return 0;
            }
            offset = skipSC(getNextToken(++offset), offset, getNextToken);
            token = getNextToken(offset);
            return checkInteger(token, 0, DISALLOW_SIGN, offset);
          default:
            if (token.value.charCodeAt(2) !== HYPHENMINUS) {
              return 0;
            }
            return checkInteger(token, 3, DISALLOW_SIGN, offset);
        }
      } else if (token.type === IDENT || isDelim(token, PLUSSIGN) && getNextToken(offset + 1).type === IDENT) {
        if (token.type !== IDENT) {
          token = getNextToken(++offset);
        }
        if (token === null || !cmpChar(token.value, 0, N)) {
          return 0;
        }
        switch (token.value.length) {
          case 1:
            return consumeB(getNextToken(++offset), offset, getNextToken);
          case 2:
            if (token.value.charCodeAt(1) !== HYPHENMINUS) {
              return 0;
            }
            offset = skipSC(getNextToken(++offset), offset, getNextToken);
            token = getNextToken(offset);
            return checkInteger(token, 0, DISALLOW_SIGN, offset);
          default:
            if (token.value.charCodeAt(1) !== HYPHENMINUS) {
              return 0;
            }
            return checkInteger(token, 2, DISALLOW_SIGN, offset);
        }
      } else if (token.type === DIMENSION) {
        var code = token.value.charCodeAt(0);
        var sign = code === PLUSSIGN || code === HYPHENMINUS ? 1 : 0;
        for (var i = sign; i < token.value.length; i++) {
          if (!isDigit(token.value.charCodeAt(i))) {
            break;
          }
        }
        if (i === sign) {
          return 0;
        }
        if (!cmpChar(token.value, i, N)) {
          return 0;
        }
        if (i + 1 === token.value.length) {
          return consumeB(getNextToken(++offset), offset, getNextToken);
        } else {
          if (token.value.charCodeAt(i + 1) !== HYPHENMINUS) {
            return 0;
          }
          if (i + 2 === token.value.length) {
            offset = skipSC(getNextToken(++offset), offset, getNextToken);
            token = getNextToken(offset);
            return checkInteger(token, 0, DISALLOW_SIGN, offset);
          } else {
            return checkInteger(token, i + 2, DISALLOW_SIGN, offset);
          }
        }
      }
      return 0;
    };
  }
});

// node_modules/css-tree/lib/lexer/generic-urange.js
var require_generic_urange = __commonJS({
  "node_modules/css-tree/lib/lexer/generic-urange.js"(exports2, module2) {
    var isHexDigit = require_tokenizer().isHexDigit;
    var cmpChar = require_tokenizer().cmpChar;
    var TYPE = require_tokenizer().TYPE;
    var IDENT = TYPE.Ident;
    var DELIM = TYPE.Delim;
    var NUMBER = TYPE.Number;
    var DIMENSION = TYPE.Dimension;
    var PLUSSIGN = 43;
    var HYPHENMINUS = 45;
    var QUESTIONMARK = 63;
    var U = 117;
    function isDelim(token, code) {
      return token !== null && token.type === DELIM && token.value.charCodeAt(0) === code;
    }
    function startsWith(token, code) {
      return token.value.charCodeAt(0) === code;
    }
    function hexSequence(token, offset, allowDash) {
      for (var pos = offset, hexlen = 0; pos < token.value.length; pos++) {
        var code = token.value.charCodeAt(pos);
        if (code === HYPHENMINUS && allowDash && hexlen !== 0) {
          if (hexSequence(token, offset + hexlen + 1, false) > 0) {
            return 6;
          }
          return 0;
        }
        if (!isHexDigit(code)) {
          return 0;
        }
        if (++hexlen > 6) {
          return 0;
        }
        ;
      }
      return hexlen;
    }
    function withQuestionMarkSequence(consumed, length, getNextToken) {
      if (!consumed) {
        return 0;
      }
      while (isDelim(getNextToken(length), QUESTIONMARK)) {
        if (++consumed > 6) {
          return 0;
        }
        length++;
      }
      return length;
    }
    module2.exports = function urange(token, getNextToken) {
      var length = 0;
      if (token === null || token.type !== IDENT || !cmpChar(token.value, 0, U)) {
        return 0;
      }
      token = getNextToken(++length);
      if (token === null) {
        return 0;
      }
      if (isDelim(token, PLUSSIGN)) {
        token = getNextToken(++length);
        if (token === null) {
          return 0;
        }
        if (token.type === IDENT) {
          return withQuestionMarkSequence(hexSequence(token, 0, true), ++length, getNextToken);
        }
        if (isDelim(token, QUESTIONMARK)) {
          return withQuestionMarkSequence(1, ++length, getNextToken);
        }
        return 0;
      }
      if (token.type === NUMBER) {
        if (!startsWith(token, PLUSSIGN)) {
          return 0;
        }
        var consumedHexLength = hexSequence(token, 1, true);
        if (consumedHexLength === 0) {
          return 0;
        }
        token = getNextToken(++length);
        if (token === null) {
          return length;
        }
        if (token.type === DIMENSION || token.type === NUMBER) {
          if (!startsWith(token, HYPHENMINUS) || !hexSequence(token, 1, false)) {
            return 0;
          }
          return length + 1;
        }
        return withQuestionMarkSequence(consumedHexLength, length, getNextToken);
      }
      if (token.type === DIMENSION) {
        if (!startsWith(token, PLUSSIGN)) {
          return 0;
        }
        return withQuestionMarkSequence(hexSequence(token, 1, true), ++length, getNextToken);
      }
      return 0;
    };
  }
});

// node_modules/css-tree/lib/lexer/generic.js
var require_generic = __commonJS({
  "node_modules/css-tree/lib/lexer/generic.js"(exports2, module2) {
    var tokenizer = require_tokenizer();
    var isIdentifierStart = tokenizer.isIdentifierStart;
    var isHexDigit = tokenizer.isHexDigit;
    var isDigit = tokenizer.isDigit;
    var cmpStr = tokenizer.cmpStr;
    var consumeNumber = tokenizer.consumeNumber;
    var TYPE = tokenizer.TYPE;
    var anPlusB = require_generic_an_plus_b();
    var urange = require_generic_urange();
    var cssWideKeywords = ["unset", "initial", "inherit"];
    var calcFunctionNames = ["calc(", "-moz-calc(", "-webkit-calc("];
    var LENGTH = {
      // absolute length units
      "px": true,
      "mm": true,
      "cm": true,
      "in": true,
      "pt": true,
      "pc": true,
      "q": true,
      // relative length units
      "em": true,
      "ex": true,
      "ch": true,
      "rem": true,
      // viewport-percentage lengths
      "vh": true,
      "vw": true,
      "vmin": true,
      "vmax": true,
      "vm": true
    };
    var ANGLE = {
      "deg": true,
      "grad": true,
      "rad": true,
      "turn": true
    };
    var TIME = {
      "s": true,
      "ms": true
    };
    var FREQUENCY = {
      "hz": true,
      "khz": true
    };
    var RESOLUTION = {
      "dpi": true,
      "dpcm": true,
      "dppx": true,
      "x": true
      // https://github.com/w3c/csswg-drafts/issues/461
    };
    var FLEX = {
      "fr": true
    };
    var DECIBEL = {
      "db": true
    };
    var SEMITONES = {
      "st": true
    };
    function charCode(str, index) {
      return index < str.length ? str.charCodeAt(index) : 0;
    }
    function eqStr(actual, expected) {
      return cmpStr(actual, 0, actual.length, expected);
    }
    function eqStrAny(actual, expected) {
      for (var i = 0; i < expected.length; i++) {
        if (eqStr(actual, expected[i])) {
          return true;
        }
      }
      return false;
    }
    function isPostfixIeHack(str, offset) {
      if (offset !== str.length - 2) {
        return false;
      }
      return str.charCodeAt(offset) === 92 && // U+005C REVERSE SOLIDUS (\)
      isDigit(str.charCodeAt(offset + 1));
    }
    function outOfRange(opts, value, numEnd) {
      if (opts && opts.type === "Range") {
        var num = Number(
          numEnd !== void 0 && numEnd !== value.length ? value.substr(0, numEnd) : value
        );
        if (isNaN(num)) {
          return true;
        }
        if (opts.min !== null && num < opts.min) {
          return true;
        }
        if (opts.max !== null && num > opts.max) {
          return true;
        }
      }
      return false;
    }
    function consumeFunction(token, getNextToken) {
      var startIdx = token.index;
      var length = 0;
      do {
        length++;
        if (token.balance <= startIdx) {
          break;
        }
      } while (token = getNextToken(length));
      return length;
    }
    function calc(next) {
      return function(token, getNextToken, opts) {
        if (token === null) {
          return 0;
        }
        if (token.type === TYPE.Function && eqStrAny(token.value, calcFunctionNames)) {
          return consumeFunction(token, getNextToken);
        }
        return next(token, getNextToken, opts);
      };
    }
    function tokenType(expectedTokenType) {
      return function(token) {
        if (token === null || token.type !== expectedTokenType) {
          return 0;
        }
        return 1;
      };
    }
    function func(name) {
      name = name + "(";
      return function(token, getNextToken) {
        if (token !== null && eqStr(token.value, name)) {
          return consumeFunction(token, getNextToken);
        }
        return 0;
      };
    }
    function customIdent(token) {
      if (token === null || token.type !== TYPE.Ident) {
        return 0;
      }
      var name = token.value.toLowerCase();
      if (eqStrAny(name, cssWideKeywords)) {
        return 0;
      }
      if (eqStr(name, "default")) {
        return 0;
      }
      return 1;
    }
    function customPropertyName(token) {
      if (token === null || token.type !== TYPE.Ident) {
        return 0;
      }
      if (charCode(token.value, 0) !== 45 || charCode(token.value, 1) !== 45) {
        return 0;
      }
      return 1;
    }
    function hexColor(token) {
      if (token === null || token.type !== TYPE.Hash) {
        return 0;
      }
      var length = token.value.length;
      if (length !== 4 && length !== 5 && length !== 7 && length !== 9) {
        return 0;
      }
      for (var i = 1; i < length; i++) {
        if (!isHexDigit(token.value.charCodeAt(i))) {
          return 0;
        }
      }
      return 1;
    }
    function idSelector(token) {
      if (token === null || token.type !== TYPE.Hash) {
        return 0;
      }
      if (!isIdentifierStart(charCode(token.value, 1), charCode(token.value, 2), charCode(token.value, 3))) {
        return 0;
      }
      return 1;
    }
    function declarationValue(token, getNextToken) {
      if (!token) {
        return 0;
      }
      var length = 0;
      var level = 0;
      var startIdx = token.index;
      scan:
        do {
          switch (token.type) {
            case TYPE.BadString:
            case TYPE.BadUrl:
              break scan;
            case TYPE.RightCurlyBracket:
            case TYPE.RightParenthesis:
            case TYPE.RightSquareBracket:
              if (token.balance > token.index || token.balance < startIdx) {
                break scan;
              }
              level--;
              break;
            case TYPE.Semicolon:
              if (level === 0) {
                break scan;
              }
              break;
            case TYPE.Delim:
              if (token.value === "!" && level === 0) {
                break scan;
              }
              break;
            case TYPE.Function:
            case TYPE.LeftParenthesis:
            case TYPE.LeftSquareBracket:
            case TYPE.LeftCurlyBracket:
              level++;
              break;
          }
          length++;
          if (token.balance <= startIdx) {
            break;
          }
        } while (token = getNextToken(length));
      return length;
    }
    function anyValue(token, getNextToken) {
      if (!token) {
        return 0;
      }
      var startIdx = token.index;
      var length = 0;
      scan:
        do {
          switch (token.type) {
            case TYPE.BadString:
            case TYPE.BadUrl:
              break scan;
            case TYPE.RightCurlyBracket:
            case TYPE.RightParenthesis:
            case TYPE.RightSquareBracket:
              if (token.balance > token.index || token.balance < startIdx) {
                break scan;
              }
              break;
          }
          length++;
          if (token.balance <= startIdx) {
            break;
          }
        } while (token = getNextToken(length));
      return length;
    }
    function dimension(type) {
      return function(token, getNextToken, opts) {
        if (token === null || token.type !== TYPE.Dimension) {
          return 0;
        }
        var numberEnd = consumeNumber(token.value, 0);
        if (type !== null) {
          var reverseSolidusOffset = token.value.indexOf("\\", numberEnd);
          var unit = reverseSolidusOffset === -1 || !isPostfixIeHack(token.value, reverseSolidusOffset) ? token.value.substr(numberEnd) : token.value.substring(numberEnd, reverseSolidusOffset);
          if (type.hasOwnProperty(unit.toLowerCase()) === false) {
            return 0;
          }
        }
        if (outOfRange(opts, token.value, numberEnd)) {
          return 0;
        }
        return 1;
      };
    }
    function percentage(token, getNextToken, opts) {
      if (token === null || token.type !== TYPE.Percentage) {
        return 0;
      }
      if (outOfRange(opts, token.value, token.value.length - 1)) {
        return 0;
      }
      return 1;
    }
    function zero(next) {
      if (typeof next !== "function") {
        next = function() {
          return 0;
        };
      }
      return function(token, getNextToken, opts) {
        if (token !== null && token.type === TYPE.Number) {
          if (Number(token.value) === 0) {
            return 1;
          }
        }
        return next(token, getNextToken, opts);
      };
    }
    function number(token, getNextToken, opts) {
      if (token === null) {
        return 0;
      }
      var numberEnd = consumeNumber(token.value, 0);
      var isNumber = numberEnd === token.value.length;
      if (!isNumber && !isPostfixIeHack(token.value, numberEnd)) {
        return 0;
      }
      if (outOfRange(opts, token.value, numberEnd)) {
        return 0;
      }
      return 1;
    }
    function integer(token, getNextToken, opts) {
      if (token === null || token.type !== TYPE.Number) {
        return 0;
      }
      var i = token.value.charCodeAt(0) === 43 || // U+002B PLUS SIGN (+)
      token.value.charCodeAt(0) === 45 ? 1 : 0;
      for (; i < token.value.length; i++) {
        if (!isDigit(token.value.charCodeAt(i))) {
          return 0;
        }
      }
      if (outOfRange(opts, token.value, i)) {
        return 0;
      }
      return 1;
    }
    module2.exports = {
      // token types
      "ident-token": tokenType(TYPE.Ident),
      "function-token": tokenType(TYPE.Function),
      "at-keyword-token": tokenType(TYPE.AtKeyword),
      "hash-token": tokenType(TYPE.Hash),
      "string-token": tokenType(TYPE.String),
      "bad-string-token": tokenType(TYPE.BadString),
      "url-token": tokenType(TYPE.Url),
      "bad-url-token": tokenType(TYPE.BadUrl),
      "delim-token": tokenType(TYPE.Delim),
      "number-token": tokenType(TYPE.Number),
      "percentage-token": tokenType(TYPE.Percentage),
      "dimension-token": tokenType(TYPE.Dimension),
      "whitespace-token": tokenType(TYPE.WhiteSpace),
      "CDO-token": tokenType(TYPE.CDO),
      "CDC-token": tokenType(TYPE.CDC),
      "colon-token": tokenType(TYPE.Colon),
      "semicolon-token": tokenType(TYPE.Semicolon),
      "comma-token": tokenType(TYPE.Comma),
      "[-token": tokenType(TYPE.LeftSquareBracket),
      "]-token": tokenType(TYPE.RightSquareBracket),
      "(-token": tokenType(TYPE.LeftParenthesis),
      ")-token": tokenType(TYPE.RightParenthesis),
      "{-token": tokenType(TYPE.LeftCurlyBracket),
      "}-token": tokenType(TYPE.RightCurlyBracket),
      // token type aliases
      "string": tokenType(TYPE.String),
      "ident": tokenType(TYPE.Ident),
      // complex types
      "custom-ident": customIdent,
      "custom-property-name": customPropertyName,
      "hex-color": hexColor,
      "id-selector": idSelector,
      // element( <id-selector> )
      "an-plus-b": anPlusB,
      "urange": urange,
      "declaration-value": declarationValue,
      "any-value": anyValue,
      // dimensions
      "dimension": calc(dimension(null)),
      "angle": calc(dimension(ANGLE)),
      "decibel": calc(dimension(DECIBEL)),
      "frequency": calc(dimension(FREQUENCY)),
      "flex": calc(dimension(FLEX)),
      "length": calc(zero(dimension(LENGTH))),
      "resolution": calc(dimension(RESOLUTION)),
      "semitones": calc(dimension(SEMITONES)),
      "time": calc(dimension(TIME)),
      // percentage
      "percentage": calc(percentage),
      // numeric
      "zero": zero(),
      "number": calc(number),
      "integer": calc(integer),
      // old IE stuff
      "-ms-legacy-expression": func("expression")
    };
  }
});

// node_modules/css-tree/lib/definition-syntax/SyntaxError.js
var require_SyntaxError2 = __commonJS({
  "node_modules/css-tree/lib/definition-syntax/SyntaxError.js"(exports2, module2) {
    var createCustomError = require_createCustomError();
    module2.exports = function SyntaxError2(message, input, offset) {
      var error = createCustomError("SyntaxError", message);
      error.input = input;
      error.offset = offset;
      error.rawMessage = message;
      error.message = error.rawMessage + "\n  " + error.input + "\n--" + new Array((error.offset || error.input.length) + 1).join("-") + "^";
      return error;
    };
  }
});

// node_modules/css-tree/lib/definition-syntax/tokenizer.js
var require_tokenizer2 = __commonJS({
  "node_modules/css-tree/lib/definition-syntax/tokenizer.js"(exports2, module2) {
    var SyntaxError2 = require_SyntaxError2();
    var TAB = 9;
    var N = 10;
    var F = 12;
    var R = 13;
    var SPACE = 32;
    var Tokenizer = function(str) {
      this.str = str;
      this.pos = 0;
    };
    Tokenizer.prototype = {
      charCodeAt: function(pos) {
        return pos < this.str.length ? this.str.charCodeAt(pos) : 0;
      },
      charCode: function() {
        return this.charCodeAt(this.pos);
      },
      nextCharCode: function() {
        return this.charCodeAt(this.pos + 1);
      },
      nextNonWsCode: function(pos) {
        return this.charCodeAt(this.findWsEnd(pos));
      },
      findWsEnd: function(pos) {
        for (; pos < this.str.length; pos++) {
          var code = this.str.charCodeAt(pos);
          if (code !== R && code !== N && code !== F && code !== SPACE && code !== TAB) {
            break;
          }
        }
        return pos;
      },
      substringToPos: function(end) {
        return this.str.substring(this.pos, this.pos = end);
      },
      eat: function(code) {
        if (this.charCode() !== code) {
          this.error("Expect `" + String.fromCharCode(code) + "`");
        }
        this.pos++;
      },
      peek: function() {
        return this.pos < this.str.length ? this.str.charAt(this.pos++) : "";
      },
      error: function(message) {
        throw new SyntaxError2(message, this.str, this.pos);
      }
    };
    module2.exports = Tokenizer;
  }
});

// node_modules/css-tree/lib/definition-syntax/parse.js
var require_parse3 = __commonJS({
  "node_modules/css-tree/lib/definition-syntax/parse.js"(exports2, module2) {
    var Tokenizer = require_tokenizer2();
    var TAB = 9;
    var N = 10;
    var F = 12;
    var R = 13;
    var SPACE = 32;
    var EXCLAMATIONMARK = 33;
    var NUMBERSIGN = 35;
    var AMPERSAND = 38;
    var APOSTROPHE = 39;
    var LEFTPARENTHESIS = 40;
    var RIGHTPARENTHESIS = 41;
    var ASTERISK = 42;
    var PLUSSIGN = 43;
    var COMMA = 44;
    var HYPERMINUS = 45;
    var LESSTHANSIGN = 60;
    var GREATERTHANSIGN = 62;
    var QUESTIONMARK = 63;
    var COMMERCIALAT = 64;
    var LEFTSQUAREBRACKET = 91;
    var RIGHTSQUAREBRACKET = 93;
    var LEFTCURLYBRACKET = 123;
    var VERTICALLINE = 124;
    var RIGHTCURLYBRACKET = 125;
    var INFINITY = 8734;
    var NAME_CHAR = createCharMap(function(ch) {
      return /[a-zA-Z0-9\-]/.test(ch);
    });
    var COMBINATOR_PRECEDENCE = {
      " ": 1,
      "&&": 2,
      "||": 3,
      "|": 4
    };
    function createCharMap(fn) {
      var array = typeof Uint32Array === "function" ? new Uint32Array(128) : new Array(128);
      for (var i = 0; i < 128; i++) {
        array[i] = fn(String.fromCharCode(i)) ? 1 : 0;
      }
      return array;
    }
    function scanSpaces(tokenizer) {
      return tokenizer.substringToPos(
        tokenizer.findWsEnd(tokenizer.pos)
      );
    }
    function scanWord(tokenizer) {
      var end = tokenizer.pos;
      for (; end < tokenizer.str.length; end++) {
        var code = tokenizer.str.charCodeAt(end);
        if (code >= 128 || NAME_CHAR[code] === 0) {
          break;
        }
      }
      if (tokenizer.pos === end) {
        tokenizer.error("Expect a keyword");
      }
      return tokenizer.substringToPos(end);
    }
    function scanNumber(tokenizer) {
      var end = tokenizer.pos;
      for (; end < tokenizer.str.length; end++) {
        var code = tokenizer.str.charCodeAt(end);
        if (code < 48 || code > 57) {
          break;
        }
      }
      if (tokenizer.pos === end) {
        tokenizer.error("Expect a number");
      }
      return tokenizer.substringToPos(end);
    }
    function scanString(tokenizer) {
      var end = tokenizer.str.indexOf("'", tokenizer.pos + 1);
      if (end === -1) {
        tokenizer.pos = tokenizer.str.length;
        tokenizer.error("Expect an apostrophe");
      }
      return tokenizer.substringToPos(end + 1);
    }
    function readMultiplierRange(tokenizer) {
      var min = null;
      var max = null;
      tokenizer.eat(LEFTCURLYBRACKET);
      min = scanNumber(tokenizer);
      if (tokenizer.charCode() === COMMA) {
        tokenizer.pos++;
        if (tokenizer.charCode() !== RIGHTCURLYBRACKET) {
          max = scanNumber(tokenizer);
        }
      } else {
        max = min;
      }
      tokenizer.eat(RIGHTCURLYBRACKET);
      return {
        min: Number(min),
        max: max ? Number(max) : 0
      };
    }
    function readMultiplier(tokenizer) {
      var range = null;
      var comma = false;
      switch (tokenizer.charCode()) {
        case ASTERISK:
          tokenizer.pos++;
          range = {
            min: 0,
            max: 0
          };
          break;
        case PLUSSIGN:
          tokenizer.pos++;
          range = {
            min: 1,
            max: 0
          };
          break;
        case QUESTIONMARK:
          tokenizer.pos++;
          range = {
            min: 0,
            max: 1
          };
          break;
        case NUMBERSIGN:
          tokenizer.pos++;
          comma = true;
          if (tokenizer.charCode() === LEFTCURLYBRACKET) {
            range = readMultiplierRange(tokenizer);
          } else {
            range = {
              min: 1,
              max: 0
            };
          }
          break;
        case LEFTCURLYBRACKET:
          range = readMultiplierRange(tokenizer);
          break;
        default:
          return null;
      }
      return {
        type: "Multiplier",
        comma,
        min: range.min,
        max: range.max,
        term: null
      };
    }
    function maybeMultiplied(tokenizer, node) {
      var multiplier = readMultiplier(tokenizer);
      if (multiplier !== null) {
        multiplier.term = node;
        return multiplier;
      }
      return node;
    }
    function maybeToken(tokenizer) {
      var ch = tokenizer.peek();
      if (ch === "") {
        return null;
      }
      return {
        type: "Token",
        value: ch
      };
    }
    function readProperty(tokenizer) {
      var name;
      tokenizer.eat(LESSTHANSIGN);
      tokenizer.eat(APOSTROPHE);
      name = scanWord(tokenizer);
      tokenizer.eat(APOSTROPHE);
      tokenizer.eat(GREATERTHANSIGN);
      return maybeMultiplied(tokenizer, {
        type: "Property",
        name
      });
    }
    function readTypeRange(tokenizer) {
      var min = null;
      var max = null;
      var sign = 1;
      tokenizer.eat(LEFTSQUAREBRACKET);
      if (tokenizer.charCode() === HYPERMINUS) {
        tokenizer.peek();
        sign = -1;
      }
      if (sign == -1 && tokenizer.charCode() === INFINITY) {
        tokenizer.peek();
      } else {
        min = sign * Number(scanNumber(tokenizer));
      }
      scanSpaces(tokenizer);
      tokenizer.eat(COMMA);
      scanSpaces(tokenizer);
      if (tokenizer.charCode() === INFINITY) {
        tokenizer.peek();
      } else {
        sign = 1;
        if (tokenizer.charCode() === HYPERMINUS) {
          tokenizer.peek();
          sign = -1;
        }
        max = sign * Number(scanNumber(tokenizer));
      }
      tokenizer.eat(RIGHTSQUAREBRACKET);
      if (min === null && max === null) {
        return null;
      }
      return {
        type: "Range",
        min,
        max
      };
    }
    function readType(tokenizer) {
      var name;
      var opts = null;
      tokenizer.eat(LESSTHANSIGN);
      name = scanWord(tokenizer);
      if (tokenizer.charCode() === LEFTPARENTHESIS && tokenizer.nextCharCode() === RIGHTPARENTHESIS) {
        tokenizer.pos += 2;
        name += "()";
      }
      if (tokenizer.charCodeAt(tokenizer.findWsEnd(tokenizer.pos)) === LEFTSQUAREBRACKET) {
        scanSpaces(tokenizer);
        opts = readTypeRange(tokenizer);
      }
      tokenizer.eat(GREATERTHANSIGN);
      return maybeMultiplied(tokenizer, {
        type: "Type",
        name,
        opts
      });
    }
    function readKeywordOrFunction(tokenizer) {
      var name;
      name = scanWord(tokenizer);
      if (tokenizer.charCode() === LEFTPARENTHESIS) {
        tokenizer.pos++;
        return {
          type: "Function",
          name
        };
      }
      return maybeMultiplied(tokenizer, {
        type: "Keyword",
        name
      });
    }
    function regroupTerms(terms, combinators) {
      function createGroup(terms2, combinator2) {
        return {
          type: "Group",
          terms: terms2,
          combinator: combinator2,
          disallowEmpty: false,
          explicit: false
        };
      }
      combinators = Object.keys(combinators).sort(function(a, b) {
        return COMBINATOR_PRECEDENCE[a] - COMBINATOR_PRECEDENCE[b];
      });
      while (combinators.length > 0) {
        var combinator = combinators.shift();
        for (var i = 0, subgroupStart = 0; i < terms.length; i++) {
          var term = terms[i];
          if (term.type === "Combinator") {
            if (term.value === combinator) {
              if (subgroupStart === -1) {
                subgroupStart = i - 1;
              }
              terms.splice(i, 1);
              i--;
            } else {
              if (subgroupStart !== -1 && i - subgroupStart > 1) {
                terms.splice(
                  subgroupStart,
                  i - subgroupStart,
                  createGroup(terms.slice(subgroupStart, i), combinator)
                );
                i = subgroupStart + 1;
              }
              subgroupStart = -1;
            }
          }
        }
        if (subgroupStart !== -1 && combinators.length) {
          terms.splice(
            subgroupStart,
            i - subgroupStart,
            createGroup(terms.slice(subgroupStart, i), combinator)
          );
        }
      }
      return combinator;
    }
    function readImplicitGroup(tokenizer) {
      var terms = [];
      var combinators = {};
      var token;
      var prevToken = null;
      var prevTokenPos = tokenizer.pos;
      while (token = peek(tokenizer)) {
        if (token.type !== "Spaces") {
          if (token.type === "Combinator") {
            if (prevToken === null || prevToken.type === "Combinator") {
              tokenizer.pos = prevTokenPos;
              tokenizer.error("Unexpected combinator");
            }
            combinators[token.value] = true;
          } else if (prevToken !== null && prevToken.type !== "Combinator") {
            combinators[" "] = true;
            terms.push({
              type: "Combinator",
              value: " "
            });
          }
          terms.push(token);
          prevToken = token;
          prevTokenPos = tokenizer.pos;
        }
      }
      if (prevToken !== null && prevToken.type === "Combinator") {
        tokenizer.pos -= prevTokenPos;
        tokenizer.error("Unexpected combinator");
      }
      return {
        type: "Group",
        terms,
        combinator: regroupTerms(terms, combinators) || " ",
        disallowEmpty: false,
        explicit: false
      };
    }
    function readGroup(tokenizer) {
      var result;
      tokenizer.eat(LEFTSQUAREBRACKET);
      result = readImplicitGroup(tokenizer);
      tokenizer.eat(RIGHTSQUAREBRACKET);
      result.explicit = true;
      if (tokenizer.charCode() === EXCLAMATIONMARK) {
        tokenizer.pos++;
        result.disallowEmpty = true;
      }
      return result;
    }
    function peek(tokenizer) {
      var code = tokenizer.charCode();
      if (code < 128 && NAME_CHAR[code] === 1) {
        return readKeywordOrFunction(tokenizer);
      }
      switch (code) {
        case RIGHTSQUAREBRACKET:
          break;
        case LEFTSQUAREBRACKET:
          return maybeMultiplied(tokenizer, readGroup(tokenizer));
        case LESSTHANSIGN:
          return tokenizer.nextCharCode() === APOSTROPHE ? readProperty(tokenizer) : readType(tokenizer);
        case VERTICALLINE:
          return {
            type: "Combinator",
            value: tokenizer.substringToPos(
              tokenizer.nextCharCode() === VERTICALLINE ? tokenizer.pos + 2 : tokenizer.pos + 1
            )
          };
        case AMPERSAND:
          tokenizer.pos++;
          tokenizer.eat(AMPERSAND);
          return {
            type: "Combinator",
            value: "&&"
          };
        case COMMA:
          tokenizer.pos++;
          return {
            type: "Comma"
          };
        case APOSTROPHE:
          return maybeMultiplied(tokenizer, {
            type: "String",
            value: scanString(tokenizer)
          });
        case SPACE:
        case TAB:
        case N:
        case R:
        case F:
          return {
            type: "Spaces",
            value: scanSpaces(tokenizer)
          };
        case COMMERCIALAT:
          code = tokenizer.nextCharCode();
          if (code < 128 && NAME_CHAR[code] === 1) {
            tokenizer.pos++;
            return {
              type: "AtKeyword",
              name: scanWord(tokenizer)
            };
          }
          return maybeToken(tokenizer);
        case ASTERISK:
        case PLUSSIGN:
        case QUESTIONMARK:
        case NUMBERSIGN:
        case EXCLAMATIONMARK:
          break;
        case LEFTCURLYBRACKET:
          code = tokenizer.nextCharCode();
          if (code < 48 || code > 57) {
            return maybeToken(tokenizer);
          }
          break;
        default:
          return maybeToken(tokenizer);
      }
    }
    function parse(source) {
      var tokenizer = new Tokenizer(source);
      var result = readImplicitGroup(tokenizer);
      if (tokenizer.pos !== source.length) {
        tokenizer.error("Unexpected input");
      }
      if (result.terms.length === 1 && result.terms[0].type === "Group") {
        result = result.terms[0];
      }
      return result;
    }
    parse("[a&&<b>#|<'c'>*||e() f{2} /,(% g#{1,2} h{2,})]!");
    module2.exports = parse;
  }
});

// node_modules/css-tree/lib/definition-syntax/walk.js
var require_walk = __commonJS({
  "node_modules/css-tree/lib/definition-syntax/walk.js"(exports2, module2) {
    var noop = function() {
    };
    function ensureFunction(value) {
      return typeof value === "function" ? value : noop;
    }
    module2.exports = function(node, options, context) {
      function walk(node2) {
        enter.call(context, node2);
        switch (node2.type) {
          case "Group":
            node2.terms.forEach(walk);
            break;
          case "Multiplier":
            walk(node2.term);
            break;
          case "Type":
          case "Property":
          case "Keyword":
          case "AtKeyword":
          case "Function":
          case "String":
          case "Token":
          case "Comma":
            break;
          default:
            throw new Error("Unknown type: " + node2.type);
        }
        leave.call(context, node2);
      }
      var enter = noop;
      var leave = noop;
      if (typeof options === "function") {
        enter = options;
      } else if (options) {
        enter = ensureFunction(options.enter);
        leave = ensureFunction(options.leave);
      }
      if (enter === noop && leave === noop) {
        throw new Error("Neither `enter` nor `leave` walker handler is set or both aren't a function");
      }
      walk(node, context);
    };
  }
});

// node_modules/css-tree/lib/lexer/prepare-tokens.js
var require_prepare_tokens = __commonJS({
  "node_modules/css-tree/lib/lexer/prepare-tokens.js"(exports2, module2) {
    var tokenize = require_tokenizer();
    var TokenStream = require_TokenStream();
    var tokenStream = new TokenStream();
    var astToTokens = {
      decorator: function(handlers) {
        var curNode = null;
        var prev = { len: 0, node: null };
        var nodes = [prev];
        var buffer = "";
        return {
          children: handlers.children,
          node: function(node) {
            var tmp = curNode;
            curNode = node;
            handlers.node.call(this, node);
            curNode = tmp;
          },
          chunk: function(chunk) {
            buffer += chunk;
            if (prev.node !== curNode) {
              nodes.push({
                len: chunk.length,
                node: curNode
              });
            } else {
              prev.len += chunk.length;
            }
          },
          result: function() {
            return prepareTokens(buffer, nodes);
          }
        };
      }
    };
    function prepareTokens(str, nodes) {
      var tokens = [];
      var nodesOffset = 0;
      var nodesIndex = 0;
      var currentNode = nodes ? nodes[nodesIndex].node : null;
      tokenize(str, tokenStream);
      while (!tokenStream.eof) {
        if (nodes) {
          while (nodesIndex < nodes.length && nodesOffset + nodes[nodesIndex].len <= tokenStream.tokenStart) {
            nodesOffset += nodes[nodesIndex++].len;
            currentNode = nodes[nodesIndex].node;
          }
        }
        tokens.push({
          type: tokenStream.tokenType,
          value: tokenStream.getTokenValue(),
          index: tokenStream.tokenIndex,
          // TODO: remove it, temporary solution
          balance: tokenStream.balance[tokenStream.tokenIndex],
          // TODO: remove it, temporary solution
          node: currentNode
        });
        tokenStream.next();
      }
      return tokens;
    }
    module2.exports = function(value, syntax) {
      if (typeof value === "string") {
        return prepareTokens(value, null);
      }
      return syntax.generate(value, astToTokens);
    };
  }
});

// node_modules/css-tree/lib/lexer/match-graph.js
var require_match_graph = __commonJS({
  "node_modules/css-tree/lib/lexer/match-graph.js"(exports2, module2) {
    var parse = require_parse3();
    var MATCH = { type: "Match" };
    var MISMATCH = { type: "Mismatch" };
    var DISALLOW_EMPTY = { type: "DisallowEmpty" };
    var LEFTPARENTHESIS = 40;
    var RIGHTPARENTHESIS = 41;
    function createCondition(match, thenBranch, elseBranch) {
      if (thenBranch === MATCH && elseBranch === MISMATCH) {
        return match;
      }
      if (match === MATCH && thenBranch === MATCH && elseBranch === MATCH) {
        return match;
      }
      if (match.type === "If" && match.else === MISMATCH && thenBranch === MATCH) {
        thenBranch = match.then;
        match = match.match;
      }
      return {
        type: "If",
        match,
        then: thenBranch,
        else: elseBranch
      };
    }
    function isFunctionType(name) {
      return name.length > 2 && name.charCodeAt(name.length - 2) === LEFTPARENTHESIS && name.charCodeAt(name.length - 1) === RIGHTPARENTHESIS;
    }
    function isEnumCapatible(term) {
      return term.type === "Keyword" || term.type === "AtKeyword" || term.type === "Function" || term.type === "Type" && isFunctionType(term.name);
    }
    function buildGroupMatchGraph(combinator, terms, atLeastOneTermMatched) {
      switch (combinator) {
        case " ":
          var result = MATCH;
          for (var i = terms.length - 1; i >= 0; i--) {
            var term = terms[i];
            result = createCondition(
              term,
              result,
              MISMATCH
            );
          }
          ;
          return result;
        case "|":
          var result = MISMATCH;
          var map = null;
          for (var i = terms.length - 1; i >= 0; i--) {
            var term = terms[i];
            if (isEnumCapatible(term)) {
              if (map === null && i > 0 && isEnumCapatible(terms[i - 1])) {
                map = /* @__PURE__ */ Object.create(null);
                result = createCondition(
                  {
                    type: "Enum",
                    map
                  },
                  MATCH,
                  result
                );
              }
              if (map !== null) {
                var key = (isFunctionType(term.name) ? term.name.slice(0, -1) : term.name).toLowerCase();
                if (key in map === false) {
                  map[key] = term;
                  continue;
                }
              }
            }
            map = null;
            result = createCondition(
              term,
              MATCH,
              result
            );
          }
          ;
          return result;
        case "&&":
          if (terms.length > 5) {
            return {
              type: "MatchOnce",
              terms,
              all: true
            };
          }
          var result = MISMATCH;
          for (var i = terms.length - 1; i >= 0; i--) {
            var term = terms[i];
            var thenClause;
            if (terms.length > 1) {
              thenClause = buildGroupMatchGraph(
                combinator,
                terms.filter(function(newGroupTerm) {
                  return newGroupTerm !== term;
                }),
                false
              );
            } else {
              thenClause = MATCH;
            }
            result = createCondition(
              term,
              thenClause,
              result
            );
          }
          ;
          return result;
        case "||":
          if (terms.length > 5) {
            return {
              type: "MatchOnce",
              terms,
              all: false
            };
          }
          var result = atLeastOneTermMatched ? MATCH : MISMATCH;
          for (var i = terms.length - 1; i >= 0; i--) {
            var term = terms[i];
            var thenClause;
            if (terms.length > 1) {
              thenClause = buildGroupMatchGraph(
                combinator,
                terms.filter(function(newGroupTerm) {
                  return newGroupTerm !== term;
                }),
                true
              );
            } else {
              thenClause = MATCH;
            }
            result = createCondition(
              term,
              thenClause,
              result
            );
          }
          ;
          return result;
      }
    }
    function buildMultiplierMatchGraph(node) {
      var result = MATCH;
      var matchTerm = buildMatchGraph(node.term);
      if (node.max === 0) {
        matchTerm = createCondition(
          matchTerm,
          DISALLOW_EMPTY,
          MISMATCH
        );
        result = createCondition(
          matchTerm,
          null,
          // will be a loop
          MISMATCH
        );
        result.then = createCondition(
          MATCH,
          MATCH,
          result
          // make a loop
        );
        if (node.comma) {
          result.then.else = createCondition(
            { type: "Comma", syntax: node },
            result,
            MISMATCH
          );
        }
      } else {
        for (var i = node.min || 1; i <= node.max; i++) {
          if (node.comma && result !== MATCH) {
            result = createCondition(
              { type: "Comma", syntax: node },
              result,
              MISMATCH
            );
          }
          result = createCondition(
            matchTerm,
            createCondition(
              MATCH,
              MATCH,
              result
            ),
            MISMATCH
          );
        }
      }
      if (node.min === 0) {
        result = createCondition(
          MATCH,
          MATCH,
          result
        );
      } else {
        for (var i = 0; i < node.min - 1; i++) {
          if (node.comma && result !== MATCH) {
            result = createCondition(
              { type: "Comma", syntax: node },
              result,
              MISMATCH
            );
          }
          result = createCondition(
            matchTerm,
            result,
            MISMATCH
          );
        }
      }
      return result;
    }
    function buildMatchGraph(node) {
      if (typeof node === "function") {
        return {
          type: "Generic",
          fn: node
        };
      }
      switch (node.type) {
        case "Group":
          var result = buildGroupMatchGraph(
            node.combinator,
            node.terms.map(buildMatchGraph),
            false
          );
          if (node.disallowEmpty) {
            result = createCondition(
              result,
              DISALLOW_EMPTY,
              MISMATCH
            );
          }
          return result;
        case "Multiplier":
          return buildMultiplierMatchGraph(node);
        case "Type":
        case "Property":
          return {
            type: node.type,
            name: node.name,
            syntax: node
          };
        case "Keyword":
          return {
            type: node.type,
            name: node.name.toLowerCase(),
            syntax: node
          };
        case "AtKeyword":
          return {
            type: node.type,
            name: "@" + node.name.toLowerCase(),
            syntax: node
          };
        case "Function":
          return {
            type: node.type,
            name: node.name.toLowerCase() + "(",
            syntax: node
          };
        case "String":
          if (node.value.length === 3) {
            return {
              type: "Token",
              value: node.value.charAt(1),
              syntax: node
            };
          }
          return {
            type: node.type,
            value: node.value.substr(1, node.value.length - 2).replace(/\\'/g, "'"),
            syntax: node
          };
        case "Token":
          return {
            type: node.type,
            value: node.value,
            syntax: node
          };
        case "Comma":
          return {
            type: node.type,
            syntax: node
          };
        default:
          throw new Error("Unknown node type:", node.type);
      }
    }
    module2.exports = {
      MATCH,
      MISMATCH,
      DISALLOW_EMPTY,
      buildMatchGraph: function(syntaxTree, ref) {
        if (typeof syntaxTree === "string") {
          syntaxTree = parse(syntaxTree);
        }
        return {
          type: "MatchGraph",
          match: buildMatchGraph(syntaxTree),
          syntax: ref || null,
          source: syntaxTree
        };
      }
    };
  }
});

// node_modules/css-tree/lib/lexer/match.js
var require_match = __commonJS({
  "node_modules/css-tree/lib/lexer/match.js"(exports2, module2) {
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var matchGraph = require_match_graph();
    var MATCH = matchGraph.MATCH;
    var MISMATCH = matchGraph.MISMATCH;
    var DISALLOW_EMPTY = matchGraph.DISALLOW_EMPTY;
    var TYPE = require_const().TYPE;
    var STUB = 0;
    var TOKEN = 1;
    var OPEN_SYNTAX = 2;
    var CLOSE_SYNTAX = 3;
    var EXIT_REASON_MATCH = "Match";
    var EXIT_REASON_MISMATCH = "Mismatch";
    var EXIT_REASON_ITERATION_LIMIT = "Maximum iteration number exceeded (please fill an issue on https://github.com/csstree/csstree/issues)";
    var ITERATION_LIMIT = 15e3;
    var totalIterationCount = 0;
    function reverseList(list) {
      var prev = null;
      var next = null;
      var item = list;
      while (item !== null) {
        next = item.prev;
        item.prev = prev;
        prev = item;
        item = next;
      }
      return prev;
    }
    function areStringsEqualCaseInsensitive(testStr, referenceStr) {
      if (testStr.length !== referenceStr.length) {
        return false;
      }
      for (var i = 0; i < testStr.length; i++) {
        var testCode = testStr.charCodeAt(i);
        var referenceCode = referenceStr.charCodeAt(i);
        if (testCode >= 65 && testCode <= 90) {
          testCode = testCode | 32;
        }
        if (testCode !== referenceCode) {
          return false;
        }
      }
      return true;
    }
    function isContextEdgeDelim(token) {
      if (token.type !== TYPE.Delim) {
        return false;
      }
      return token.value !== "?";
    }
    function isCommaContextStart(token) {
      if (token === null) {
        return true;
      }
      return token.type === TYPE.Comma || token.type === TYPE.Function || token.type === TYPE.LeftParenthesis || token.type === TYPE.LeftSquareBracket || token.type === TYPE.LeftCurlyBracket || isContextEdgeDelim(token);
    }
    function isCommaContextEnd(token) {
      if (token === null) {
        return true;
      }
      return token.type === TYPE.RightParenthesis || token.type === TYPE.RightSquareBracket || token.type === TYPE.RightCurlyBracket || token.type === TYPE.Delim;
    }
    function internalMatch(tokens, state, syntaxes) {
      function moveToNextToken() {
        do {
          tokenIndex++;
          token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;
        } while (token !== null && (token.type === TYPE.WhiteSpace || token.type === TYPE.Comment));
      }
      function getNextToken(offset) {
        var nextIndex = tokenIndex + offset;
        return nextIndex < tokens.length ? tokens[nextIndex] : null;
      }
      function stateSnapshotFromSyntax(nextState, prev) {
        return {
          nextState,
          matchStack,
          syntaxStack,
          thenStack,
          tokenIndex,
          prev
        };
      }
      function pushThenStack(nextState) {
        thenStack = {
          nextState,
          matchStack,
          syntaxStack,
          prev: thenStack
        };
      }
      function pushElseStack(nextState) {
        elseStack = stateSnapshotFromSyntax(nextState, elseStack);
      }
      function addTokenToMatch() {
        matchStack = {
          type: TOKEN,
          syntax: state.syntax,
          token,
          prev: matchStack
        };
        moveToNextToken();
        syntaxStash = null;
        if (tokenIndex > longestMatch) {
          longestMatch = tokenIndex;
        }
      }
      function openSyntax() {
        syntaxStack = {
          syntax: state.syntax,
          opts: state.syntax.opts || syntaxStack !== null && syntaxStack.opts || null,
          prev: syntaxStack
        };
        matchStack = {
          type: OPEN_SYNTAX,
          syntax: state.syntax,
          token: matchStack.token,
          prev: matchStack
        };
      }
      function closeSyntax() {
        if (matchStack.type === OPEN_SYNTAX) {
          matchStack = matchStack.prev;
        } else {
          matchStack = {
            type: CLOSE_SYNTAX,
            syntax: syntaxStack.syntax,
            token: matchStack.token,
            prev: matchStack
          };
        }
        syntaxStack = syntaxStack.prev;
      }
      var syntaxStack = null;
      var thenStack = null;
      var elseStack = null;
      var syntaxStash = null;
      var iterationCount = 0;
      var exitReason = null;
      var token = null;
      var tokenIndex = -1;
      var longestMatch = 0;
      var matchStack = {
        type: STUB,
        syntax: null,
        token: null,
        prev: null
      };
      moveToNextToken();
      while (exitReason === null && ++iterationCount < ITERATION_LIMIT) {
        switch (state.type) {
          case "Match":
            if (thenStack === null) {
              if (token !== null) {
                if (tokenIndex !== tokens.length - 1 || token.value !== "\\0" && token.value !== "\\9") {
                  state = MISMATCH;
                  break;
                }
              }
              exitReason = EXIT_REASON_MATCH;
              break;
            }
            state = thenStack.nextState;
            if (state === DISALLOW_EMPTY) {
              if (thenStack.matchStack === matchStack) {
                state = MISMATCH;
                break;
              } else {
                state = MATCH;
              }
            }
            while (thenStack.syntaxStack !== syntaxStack) {
              closeSyntax();
            }
            thenStack = thenStack.prev;
            break;
          case "Mismatch":
            if (syntaxStash !== null && syntaxStash !== false) {
              if (elseStack === null || tokenIndex > elseStack.tokenIndex) {
                elseStack = syntaxStash;
                syntaxStash = false;
              }
            } else if (elseStack === null) {
              exitReason = EXIT_REASON_MISMATCH;
              break;
            }
            state = elseStack.nextState;
            thenStack = elseStack.thenStack;
            syntaxStack = elseStack.syntaxStack;
            matchStack = elseStack.matchStack;
            tokenIndex = elseStack.tokenIndex;
            token = tokenIndex < tokens.length ? tokens[tokenIndex] : null;
            elseStack = elseStack.prev;
            break;
          case "MatchGraph":
            state = state.match;
            break;
          case "If":
            if (state.else !== MISMATCH) {
              pushElseStack(state.else);
            }
            if (state.then !== MATCH) {
              pushThenStack(state.then);
            }
            state = state.match;
            break;
          case "MatchOnce":
            state = {
              type: "MatchOnceBuffer",
              syntax: state,
              index: 0,
              mask: 0
            };
            break;
          case "MatchOnceBuffer":
            var terms = state.syntax.terms;
            if (state.index === terms.length) {
              if (state.mask === 0 || state.syntax.all) {
                state = MISMATCH;
                break;
              }
              state = MATCH;
              break;
            }
            if (state.mask === (1 << terms.length) - 1) {
              state = MATCH;
              break;
            }
            for (; state.index < terms.length; state.index++) {
              var matchFlag = 1 << state.index;
              if ((state.mask & matchFlag) === 0) {
                pushElseStack(state);
                pushThenStack({
                  type: "AddMatchOnce",
                  syntax: state.syntax,
                  mask: state.mask | matchFlag
                });
                state = terms[state.index++];
                break;
              }
            }
            break;
          case "AddMatchOnce":
            state = {
              type: "MatchOnceBuffer",
              syntax: state.syntax,
              index: 0,
              mask: state.mask
            };
            break;
          case "Enum":
            if (token !== null) {
              var name = token.value.toLowerCase();
              if (name.indexOf("\\") !== -1) {
                name = name.replace(/\\[09].*$/, "");
              }
              if (hasOwnProperty2.call(state.map, name)) {
                state = state.map[name];
                break;
              }
            }
            state = MISMATCH;
            break;
          case "Generic":
            var opts = syntaxStack !== null ? syntaxStack.opts : null;
            var lastTokenIndex = tokenIndex + Math.floor(state.fn(token, getNextToken, opts));
            if (!isNaN(lastTokenIndex) && lastTokenIndex > tokenIndex) {
              while (tokenIndex < lastTokenIndex) {
                addTokenToMatch();
              }
              state = MATCH;
            } else {
              state = MISMATCH;
            }
            break;
          case "Type":
          case "Property":
            var syntaxDict = state.type === "Type" ? "types" : "properties";
            var dictSyntax = hasOwnProperty2.call(syntaxes, syntaxDict) ? syntaxes[syntaxDict][state.name] : null;
            if (!dictSyntax || !dictSyntax.match) {
              throw new Error(
                "Bad syntax reference: " + (state.type === "Type" ? "<" + state.name + ">" : "<'" + state.name + "'>")
              );
            }
            if (syntaxStash !== false && token !== null && state.type === "Type") {
              var lowPriorityMatching = (
                // https://drafts.csswg.org/css-values-4/#custom-idents
                // When parsing positionally-ambiguous keywords in a property value, a <custom-ident> production
                // can only claim the keyword if no other unfulfilled production can claim it.
                state.name === "custom-ident" && token.type === TYPE.Ident || // https://drafts.csswg.org/css-values-4/#lengths
                // ... if a `0` could be parsed as either a <number> or a <length> in a property (such as line-height),
                // it must parse as a <number>
                state.name === "length" && token.value === "0"
              );
              if (lowPriorityMatching) {
                if (syntaxStash === null) {
                  syntaxStash = stateSnapshotFromSyntax(state, elseStack);
                }
                state = MISMATCH;
                break;
              }
            }
            openSyntax();
            state = dictSyntax.match;
            break;
          case "Keyword":
            var name = state.name;
            if (token !== null) {
              var keywordName = token.value;
              if (keywordName.indexOf("\\") !== -1) {
                keywordName = keywordName.replace(/\\[09].*$/, "");
              }
              if (areStringsEqualCaseInsensitive(keywordName, name)) {
                addTokenToMatch();
                state = MATCH;
                break;
              }
            }
            state = MISMATCH;
            break;
          case "AtKeyword":
          case "Function":
            if (token !== null && areStringsEqualCaseInsensitive(token.value, state.name)) {
              addTokenToMatch();
              state = MATCH;
              break;
            }
            state = MISMATCH;
            break;
          case "Token":
            if (token !== null && token.value === state.value) {
              addTokenToMatch();
              state = MATCH;
              break;
            }
            state = MISMATCH;
            break;
          case "Comma":
            if (token !== null && token.type === TYPE.Comma) {
              if (isCommaContextStart(matchStack.token)) {
                state = MISMATCH;
              } else {
                addTokenToMatch();
                state = isCommaContextEnd(token) ? MISMATCH : MATCH;
              }
            } else {
              state = isCommaContextStart(matchStack.token) || isCommaContextEnd(token) ? MATCH : MISMATCH;
            }
            break;
          case "String":
            var string = "";
            for (var lastTokenIndex = tokenIndex; lastTokenIndex < tokens.length && string.length < state.value.length; lastTokenIndex++) {
              string += tokens[lastTokenIndex].value;
            }
            if (areStringsEqualCaseInsensitive(string, state.value)) {
              while (tokenIndex < lastTokenIndex) {
                addTokenToMatch();
              }
              state = MATCH;
            } else {
              state = MISMATCH;
            }
            break;
          default:
            throw new Error("Unknown node type: " + state.type);
        }
      }
      totalIterationCount += iterationCount;
      switch (exitReason) {
        case null:
          console.warn("[csstree-match] BREAK after " + ITERATION_LIMIT + " iterations");
          exitReason = EXIT_REASON_ITERATION_LIMIT;
          matchStack = null;
          break;
        case EXIT_REASON_MATCH:
          while (syntaxStack !== null) {
            closeSyntax();
          }
          break;
        default:
          matchStack = null;
      }
      return {
        tokens,
        reason: exitReason,
        iterations: iterationCount,
        match: matchStack,
        longestMatch
      };
    }
    function matchAsList(tokens, matchGraph2, syntaxes) {
      var matchResult = internalMatch(tokens, matchGraph2, syntaxes || {});
      if (matchResult.match !== null) {
        var item = reverseList(matchResult.match).prev;
        matchResult.match = [];
        while (item !== null) {
          switch (item.type) {
            case STUB:
              break;
            case OPEN_SYNTAX:
            case CLOSE_SYNTAX:
              matchResult.match.push({
                type: item.type,
                syntax: item.syntax
              });
              break;
            default:
              matchResult.match.push({
                token: item.token.value,
                node: item.token.node
              });
              break;
          }
          item = item.prev;
        }
      }
      return matchResult;
    }
    function matchAsTree(tokens, matchGraph2, syntaxes) {
      var matchResult = internalMatch(tokens, matchGraph2, syntaxes || {});
      if (matchResult.match === null) {
        return matchResult;
      }
      var item = matchResult.match;
      var host = matchResult.match = {
        syntax: matchGraph2.syntax || null,
        match: []
      };
      var hostStack = [host];
      item = reverseList(item).prev;
      while (item !== null) {
        switch (item.type) {
          case OPEN_SYNTAX:
            host.match.push(host = {
              syntax: item.syntax,
              match: []
            });
            hostStack.push(host);
            break;
          case CLOSE_SYNTAX:
            hostStack.pop();
            host = hostStack[hostStack.length - 1];
            break;
          default:
            host.match.push({
              syntax: item.syntax || null,
              token: item.token.value,
              node: item.token.node
            });
        }
        item = item.prev;
      }
      return matchResult;
    }
    module2.exports = {
      matchAsList,
      matchAsTree,
      getTotalIterationCount: function() {
        return totalIterationCount;
      }
    };
  }
});

// node_modules/css-tree/lib/lexer/trace.js
var require_trace = __commonJS({
  "node_modules/css-tree/lib/lexer/trace.js"(exports2, module2) {
    function getTrace(node) {
      function shouldPutToTrace(syntax) {
        if (syntax === null) {
          return false;
        }
        return syntax.type === "Type" || syntax.type === "Property" || syntax.type === "Keyword";
      }
      function hasMatch(matchNode) {
        if (Array.isArray(matchNode.match)) {
          for (var i = 0; i < matchNode.match.length; i++) {
            if (hasMatch(matchNode.match[i])) {
              if (shouldPutToTrace(matchNode.syntax)) {
                result.unshift(matchNode.syntax);
              }
              return true;
            }
          }
        } else if (matchNode.node === node) {
          result = shouldPutToTrace(matchNode.syntax) ? [matchNode.syntax] : [];
          return true;
        }
        return false;
      }
      var result = null;
      if (this.matched !== null) {
        hasMatch(this.matched);
      }
      return result;
    }
    function testNode(match, node, fn) {
      var trace = getTrace.call(match, node);
      if (trace === null) {
        return false;
      }
      return trace.some(fn);
    }
    function isType(node, type) {
      return testNode(this, node, function(matchNode) {
        return matchNode.type === "Type" && matchNode.name === type;
      });
    }
    function isProperty(node, property) {
      return testNode(this, node, function(matchNode) {
        return matchNode.type === "Property" && matchNode.name === property;
      });
    }
    function isKeyword(node) {
      return testNode(this, node, function(matchNode) {
        return matchNode.type === "Keyword";
      });
    }
    module2.exports = {
      getTrace,
      isType,
      isProperty,
      isKeyword
    };
  }
});

// node_modules/css-tree/lib/lexer/search.js
var require_search = __commonJS({
  "node_modules/css-tree/lib/lexer/search.js"(exports2, module2) {
    var List = require_List();
    function getFirstMatchNode(matchNode) {
      if ("node" in matchNode) {
        return matchNode.node;
      }
      return getFirstMatchNode(matchNode.match[0]);
    }
    function getLastMatchNode(matchNode) {
      if ("node" in matchNode) {
        return matchNode.node;
      }
      return getLastMatchNode(matchNode.match[matchNode.match.length - 1]);
    }
    function matchFragments(lexer, ast, match, type, name) {
      function findFragments(matchNode) {
        if (matchNode.syntax !== null && matchNode.syntax.type === type && matchNode.syntax.name === name) {
          var start = getFirstMatchNode(matchNode);
          var end = getLastMatchNode(matchNode);
          lexer.syntax.walk(ast, function(node, item, list) {
            if (node === start) {
              var nodes = new List();
              do {
                nodes.appendData(item.data);
                if (item.data === end) {
                  break;
                }
                item = item.next;
              } while (item !== null);
              fragments.push({
                parent: list,
                nodes
              });
            }
          });
        }
        if (Array.isArray(matchNode.match)) {
          matchNode.match.forEach(findFragments);
        }
      }
      var fragments = [];
      if (match.matched !== null) {
        findFragments(match.matched);
      }
      return fragments;
    }
    module2.exports = {
      matchFragments
    };
  }
});

// node_modules/css-tree/lib/lexer/structure.js
var require_structure = __commonJS({
  "node_modules/css-tree/lib/lexer/structure.js"(exports2, module2) {
    var List = require_List();
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    function isValidNumber(value) {
      return typeof value === "number" && isFinite(value) && Math.floor(value) === value && value >= 0;
    }
    function isValidLocation(loc) {
      return Boolean(loc) && isValidNumber(loc.offset) && isValidNumber(loc.line) && isValidNumber(loc.column);
    }
    function createNodeStructureChecker(type, fields) {
      return function checkNode(node, warn) {
        if (!node || node.constructor !== Object) {
          return warn(node, "Type of node should be an Object");
        }
        for (var key in node) {
          var valid = true;
          if (hasOwnProperty2.call(node, key) === false) {
            continue;
          }
          if (key === "type") {
            if (node.type !== type) {
              warn(node, "Wrong node type `" + node.type + "`, expected `" + type + "`");
            }
          } else if (key === "loc") {
            if (node.loc === null) {
              continue;
            } else if (node.loc && node.loc.constructor === Object) {
              if (typeof node.loc.source !== "string") {
                key += ".source";
              } else if (!isValidLocation(node.loc.start)) {
                key += ".start";
              } else if (!isValidLocation(node.loc.end)) {
                key += ".end";
              } else {
                continue;
              }
            }
            valid = false;
          } else if (fields.hasOwnProperty(key)) {
            for (var i = 0, valid = false; !valid && i < fields[key].length; i++) {
              var fieldType = fields[key][i];
              switch (fieldType) {
                case String:
                  valid = typeof node[key] === "string";
                  break;
                case Boolean:
                  valid = typeof node[key] === "boolean";
                  break;
                case null:
                  valid = node[key] === null;
                  break;
                default:
                  if (typeof fieldType === "string") {
                    valid = node[key] && node[key].type === fieldType;
                  } else if (Array.isArray(fieldType)) {
                    valid = node[key] instanceof List;
                  }
              }
            }
          } else {
            warn(node, "Unknown field `" + key + "` for " + type + " node type");
          }
          if (!valid) {
            warn(node, "Bad value for `" + type + "." + key + "`");
          }
        }
        for (var key in fields) {
          if (hasOwnProperty2.call(fields, key) && hasOwnProperty2.call(node, key) === false) {
            warn(node, "Field `" + type + "." + key + "` is missed");
          }
        }
      };
    }
    function processStructure(name, nodeType) {
      var structure = nodeType.structure;
      var fields = {
        type: String,
        loc: true
      };
      var docs = {
        type: '"' + name + '"'
      };
      for (var key in structure) {
        if (hasOwnProperty2.call(structure, key) === false) {
          continue;
        }
        var docsTypes = [];
        var fieldTypes = fields[key] = Array.isArray(structure[key]) ? structure[key].slice() : [structure[key]];
        for (var i = 0; i < fieldTypes.length; i++) {
          var fieldType = fieldTypes[i];
          if (fieldType === String || fieldType === Boolean) {
            docsTypes.push(fieldType.name);
          } else if (fieldType === null) {
            docsTypes.push("null");
          } else if (typeof fieldType === "string") {
            docsTypes.push("<" + fieldType + ">");
          } else if (Array.isArray(fieldType)) {
            docsTypes.push("List");
          } else {
            throw new Error("Wrong value `" + fieldType + "` in `" + name + "." + key + "` structure definition");
          }
        }
        docs[key] = docsTypes.join(" | ");
      }
      return {
        docs,
        check: createNodeStructureChecker(name, fields)
      };
    }
    module2.exports = {
      getStructureFromConfig: function(config) {
        var structure = {};
        if (config.node) {
          for (var name in config.node) {
            if (hasOwnProperty2.call(config.node, name)) {
              var nodeType = config.node[name];
              if (nodeType.structure) {
                structure[name] = processStructure(name, nodeType);
              } else {
                throw new Error("Missed `structure` field in `" + name + "` node type definition");
              }
            }
          }
        }
        return structure;
      }
    };
  }
});

// node_modules/css-tree/lib/lexer/Lexer.js
var require_Lexer = __commonJS({
  "node_modules/css-tree/lib/lexer/Lexer.js"(exports2, module2) {
    var SyntaxReferenceError = require_error().SyntaxReferenceError;
    var SyntaxMatchError = require_error().SyntaxMatchError;
    var names = require_names();
    var generic = require_generic();
    var parse = require_parse3();
    var generate = require_generate();
    var walk = require_walk();
    var prepareTokens = require_prepare_tokens();
    var buildMatchGraph = require_match_graph().buildMatchGraph;
    var matchAsTree = require_match().matchAsTree;
    var trace = require_trace();
    var search = require_search();
    var getStructureFromConfig = require_structure().getStructureFromConfig;
    var cssWideKeywords = buildMatchGraph("inherit | initial | unset");
    var cssWideKeywordsWithExpression = buildMatchGraph("inherit | initial | unset | <-ms-legacy-expression>");
    function dumpMapSyntax(map, compact, syntaxAsAst) {
      var result = {};
      for (var name in map) {
        if (map[name].syntax) {
          result[name] = syntaxAsAst ? map[name].syntax : generate(map[name].syntax, { compact });
        }
      }
      return result;
    }
    function dumpAtruleMapSyntax(map, compact, syntaxAsAst) {
      const result = {};
      for (const [name, atrule] of Object.entries(map)) {
        result[name] = {
          prelude: atrule.prelude && (syntaxAsAst ? atrule.prelude.syntax : generate(atrule.prelude.syntax, { compact })),
          descriptors: atrule.descriptors && dumpMapSyntax(atrule.descriptors, compact, syntaxAsAst)
        };
      }
      return result;
    }
    function valueHasVar(tokens) {
      for (var i = 0; i < tokens.length; i++) {
        if (tokens[i].value.toLowerCase() === "var(") {
          return true;
        }
      }
      return false;
    }
    function buildMatchResult(match, error, iterations) {
      return {
        matched: match,
        iterations,
        error,
        getTrace: trace.getTrace,
        isType: trace.isType,
        isProperty: trace.isProperty,
        isKeyword: trace.isKeyword
      };
    }
    function matchSyntax(lexer, syntax, value, useCommon) {
      var tokens = prepareTokens(value, lexer.syntax);
      var result;
      if (valueHasVar(tokens)) {
        return buildMatchResult(null, new Error("Matching for a tree with var() is not supported"));
      }
      if (useCommon) {
        result = matchAsTree(tokens, lexer.valueCommonSyntax, lexer);
      }
      if (!useCommon || !result.match) {
        result = matchAsTree(tokens, syntax.match, lexer);
        if (!result.match) {
          return buildMatchResult(
            null,
            new SyntaxMatchError(result.reason, syntax.syntax, value, result),
            result.iterations
          );
        }
      }
      return buildMatchResult(result.match, null, result.iterations);
    }
    var Lexer = function(config, syntax, structure) {
      this.valueCommonSyntax = cssWideKeywords;
      this.syntax = syntax;
      this.generic = false;
      this.atrules = {};
      this.properties = {};
      this.types = {};
      this.structure = structure || getStructureFromConfig(config);
      if (config) {
        if (config.types) {
          for (var name in config.types) {
            this.addType_(name, config.types[name]);
          }
        }
        if (config.generic) {
          this.generic = true;
          for (var name in generic) {
            this.addType_(name, generic[name]);
          }
        }
        if (config.atrules) {
          for (var name in config.atrules) {
            this.addAtrule_(name, config.atrules[name]);
          }
        }
        if (config.properties) {
          for (var name in config.properties) {
            this.addProperty_(name, config.properties[name]);
          }
        }
      }
    };
    Lexer.prototype = {
      structure: {},
      checkStructure: function(ast) {
        function collectWarning(node, message) {
          warns.push({
            node,
            message
          });
        }
        var structure = this.structure;
        var warns = [];
        this.syntax.walk(ast, function(node) {
          if (structure.hasOwnProperty(node.type)) {
            structure[node.type].check(node, collectWarning);
          } else {
            collectWarning(node, "Unknown node type `" + node.type + "`");
          }
        });
        return warns.length ? warns : false;
      },
      createDescriptor: function(syntax, type, name, parent = null) {
        var ref = {
          type,
          name
        };
        var descriptor = {
          type,
          name,
          parent,
          syntax: null,
          match: null
        };
        if (typeof syntax === "function") {
          descriptor.match = buildMatchGraph(syntax, ref);
        } else {
          if (typeof syntax === "string") {
            Object.defineProperty(descriptor, "syntax", {
              get: function() {
                Object.defineProperty(descriptor, "syntax", {
                  value: parse(syntax)
                });
                return descriptor.syntax;
              }
            });
          } else {
            descriptor.syntax = syntax;
          }
          Object.defineProperty(descriptor, "match", {
            get: function() {
              Object.defineProperty(descriptor, "match", {
                value: buildMatchGraph(descriptor.syntax, ref)
              });
              return descriptor.match;
            }
          });
        }
        return descriptor;
      },
      addAtrule_: function(name, syntax) {
        if (!syntax) {
          return;
        }
        this.atrules[name] = {
          type: "Atrule",
          name,
          prelude: syntax.prelude ? this.createDescriptor(syntax.prelude, "AtrulePrelude", name) : null,
          descriptors: syntax.descriptors ? Object.keys(syntax.descriptors).reduce((res, descName) => {
            res[descName] = this.createDescriptor(syntax.descriptors[descName], "AtruleDescriptor", descName, name);
            return res;
          }, {}) : null
        };
      },
      addProperty_: function(name, syntax) {
        if (!syntax) {
          return;
        }
        this.properties[name] = this.createDescriptor(syntax, "Property", name);
      },
      addType_: function(name, syntax) {
        if (!syntax) {
          return;
        }
        this.types[name] = this.createDescriptor(syntax, "Type", name);
        if (syntax === generic["-ms-legacy-expression"]) {
          this.valueCommonSyntax = cssWideKeywordsWithExpression;
        }
      },
      checkAtruleName: function(atruleName) {
        if (!this.getAtrule(atruleName)) {
          return new SyntaxReferenceError("Unknown at-rule", "@" + atruleName);
        }
      },
      checkAtrulePrelude: function(atruleName, prelude) {
        let error = this.checkAtruleName(atruleName);
        if (error) {
          return error;
        }
        var atrule = this.getAtrule(atruleName);
        if (!atrule.prelude && prelude) {
          return new SyntaxError("At-rule `@" + atruleName + "` should not contain a prelude");
        }
        if (atrule.prelude && !prelude) {
          return new SyntaxError("At-rule `@" + atruleName + "` should contain a prelude");
        }
      },
      checkAtruleDescriptorName: function(atruleName, descriptorName) {
        let error = this.checkAtruleName(atruleName);
        if (error) {
          return error;
        }
        var atrule = this.getAtrule(atruleName);
        var descriptor = names.keyword(descriptorName);
        if (!atrule.descriptors) {
          return new SyntaxError("At-rule `@" + atruleName + "` has no known descriptors");
        }
        if (!atrule.descriptors[descriptor.name] && !atrule.descriptors[descriptor.basename]) {
          return new SyntaxReferenceError("Unknown at-rule descriptor", descriptorName);
        }
      },
      checkPropertyName: function(propertyName) {
        var property = names.property(propertyName);
        if (property.custom) {
          return new Error("Lexer matching doesn't applicable for custom properties");
        }
        if (!this.getProperty(propertyName)) {
          return new SyntaxReferenceError("Unknown property", propertyName);
        }
      },
      matchAtrulePrelude: function(atruleName, prelude) {
        var error = this.checkAtrulePrelude(atruleName, prelude);
        if (error) {
          return buildMatchResult(null, error);
        }
        if (!prelude) {
          return buildMatchResult(null, null);
        }
        return matchSyntax(this, this.getAtrule(atruleName).prelude, prelude, false);
      },
      matchAtruleDescriptor: function(atruleName, descriptorName, value) {
        var error = this.checkAtruleDescriptorName(atruleName, descriptorName);
        if (error) {
          return buildMatchResult(null, error);
        }
        var atrule = this.getAtrule(atruleName);
        var descriptor = names.keyword(descriptorName);
        return matchSyntax(this, atrule.descriptors[descriptor.name] || atrule.descriptors[descriptor.basename], value, false);
      },
      matchDeclaration: function(node) {
        if (node.type !== "Declaration") {
          return buildMatchResult(null, new Error("Not a Declaration node"));
        }
        return this.matchProperty(node.property, node.value);
      },
      matchProperty: function(propertyName, value) {
        var error = this.checkPropertyName(propertyName);
        if (error) {
          return buildMatchResult(null, error);
        }
        return matchSyntax(this, this.getProperty(propertyName), value, true);
      },
      matchType: function(typeName, value) {
        var typeSyntax = this.getType(typeName);
        if (!typeSyntax) {
          return buildMatchResult(null, new SyntaxReferenceError("Unknown type", typeName));
        }
        return matchSyntax(this, typeSyntax, value, false);
      },
      match: function(syntax, value) {
        if (typeof syntax !== "string" && (!syntax || !syntax.type)) {
          return buildMatchResult(null, new SyntaxReferenceError("Bad syntax"));
        }
        if (typeof syntax === "string" || !syntax.match) {
          syntax = this.createDescriptor(syntax, "Type", "anonymous");
        }
        return matchSyntax(this, syntax, value, false);
      },
      findValueFragments: function(propertyName, value, type, name) {
        return search.matchFragments(this, value, this.matchProperty(propertyName, value), type, name);
      },
      findDeclarationValueFragments: function(declaration, type, name) {
        return search.matchFragments(this, declaration.value, this.matchDeclaration(declaration), type, name);
      },
      findAllFragments: function(ast, type, name) {
        var result = [];
        this.syntax.walk(ast, {
          visit: "Declaration",
          enter: function(declaration) {
            result.push.apply(result, this.findDeclarationValueFragments(declaration, type, name));
          }.bind(this)
        });
        return result;
      },
      getAtrule: function(atruleName, fallbackBasename = true) {
        var atrule = names.keyword(atruleName);
        var atruleEntry = atrule.vendor && fallbackBasename ? this.atrules[atrule.name] || this.atrules[atrule.basename] : this.atrules[atrule.name];
        return atruleEntry || null;
      },
      getAtrulePrelude: function(atruleName, fallbackBasename = true) {
        const atrule = this.getAtrule(atruleName, fallbackBasename);
        return atrule && atrule.prelude || null;
      },
      getAtruleDescriptor: function(atruleName, name) {
        return this.atrules.hasOwnProperty(atruleName) && this.atrules.declarators ? this.atrules[atruleName].declarators[name] || null : null;
      },
      getProperty: function(propertyName, fallbackBasename = true) {
        var property = names.property(propertyName);
        var propertyEntry = property.vendor && fallbackBasename ? this.properties[property.name] || this.properties[property.basename] : this.properties[property.name];
        return propertyEntry || null;
      },
      getType: function(name) {
        return this.types.hasOwnProperty(name) ? this.types[name] : null;
      },
      validate: function() {
        function validate(syntax, name, broken, descriptor) {
          if (broken.hasOwnProperty(name)) {
            return broken[name];
          }
          broken[name] = false;
          if (descriptor.syntax !== null) {
            walk(descriptor.syntax, function(node) {
              if (node.type !== "Type" && node.type !== "Property") {
                return;
              }
              var map = node.type === "Type" ? syntax.types : syntax.properties;
              var brokenMap = node.type === "Type" ? brokenTypes : brokenProperties;
              if (!map.hasOwnProperty(node.name) || validate(syntax, node.name, brokenMap, map[node.name])) {
                broken[name] = true;
              }
            }, this);
          }
        }
        var brokenTypes = {};
        var brokenProperties = {};
        for (var key in this.types) {
          validate(this, key, brokenTypes, this.types[key]);
        }
        for (var key in this.properties) {
          validate(this, key, brokenProperties, this.properties[key]);
        }
        brokenTypes = Object.keys(brokenTypes).filter(function(name) {
          return brokenTypes[name];
        });
        brokenProperties = Object.keys(brokenProperties).filter(function(name) {
          return brokenProperties[name];
        });
        if (brokenTypes.length || brokenProperties.length) {
          return {
            types: brokenTypes,
            properties: brokenProperties
          };
        }
        return null;
      },
      dump: function(syntaxAsAst, pretty) {
        return {
          generic: this.generic,
          types: dumpMapSyntax(this.types, !pretty, syntaxAsAst),
          properties: dumpMapSyntax(this.properties, !pretty, syntaxAsAst),
          atrules: dumpAtruleMapSyntax(this.atrules, !pretty, syntaxAsAst)
        };
      },
      toString: function() {
        return JSON.stringify(this.dump());
      }
    };
    module2.exports = Lexer;
  }
});

// node_modules/css-tree/lib/definition-syntax/index.js
var require_definition_syntax = __commonJS({
  "node_modules/css-tree/lib/definition-syntax/index.js"(exports2, module2) {
    module2.exports = {
      SyntaxError: require_SyntaxError2(),
      parse: require_parse3(),
      generate: require_generate(),
      walk: require_walk()
    };
  }
});

// node_modules/css-tree/lib/common/OffsetToLocation.js
var require_OffsetToLocation = __commonJS({
  "node_modules/css-tree/lib/common/OffsetToLocation.js"(exports2, module2) {
    var adoptBuffer = require_adopt_buffer();
    var isBOM = require_tokenizer().isBOM;
    var N = 10;
    var F = 12;
    var R = 13;
    function computeLinesAndColumns(host, source) {
      var sourceLength = source.length;
      var lines = adoptBuffer(host.lines, sourceLength);
      var line = host.startLine;
      var columns = adoptBuffer(host.columns, sourceLength);
      var column = host.startColumn;
      var startOffset = source.length > 0 ? isBOM(source.charCodeAt(0)) : 0;
      for (var i = startOffset; i < sourceLength; i++) {
        var code = source.charCodeAt(i);
        lines[i] = line;
        columns[i] = column++;
        if (code === N || code === R || code === F) {
          if (code === R && i + 1 < sourceLength && source.charCodeAt(i + 1) === N) {
            i++;
            lines[i] = line;
            columns[i] = column;
          }
          line++;
          column = 1;
        }
      }
      lines[i] = line;
      columns[i] = column;
      host.lines = lines;
      host.columns = columns;
    }
    var OffsetToLocation = function() {
      this.lines = null;
      this.columns = null;
      this.linesAndColumnsComputed = false;
    };
    OffsetToLocation.prototype = {
      setSource: function(source, startOffset, startLine, startColumn) {
        this.source = source;
        this.startOffset = typeof startOffset === "undefined" ? 0 : startOffset;
        this.startLine = typeof startLine === "undefined" ? 1 : startLine;
        this.startColumn = typeof startColumn === "undefined" ? 1 : startColumn;
        this.linesAndColumnsComputed = false;
      },
      ensureLinesAndColumnsComputed: function() {
        if (!this.linesAndColumnsComputed) {
          computeLinesAndColumns(this, this.source);
          this.linesAndColumnsComputed = true;
        }
      },
      getLocation: function(offset, filename) {
        this.ensureLinesAndColumnsComputed();
        return {
          source: filename,
          offset: this.startOffset + offset,
          line: this.lines[offset],
          column: this.columns[offset]
        };
      },
      getLocationRange: function(start, end, filename) {
        this.ensureLinesAndColumnsComputed();
        return {
          source: filename,
          start: {
            offset: this.startOffset + start,
            line: this.lines[start],
            column: this.columns[start]
          },
          end: {
            offset: this.startOffset + end,
            line: this.lines[end],
            column: this.columns[end]
          }
        };
      }
    };
    module2.exports = OffsetToLocation;
  }
});

// node_modules/css-tree/lib/parser/sequence.js
var require_sequence = __commonJS({
  "node_modules/css-tree/lib/parser/sequence.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var WHITESPACE = TYPE.WhiteSpace;
    var COMMENT = TYPE.Comment;
    module2.exports = function readSequence(recognizer) {
      var children = this.createList();
      var child = null;
      var context = {
        recognizer,
        space: null,
        ignoreWS: false,
        ignoreWSAfter: false
      };
      this.scanner.skipSC();
      while (!this.scanner.eof) {
        switch (this.scanner.tokenType) {
          case COMMENT:
            this.scanner.next();
            continue;
          case WHITESPACE:
            if (context.ignoreWS) {
              this.scanner.next();
            } else {
              context.space = this.WhiteSpace();
            }
            continue;
        }
        child = recognizer.getNode.call(this, context);
        if (child === void 0) {
          break;
        }
        if (context.space !== null) {
          children.push(context.space);
          context.space = null;
        }
        children.push(child);
        if (context.ignoreWSAfter) {
          context.ignoreWSAfter = false;
          context.ignoreWS = true;
        } else {
          context.ignoreWS = false;
        }
      }
      return children;
    };
  }
});

// node_modules/css-tree/lib/parser/create.js
var require_create = __commonJS({
  "node_modules/css-tree/lib/parser/create.js"(exports2, module2) {
    var OffsetToLocation = require_OffsetToLocation();
    var SyntaxError2 = require_SyntaxError();
    var TokenStream = require_TokenStream();
    var List = require_List();
    var tokenize = require_tokenizer();
    var constants = require_const();
    var { findWhiteSpaceStart, cmpStr } = require_utils();
    var sequence = require_sequence();
    var noop = function() {
    };
    var TYPE = constants.TYPE;
    var NAME = constants.NAME;
    var WHITESPACE = TYPE.WhiteSpace;
    var COMMENT = TYPE.Comment;
    var IDENT = TYPE.Ident;
    var FUNCTION = TYPE.Function;
    var URL = TYPE.Url;
    var HASH = TYPE.Hash;
    var PERCENTAGE = TYPE.Percentage;
    var NUMBER = TYPE.Number;
    var NUMBERSIGN = 35;
    var NULL = 0;
    function createParseContext(name) {
      return function() {
        return this[name]();
      };
    }
    function processConfig(config) {
      var parserConfig = {
        context: {},
        scope: {},
        atrule: {},
        pseudo: {}
      };
      if (config.parseContext) {
        for (var name in config.parseContext) {
          switch (typeof config.parseContext[name]) {
            case "function":
              parserConfig.context[name] = config.parseContext[name];
              break;
            case "string":
              parserConfig.context[name] = createParseContext(config.parseContext[name]);
              break;
          }
        }
      }
      if (config.scope) {
        for (var name in config.scope) {
          parserConfig.scope[name] = config.scope[name];
        }
      }
      if (config.atrule) {
        for (var name in config.atrule) {
          var atrule = config.atrule[name];
          if (atrule.parse) {
            parserConfig.atrule[name] = atrule.parse;
          }
        }
      }
      if (config.pseudo) {
        for (var name in config.pseudo) {
          var pseudo = config.pseudo[name];
          if (pseudo.parse) {
            parserConfig.pseudo[name] = pseudo.parse;
          }
        }
      }
      if (config.node) {
        for (var name in config.node) {
          parserConfig[name] = config.node[name].parse;
        }
      }
      return parserConfig;
    }
    module2.exports = function createParser(config) {
      var parser = {
        scanner: new TokenStream(),
        locationMap: new OffsetToLocation(),
        filename: "<unknown>",
        needPositions: false,
        onParseError: noop,
        onParseErrorThrow: false,
        parseAtrulePrelude: true,
        parseRulePrelude: true,
        parseValue: true,
        parseCustomProperty: false,
        readSequence: sequence,
        createList: function() {
          return new List();
        },
        createSingleNodeList: function(node) {
          return new List().appendData(node);
        },
        getFirstListNode: function(list) {
          return list && list.first();
        },
        getLastListNode: function(list) {
          return list.last();
        },
        parseWithFallback: function(consumer, fallback) {
          var startToken = this.scanner.tokenIndex;
          try {
            return consumer.call(this);
          } catch (e) {
            if (this.onParseErrorThrow) {
              throw e;
            }
            var fallbackNode = fallback.call(this, startToken);
            this.onParseErrorThrow = true;
            this.onParseError(e, fallbackNode);
            this.onParseErrorThrow = false;
            return fallbackNode;
          }
        },
        lookupNonWSType: function(offset) {
          do {
            var type = this.scanner.lookupType(offset++);
            if (type !== WHITESPACE) {
              return type;
            }
          } while (type !== NULL);
          return NULL;
        },
        eat: function(tokenType) {
          if (this.scanner.tokenType !== tokenType) {
            var offset = this.scanner.tokenStart;
            var message = NAME[tokenType] + " is expected";
            switch (tokenType) {
              case IDENT:
                if (this.scanner.tokenType === FUNCTION || this.scanner.tokenType === URL) {
                  offset = this.scanner.tokenEnd - 1;
                  message = "Identifier is expected but function found";
                } else {
                  message = "Identifier is expected";
                }
                break;
              case HASH:
                if (this.scanner.isDelim(NUMBERSIGN)) {
                  this.scanner.next();
                  offset++;
                  message = "Name is expected";
                }
                break;
              case PERCENTAGE:
                if (this.scanner.tokenType === NUMBER) {
                  offset = this.scanner.tokenEnd;
                  message = "Percent sign is expected";
                }
                break;
              default:
                if (this.scanner.source.charCodeAt(this.scanner.tokenStart) === tokenType) {
                  offset = offset + 1;
                }
            }
            this.error(message, offset);
          }
          this.scanner.next();
        },
        consume: function(tokenType) {
          var value = this.scanner.getTokenValue();
          this.eat(tokenType);
          return value;
        },
        consumeFunctionName: function() {
          var name = this.scanner.source.substring(this.scanner.tokenStart, this.scanner.tokenEnd - 1);
          this.eat(FUNCTION);
          return name;
        },
        getLocation: function(start, end) {
          if (this.needPositions) {
            return this.locationMap.getLocationRange(
              start,
              end,
              this.filename
            );
          }
          return null;
        },
        getLocationFromList: function(list) {
          if (this.needPositions) {
            var head = this.getFirstListNode(list);
            var tail = this.getLastListNode(list);
            return this.locationMap.getLocationRange(
              head !== null ? head.loc.start.offset - this.locationMap.startOffset : this.scanner.tokenStart,
              tail !== null ? tail.loc.end.offset - this.locationMap.startOffset : this.scanner.tokenStart,
              this.filename
            );
          }
          return null;
        },
        error: function(message, offset) {
          var location = typeof offset !== "undefined" && offset < this.scanner.source.length ? this.locationMap.getLocation(offset) : this.scanner.eof ? this.locationMap.getLocation(findWhiteSpaceStart(this.scanner.source, this.scanner.source.length - 1)) : this.locationMap.getLocation(this.scanner.tokenStart);
          throw new SyntaxError2(
            message || "Unexpected input",
            this.scanner.source,
            location.offset,
            location.line,
            location.column
          );
        }
      };
      config = processConfig(config || {});
      for (var key in config) {
        parser[key] = config[key];
      }
      return function(source, options) {
        options = options || {};
        var context = options.context || "default";
        var onComment = options.onComment;
        var ast;
        tokenize(source, parser.scanner);
        parser.locationMap.setSource(
          source,
          options.offset,
          options.line,
          options.column
        );
        parser.filename = options.filename || "<unknown>";
        parser.needPositions = Boolean(options.positions);
        parser.onParseError = typeof options.onParseError === "function" ? options.onParseError : noop;
        parser.onParseErrorThrow = false;
        parser.parseAtrulePrelude = "parseAtrulePrelude" in options ? Boolean(options.parseAtrulePrelude) : true;
        parser.parseRulePrelude = "parseRulePrelude" in options ? Boolean(options.parseRulePrelude) : true;
        parser.parseValue = "parseValue" in options ? Boolean(options.parseValue) : true;
        parser.parseCustomProperty = "parseCustomProperty" in options ? Boolean(options.parseCustomProperty) : false;
        if (!parser.context.hasOwnProperty(context)) {
          throw new Error("Unknown context `" + context + "`");
        }
        if (typeof onComment === "function") {
          parser.scanner.forEachToken((type, start, end) => {
            if (type === COMMENT) {
              const loc = parser.getLocation(start, end);
              const value = cmpStr(source, end - 2, end, "*/") ? source.slice(start + 2, end - 2) : source.slice(start + 2, end);
              onComment(value, loc);
            }
          });
        }
        ast = parser.context[context].call(parser, options);
        if (!parser.scanner.eof) {
          parser.error();
        }
        return ast;
      };
    };
  }
});

// node_modules/source-map/lib/base64.js
var require_base64 = __commonJS({
  "node_modules/source-map/lib/base64.js"(exports2) {
    var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
    exports2.encode = function(number) {
      if (0 <= number && number < intToCharMap.length) {
        return intToCharMap[number];
      }
      throw new TypeError("Must be between 0 and 63: " + number);
    };
    exports2.decode = function(charCode) {
      var bigA = 65;
      var bigZ = 90;
      var littleA = 97;
      var littleZ = 122;
      var zero = 48;
      var nine = 57;
      var plus = 43;
      var slash = 47;
      var littleOffset = 26;
      var numberOffset = 52;
      if (bigA <= charCode && charCode <= bigZ) {
        return charCode - bigA;
      }
      if (littleA <= charCode && charCode <= littleZ) {
        return charCode - littleA + littleOffset;
      }
      if (zero <= charCode && charCode <= nine) {
        return charCode - zero + numberOffset;
      }
      if (charCode == plus) {
        return 62;
      }
      if (charCode == slash) {
        return 63;
      }
      return -1;
    };
  }
});

// node_modules/source-map/lib/base64-vlq.js
var require_base64_vlq = __commonJS({
  "node_modules/source-map/lib/base64-vlq.js"(exports2) {
    var base64 = require_base64();
    var VLQ_BASE_SHIFT = 5;
    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
    var VLQ_BASE_MASK = VLQ_BASE - 1;
    var VLQ_CONTINUATION_BIT = VLQ_BASE;
    function toVLQSigned(aValue) {
      return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
    }
    function fromVLQSigned(aValue) {
      var isNegative = (aValue & 1) === 1;
      var shifted = aValue >> 1;
      return isNegative ? -shifted : shifted;
    }
    exports2.encode = function base64VLQ_encode(aValue) {
      var encoded = "";
      var digit;
      var vlq = toVLQSigned(aValue);
      do {
        digit = vlq & VLQ_BASE_MASK;
        vlq >>>= VLQ_BASE_SHIFT;
        if (vlq > 0) {
          digit |= VLQ_CONTINUATION_BIT;
        }
        encoded += base64.encode(digit);
      } while (vlq > 0);
      return encoded;
    };
    exports2.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
      var strLen = aStr.length;
      var result = 0;
      var shift = 0;
      var continuation, digit;
      do {
        if (aIndex >= strLen) {
          throw new Error("Expected more digits in base 64 VLQ value.");
        }
        digit = base64.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) {
          throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        }
        continuation = !!(digit & VLQ_CONTINUATION_BIT);
        digit &= VLQ_BASE_MASK;
        result = result + (digit << shift);
        shift += VLQ_BASE_SHIFT;
      } while (continuation);
      aOutParam.value = fromVLQSigned(result);
      aOutParam.rest = aIndex;
    };
  }
});

// node_modules/source-map/lib/util.js
var require_util = __commonJS({
  "node_modules/source-map/lib/util.js"(exports2) {
    function getArg(aArgs, aName, aDefaultValue) {
      if (aName in aArgs) {
        return aArgs[aName];
      } else if (arguments.length === 3) {
        return aDefaultValue;
      } else {
        throw new Error('"' + aName + '" is a required argument.');
      }
    }
    exports2.getArg = getArg;
    var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
    var dataUrlRegexp = /^data:.+\,.+$/;
    function urlParse(aUrl) {
      var match = aUrl.match(urlRegexp);
      if (!match) {
        return null;
      }
      return {
        scheme: match[1],
        auth: match[2],
        host: match[3],
        port: match[4],
        path: match[5]
      };
    }
    exports2.urlParse = urlParse;
    function urlGenerate(aParsedUrl) {
      var url = "";
      if (aParsedUrl.scheme) {
        url += aParsedUrl.scheme + ":";
      }
      url += "//";
      if (aParsedUrl.auth) {
        url += aParsedUrl.auth + "@";
      }
      if (aParsedUrl.host) {
        url += aParsedUrl.host;
      }
      if (aParsedUrl.port) {
        url += ":" + aParsedUrl.port;
      }
      if (aParsedUrl.path) {
        url += aParsedUrl.path;
      }
      return url;
    }
    exports2.urlGenerate = urlGenerate;
    function normalize(aPath) {
      var path3 = aPath;
      var url = urlParse(aPath);
      if (url) {
        if (!url.path) {
          return aPath;
        }
        path3 = url.path;
      }
      var isAbsolute = exports2.isAbsolute(path3);
      var parts = path3.split(/\/+/);
      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
        part = parts[i];
        if (part === ".") {
          parts.splice(i, 1);
        } else if (part === "..") {
          up++;
        } else if (up > 0) {
          if (part === "") {
            parts.splice(i + 1, up);
            up = 0;
          } else {
            parts.splice(i, 2);
            up--;
          }
        }
      }
      path3 = parts.join("/");
      if (path3 === "") {
        path3 = isAbsolute ? "/" : ".";
      }
      if (url) {
        url.path = path3;
        return urlGenerate(url);
      }
      return path3;
    }
    exports2.normalize = normalize;
    function join(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      if (aPath === "") {
        aPath = ".";
      }
      var aPathUrl = urlParse(aPath);
      var aRootUrl = urlParse(aRoot);
      if (aRootUrl) {
        aRoot = aRootUrl.path || "/";
      }
      if (aPathUrl && !aPathUrl.scheme) {
        if (aRootUrl) {
          aPathUrl.scheme = aRootUrl.scheme;
        }
        return urlGenerate(aPathUrl);
      }
      if (aPathUrl || aPath.match(dataUrlRegexp)) {
        return aPath;
      }
      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
        aRootUrl.host = aPath;
        return urlGenerate(aRootUrl);
      }
      var joined = aPath.charAt(0) === "/" ? aPath : normalize(aRoot.replace(/\/+$/, "") + "/" + aPath);
      if (aRootUrl) {
        aRootUrl.path = joined;
        return urlGenerate(aRootUrl);
      }
      return joined;
    }
    exports2.join = join;
    exports2.isAbsolute = function(aPath) {
      return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
    };
    function relative(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      aRoot = aRoot.replace(/\/$/, "");
      var level = 0;
      while (aPath.indexOf(aRoot + "/") !== 0) {
        var index = aRoot.lastIndexOf("/");
        if (index < 0) {
          return aPath;
        }
        aRoot = aRoot.slice(0, index);
        if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
          return aPath;
        }
        ++level;
      }
      return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
    }
    exports2.relative = relative;
    var supportsNullProto = function() {
      var obj = /* @__PURE__ */ Object.create(null);
      return !("__proto__" in obj);
    }();
    function identity(s) {
      return s;
    }
    function toSetString(aStr) {
      if (isProtoString(aStr)) {
        return "$" + aStr;
      }
      return aStr;
    }
    exports2.toSetString = supportsNullProto ? identity : toSetString;
    function fromSetString(aStr) {
      if (isProtoString(aStr)) {
        return aStr.slice(1);
      }
      return aStr;
    }
    exports2.fromSetString = supportsNullProto ? identity : fromSetString;
    function isProtoString(s) {
      if (!s) {
        return false;
      }
      var length = s.length;
      if (length < 9) {
        return false;
      }
      if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {
        return false;
      }
      for (var i = length - 10; i >= 0; i--) {
        if (s.charCodeAt(i) !== 36) {
          return false;
        }
      }
      return true;
    }
    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
      var cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0 || onlyCompareOriginal) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports2.compareByOriginalPositions = compareByOriginalPositions;
    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0 || onlyCompareGenerated) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports2.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
    function strcmp(aStr1, aStr2) {
      if (aStr1 === aStr2) {
        return 0;
      }
      if (aStr1 === null) {
        return 1;
      }
      if (aStr2 === null) {
        return -1;
      }
      if (aStr1 > aStr2) {
        return 1;
      }
      return -1;
    }
    function compareByGeneratedPositionsInflated(mappingA, mappingB) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }
      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }
      return strcmp(mappingA.name, mappingB.name);
    }
    exports2.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
    function parseSourceMapInput(str) {
      return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
    }
    exports2.parseSourceMapInput = parseSourceMapInput;
    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
      sourceURL = sourceURL || "";
      if (sourceRoot) {
        if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
          sourceRoot += "/";
        }
        sourceURL = sourceRoot + sourceURL;
      }
      if (sourceMapURL) {
        var parsed = urlParse(sourceMapURL);
        if (!parsed) {
          throw new Error("sourceMapURL could not be parsed");
        }
        if (parsed.path) {
          var index = parsed.path.lastIndexOf("/");
          if (index >= 0) {
            parsed.path = parsed.path.substring(0, index + 1);
          }
        }
        sourceURL = join(urlGenerate(parsed), sourceURL);
      }
      return normalize(sourceURL);
    }
    exports2.computeSourceURL = computeSourceURL;
  }
});

// node_modules/source-map/lib/array-set.js
var require_array_set = __commonJS({
  "node_modules/source-map/lib/array-set.js"(exports2) {
    var util = require_util();
    var has = Object.prototype.hasOwnProperty;
    var hasNativeMap = typeof Map !== "undefined";
    function ArraySet() {
      this._array = [];
      this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
    }
    ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
      var set = new ArraySet();
      for (var i = 0, len = aArray.length; i < len; i++) {
        set.add(aArray[i], aAllowDuplicates);
      }
      return set;
    };
    ArraySet.prototype.size = function ArraySet_size() {
      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
    };
    ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
      var idx = this._array.length;
      if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
      }
      if (!isDuplicate) {
        if (hasNativeMap) {
          this._set.set(aStr, idx);
        } else {
          this._set[sStr] = idx;
        }
      }
    };
    ArraySet.prototype.has = function ArraySet_has(aStr) {
      if (hasNativeMap) {
        return this._set.has(aStr);
      } else {
        var sStr = util.toSetString(aStr);
        return has.call(this._set, sStr);
      }
    };
    ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
      if (hasNativeMap) {
        var idx = this._set.get(aStr);
        if (idx >= 0) {
          return idx;
        }
      } else {
        var sStr = util.toSetString(aStr);
        if (has.call(this._set, sStr)) {
          return this._set[sStr];
        }
      }
      throw new Error('"' + aStr + '" is not in the set.');
    };
    ArraySet.prototype.at = function ArraySet_at(aIdx) {
      if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
      }
      throw new Error("No element indexed by " + aIdx);
    };
    ArraySet.prototype.toArray = function ArraySet_toArray() {
      return this._array.slice();
    };
    exports2.ArraySet = ArraySet;
  }
});

// node_modules/source-map/lib/mapping-list.js
var require_mapping_list = __commonJS({
  "node_modules/source-map/lib/mapping-list.js"(exports2) {
    var util = require_util();
    function generatedPositionAfter(mappingA, mappingB) {
      var lineA = mappingA.generatedLine;
      var lineB = mappingB.generatedLine;
      var columnA = mappingA.generatedColumn;
      var columnB = mappingB.generatedColumn;
      return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
    }
    function MappingList() {
      this._array = [];
      this._sorted = true;
      this._last = { generatedLine: -1, generatedColumn: 0 };
    }
    MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
      this._array.forEach(aCallback, aThisArg);
    };
    MappingList.prototype.add = function MappingList_add(aMapping) {
      if (generatedPositionAfter(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
      } else {
        this._sorted = false;
        this._array.push(aMapping);
      }
    };
    MappingList.prototype.toArray = function MappingList_toArray() {
      if (!this._sorted) {
        this._array.sort(util.compareByGeneratedPositionsInflated);
        this._sorted = true;
      }
      return this._array;
    };
    exports2.MappingList = MappingList;
  }
});

// node_modules/source-map/lib/source-map-generator.js
var require_source_map_generator = __commonJS({
  "node_modules/source-map/lib/source-map-generator.js"(exports2) {
    var base64VLQ = require_base64_vlq();
    var util = require_util();
    var ArraySet = require_array_set().ArraySet;
    var MappingList = require_mapping_list().MappingList;
    function SourceMapGenerator(aArgs) {
      if (!aArgs) {
        aArgs = {};
      }
      this._file = util.getArg(aArgs, "file", null);
      this._sourceRoot = util.getArg(aArgs, "sourceRoot", null);
      this._skipValidation = util.getArg(aArgs, "skipValidation", false);
      this._sources = new ArraySet();
      this._names = new ArraySet();
      this._mappings = new MappingList();
      this._sourcesContents = null;
    }
    SourceMapGenerator.prototype._version = 3;
    SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
      var sourceRoot = aSourceMapConsumer.sourceRoot;
      var generator = new SourceMapGenerator({
        file: aSourceMapConsumer.file,
        sourceRoot
      });
      aSourceMapConsumer.eachMapping(function(mapping) {
        var newMapping = {
          generated: {
            line: mapping.generatedLine,
            column: mapping.generatedColumn
          }
        };
        if (mapping.source != null) {
          newMapping.source = mapping.source;
          if (sourceRoot != null) {
            newMapping.source = util.relative(sourceRoot, newMapping.source);
          }
          newMapping.original = {
            line: mapping.originalLine,
            column: mapping.originalColumn
          };
          if (mapping.name != null) {
            newMapping.name = mapping.name;
          }
        }
        generator.addMapping(newMapping);
      });
      aSourceMapConsumer.sources.forEach(function(sourceFile) {
        var sourceRelative = sourceFile;
        if (sourceRoot !== null) {
          sourceRelative = util.relative(sourceRoot, sourceFile);
        }
        if (!generator._sources.has(sourceRelative)) {
          generator._sources.add(sourceRelative);
        }
        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
        if (content != null) {
          generator.setSourceContent(sourceFile, content);
        }
      });
      return generator;
    };
    SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
      var generated = util.getArg(aArgs, "generated");
      var original = util.getArg(aArgs, "original", null);
      var source = util.getArg(aArgs, "source", null);
      var name = util.getArg(aArgs, "name", null);
      if (!this._skipValidation) {
        this._validateMapping(generated, original, source, name);
      }
      if (source != null) {
        source = String(source);
        if (!this._sources.has(source)) {
          this._sources.add(source);
        }
      }
      if (name != null) {
        name = String(name);
        if (!this._names.has(name)) {
          this._names.add(name);
        }
      }
      this._mappings.add({
        generatedLine: generated.line,
        generatedColumn: generated.column,
        originalLine: original != null && original.line,
        originalColumn: original != null && original.column,
        source,
        name
      });
    };
    SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
      var source = aSourceFile;
      if (this._sourceRoot != null) {
        source = util.relative(this._sourceRoot, source);
      }
      if (aSourceContent != null) {
        if (!this._sourcesContents) {
          this._sourcesContents = /* @__PURE__ */ Object.create(null);
        }
        this._sourcesContents[util.toSetString(source)] = aSourceContent;
      } else if (this._sourcesContents) {
        delete this._sourcesContents[util.toSetString(source)];
        if (Object.keys(this._sourcesContents).length === 0) {
          this._sourcesContents = null;
        }
      }
    };
    SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
      var sourceFile = aSourceFile;
      if (aSourceFile == null) {
        if (aSourceMapConsumer.file == null) {
          throw new Error(
            `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`
          );
        }
        sourceFile = aSourceMapConsumer.file;
      }
      var sourceRoot = this._sourceRoot;
      if (sourceRoot != null) {
        sourceFile = util.relative(sourceRoot, sourceFile);
      }
      var newSources = new ArraySet();
      var newNames = new ArraySet();
      this._mappings.unsortedForEach(function(mapping) {
        if (mapping.source === sourceFile && mapping.originalLine != null) {
          var original = aSourceMapConsumer.originalPositionFor({
            line: mapping.originalLine,
            column: mapping.originalColumn
          });
          if (original.source != null) {
            mapping.source = original.source;
            if (aSourceMapPath != null) {
              mapping.source = util.join(aSourceMapPath, mapping.source);
            }
            if (sourceRoot != null) {
              mapping.source = util.relative(sourceRoot, mapping.source);
            }
            mapping.originalLine = original.line;
            mapping.originalColumn = original.column;
            if (original.name != null) {
              mapping.name = original.name;
            }
          }
        }
        var source = mapping.source;
        if (source != null && !newSources.has(source)) {
          newSources.add(source);
        }
        var name = mapping.name;
        if (name != null && !newNames.has(name)) {
          newNames.add(name);
        }
      }, this);
      this._sources = newSources;
      this._names = newNames;
      aSourceMapConsumer.sources.forEach(function(sourceFile2) {
        var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
        if (content != null) {
          if (aSourceMapPath != null) {
            sourceFile2 = util.join(aSourceMapPath, sourceFile2);
          }
          if (sourceRoot != null) {
            sourceFile2 = util.relative(sourceRoot, sourceFile2);
          }
          this.setSourceContent(sourceFile2, content);
        }
      }, this);
    };
    SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
      if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
        throw new Error(
          "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values."
        );
      }
      if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
        return;
      } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
        return;
      } else {
        throw new Error("Invalid mapping: " + JSON.stringify({
          generated: aGenerated,
          source: aSource,
          original: aOriginal,
          name: aName
        }));
      }
    };
    SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
      var previousGeneratedColumn = 0;
      var previousGeneratedLine = 1;
      var previousOriginalColumn = 0;
      var previousOriginalLine = 0;
      var previousName = 0;
      var previousSource = 0;
      var result = "";
      var next;
      var mapping;
      var nameIdx;
      var sourceIdx;
      var mappings = this._mappings.toArray();
      for (var i = 0, len = mappings.length; i < len; i++) {
        mapping = mappings[i];
        next = "";
        if (mapping.generatedLine !== previousGeneratedLine) {
          previousGeneratedColumn = 0;
          while (mapping.generatedLine !== previousGeneratedLine) {
            next += ";";
            previousGeneratedLine++;
          }
        } else {
          if (i > 0) {
            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
              continue;
            }
            next += ",";
          }
        }
        next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
        previousGeneratedColumn = mapping.generatedColumn;
        if (mapping.source != null) {
          sourceIdx = this._sources.indexOf(mapping.source);
          next += base64VLQ.encode(sourceIdx - previousSource);
          previousSource = sourceIdx;
          next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
          previousOriginalLine = mapping.originalLine - 1;
          next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
          previousOriginalColumn = mapping.originalColumn;
          if (mapping.name != null) {
            nameIdx = this._names.indexOf(mapping.name);
            next += base64VLQ.encode(nameIdx - previousName);
            previousName = nameIdx;
          }
        }
        result += next;
      }
      return result;
    };
    SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
      return aSources.map(function(source) {
        if (!this._sourcesContents) {
          return null;
        }
        if (aSourceRoot != null) {
          source = util.relative(aSourceRoot, source);
        }
        var key = util.toSetString(source);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
      }, this);
    };
    SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
      var map = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      if (this._file != null) {
        map.file = this._file;
      }
      if (this._sourceRoot != null) {
        map.sourceRoot = this._sourceRoot;
      }
      if (this._sourcesContents) {
        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
      }
      return map;
    };
    SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
      return JSON.stringify(this.toJSON());
    };
    exports2.SourceMapGenerator = SourceMapGenerator;
  }
});

// node_modules/css-tree/lib/generator/sourceMap.js
var require_sourceMap = __commonJS({
  "node_modules/css-tree/lib/generator/sourceMap.js"(exports2, module2) {
    var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
    var trackNodes = {
      Atrule: true,
      Selector: true,
      Declaration: true
    };
    module2.exports = function generateSourceMap(handlers) {
      var map = new SourceMapGenerator();
      var line = 1;
      var column = 0;
      var generated = {
        line: 1,
        column: 0
      };
      var original = {
        line: 0,
        // should be zero to add first mapping
        column: 0
      };
      var sourceMappingActive = false;
      var activatedGenerated = {
        line: 1,
        column: 0
      };
      var activatedMapping = {
        generated: activatedGenerated
      };
      var handlersNode = handlers.node;
      handlers.node = function(node) {
        if (node.loc && node.loc.start && trackNodes.hasOwnProperty(node.type)) {
          var nodeLine = node.loc.start.line;
          var nodeColumn = node.loc.start.column - 1;
          if (original.line !== nodeLine || original.column !== nodeColumn) {
            original.line = nodeLine;
            original.column = nodeColumn;
            generated.line = line;
            generated.column = column;
            if (sourceMappingActive) {
              sourceMappingActive = false;
              if (generated.line !== activatedGenerated.line || generated.column !== activatedGenerated.column) {
                map.addMapping(activatedMapping);
              }
            }
            sourceMappingActive = true;
            map.addMapping({
              source: node.loc.source,
              original,
              generated
            });
          }
        }
        handlersNode.call(this, node);
        if (sourceMappingActive && trackNodes.hasOwnProperty(node.type)) {
          activatedGenerated.line = line;
          activatedGenerated.column = column;
        }
      };
      var handlersChunk = handlers.chunk;
      handlers.chunk = function(chunk) {
        for (var i = 0; i < chunk.length; i++) {
          if (chunk.charCodeAt(i) === 10) {
            line++;
            column = 0;
          } else {
            column++;
          }
        }
        handlersChunk(chunk);
      };
      var handlersResult = handlers.result;
      handlers.result = function() {
        if (sourceMappingActive) {
          map.addMapping(activatedMapping);
        }
        return {
          css: handlersResult(),
          map
        };
      };
      return handlers;
    };
  }
});

// node_modules/css-tree/lib/generator/create.js
var require_create2 = __commonJS({
  "node_modules/css-tree/lib/generator/create.js"(exports2, module2) {
    var sourceMap = require_sourceMap();
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    function processChildren(node, delimeter) {
      var list = node.children;
      var prev = null;
      if (typeof delimeter !== "function") {
        list.forEach(this.node, this);
      } else {
        list.forEach(function(node2) {
          if (prev !== null) {
            delimeter.call(this, prev);
          }
          this.node(node2);
          prev = node2;
        }, this);
      }
    }
    module2.exports = function createGenerator(config) {
      function processNode(node) {
        if (hasOwnProperty2.call(types, node.type)) {
          types[node.type].call(this, node);
        } else {
          throw new Error("Unknown node type: " + node.type);
        }
      }
      var types = {};
      if (config.node) {
        for (var name in config.node) {
          types[name] = config.node[name].generate;
        }
      }
      return function(node, options) {
        var buffer = "";
        var handlers = {
          children: processChildren,
          node: processNode,
          chunk: function(chunk) {
            buffer += chunk;
          },
          result: function() {
            return buffer;
          }
        };
        if (options) {
          if (typeof options.decorator === "function") {
            handlers = options.decorator(handlers);
          }
          if (options.sourceMap) {
            handlers = sourceMap(handlers);
          }
        }
        handlers.node(node);
        return handlers.result();
      };
    };
  }
});

// node_modules/css-tree/lib/convertor/create.js
var require_create3 = __commonJS({
  "node_modules/css-tree/lib/convertor/create.js"(exports2, module2) {
    var List = require_List();
    module2.exports = function createConvertors(walk) {
      return {
        fromPlainObject: function(ast) {
          walk(ast, {
            enter: function(node) {
              if (node.children && node.children instanceof List === false) {
                node.children = new List().fromArray(node.children);
              }
            }
          });
          return ast;
        },
        toPlainObject: function(ast) {
          walk(ast, {
            leave: function(node) {
              if (node.children && node.children instanceof List) {
                node.children = node.children.toArray();
              }
            }
          });
          return ast;
        }
      };
    };
  }
});

// node_modules/css-tree/lib/walker/create.js
var require_create4 = __commonJS({
  "node_modules/css-tree/lib/walker/create.js"(exports2, module2) {
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var noop = function() {
    };
    function ensureFunction(value) {
      return typeof value === "function" ? value : noop;
    }
    function invokeForType(fn, type) {
      return function(node, item, list) {
        if (node.type === type) {
          fn.call(this, node, item, list);
        }
      };
    }
    function getWalkersFromStructure(name, nodeType) {
      var structure = nodeType.structure;
      var walkers = [];
      for (var key in structure) {
        if (hasOwnProperty2.call(structure, key) === false) {
          continue;
        }
        var fieldTypes = structure[key];
        var walker = {
          name: key,
          type: false,
          nullable: false
        };
        if (!Array.isArray(structure[key])) {
          fieldTypes = [structure[key]];
        }
        for (var i = 0; i < fieldTypes.length; i++) {
          var fieldType = fieldTypes[i];
          if (fieldType === null) {
            walker.nullable = true;
          } else if (typeof fieldType === "string") {
            walker.type = "node";
          } else if (Array.isArray(fieldType)) {
            walker.type = "list";
          }
        }
        if (walker.type) {
          walkers.push(walker);
        }
      }
      if (walkers.length) {
        return {
          context: nodeType.walkContext,
          fields: walkers
        };
      }
      return null;
    }
    function getTypesFromConfig(config) {
      var types = {};
      for (var name in config.node) {
        if (hasOwnProperty2.call(config.node, name)) {
          var nodeType = config.node[name];
          if (!nodeType.structure) {
            throw new Error("Missed `structure` field in `" + name + "` node type definition");
          }
          types[name] = getWalkersFromStructure(name, nodeType);
        }
      }
      return types;
    }
    function createTypeIterator(config, reverse) {
      var fields = config.fields.slice();
      var contextName = config.context;
      var useContext = typeof contextName === "string";
      if (reverse) {
        fields.reverse();
      }
      return function(node, context, walk, walkReducer) {
        var prevContextValue;
        if (useContext) {
          prevContextValue = context[contextName];
          context[contextName] = node;
        }
        for (var i = 0; i < fields.length; i++) {
          var field = fields[i];
          var ref = node[field.name];
          if (!field.nullable || ref) {
            if (field.type === "list") {
              var breakWalk = reverse ? ref.reduceRight(walkReducer, false) : ref.reduce(walkReducer, false);
              if (breakWalk) {
                return true;
              }
            } else if (walk(ref)) {
              return true;
            }
          }
        }
        if (useContext) {
          context[contextName] = prevContextValue;
        }
      };
    }
    function createFastTraveralMap(iterators) {
      return {
        Atrule: {
          StyleSheet: iterators.StyleSheet,
          Atrule: iterators.Atrule,
          Rule: iterators.Rule,
          Block: iterators.Block
        },
        Rule: {
          StyleSheet: iterators.StyleSheet,
          Atrule: iterators.Atrule,
          Rule: iterators.Rule,
          Block: iterators.Block
        },
        Declaration: {
          StyleSheet: iterators.StyleSheet,
          Atrule: iterators.Atrule,
          Rule: iterators.Rule,
          Block: iterators.Block,
          DeclarationList: iterators.DeclarationList
        }
      };
    }
    module2.exports = function createWalker(config) {
      var types = getTypesFromConfig(config);
      var iteratorsNatural = {};
      var iteratorsReverse = {};
      var breakWalk = Symbol("break-walk");
      var skipNode = Symbol("skip-node");
      for (var name in types) {
        if (hasOwnProperty2.call(types, name) && types[name] !== null) {
          iteratorsNatural[name] = createTypeIterator(types[name], false);
          iteratorsReverse[name] = createTypeIterator(types[name], true);
        }
      }
      var fastTraversalIteratorsNatural = createFastTraveralMap(iteratorsNatural);
      var fastTraversalIteratorsReverse = createFastTraveralMap(iteratorsReverse);
      var walk = function(root, options) {
        function walkNode(node, item, list) {
          var enterRet = enter.call(context, node, item, list);
          if (enterRet === breakWalk) {
            debugger;
            return true;
          }
          if (enterRet === skipNode) {
            return false;
          }
          if (iterators.hasOwnProperty(node.type)) {
            if (iterators[node.type](node, context, walkNode, walkReducer)) {
              return true;
            }
          }
          if (leave.call(context, node, item, list) === breakWalk) {
            return true;
          }
          return false;
        }
        var walkReducer = (ret, data, item, list) => ret || walkNode(data, item, list);
        var enter = noop;
        var leave = noop;
        var iterators = iteratorsNatural;
        var context = {
          break: breakWalk,
          skip: skipNode,
          root,
          stylesheet: null,
          atrule: null,
          atrulePrelude: null,
          rule: null,
          selector: null,
          block: null,
          declaration: null,
          function: null
        };
        if (typeof options === "function") {
          enter = options;
        } else if (options) {
          enter = ensureFunction(options.enter);
          leave = ensureFunction(options.leave);
          if (options.reverse) {
            iterators = iteratorsReverse;
          }
          if (options.visit) {
            if (fastTraversalIteratorsNatural.hasOwnProperty(options.visit)) {
              iterators = options.reverse ? fastTraversalIteratorsReverse[options.visit] : fastTraversalIteratorsNatural[options.visit];
            } else if (!types.hasOwnProperty(options.visit)) {
              throw new Error("Bad value `" + options.visit + "` for `visit` option (should be: " + Object.keys(types).join(", ") + ")");
            }
            enter = invokeForType(enter, options.visit);
            leave = invokeForType(leave, options.visit);
          }
        }
        if (enter === noop && leave === noop) {
          throw new Error("Neither `enter` nor `leave` walker handler is set or both aren't a function");
        }
        walkNode(root);
      };
      walk.break = breakWalk;
      walk.skip = skipNode;
      walk.find = function(ast, fn) {
        var found = null;
        walk(ast, function(node, item, list) {
          if (fn.call(this, node, item, list)) {
            found = node;
            return breakWalk;
          }
        });
        return found;
      };
      walk.findLast = function(ast, fn) {
        var found = null;
        walk(ast, {
          reverse: true,
          enter: function(node, item, list) {
            if (fn.call(this, node, item, list)) {
              found = node;
              return breakWalk;
            }
          }
        });
        return found;
      };
      walk.findAll = function(ast, fn) {
        var found = [];
        walk(ast, function(node, item, list) {
          if (fn.call(this, node, item, list)) {
            found.push(node);
          }
        });
        return found;
      };
      return walk;
    };
  }
});

// node_modules/css-tree/lib/utils/clone.js
var require_clone = __commonJS({
  "node_modules/css-tree/lib/utils/clone.js"(exports2, module2) {
    var List = require_List();
    module2.exports = function clone(node) {
      var result = {};
      for (var key in node) {
        var value = node[key];
        if (value) {
          if (Array.isArray(value) || value instanceof List) {
            value = value.map(clone);
          } else if (value.constructor === Object) {
            value = clone(value);
          }
        }
        result[key] = value;
      }
      return result;
    };
  }
});

// node_modules/css-tree/lib/syntax/config/mix.js
var require_mix = __commonJS({
  "node_modules/css-tree/lib/syntax/config/mix.js"(exports2, module2) {
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var shape = {
      generic: true,
      types: appendOrAssign,
      atrules: {
        prelude: appendOrAssignOrNull,
        descriptors: appendOrAssignOrNull
      },
      properties: appendOrAssign,
      parseContext: assign,
      scope: deepAssign,
      atrule: ["parse"],
      pseudo: ["parse"],
      node: ["name", "structure", "parse", "generate", "walkContext"]
    };
    function isObject(value) {
      return value && value.constructor === Object;
    }
    function copy(value) {
      return isObject(value) ? Object.assign({}, value) : value;
    }
    function assign(dest, src) {
      return Object.assign(dest, src);
    }
    function deepAssign(dest, src) {
      for (const key in src) {
        if (hasOwnProperty2.call(src, key)) {
          if (isObject(dest[key])) {
            deepAssign(dest[key], copy(src[key]));
          } else {
            dest[key] = copy(src[key]);
          }
        }
      }
      return dest;
    }
    function append(a, b) {
      if (typeof b === "string" && /^\s*\|/.test(b)) {
        return typeof a === "string" ? a + b : b.replace(/^\s*\|\s*/, "");
      }
      return b || null;
    }
    function appendOrAssign(a, b) {
      if (typeof b === "string") {
        return append(a, b);
      }
      const result = Object.assign({}, a);
      for (let key in b) {
        if (hasOwnProperty2.call(b, key)) {
          result[key] = append(hasOwnProperty2.call(a, key) ? a[key] : void 0, b[key]);
        }
      }
      return result;
    }
    function appendOrAssignOrNull(a, b) {
      const result = appendOrAssign(a, b);
      return !isObject(result) || Object.keys(result).length ? result : null;
    }
    function mix(dest, src, shape2) {
      for (const key in shape2) {
        if (hasOwnProperty2.call(shape2, key) === false) {
          continue;
        }
        if (shape2[key] === true) {
          if (key in src) {
            if (hasOwnProperty2.call(src, key)) {
              dest[key] = copy(src[key]);
            }
          }
        } else if (shape2[key]) {
          if (typeof shape2[key] === "function") {
            const fn = shape2[key];
            dest[key] = fn({}, dest[key]);
            dest[key] = fn(dest[key] || {}, src[key]);
          } else if (isObject(shape2[key])) {
            const result = {};
            for (let name in dest[key]) {
              result[name] = mix({}, dest[key][name], shape2[key]);
            }
            for (let name in src[key]) {
              result[name] = mix(result[name] || {}, src[key][name], shape2[key]);
            }
            dest[key] = result;
          } else if (Array.isArray(shape2[key])) {
            const res = {};
            const innerShape = shape2[key].reduce(function(s, k) {
              s[k] = true;
              return s;
            }, {});
            for (const [name, value] of Object.entries(dest[key] || {})) {
              res[name] = {};
              if (value) {
                mix(res[name], value, innerShape);
              }
            }
            for (const name in src[key]) {
              if (hasOwnProperty2.call(src[key], name)) {
                if (!res[name]) {
                  res[name] = {};
                }
                if (src[key] && src[key][name]) {
                  mix(res[name], src[key][name], innerShape);
                }
              }
            }
            dest[key] = res;
          }
        }
      }
      return dest;
    }
    module2.exports = (dest, src) => mix(dest, src, shape);
  }
});

// node_modules/css-tree/lib/syntax/create.js
var require_create5 = __commonJS({
  "node_modules/css-tree/lib/syntax/create.js"(exports2) {
    var List = require_List();
    var SyntaxError2 = require_SyntaxError();
    var TokenStream = require_TokenStream();
    var Lexer = require_Lexer();
    var definitionSyntax = require_definition_syntax();
    var tokenize = require_tokenizer();
    var createParser = require_create();
    var createGenerator = require_create2();
    var createConvertor = require_create3();
    var createWalker = require_create4();
    var clone = require_clone();
    var names = require_names();
    var mix = require_mix();
    function createSyntax(config) {
      var parse = createParser(config);
      var walk = createWalker(config);
      var generate = createGenerator(config);
      var convert = createConvertor(walk);
      var syntax = {
        List,
        SyntaxError: SyntaxError2,
        TokenStream,
        Lexer,
        vendorPrefix: names.vendorPrefix,
        keyword: names.keyword,
        property: names.property,
        isCustomProperty: names.isCustomProperty,
        definitionSyntax,
        lexer: null,
        createLexer: function(config2) {
          return new Lexer(config2, syntax, syntax.lexer.structure);
        },
        tokenize,
        parse,
        walk,
        generate,
        find: walk.find,
        findLast: walk.findLast,
        findAll: walk.findAll,
        clone,
        fromPlainObject: convert.fromPlainObject,
        toPlainObject: convert.toPlainObject,
        createSyntax: function(config2) {
          return createSyntax(mix({}, config2));
        },
        fork: function(extension) {
          var base = mix({}, config);
          return createSyntax(
            typeof extension === "function" ? extension(base, Object.assign) : mix(base, extension)
          );
        }
      };
      syntax.lexer = new Lexer({
        generic: true,
        types: config.types,
        atrules: config.atrules,
        properties: config.properties,
        node: config.node
      }, syntax);
      return syntax;
    }
    exports2.create = function(config) {
      return createSyntax(mix({}, config));
    };
  }
});

// node_modules/mdn-data/css/at-rules.json
var require_at_rules = __commonJS({
  "node_modules/mdn-data/css/at-rules.json"(exports2, module2) {
    module2.exports = {
      "@charset": {
        syntax: '@charset "<charset>";',
        groups: [
          "CSS Charsets"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/@charset"
      },
      "@counter-style": {
        syntax: "@counter-style <counter-style-name> {\n  [ system: <counter-system>; ] ||\n  [ symbols: <counter-symbols>; ] ||\n  [ additive-symbols: <additive-symbols>; ] ||\n  [ negative: <negative-symbol>; ] ||\n  [ prefix: <prefix>; ] ||\n  [ suffix: <suffix>; ] ||\n  [ range: <range>; ] ||\n  [ pad: <padding>; ] ||\n  [ speak-as: <speak-as>; ] ||\n  [ fallback: <counter-style-name>; ]\n}",
        interfaces: [
          "CSSCounterStyleRule"
        ],
        groups: [
          "CSS Counter Styles"
        ],
        descriptors: {
          "additive-symbols": {
            syntax: "[ <integer> && <symbol> ]#",
            media: "all",
            initial: "n/a (required)",
            percentages: "no",
            computed: "asSpecified",
            order: "orderOfAppearance",
            status: "standard"
          },
          fallback: {
            syntax: "<counter-style-name>",
            media: "all",
            initial: "decimal",
            percentages: "no",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "standard"
          },
          negative: {
            syntax: "<symbol> <symbol>?",
            media: "all",
            initial: '"-" hyphen-minus',
            percentages: "no",
            computed: "asSpecified",
            order: "orderOfAppearance",
            status: "standard"
          },
          pad: {
            syntax: "<integer> && <symbol>",
            media: "all",
            initial: '0 ""',
            percentages: "no",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "standard"
          },
          prefix: {
            syntax: "<symbol>",
            media: "all",
            initial: '""',
            percentages: "no",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "standard"
          },
          range: {
            syntax: "[ [ <integer> | infinite ]{2} ]# | auto",
            media: "all",
            initial: "auto",
            percentages: "no",
            computed: "asSpecified",
            order: "orderOfAppearance",
            status: "standard"
          },
          "speak-as": {
            syntax: "auto | bullets | numbers | words | spell-out | <counter-style-name>",
            media: "all",
            initial: "auto",
            percentages: "no",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "standard"
          },
          suffix: {
            syntax: "<symbol>",
            media: "all",
            initial: '". "',
            percentages: "no",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "standard"
          },
          symbols: {
            syntax: "<symbol>+",
            media: "all",
            initial: "n/a (required)",
            percentages: "no",
            computed: "asSpecified",
            order: "orderOfAppearance",
            status: "standard"
          },
          system: {
            syntax: "cyclic | numeric | alphabetic | symbolic | additive | [ fixed <integer>? ] | [ extends <counter-style-name> ]",
            media: "all",
            initial: "symbolic",
            percentages: "no",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "standard"
          }
        },
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/@counter-style"
      },
      "@document": {
        syntax: "@document [ <url> | url-prefix(<string>) | domain(<string>) | media-document(<string>) | regexp(<string>) ]# {\n  <group-rule-body>\n}",
        interfaces: [
          "CSSGroupingRule",
          "CSSConditionRule"
        ],
        groups: [
          "CSS Conditional Rules"
        ],
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/@document"
      },
      "@font-face": {
        syntax: "@font-face {\n  [ font-family: <family-name>; ] ||\n  [ src: <src>; ] ||\n  [ unicode-range: <unicode-range>; ] ||\n  [ font-variant: <font-variant>; ] ||\n  [ font-feature-settings: <font-feature-settings>; ] ||\n  [ font-variation-settings: <font-variation-settings>; ] ||\n  [ font-stretch: <font-stretch>; ] ||\n  [ font-weight: <font-weight>; ] ||\n  [ font-style: <font-style>; ]\n}",
        interfaces: [
          "CSSFontFaceRule"
        ],
        groups: [
          "CSS Fonts"
        ],
        descriptors: {
          "font-display": {
            syntax: "[ auto | block | swap | fallback | optional ]",
            media: "visual",
            percentages: "no",
            initial: "auto",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "experimental"
          },
          "font-family": {
            syntax: "<family-name>",
            media: "all",
            initial: "n/a (required)",
            percentages: "no",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "standard"
          },
          "font-feature-settings": {
            syntax: "normal | <feature-tag-value>#",
            media: "all",
            initial: "normal",
            percentages: "no",
            computed: "asSpecified",
            order: "orderOfAppearance",
            status: "standard"
          },
          "font-variation-settings": {
            syntax: "normal | [ <string> <number> ]#",
            media: "all",
            initial: "normal",
            percentages: "no",
            computed: "asSpecified",
            order: "orderOfAppearance",
            status: "standard"
          },
          "font-stretch": {
            syntax: "<font-stretch-absolute>{1,2}",
            media: "all",
            initial: "normal",
            percentages: "no",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "standard"
          },
          "font-style": {
            syntax: "normal | italic | oblique <angle>{0,2}",
            media: "all",
            initial: "normal",
            percentages: "no",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "standard"
          },
          "font-weight": {
            syntax: "<font-weight-absolute>{1,2}",
            media: "all",
            initial: "normal",
            percentages: "no",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "standard"
          },
          "font-variant": {
            syntax: "normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic(<feature-value-name>) || historical-forms || styleset(<feature-value-name>#) || character-variant(<feature-value-name>#) || swash(<feature-value-name>) || ornaments(<feature-value-name>) || annotation(<feature-value-name>) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]",
            media: "all",
            initial: "normal",
            percentages: "no",
            computed: "asSpecified",
            order: "orderOfAppearance",
            status: "standard"
          },
          src: {
            syntax: "[ <url> [ format( <string># ) ]? | local( <family-name> ) ]#",
            media: "all",
            initial: "n/a (required)",
            percentages: "no",
            computed: "asSpecified",
            order: "orderOfAppearance",
            status: "standard"
          },
          "unicode-range": {
            syntax: "<unicode-range>#",
            media: "all",
            initial: "U+0-10FFFF",
            percentages: "no",
            computed: "asSpecified",
            order: "orderOfAppearance",
            status: "standard"
          }
        },
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/@font-face"
      },
      "@font-feature-values": {
        syntax: "@font-feature-values <family-name># {\n  <feature-value-block-list>\n}",
        interfaces: [
          "CSSFontFeatureValuesRule"
        ],
        groups: [
          "CSS Fonts"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/@font-feature-values"
      },
      "@import": {
        syntax: "@import [ <string> | <url> ] [ <media-query-list> ]?;",
        groups: [
          "Media Queries"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/@import"
      },
      "@keyframes": {
        syntax: "@keyframes <keyframes-name> {\n  <keyframe-block-list>\n}",
        interfaces: [
          "CSSKeyframeRule",
          "CSSKeyframesRule"
        ],
        groups: [
          "CSS Animations"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/@keyframes"
      },
      "@media": {
        syntax: "@media <media-query-list> {\n  <group-rule-body>\n}",
        interfaces: [
          "CSSGroupingRule",
          "CSSConditionRule",
          "CSSMediaRule",
          "CSSCustomMediaRule"
        ],
        groups: [
          "CSS Conditional Rules",
          "Media Queries"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/@media"
      },
      "@namespace": {
        syntax: "@namespace <namespace-prefix>? [ <string> | <url> ];",
        groups: [
          "CSS Namespaces"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/@namespace"
      },
      "@page": {
        syntax: "@page <page-selector-list> {\n  <page-body>\n}",
        interfaces: [
          "CSSPageRule"
        ],
        groups: [
          "CSS Pages"
        ],
        descriptors: {
          bleed: {
            syntax: "auto | <length>",
            media: [
              "visual",
              "paged"
            ],
            initial: "auto",
            percentages: "no",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "standard"
          },
          marks: {
            syntax: "none | [ crop || cross ]",
            media: [
              "visual",
              "paged"
            ],
            initial: "none",
            percentages: "no",
            computed: "asSpecified",
            order: "orderOfAppearance",
            status: "standard"
          },
          size: {
            syntax: "<length>{1,2} | auto | [ <page-size> || [ portrait | landscape ] ]",
            media: [
              "visual",
              "paged"
            ],
            initial: "auto",
            percentages: "no",
            computed: "asSpecifiedRelativeToAbsoluteLengths",
            order: "orderOfAppearance",
            status: "standard"
          }
        },
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/@page"
      },
      "@property": {
        syntax: "@property <custom-property-name> {\n  <declaration-list>\n}",
        interfaces: [
          "CSS",
          "CSSPropertyRule"
        ],
        groups: [
          "CSS Houdini"
        ],
        descriptors: {
          syntax: {
            syntax: "<string>",
            media: "all",
            percentages: "no",
            initial: "n/a (required)",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "experimental"
          },
          inherits: {
            syntax: "true | false",
            media: "all",
            percentages: "no",
            initial: "auto",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "experimental"
          },
          "initial-value": {
            syntax: "<string>",
            media: "all",
            initial: "n/a (required)",
            percentages: "no",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "experimental"
          }
        },
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/@property"
      },
      "@supports": {
        syntax: "@supports <supports-condition> {\n  <group-rule-body>\n}",
        interfaces: [
          "CSSGroupingRule",
          "CSSConditionRule",
          "CSSSupportsRule"
        ],
        groups: [
          "CSS Conditional Rules"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/@supports"
      },
      "@viewport": {
        syntax: "@viewport {\n  <group-rule-body>\n}",
        interfaces: [
          "CSSViewportRule"
        ],
        groups: [
          "CSS Device Adaptation"
        ],
        descriptors: {
          height: {
            syntax: "<viewport-length>{1,2}",
            media: [
              "visual",
              "continuous"
            ],
            initial: [
              "min-height",
              "max-height"
            ],
            percentages: [
              "min-height",
              "max-height"
            ],
            computed: [
              "min-height",
              "max-height"
            ],
            order: "orderOfAppearance",
            status: "standard"
          },
          "max-height": {
            syntax: "<viewport-length>",
            media: [
              "visual",
              "continuous"
            ],
            initial: "auto",
            percentages: "referToHeightOfInitialViewport",
            computed: "lengthAbsolutePercentageAsSpecifiedOtherwiseAuto",
            order: "uniqueOrder",
            status: "standard"
          },
          "max-width": {
            syntax: "<viewport-length>",
            media: [
              "visual",
              "continuous"
            ],
            initial: "auto",
            percentages: "referToWidthOfInitialViewport",
            computed: "lengthAbsolutePercentageAsSpecifiedOtherwiseAuto",
            order: "uniqueOrder",
            status: "standard"
          },
          "max-zoom": {
            syntax: "auto | <number> | <percentage>",
            media: [
              "visual",
              "continuous"
            ],
            initial: "auto",
            percentages: "the zoom factor itself",
            computed: "autoNonNegativeOrPercentage",
            order: "uniqueOrder",
            status: "standard"
          },
          "min-height": {
            syntax: "<viewport-length>",
            media: [
              "visual",
              "continuous"
            ],
            initial: "auto",
            percentages: "referToHeightOfInitialViewport",
            computed: "lengthAbsolutePercentageAsSpecifiedOtherwiseAuto",
            order: "uniqueOrder",
            status: "standard"
          },
          "min-width": {
            syntax: "<viewport-length>",
            media: [
              "visual",
              "continuous"
            ],
            initial: "auto",
            percentages: "referToWidthOfInitialViewport",
            computed: "lengthAbsolutePercentageAsSpecifiedOtherwiseAuto",
            order: "uniqueOrder",
            status: "standard"
          },
          "min-zoom": {
            syntax: "auto | <number> | <percentage>",
            media: [
              "visual",
              "continuous"
            ],
            initial: "auto",
            percentages: "the zoom factor itself",
            computed: "autoNonNegativeOrPercentage",
            order: "uniqueOrder",
            status: "standard"
          },
          orientation: {
            syntax: "auto | portrait | landscape",
            media: [
              "visual",
              "continuous"
            ],
            initial: "auto",
            percentages: "referToSizeOfBoundingBox",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "standard"
          },
          "user-zoom": {
            syntax: "zoom | fixed",
            media: [
              "visual",
              "continuous"
            ],
            initial: "zoom",
            percentages: "referToSizeOfBoundingBox",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "standard"
          },
          "viewport-fit": {
            syntax: "auto | contain | cover",
            media: [
              "visual",
              "continuous"
            ],
            initial: "auto",
            percentages: "no",
            computed: "asSpecified",
            order: "uniqueOrder",
            status: "standard"
          },
          width: {
            syntax: "<viewport-length>{1,2}",
            media: [
              "visual",
              "continuous"
            ],
            initial: [
              "min-width",
              "max-width"
            ],
            percentages: [
              "min-width",
              "max-width"
            ],
            computed: [
              "min-width",
              "max-width"
            ],
            order: "orderOfAppearance",
            status: "standard"
          },
          zoom: {
            syntax: "auto | <number> | <percentage>",
            media: [
              "visual",
              "continuous"
            ],
            initial: "auto",
            percentages: "the zoom factor itself",
            computed: "autoNonNegativeOrPercentage",
            order: "uniqueOrder",
            status: "standard"
          }
        },
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/@viewport"
      }
    };
  }
});

// node_modules/mdn-data/css/properties.json
var require_properties = __commonJS({
  "node_modules/mdn-data/css/properties.json"(exports2, module2) {
    module2.exports = {
      "--*": {
        syntax: "<declaration-value>",
        media: "all",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Variables"
        ],
        initial: "seeProse",
        appliesto: "allElements",
        computed: "asSpecifiedWithVarsSubstituted",
        order: "perGrammar",
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/--*"
      },
      "-ms-accelerator": {
        syntax: "false | true",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "false",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-accelerator"
      },
      "-ms-block-progression": {
        syntax: "tb | rl | bt | lr",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "tb",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-block-progression"
      },
      "-ms-content-zoom-chaining": {
        syntax: "none | chained",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "none",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-content-zoom-chaining"
      },
      "-ms-content-zooming": {
        syntax: "none | zoom",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "zoomForTheTopLevelNoneForTheRest",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-content-zooming"
      },
      "-ms-content-zoom-limit": {
        syntax: "<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: [
          "-ms-content-zoom-limit-max",
          "-ms-content-zoom-limit-min"
        ],
        groups: [
          "Microsoft Extensions"
        ],
        initial: [
          "-ms-content-zoom-limit-max",
          "-ms-content-zoom-limit-min"
        ],
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: [
          "-ms-content-zoom-limit-max",
          "-ms-content-zoom-limit-min"
        ],
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-content-zoom-limit"
      },
      "-ms-content-zoom-limit-max": {
        syntax: "<percentage>",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "maxZoomFactor",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "400%",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-content-zoom-limit-max"
      },
      "-ms-content-zoom-limit-min": {
        syntax: "<percentage>",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "minZoomFactor",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "100%",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-content-zoom-limit-min"
      },
      "-ms-content-zoom-snap": {
        syntax: "<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: [
          "-ms-content-zoom-snap-type",
          "-ms-content-zoom-snap-points"
        ],
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: [
          "-ms-content-zoom-snap-type",
          "-ms-content-zoom-snap-points"
        ],
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-content-zoom-snap"
      },
      "-ms-content-zoom-snap-points": {
        syntax: "snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "snapInterval(0%, 100%)",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-content-zoom-snap-points"
      },
      "-ms-content-zoom-snap-type": {
        syntax: "none | proximity | mandatory",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "none",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-content-zoom-snap-type"
      },
      "-ms-filter": {
        syntax: "<string>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: '""',
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-filter"
      },
      "-ms-flow-from": {
        syntax: "[ none | <custom-ident> ]#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "none",
        appliesto: "nonReplacedElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-flow-from"
      },
      "-ms-flow-into": {
        syntax: "[ none | <custom-ident> ]#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "none",
        appliesto: "iframeElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-flow-into"
      },
      "-ms-grid-columns": {
        syntax: "none | <track-list> | <auto-track-list>",
        media: "visual",
        inherited: false,
        animationType: "simpleListOfLpcDifferenceLpc",
        percentages: "referToDimensionOfContentArea",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "none",
        appliesto: "gridContainers",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-grid-columns"
      },
      "-ms-grid-rows": {
        syntax: "none | <track-list> | <auto-track-list>",
        media: "visual",
        inherited: false,
        animationType: "simpleListOfLpcDifferenceLpc",
        percentages: "referToDimensionOfContentArea",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "none",
        appliesto: "gridContainers",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-grid-rows"
      },
      "-ms-high-contrast-adjust": {
        syntax: "auto | none",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-high-contrast-adjust"
      },
      "-ms-hyphenate-limit-chars": {
        syntax: "auto | <integer>{1,3}",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-hyphenate-limit-chars"
      },
      "-ms-hyphenate-limit-lines": {
        syntax: "no-limit | <integer>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "no-limit",
        appliesto: "blockContainerElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-hyphenate-limit-lines"
      },
      "-ms-hyphenate-limit-zone": {
        syntax: "<percentage> | <length>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "referToLineBoxWidth",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "0",
        appliesto: "blockContainerElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-hyphenate-limit-zone"
      },
      "-ms-ime-align": {
        syntax: "auto | after",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-ime-align"
      },
      "-ms-overflow-style": {
        syntax: "auto | none | scrollbar | -ms-autohiding-scrollbar",
        media: "interactive",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "auto",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-overflow-style"
      },
      "-ms-scrollbar-3dlight-color": {
        syntax: "<color>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "dependsOnUserAgent",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-3dlight-color"
      },
      "-ms-scrollbar-arrow-color": {
        syntax: "<color>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "ButtonText",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-arrow-color"
      },
      "-ms-scrollbar-base-color": {
        syntax: "<color>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "dependsOnUserAgent",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-base-color"
      },
      "-ms-scrollbar-darkshadow-color": {
        syntax: "<color>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "ThreeDDarkShadow",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-darkshadow-color"
      },
      "-ms-scrollbar-face-color": {
        syntax: "<color>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "ThreeDFace",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-face-color"
      },
      "-ms-scrollbar-highlight-color": {
        syntax: "<color>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "ThreeDHighlight",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-highlight-color"
      },
      "-ms-scrollbar-shadow-color": {
        syntax: "<color>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "ThreeDDarkShadow",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-shadow-color"
      },
      "-ms-scrollbar-track-color": {
        syntax: "<color>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "Scrollbar",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scrollbar-track-color"
      },
      "-ms-scroll-chaining": {
        syntax: "chained | none",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "chained",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-chaining"
      },
      "-ms-scroll-limit": {
        syntax: "<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: [
          "-ms-scroll-limit-x-min",
          "-ms-scroll-limit-y-min",
          "-ms-scroll-limit-x-max",
          "-ms-scroll-limit-y-max"
        ],
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: [
          "-ms-scroll-limit-x-min",
          "-ms-scroll-limit-y-min",
          "-ms-scroll-limit-x-max",
          "-ms-scroll-limit-y-max"
        ],
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-limit"
      },
      "-ms-scroll-limit-x-max": {
        syntax: "auto | <length>",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "auto",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-limit-x-max"
      },
      "-ms-scroll-limit-x-min": {
        syntax: "<length>",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "0",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-limit-x-min"
      },
      "-ms-scroll-limit-y-max": {
        syntax: "auto | <length>",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "auto",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-limit-y-max"
      },
      "-ms-scroll-limit-y-min": {
        syntax: "<length>",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "0",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-limit-y-min"
      },
      "-ms-scroll-rails": {
        syntax: "none | railed",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "railed",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-rails"
      },
      "-ms-scroll-snap-points-x": {
        syntax: "snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "snapInterval(0px, 100%)",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-snap-points-x"
      },
      "-ms-scroll-snap-points-y": {
        syntax: "snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "snapInterval(0px, 100%)",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-snap-points-y"
      },
      "-ms-scroll-snap-type": {
        syntax: "none | proximity | mandatory",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "none",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-snap-type"
      },
      "-ms-scroll-snap-x": {
        syntax: "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: [
          "-ms-scroll-snap-type",
          "-ms-scroll-snap-points-x"
        ],
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: [
          "-ms-scroll-snap-type",
          "-ms-scroll-snap-points-x"
        ],
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-snap-x"
      },
      "-ms-scroll-snap-y": {
        syntax: "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: [
          "-ms-scroll-snap-type",
          "-ms-scroll-snap-points-y"
        ],
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: [
          "-ms-scroll-snap-type",
          "-ms-scroll-snap-points-y"
        ],
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-snap-y"
      },
      "-ms-scroll-translation": {
        syntax: "none | vertical-to-horizontal",
        media: "interactive",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-scroll-translation"
      },
      "-ms-text-autospace": {
        syntax: "none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-text-autospace"
      },
      "-ms-touch-select": {
        syntax: "grippers | none",
        media: "interactive",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "grippers",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-touch-select"
      },
      "-ms-user-select": {
        syntax: "none | element | text",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "text",
        appliesto: "nonReplacedElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-user-select"
      },
      "-ms-wrap-flow": {
        syntax: "auto | both | start | end | maximum | clear",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "auto",
        appliesto: "blockLevelElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-wrap-flow"
      },
      "-ms-wrap-margin": {
        syntax: "<length>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "0",
        appliesto: "exclusionElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-wrap-margin"
      },
      "-ms-wrap-through": {
        syntax: "wrap | none",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "wrap",
        appliesto: "blockLevelElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-ms-wrap-through"
      },
      "-moz-appearance": {
        syntax: "none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions",
          "WebKit Extensions"
        ],
        initial: "noneButOverriddenInUserAgentCSS",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/appearance"
      },
      "-moz-binding": {
        syntax: "<url> | none",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "none",
        appliesto: "allElementsExceptGeneratedContentOrPseudoElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-binding"
      },
      "-moz-border-bottom-colors": {
        syntax: "<color>+ | none",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-border-bottom-colors"
      },
      "-moz-border-left-colors": {
        syntax: "<color>+ | none",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-border-left-colors"
      },
      "-moz-border-right-colors": {
        syntax: "<color>+ | none",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-border-right-colors"
      },
      "-moz-border-top-colors": {
        syntax: "<color>+ | none",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-border-top-colors"
      },
      "-moz-context-properties": {
        syntax: "none | [ fill | fill-opacity | stroke | stroke-opacity ]#",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "none",
        appliesto: "allElementsThatCanReferenceImages",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-context-properties"
      },
      "-moz-float-edge": {
        syntax: "border-box | content-box | margin-box | padding-box",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "content-box",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-float-edge"
      },
      "-moz-force-broken-image-icon": {
        syntax: "<integer [0,1]>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "0",
        appliesto: "images",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-force-broken-image-icon"
      },
      "-moz-image-region": {
        syntax: "<shape> | auto",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "auto",
        appliesto: "xulImageElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-image-region"
      },
      "-moz-orient": {
        syntax: "inline | block | horizontal | vertical",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "inline",
        appliesto: "anyElementEffectOnProgressAndMeter",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-orient"
      },
      "-moz-outline-radius": {
        syntax: "<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?",
        media: "visual",
        inherited: false,
        animationType: [
          "-moz-outline-radius-topleft",
          "-moz-outline-radius-topright",
          "-moz-outline-radius-bottomright",
          "-moz-outline-radius-bottomleft"
        ],
        percentages: [
          "-moz-outline-radius-topleft",
          "-moz-outline-radius-topright",
          "-moz-outline-radius-bottomright",
          "-moz-outline-radius-bottomleft"
        ],
        groups: [
          "Mozilla Extensions"
        ],
        initial: [
          "-moz-outline-radius-topleft",
          "-moz-outline-radius-topright",
          "-moz-outline-radius-bottomright",
          "-moz-outline-radius-bottomleft"
        ],
        appliesto: "allElements",
        computed: [
          "-moz-outline-radius-topleft",
          "-moz-outline-radius-topright",
          "-moz-outline-radius-bottomright",
          "-moz-outline-radius-bottomleft"
        ],
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-outline-radius"
      },
      "-moz-outline-radius-bottomleft": {
        syntax: "<outline-radius>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToDimensionOfBorderBox",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-outline-radius-bottomleft"
      },
      "-moz-outline-radius-bottomright": {
        syntax: "<outline-radius>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToDimensionOfBorderBox",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-outline-radius-bottomright"
      },
      "-moz-outline-radius-topleft": {
        syntax: "<outline-radius>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToDimensionOfBorderBox",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-outline-radius-topleft"
      },
      "-moz-outline-radius-topright": {
        syntax: "<outline-radius>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToDimensionOfBorderBox",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-outline-radius-topright"
      },
      "-moz-stack-sizing": {
        syntax: "ignore | stretch-to-fit",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "stretch-to-fit",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-stack-sizing"
      },
      "-moz-text-blink": {
        syntax: "none | blink",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-text-blink"
      },
      "-moz-user-focus": {
        syntax: "ignore | normal | select-after | select-before | select-menu | select-same | select-all | none",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-user-focus"
      },
      "-moz-user-input": {
        syntax: "auto | none | enabled | disabled",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-user-input"
      },
      "-moz-user-modify": {
        syntax: "read-only | read-write | write-only",
        media: "interactive",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "read-only",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-user-modify"
      },
      "-moz-window-dragging": {
        syntax: "drag | no-drag",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "drag",
        appliesto: "allElementsCreatingNativeWindows",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-window-dragging"
      },
      "-moz-window-shadow": {
        syntax: "default | menu | tooltip | sheet | none",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "default",
        appliesto: "allElementsCreatingNativeWindows",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-moz-window-shadow"
      },
      "-webkit-appearance": {
        syntax: "none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "noneButOverriddenInUserAgentCSS",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/appearance"
      },
      "-webkit-border-before": {
        syntax: "<'border-width'> || <'border-style'> || <'color'>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: [
          "-webkit-border-before-width"
        ],
        groups: [
          "WebKit Extensions"
        ],
        initial: [
          "border-width",
          "border-style",
          "color"
        ],
        appliesto: "allElements",
        computed: [
          "border-width",
          "border-style",
          "color"
        ],
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-border-before"
      },
      "-webkit-border-before-color": {
        syntax: "<'color'>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "currentcolor",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        status: "nonstandard"
      },
      "-webkit-border-before-style": {
        syntax: "<'border-style'>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard"
      },
      "-webkit-border-before-width": {
        syntax: "<'border-width'>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "WebKit Extensions"
        ],
        initial: "medium",
        appliesto: "allElements",
        computed: "absoluteLengthZeroIfBorderStyleNoneOrHidden",
        order: "uniqueOrder",
        status: "nonstandard"
      },
      "-webkit-box-reflect": {
        syntax: "[ above | below | right | left ]? <length>? <image>?",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-box-reflect"
      },
      "-webkit-line-clamp": {
        syntax: "none | <integer>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "no",
        groups: [
          "WebKit Extensions",
          "CSS Overflow"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-line-clamp"
      },
      "-webkit-mask": {
        syntax: "[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: [
          "-webkit-mask-image",
          "-webkit-mask-repeat",
          "-webkit-mask-attachment",
          "-webkit-mask-position",
          "-webkit-mask-origin",
          "-webkit-mask-clip"
        ],
        appliesto: "allElements",
        computed: [
          "-webkit-mask-image",
          "-webkit-mask-repeat",
          "-webkit-mask-attachment",
          "-webkit-mask-position",
          "-webkit-mask-origin",
          "-webkit-mask-clip"
        ],
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask"
      },
      "-webkit-mask-attachment": {
        syntax: "<attachment>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "scroll",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-attachment"
      },
      "-webkit-mask-clip": {
        syntax: "[ <box> | border | padding | content | text ]#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "border",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-clip"
      },
      "-webkit-mask-composite": {
        syntax: "<composite-style>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "source-over",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-composite"
      },
      "-webkit-mask-image": {
        syntax: "<mask-reference>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "absoluteURIOrNone",
        order: "orderOfAppearance",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-image"
      },
      "-webkit-mask-origin": {
        syntax: "[ <box> | border | padding | content ]#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "padding",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-origin"
      },
      "-webkit-mask-position": {
        syntax: "<position>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "referToSizeOfElement",
        groups: [
          "WebKit Extensions"
        ],
        initial: "0% 0%",
        appliesto: "allElements",
        computed: "absoluteLengthOrPercentage",
        order: "orderOfAppearance",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-position"
      },
      "-webkit-mask-position-x": {
        syntax: "[ <length-percentage> | left | center | right ]#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "referToSizeOfElement",
        groups: [
          "WebKit Extensions"
        ],
        initial: "0%",
        appliesto: "allElements",
        computed: "absoluteLengthOrPercentage",
        order: "orderOfAppearance",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-position-x"
      },
      "-webkit-mask-position-y": {
        syntax: "[ <length-percentage> | top | center | bottom ]#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "referToSizeOfElement",
        groups: [
          "WebKit Extensions"
        ],
        initial: "0%",
        appliesto: "allElements",
        computed: "absoluteLengthOrPercentage",
        order: "orderOfAppearance",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-position-y"
      },
      "-webkit-mask-repeat": {
        syntax: "<repeat-style>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "repeat",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-repeat"
      },
      "-webkit-mask-repeat-x": {
        syntax: "repeat | no-repeat | space | round",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "repeat",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-repeat-x"
      },
      "-webkit-mask-repeat-y": {
        syntax: "repeat | no-repeat | space | round",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "repeat",
        appliesto: "allElements",
        computed: "absoluteLengthOrPercentage",
        order: "orderOfAppearance",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-repeat-y"
      },
      "-webkit-mask-size": {
        syntax: "<bg-size>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "relativeToBackgroundPositioningArea",
        groups: [
          "WebKit Extensions"
        ],
        initial: "auto auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-size"
      },
      "-webkit-overflow-scrolling": {
        syntax: "auto | touch",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "auto",
        appliesto: "scrollingBoxes",
        computed: "asSpecified",
        order: "orderOfAppearance",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-overflow-scrolling"
      },
      "-webkit-tap-highlight-color": {
        syntax: "<color>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "black",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-tap-highlight-color"
      },
      "-webkit-text-fill-color": {
        syntax: "<color>",
        media: "visual",
        inherited: true,
        animationType: "color",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "currentcolor",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-fill-color"
      },
      "-webkit-text-stroke": {
        syntax: "<length> || <color>",
        media: "visual",
        inherited: true,
        animationType: [
          "-webkit-text-stroke-width",
          "-webkit-text-stroke-color"
        ],
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: [
          "-webkit-text-stroke-width",
          "-webkit-text-stroke-color"
        ],
        appliesto: "allElements",
        computed: [
          "-webkit-text-stroke-width",
          "-webkit-text-stroke-color"
        ],
        order: "canonicalOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke"
      },
      "-webkit-text-stroke-color": {
        syntax: "<color>",
        media: "visual",
        inherited: true,
        animationType: "color",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "currentcolor",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-color"
      },
      "-webkit-text-stroke-width": {
        syntax: "<length>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "absoluteLength",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-width"
      },
      "-webkit-touch-callout": {
        syntax: "default | none",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "default",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/-webkit-touch-callout"
      },
      "-webkit-user-modify": {
        syntax: "read-only | read-write | read-write-plaintext-only",
        media: "interactive",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "WebKit Extensions"
        ],
        initial: "read-only",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard"
      },
      "align-content": {
        syntax: "normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Box Alignment"
        ],
        initial: "normal",
        appliesto: "multilineFlexContainers",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/align-content"
      },
      "align-items": {
        syntax: "normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Box Alignment"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/align-items"
      },
      "align-self": {
        syntax: "auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Box Alignment"
        ],
        initial: "auto",
        appliesto: "flexItemsGridItemsAndAbsolutelyPositionedBoxes",
        computed: "autoOnAbsolutelyPositionedElementsValueOfAlignItemsOnParent",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/align-self"
      },
      "align-tracks": {
        syntax: "[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "normal",
        appliesto: "gridContainersWithMasonryLayoutInTheirBlockAxis",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/align-tracks"
      },
      all: {
        syntax: "initial | inherit | unset | revert",
        media: "noPracticalMedia",
        inherited: false,
        animationType: "eachOfShorthandPropertiesExceptUnicodeBiDiAndDirection",
        percentages: "no",
        groups: [
          "CSS Miscellaneous"
        ],
        initial: "noPracticalInitialValue",
        appliesto: "allElements",
        computed: "asSpecifiedAppliesToEachProperty",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/all"
      },
      animation: {
        syntax: "<single-animation>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Animations"
        ],
        initial: [
          "animation-name",
          "animation-duration",
          "animation-timing-function",
          "animation-delay",
          "animation-iteration-count",
          "animation-direction",
          "animation-fill-mode",
          "animation-play-state"
        ],
        appliesto: "allElementsAndPseudos",
        computed: [
          "animation-name",
          "animation-duration",
          "animation-timing-function",
          "animation-delay",
          "animation-direction",
          "animation-iteration-count",
          "animation-fill-mode",
          "animation-play-state"
        ],
        order: "orderOfAppearance",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/animation"
      },
      "animation-delay": {
        syntax: "<time>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Animations"
        ],
        initial: "0s",
        appliesto: "allElementsAndPseudos",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/animation-delay"
      },
      "animation-direction": {
        syntax: "<single-animation-direction>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Animations"
        ],
        initial: "normal",
        appliesto: "allElementsAndPseudos",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/animation-direction"
      },
      "animation-duration": {
        syntax: "<time>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Animations"
        ],
        initial: "0s",
        appliesto: "allElementsAndPseudos",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/animation-duration"
      },
      "animation-fill-mode": {
        syntax: "<single-animation-fill-mode>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Animations"
        ],
        initial: "none",
        appliesto: "allElementsAndPseudos",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode"
      },
      "animation-iteration-count": {
        syntax: "<single-animation-iteration-count>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Animations"
        ],
        initial: "1",
        appliesto: "allElementsAndPseudos",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count"
      },
      "animation-name": {
        syntax: "[ none | <keyframes-name> ]#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Animations"
        ],
        initial: "none",
        appliesto: "allElementsAndPseudos",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/animation-name"
      },
      "animation-play-state": {
        syntax: "<single-animation-play-state>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Animations"
        ],
        initial: "running",
        appliesto: "allElementsAndPseudos",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/animation-play-state"
      },
      "animation-timing-function": {
        syntax: "<timing-function>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Animations"
        ],
        initial: "ease",
        appliesto: "allElementsAndPseudos",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/animation-timing-function"
      },
      appearance: {
        syntax: "none | auto | textfield | menulist-button | <compat-auto>",
        media: "all",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Basic User Interface"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/appearance"
      },
      "aspect-ratio": {
        syntax: "auto | <ratio>",
        media: "all",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Basic User Interface"
        ],
        initial: "auto",
        appliesto: "allElementsExceptInlineBoxesAndInternalRubyOrTableBoxes",
        computed: "asSpecified",
        order: "perGrammar",
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/aspect-ratio"
      },
      azimuth: {
        syntax: "<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards",
        media: "aural",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Speech"
        ],
        initial: "center",
        appliesto: "allElements",
        computed: "normalizedAngle",
        order: "orderOfAppearance",
        status: "obsolete",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/azimuth"
      },
      "backdrop-filter": {
        syntax: "none | <filter-function-list>",
        media: "visual",
        inherited: false,
        animationType: "filterList",
        percentages: "no",
        groups: [
          "Filter Effects"
        ],
        initial: "none",
        appliesto: "allElementsSVGContainerElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/backdrop-filter"
      },
      "backface-visibility": {
        syntax: "visible | hidden",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Transforms"
        ],
        initial: "visible",
        appliesto: "transformableElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/backface-visibility"
      },
      background: {
        syntax: "[ <bg-layer> , ]* <final-bg-layer>",
        media: "visual",
        inherited: false,
        animationType: [
          "background-color",
          "background-image",
          "background-clip",
          "background-position",
          "background-size",
          "background-repeat",
          "background-attachment"
        ],
        percentages: [
          "background-position",
          "background-size"
        ],
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: [
          "background-image",
          "background-position",
          "background-size",
          "background-repeat",
          "background-origin",
          "background-clip",
          "background-attachment",
          "background-color"
        ],
        appliesto: "allElements",
        computed: [
          "background-image",
          "background-position",
          "background-size",
          "background-repeat",
          "background-origin",
          "background-clip",
          "background-attachment",
          "background-color"
        ],
        order: "orderOfAppearance",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/background"
      },
      "background-attachment": {
        syntax: "<attachment>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "scroll",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/background-attachment"
      },
      "background-blend-mode": {
        syntax: "<blend-mode>#",
        media: "none",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Compositing and Blending"
        ],
        initial: "normal",
        appliesto: "allElementsSVGContainerGraphicsAndGraphicsReferencingElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/background-blend-mode"
      },
      "background-clip": {
        syntax: "<box>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "border-box",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/background-clip"
      },
      "background-color": {
        syntax: "<color>",
        media: "visual",
        inherited: false,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "transparent",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/background-color"
      },
      "background-image": {
        syntax: "<bg-image>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecifiedURLsAbsolute",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/background-image"
      },
      "background-origin": {
        syntax: "<box>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "padding-box",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/background-origin"
      },
      "background-position": {
        syntax: "<bg-position>#",
        media: "visual",
        inherited: false,
        animationType: "repeatableListOfSimpleListOfLpc",
        percentages: "referToSizeOfBackgroundPositioningAreaMinusBackgroundImageSize",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "0% 0%",
        appliesto: "allElements",
        computed: "listEachItemTwoKeywordsOriginOffsets",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/background-position"
      },
      "background-position-x": {
        syntax: "[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "referToWidthOfBackgroundPositioningAreaMinusBackgroundImageHeight",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "left",
        appliesto: "allElements",
        computed: "listEachItemConsistingOfAbsoluteLengthPercentageAndOrigin",
        order: "uniqueOrder",
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/background-position-x"
      },
      "background-position-y": {
        syntax: "[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "referToHeightOfBackgroundPositioningAreaMinusBackgroundImageHeight",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "top",
        appliesto: "allElements",
        computed: "listEachItemConsistingOfAbsoluteLengthPercentageAndOrigin",
        order: "uniqueOrder",
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/background-position-y"
      },
      "background-repeat": {
        syntax: "<repeat-style>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "repeat",
        appliesto: "allElements",
        computed: "listEachItemHasTwoKeywordsOnePerDimension",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/background-repeat"
      },
      "background-size": {
        syntax: "<bg-size>#",
        media: "visual",
        inherited: false,
        animationType: "repeatableListOfSimpleListOfLpc",
        percentages: "relativeToBackgroundPositioningArea",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "auto auto",
        appliesto: "allElements",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/background-size"
      },
      "block-overflow": {
        syntax: "clip | ellipsis | <string>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Overflow"
        ],
        initial: "clip",
        appliesto: "blockContainers",
        computed: "asSpecified",
        order: "perGrammar",
        status: "experimental"
      },
      "block-size": {
        syntax: "<'width'>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "blockSizeOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "auto",
        appliesto: "sameAsWidthAndHeight",
        computed: "sameAsWidthAndHeight",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/block-size"
      },
      border: {
        syntax: "<line-width> || <line-style> || <color>",
        media: "visual",
        inherited: false,
        animationType: [
          "border-color",
          "border-style",
          "border-width"
        ],
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: [
          "border-width",
          "border-style",
          "border-color"
        ],
        appliesto: "allElements",
        computed: [
          "border-width",
          "border-style",
          "border-color"
        ],
        order: "orderOfAppearance",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border"
      },
      "border-block": {
        syntax: "<'border-top-width'> || <'border-top-style'> || <'color'>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: [
          "border-top-width",
          "border-top-style",
          "border-top-color"
        ],
        appliesto: "allElements",
        computed: [
          "border-top-width",
          "border-top-style",
          "border-top-color"
        ],
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-block"
      },
      "border-block-color": {
        syntax: "<'border-top-color'>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "currentcolor",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-block-color"
      },
      "border-block-style": {
        syntax: "<'border-top-style'>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-block-style"
      },
      "border-block-width": {
        syntax: "<'border-top-width'>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "medium",
        appliesto: "allElements",
        computed: "absoluteLengthZeroIfBorderStyleNoneOrHidden",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-block-width"
      },
      "border-block-end": {
        syntax: "<'border-top-width'> || <'border-top-style'> || <'color'>",
        media: "visual",
        inherited: false,
        animationType: [
          "border-block-end-color",
          "border-block-end-style",
          "border-block-end-width"
        ],
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: [
          "border-top-width",
          "border-top-style",
          "border-top-color"
        ],
        appliesto: "allElements",
        computed: [
          "border-top-width",
          "border-top-style",
          "border-top-color"
        ],
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-block-end"
      },
      "border-block-end-color": {
        syntax: "<'border-top-color'>",
        media: "visual",
        inherited: false,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "currentcolor",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-block-end-color"
      },
      "border-block-end-style": {
        syntax: "<'border-top-style'>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-block-end-style"
      },
      "border-block-end-width": {
        syntax: "<'border-top-width'>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "medium",
        appliesto: "allElements",
        computed: "absoluteLengthZeroIfBorderStyleNoneOrHidden",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-block-end-width"
      },
      "border-block-start": {
        syntax: "<'border-top-width'> || <'border-top-style'> || <'color'>",
        media: "visual",
        inherited: false,
        animationType: [
          "border-block-start-color",
          "border-block-start-style",
          "border-block-start-width"
        ],
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: [
          "border-width",
          "border-style",
          "color"
        ],
        appliesto: "allElements",
        computed: [
          "border-width",
          "border-style",
          "border-block-start-color"
        ],
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-block-start"
      },
      "border-block-start-color": {
        syntax: "<'border-top-color'>",
        media: "visual",
        inherited: false,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "currentcolor",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-block-start-color"
      },
      "border-block-start-style": {
        syntax: "<'border-top-style'>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-block-start-style"
      },
      "border-block-start-width": {
        syntax: "<'border-top-width'>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "medium",
        appliesto: "allElements",
        computed: "absoluteLengthZeroIfBorderStyleNoneOrHidden",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-block-start-width"
      },
      "border-bottom": {
        syntax: "<line-width> || <line-style> || <color>",
        media: "visual",
        inherited: false,
        animationType: [
          "border-bottom-color",
          "border-bottom-style",
          "border-bottom-width"
        ],
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: [
          "border-bottom-width",
          "border-bottom-style",
          "border-bottom-color"
        ],
        appliesto: "allElements",
        computed: [
          "border-bottom-width",
          "border-bottom-style",
          "border-bottom-color"
        ],
        order: "orderOfAppearance",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-bottom"
      },
      "border-bottom-color": {
        syntax: "<'border-top-color'>",
        media: "visual",
        inherited: false,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "currentcolor",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-bottom-color"
      },
      "border-bottom-left-radius": {
        syntax: "<length-percentage>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToDimensionOfBorderBox",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "0",
        appliesto: "allElementsUAsNotRequiredWhenCollapse",
        computed: "twoAbsoluteLengthOrPercentages",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius"
      },
      "border-bottom-right-radius": {
        syntax: "<length-percentage>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToDimensionOfBorderBox",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "0",
        appliesto: "allElementsUAsNotRequiredWhenCollapse",
        computed: "twoAbsoluteLengthOrPercentages",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius"
      },
      "border-bottom-style": {
        syntax: "<line-style>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-bottom-style"
      },
      "border-bottom-width": {
        syntax: "<line-width>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "medium",
        appliesto: "allElements",
        computed: "absoluteLengthOr0IfBorderBottomStyleNoneOrHidden",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-bottom-width"
      },
      "border-collapse": {
        syntax: "collapse | separate",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Table"
        ],
        initial: "separate",
        appliesto: "tableElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-collapse"
      },
      "border-color": {
        syntax: "<color>{1,4}",
        media: "visual",
        inherited: false,
        animationType: [
          "border-bottom-color",
          "border-left-color",
          "border-right-color",
          "border-top-color"
        ],
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: [
          "border-top-color",
          "border-right-color",
          "border-bottom-color",
          "border-left-color"
        ],
        appliesto: "allElements",
        computed: [
          "border-bottom-color",
          "border-left-color",
          "border-right-color",
          "border-top-color"
        ],
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-color"
      },
      "border-end-end-radius": {
        syntax: "<length-percentage>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToDimensionOfBorderBox",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "allElementsUAsNotRequiredWhenCollapse",
        computed: "twoAbsoluteLengthOrPercentages",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius"
      },
      "border-end-start-radius": {
        syntax: "<length-percentage>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToDimensionOfBorderBox",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "allElementsUAsNotRequiredWhenCollapse",
        computed: "twoAbsoluteLengthOrPercentages",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius"
      },
      "border-image": {
        syntax: "<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: [
          "border-image-slice",
          "border-image-width"
        ],
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: [
          "border-image-source",
          "border-image-slice",
          "border-image-width",
          "border-image-outset",
          "border-image-repeat"
        ],
        appliesto: "allElementsExceptTableElementsWhenCollapse",
        computed: [
          "border-image-outset",
          "border-image-repeat",
          "border-image-slice",
          "border-image-source",
          "border-image-width"
        ],
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-image"
      },
      "border-image-outset": {
        syntax: "[ <length> | <number> ]{1,4}",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "0",
        appliesto: "allElementsExceptTableElementsWhenCollapse",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-image-outset"
      },
      "border-image-repeat": {
        syntax: "[ stretch | repeat | round | space ]{1,2}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "stretch",
        appliesto: "allElementsExceptTableElementsWhenCollapse",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-image-repeat"
      },
      "border-image-slice": {
        syntax: "<number-percentage>{1,4} && fill?",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "referToSizeOfBorderImage",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "100%",
        appliesto: "allElementsExceptTableElementsWhenCollapse",
        computed: "oneToFourPercentagesOrAbsoluteLengthsPlusFill",
        order: "percentagesOrLengthsFollowedByFill",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-image-slice"
      },
      "border-image-source": {
        syntax: "none | <image>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "none",
        appliesto: "allElementsExceptTableElementsWhenCollapse",
        computed: "noneOrImageWithAbsoluteURI",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-image-source"
      },
      "border-image-width": {
        syntax: "[ <length-percentage> | <number> | auto ]{1,4}",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "referToWidthOrHeightOfBorderImageArea",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "1",
        appliesto: "allElementsExceptTableElementsWhenCollapse",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-image-width"
      },
      "border-inline": {
        syntax: "<'border-top-width'> || <'border-top-style'> || <'color'>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: [
          "border-top-width",
          "border-top-style",
          "border-top-color"
        ],
        appliesto: "allElements",
        computed: [
          "border-top-width",
          "border-top-style",
          "border-top-color"
        ],
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-inline"
      },
      "border-inline-end": {
        syntax: "<'border-top-width'> || <'border-top-style'> || <'color'>",
        media: "visual",
        inherited: false,
        animationType: [
          "border-inline-end-color",
          "border-inline-end-style",
          "border-inline-end-width"
        ],
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: [
          "border-width",
          "border-style",
          "color"
        ],
        appliesto: "allElements",
        computed: [
          "border-width",
          "border-style",
          "border-inline-end-color"
        ],
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-end"
      },
      "border-inline-color": {
        syntax: "<'border-top-color'>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "currentcolor",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-color"
      },
      "border-inline-style": {
        syntax: "<'border-top-style'>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-style"
      },
      "border-inline-width": {
        syntax: "<'border-top-width'>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "medium",
        appliesto: "allElements",
        computed: "absoluteLengthZeroIfBorderStyleNoneOrHidden",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-width"
      },
      "border-inline-end-color": {
        syntax: "<'border-top-color'>",
        media: "visual",
        inherited: false,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "currentcolor",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color"
      },
      "border-inline-end-style": {
        syntax: "<'border-top-style'>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style"
      },
      "border-inline-end-width": {
        syntax: "<'border-top-width'>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "medium",
        appliesto: "allElements",
        computed: "absoluteLengthZeroIfBorderStyleNoneOrHidden",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width"
      },
      "border-inline-start": {
        syntax: "<'border-top-width'> || <'border-top-style'> || <'color'>",
        media: "visual",
        inherited: false,
        animationType: [
          "border-inline-start-color",
          "border-inline-start-style",
          "border-inline-start-width"
        ],
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: [
          "border-width",
          "border-style",
          "color"
        ],
        appliesto: "allElements",
        computed: [
          "border-width",
          "border-style",
          "border-inline-start-color"
        ],
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-start"
      },
      "border-inline-start-color": {
        syntax: "<'border-top-color'>",
        media: "visual",
        inherited: false,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "currentcolor",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color"
      },
      "border-inline-start-style": {
        syntax: "<'border-top-style'>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style"
      },
      "border-inline-start-width": {
        syntax: "<'border-top-width'>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "medium",
        appliesto: "allElements",
        computed: "absoluteLengthZeroIfBorderStyleNoneOrHidden",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width"
      },
      "border-left": {
        syntax: "<line-width> || <line-style> || <color>",
        media: "visual",
        inherited: false,
        animationType: [
          "border-left-color",
          "border-left-style",
          "border-left-width"
        ],
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: [
          "border-left-width",
          "border-left-style",
          "border-left-color"
        ],
        appliesto: "allElements",
        computed: [
          "border-left-width",
          "border-left-style",
          "border-left-color"
        ],
        order: "orderOfAppearance",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-left"
      },
      "border-left-color": {
        syntax: "<color>",
        media: "visual",
        inherited: false,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "currentcolor",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-left-color"
      },
      "border-left-style": {
        syntax: "<line-style>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-left-style"
      },
      "border-left-width": {
        syntax: "<line-width>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "medium",
        appliesto: "allElements",
        computed: "absoluteLengthOr0IfBorderLeftStyleNoneOrHidden",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-left-width"
      },
      "border-radius": {
        syntax: "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
        media: "visual",
        inherited: false,
        animationType: [
          "border-top-left-radius",
          "border-top-right-radius",
          "border-bottom-right-radius",
          "border-bottom-left-radius"
        ],
        percentages: "referToDimensionOfBorderBox",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: [
          "border-top-left-radius",
          "border-top-right-radius",
          "border-bottom-right-radius",
          "border-bottom-left-radius"
        ],
        appliesto: "allElementsUAsNotRequiredWhenCollapse",
        computed: [
          "border-bottom-left-radius",
          "border-bottom-right-radius",
          "border-top-left-radius",
          "border-top-right-radius"
        ],
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-radius"
      },
      "border-right": {
        syntax: "<line-width> || <line-style> || <color>",
        media: "visual",
        inherited: false,
        animationType: [
          "border-right-color",
          "border-right-style",
          "border-right-width"
        ],
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: [
          "border-right-width",
          "border-right-style",
          "border-right-color"
        ],
        appliesto: "allElements",
        computed: [
          "border-right-width",
          "border-right-style",
          "border-right-color"
        ],
        order: "orderOfAppearance",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-right"
      },
      "border-right-color": {
        syntax: "<color>",
        media: "visual",
        inherited: false,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "currentcolor",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-right-color"
      },
      "border-right-style": {
        syntax: "<line-style>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-right-style"
      },
      "border-right-width": {
        syntax: "<line-width>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "medium",
        appliesto: "allElements",
        computed: "absoluteLengthOr0IfBorderRightStyleNoneOrHidden",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-right-width"
      },
      "border-spacing": {
        syntax: "<length> <length>?",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Table"
        ],
        initial: "0",
        appliesto: "tableElements",
        computed: "twoAbsoluteLengths",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-spacing"
      },
      "border-start-end-radius": {
        syntax: "<length-percentage>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToDimensionOfBorderBox",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "allElementsUAsNotRequiredWhenCollapse",
        computed: "twoAbsoluteLengthOrPercentages",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius"
      },
      "border-start-start-radius": {
        syntax: "<length-percentage>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToDimensionOfBorderBox",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "allElementsUAsNotRequiredWhenCollapse",
        computed: "twoAbsoluteLengthOrPercentages",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius"
      },
      "border-style": {
        syntax: "<line-style>{1,4}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: [
          "border-top-style",
          "border-right-style",
          "border-bottom-style",
          "border-left-style"
        ],
        appliesto: "allElements",
        computed: [
          "border-bottom-style",
          "border-left-style",
          "border-right-style",
          "border-top-style"
        ],
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-style"
      },
      "border-top": {
        syntax: "<line-width> || <line-style> || <color>",
        media: "visual",
        inherited: false,
        animationType: [
          "border-top-color",
          "border-top-style",
          "border-top-width"
        ],
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: [
          "border-top-width",
          "border-top-style",
          "border-top-color"
        ],
        appliesto: "allElements",
        computed: [
          "border-top-width",
          "border-top-style",
          "border-top-color"
        ],
        order: "orderOfAppearance",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-top"
      },
      "border-top-color": {
        syntax: "<color>",
        media: "visual",
        inherited: false,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "currentcolor",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-top-color"
      },
      "border-top-left-radius": {
        syntax: "<length-percentage>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToDimensionOfBorderBox",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "0",
        appliesto: "allElementsUAsNotRequiredWhenCollapse",
        computed: "twoAbsoluteLengthOrPercentages",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius"
      },
      "border-top-right-radius": {
        syntax: "<length-percentage>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToDimensionOfBorderBox",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "0",
        appliesto: "allElementsUAsNotRequiredWhenCollapse",
        computed: "twoAbsoluteLengthOrPercentages",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius"
      },
      "border-top-style": {
        syntax: "<line-style>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-top-style"
      },
      "border-top-width": {
        syntax: "<line-width>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "medium",
        appliesto: "allElements",
        computed: "absoluteLengthOr0IfBorderTopStyleNoneOrHidden",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-top-width"
      },
      "border-width": {
        syntax: "<line-width>{1,4}",
        media: "visual",
        inherited: false,
        animationType: [
          "border-bottom-width",
          "border-left-width",
          "border-right-width",
          "border-top-width"
        ],
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: [
          "border-top-width",
          "border-right-width",
          "border-bottom-width",
          "border-left-width"
        ],
        appliesto: "allElements",
        computed: [
          "border-bottom-width",
          "border-left-width",
          "border-right-width",
          "border-top-width"
        ],
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/border-width"
      },
      bottom: {
        syntax: "<length> | <percentage> | auto",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToContainingBlockHeight",
        groups: [
          "CSS Positioning"
        ],
        initial: "auto",
        appliesto: "positionedElements",
        computed: "lengthAbsolutePercentageAsSpecifiedOtherwiseAuto",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/bottom"
      },
      "box-align": {
        syntax: "start | center | end | baseline | stretch",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions",
          "WebKit Extensions"
        ],
        initial: "stretch",
        appliesto: "elementsWithDisplayBoxOrInlineBox",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/box-align"
      },
      "box-decoration-break": {
        syntax: "slice | clone",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fragmentation"
        ],
        initial: "slice",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/box-decoration-break"
      },
      "box-direction": {
        syntax: "normal | reverse | inherit",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions",
          "WebKit Extensions"
        ],
        initial: "normal",
        appliesto: "elementsWithDisplayBoxOrInlineBox",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/box-direction"
      },
      "box-flex": {
        syntax: "<number>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions",
          "WebKit Extensions"
        ],
        initial: "0",
        appliesto: "directChildrenOfElementsWithDisplayMozBoxMozInlineBox",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/box-flex"
      },
      "box-flex-group": {
        syntax: "<integer>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions",
          "WebKit Extensions"
        ],
        initial: "1",
        appliesto: "inFlowChildrenOfBoxElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/box-flex-group"
      },
      "box-lines": {
        syntax: "single | multiple",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions",
          "WebKit Extensions"
        ],
        initial: "single",
        appliesto: "boxElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/box-lines"
      },
      "box-ordinal-group": {
        syntax: "<integer>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions",
          "WebKit Extensions"
        ],
        initial: "1",
        appliesto: "childrenOfBoxElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/box-ordinal-group"
      },
      "box-orient": {
        syntax: "horizontal | vertical | inline-axis | block-axis | inherit",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions",
          "WebKit Extensions"
        ],
        initial: "inlineAxisHorizontalInXUL",
        appliesto: "elementsWithDisplayBoxOrInlineBox",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/box-orient"
      },
      "box-pack": {
        syntax: "start | center | end | justify",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions",
          "WebKit Extensions"
        ],
        initial: "start",
        appliesto: "elementsWithDisplayMozBoxMozInlineBox",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/box-pack"
      },
      "box-shadow": {
        syntax: "none | <shadow>#",
        media: "visual",
        inherited: false,
        animationType: "shadowList",
        percentages: "no",
        groups: [
          "CSS Backgrounds and Borders"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "absoluteLengthsSpecifiedColorAsSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/box-shadow"
      },
      "box-sizing": {
        syntax: "content-box | border-box",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Basic User Interface"
        ],
        initial: "content-box",
        appliesto: "allElementsAcceptingWidthOrHeight",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/box-sizing"
      },
      "break-after": {
        syntax: "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fragmentation"
        ],
        initial: "auto",
        appliesto: "blockLevelElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/break-after"
      },
      "break-before": {
        syntax: "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fragmentation"
        ],
        initial: "auto",
        appliesto: "blockLevelElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/break-before"
      },
      "break-inside": {
        syntax: "auto | avoid | avoid-page | avoid-column | avoid-region",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fragmentation"
        ],
        initial: "auto",
        appliesto: "blockLevelElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/break-inside"
      },
      "caption-side": {
        syntax: "top | bottom | block-start | block-end | inline-start | inline-end",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Table"
        ],
        initial: "top",
        appliesto: "tableCaptionElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/caption-side"
      },
      "caret-color": {
        syntax: "auto | <color>",
        media: "interactive",
        inherited: true,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Basic User Interface"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asAutoOrColor",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/caret-color"
      },
      clear: {
        syntax: "none | left | right | both | inline-start | inline-end",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Positioning"
        ],
        initial: "none",
        appliesto: "blockLevelElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/clear"
      },
      clip: {
        syntax: "<shape> | auto",
        media: "visual",
        inherited: false,
        animationType: "rectangle",
        percentages: "no",
        groups: [
          "CSS Masking"
        ],
        initial: "auto",
        appliesto: "absolutelyPositionedElements",
        computed: "autoOrRectangle",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/clip"
      },
      "clip-path": {
        syntax: "<clip-source> | [ <basic-shape> || <geometry-box> ] | none",
        media: "visual",
        inherited: false,
        animationType: "basicShapeOtherwiseNo",
        percentages: "referToReferenceBoxWhenSpecifiedOtherwiseBorderBox",
        groups: [
          "CSS Masking"
        ],
        initial: "none",
        appliesto: "allElementsSVGContainerElements",
        computed: "asSpecifiedURLsAbsolute",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/clip-path"
      },
      color: {
        syntax: "<color>",
        media: "visual",
        inherited: true,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Color"
        ],
        initial: "variesFromBrowserToBrowser",
        appliesto: "allElements",
        computed: "translucentValuesRGBAOtherwiseRGB",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/color"
      },
      "color-adjust": {
        syntax: "economy | exact",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Color"
        ],
        initial: "economy",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/color-adjust"
      },
      "column-count": {
        syntax: "<integer> | auto",
        media: "visual",
        inherited: false,
        animationType: "integer",
        percentages: "no",
        groups: [
          "CSS Columns"
        ],
        initial: "auto",
        appliesto: "blockContainersExceptTableWrappers",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/column-count"
      },
      "column-fill": {
        syntax: "auto | balance | balance-all",
        media: "visualInContinuousMediaNoEffectInOverflowColumns",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Columns"
        ],
        initial: "balance",
        appliesto: "multicolElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/column-fill"
      },
      "column-gap": {
        syntax: "normal | <length-percentage>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToDimensionOfContentArea",
        groups: [
          "CSS Box Alignment"
        ],
        initial: "normal",
        appliesto: "multiColumnElementsFlexContainersGridContainers",
        computed: "asSpecifiedWithLengthsAbsoluteAndNormalComputingToZeroExceptMultiColumn",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/column-gap"
      },
      "column-rule": {
        syntax: "<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>",
        media: "visual",
        inherited: false,
        animationType: [
          "column-rule-color",
          "column-rule-style",
          "column-rule-width"
        ],
        percentages: "no",
        groups: [
          "CSS Columns"
        ],
        initial: [
          "column-rule-width",
          "column-rule-style",
          "column-rule-color"
        ],
        appliesto: "multicolElements",
        computed: [
          "column-rule-color",
          "column-rule-style",
          "column-rule-width"
        ],
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/column-rule"
      },
      "column-rule-color": {
        syntax: "<color>",
        media: "visual",
        inherited: false,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Columns"
        ],
        initial: "currentcolor",
        appliesto: "multicolElements",
        computed: "computedColor",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/column-rule-color"
      },
      "column-rule-style": {
        syntax: "<'border-style'>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Columns"
        ],
        initial: "none",
        appliesto: "multicolElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/column-rule-style"
      },
      "column-rule-width": {
        syntax: "<'border-width'>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "no",
        groups: [
          "CSS Columns"
        ],
        initial: "medium",
        appliesto: "multicolElements",
        computed: "absoluteLength0IfColumnRuleStyleNoneOrHidden",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/column-rule-width"
      },
      "column-span": {
        syntax: "none | all",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Columns"
        ],
        initial: "none",
        appliesto: "inFlowBlockLevelElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/column-span"
      },
      "column-width": {
        syntax: "<length> | auto",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "no",
        groups: [
          "CSS Columns"
        ],
        initial: "auto",
        appliesto: "blockContainersExceptTableWrappers",
        computed: "absoluteLengthZeroOrLarger",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/column-width"
      },
      columns: {
        syntax: "<'column-width'> || <'column-count'>",
        media: "visual",
        inherited: false,
        animationType: [
          "column-width",
          "column-count"
        ],
        percentages: "no",
        groups: [
          "CSS Columns"
        ],
        initial: [
          "column-width",
          "column-count"
        ],
        appliesto: "blockContainersExceptTableWrappers",
        computed: [
          "column-width",
          "column-count"
        ],
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/columns"
      },
      contain: {
        syntax: "none | strict | content | [ size || layout || style || paint ]",
        media: "all",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Containment"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/contain"
      },
      content: {
        syntax: "normal | none | [ <content-replacement> | <content-list> ] [/ <string> ]?",
        media: "all",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Generated Content"
        ],
        initial: "normal",
        appliesto: "beforeAndAfterPseudos",
        computed: "normalOnElementsForPseudosNoneAbsoluteURIStringOrAsSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/content"
      },
      "counter-increment": {
        syntax: "[ <custom-ident> <integer>? ]+ | none",
        media: "all",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Counter Styles"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/counter-increment"
      },
      "counter-reset": {
        syntax: "[ <custom-ident> <integer>? ]+ | none",
        media: "all",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Counter Styles"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/counter-reset"
      },
      "counter-set": {
        syntax: "[ <custom-ident> <integer>? ]+ | none",
        media: "all",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Counter Styles"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/counter-set"
      },
      cursor: {
        syntax: "[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]",
        media: [
          "visual",
          "interactive"
        ],
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Basic User Interface"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecifiedURLsAbsolute",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/cursor"
      },
      direction: {
        syntax: "ltr | rtl",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Writing Modes"
        ],
        initial: "ltr",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/direction"
      },
      display: {
        syntax: "[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>",
        media: "all",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Display"
        ],
        initial: "inline",
        appliesto: "allElements",
        computed: "asSpecifiedExceptPositionedFloatingAndRootElementsKeywordMaybeDifferent",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/display"
      },
      "empty-cells": {
        syntax: "show | hide",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Table"
        ],
        initial: "show",
        appliesto: "tableCellElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/empty-cells"
      },
      filter: {
        syntax: "none | <filter-function-list>",
        media: "visual",
        inherited: false,
        animationType: "filterList",
        percentages: "no",
        groups: [
          "Filter Effects"
        ],
        initial: "none",
        appliesto: "allElementsSVGContainerElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/filter"
      },
      flex: {
        syntax: "none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]",
        media: "visual",
        inherited: false,
        animationType: [
          "flex-grow",
          "flex-shrink",
          "flex-basis"
        ],
        percentages: "no",
        groups: [
          "CSS Flexible Box Layout"
        ],
        initial: [
          "flex-grow",
          "flex-shrink",
          "flex-basis"
        ],
        appliesto: "flexItemsAndInFlowPseudos",
        computed: [
          "flex-grow",
          "flex-shrink",
          "flex-basis"
        ],
        order: "orderOfAppearance",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/flex"
      },
      "flex-basis": {
        syntax: "content | <'width'>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToFlexContainersInnerMainSize",
        groups: [
          "CSS Flexible Box Layout"
        ],
        initial: "auto",
        appliesto: "flexItemsAndInFlowPseudos",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "lengthOrPercentageBeforeKeywordIfBothPresent",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/flex-basis"
      },
      "flex-direction": {
        syntax: "row | row-reverse | column | column-reverse",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Flexible Box Layout"
        ],
        initial: "row",
        appliesto: "flexContainers",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/flex-direction"
      },
      "flex-flow": {
        syntax: "<'flex-direction'> || <'flex-wrap'>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Flexible Box Layout"
        ],
        initial: [
          "flex-direction",
          "flex-wrap"
        ],
        appliesto: "flexContainers",
        computed: [
          "flex-direction",
          "flex-wrap"
        ],
        order: "orderOfAppearance",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/flex-flow"
      },
      "flex-grow": {
        syntax: "<number>",
        media: "visual",
        inherited: false,
        animationType: "number",
        percentages: "no",
        groups: [
          "CSS Flexible Box Layout"
        ],
        initial: "0",
        appliesto: "flexItemsAndInFlowPseudos",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/flex-grow"
      },
      "flex-shrink": {
        syntax: "<number>",
        media: "visual",
        inherited: false,
        animationType: "number",
        percentages: "no",
        groups: [
          "CSS Flexible Box Layout"
        ],
        initial: "1",
        appliesto: "flexItemsAndInFlowPseudos",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/flex-shrink"
      },
      "flex-wrap": {
        syntax: "nowrap | wrap | wrap-reverse",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Flexible Box Layout"
        ],
        initial: "nowrap",
        appliesto: "flexContainers",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/flex-wrap"
      },
      float: {
        syntax: "left | right | none | inline-start | inline-end",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Positioning"
        ],
        initial: "none",
        appliesto: "allElementsNoEffectIfDisplayNone",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/float"
      },
      font: {
        syntax: "[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar",
        media: "visual",
        inherited: true,
        animationType: [
          "font-style",
          "font-variant",
          "font-weight",
          "font-stretch",
          "font-size",
          "line-height",
          "font-family"
        ],
        percentages: [
          "font-size",
          "line-height"
        ],
        groups: [
          "CSS Fonts"
        ],
        initial: [
          "font-style",
          "font-variant",
          "font-weight",
          "font-stretch",
          "font-size",
          "line-height",
          "font-family"
        ],
        appliesto: "allElements",
        computed: [
          "font-style",
          "font-variant",
          "font-weight",
          "font-stretch",
          "font-size",
          "line-height",
          "font-family"
        ],
        order: "orderOfAppearance",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font"
      },
      "font-family": {
        syntax: "[ <family-name> | <generic-family> ]#",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "dependsOnUserAgent",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-family"
      },
      "font-feature-settings": {
        syntax: "normal | <feature-tag-value>#",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-feature-settings"
      },
      "font-kerning": {
        syntax: "auto | normal | none",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-kerning"
      },
      "font-language-override": {
        syntax: "normal | <string>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-language-override"
      },
      "font-optical-sizing": {
        syntax: "auto | none",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing"
      },
      "font-variation-settings": {
        syntax: "normal | [ <string> <number> ]#",
        media: "visual",
        inherited: true,
        animationType: "transform",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-variation-settings"
      },
      "font-size": {
        syntax: "<absolute-size> | <relative-size> | <length-percentage>",
        media: "visual",
        inherited: true,
        animationType: "length",
        percentages: "referToParentElementsFontSize",
        groups: [
          "CSS Fonts"
        ],
        initial: "medium",
        appliesto: "allElements",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-size"
      },
      "font-size-adjust": {
        syntax: "none | <number>",
        media: "visual",
        inherited: true,
        animationType: "number",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-size-adjust"
      },
      "font-smooth": {
        syntax: "auto | never | always | <absolute-size> | <length>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-smooth"
      },
      "font-stretch": {
        syntax: "<font-stretch-absolute>",
        media: "visual",
        inherited: true,
        animationType: "fontStretch",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-stretch"
      },
      "font-style": {
        syntax: "normal | italic | oblique <angle>?",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-style"
      },
      "font-synthesis": {
        syntax: "none | [ weight || style ]",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "weight style",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-synthesis"
      },
      "font-variant": {
        syntax: "normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-variant"
      },
      "font-variant-alternates": {
        syntax: "normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates"
      },
      "font-variant-caps": {
        syntax: "normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-variant-caps"
      },
      "font-variant-east-asian": {
        syntax: "normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian"
      },
      "font-variant-ligatures": {
        syntax: "normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures"
      },
      "font-variant-numeric": {
        syntax: "normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric"
      },
      "font-variant-position": {
        syntax: "normal | sub | super",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-variant-position"
      },
      "font-weight": {
        syntax: "<font-weight-absolute> | bolder | lighter",
        media: "visual",
        inherited: true,
        animationType: "fontWeight",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "keywordOrNumericalValueBolderLighterTransformedToRealValue",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/font-weight"
      },
      gap: {
        syntax: "<'row-gap'> <'column-gap'>?",
        media: "visual",
        inherited: false,
        animationType: [
          "row-gap",
          "column-gap"
        ],
        percentages: "no",
        groups: [
          "CSS Box Alignment"
        ],
        initial: [
          "row-gap",
          "column-gap"
        ],
        appliesto: "multiColumnElementsFlexContainersGridContainers",
        computed: [
          "row-gap",
          "column-gap"
        ],
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/gap"
      },
      grid: {
        syntax: "<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: [
          "grid-template-rows",
          "grid-template-columns",
          "grid-auto-rows",
          "grid-auto-columns"
        ],
        groups: [
          "CSS Grid Layout"
        ],
        initial: [
          "grid-template-rows",
          "grid-template-columns",
          "grid-template-areas",
          "grid-auto-rows",
          "grid-auto-columns",
          "grid-auto-flow",
          "grid-column-gap",
          "grid-row-gap",
          "column-gap",
          "row-gap"
        ],
        appliesto: "gridContainers",
        computed: [
          "grid-template-rows",
          "grid-template-columns",
          "grid-template-areas",
          "grid-auto-rows",
          "grid-auto-columns",
          "grid-auto-flow",
          "grid-column-gap",
          "grid-row-gap",
          "column-gap",
          "row-gap"
        ],
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/grid"
      },
      "grid-area": {
        syntax: "<grid-line> [ / <grid-line> ]{0,3}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Grid Layout"
        ],
        initial: [
          "grid-row-start",
          "grid-column-start",
          "grid-row-end",
          "grid-column-end"
        ],
        appliesto: "gridItemsAndBoxesWithinGridContainer",
        computed: [
          "grid-row-start",
          "grid-column-start",
          "grid-row-end",
          "grid-column-end"
        ],
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/grid-area"
      },
      "grid-auto-columns": {
        syntax: "<track-size>+",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "referToDimensionOfContentArea",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "auto",
        appliesto: "gridContainers",
        computed: "percentageAsSpecifiedOrAbsoluteLength",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns"
      },
      "grid-auto-flow": {
        syntax: "[ row | column ] || dense",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "row",
        appliesto: "gridContainers",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow"
      },
      "grid-auto-rows": {
        syntax: "<track-size>+",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "referToDimensionOfContentArea",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "auto",
        appliesto: "gridContainers",
        computed: "percentageAsSpecifiedOrAbsoluteLength",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows"
      },
      "grid-column": {
        syntax: "<grid-line> [ / <grid-line> ]?",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Grid Layout"
        ],
        initial: [
          "grid-column-start",
          "grid-column-end"
        ],
        appliesto: "gridItemsAndBoxesWithinGridContainer",
        computed: [
          "grid-column-start",
          "grid-column-end"
        ],
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/grid-column"
      },
      "grid-column-end": {
        syntax: "<grid-line>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "auto",
        appliesto: "gridItemsAndBoxesWithinGridContainer",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/grid-column-end"
      },
      "grid-column-gap": {
        syntax: "<length-percentage>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "referToDimensionOfContentArea",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "0",
        appliesto: "gridContainers",
        computed: "percentageAsSpecifiedOrAbsoluteLength",
        order: "uniqueOrder",
        status: "obsolete",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/column-gap"
      },
      "grid-column-start": {
        syntax: "<grid-line>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "auto",
        appliesto: "gridItemsAndBoxesWithinGridContainer",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/grid-column-start"
      },
      "grid-gap": {
        syntax: "<'grid-row-gap'> <'grid-column-gap'>?",
        media: "visual",
        inherited: false,
        animationType: [
          "grid-row-gap",
          "grid-column-gap"
        ],
        percentages: "no",
        groups: [
          "CSS Grid Layout"
        ],
        initial: [
          "grid-row-gap",
          "grid-column-gap"
        ],
        appliesto: "gridContainers",
        computed: [
          "grid-row-gap",
          "grid-column-gap"
        ],
        order: "uniqueOrder",
        status: "obsolete",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/gap"
      },
      "grid-row": {
        syntax: "<grid-line> [ / <grid-line> ]?",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Grid Layout"
        ],
        initial: [
          "grid-row-start",
          "grid-row-end"
        ],
        appliesto: "gridItemsAndBoxesWithinGridContainer",
        computed: [
          "grid-row-start",
          "grid-row-end"
        ],
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/grid-row"
      },
      "grid-row-end": {
        syntax: "<grid-line>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "auto",
        appliesto: "gridItemsAndBoxesWithinGridContainer",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/grid-row-end"
      },
      "grid-row-gap": {
        syntax: "<length-percentage>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "referToDimensionOfContentArea",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "0",
        appliesto: "gridContainers",
        computed: "percentageAsSpecifiedOrAbsoluteLength",
        order: "uniqueOrder",
        status: "obsolete",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/row-gap"
      },
      "grid-row-start": {
        syntax: "<grid-line>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "auto",
        appliesto: "gridItemsAndBoxesWithinGridContainer",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/grid-row-start"
      },
      "grid-template": {
        syntax: "none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: [
          "grid-template-columns",
          "grid-template-rows"
        ],
        groups: [
          "CSS Grid Layout"
        ],
        initial: [
          "grid-template-columns",
          "grid-template-rows",
          "grid-template-areas"
        ],
        appliesto: "gridContainers",
        computed: [
          "grid-template-columns",
          "grid-template-rows",
          "grid-template-areas"
        ],
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/grid-template"
      },
      "grid-template-areas": {
        syntax: "none | <string>+",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "none",
        appliesto: "gridContainers",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/grid-template-areas"
      },
      "grid-template-columns": {
        syntax: "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
        media: "visual",
        inherited: false,
        animationType: "simpleListOfLpcDifferenceLpc",
        percentages: "referToDimensionOfContentArea",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "none",
        appliesto: "gridContainers",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/grid-template-columns"
      },
      "grid-template-rows": {
        syntax: "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
        media: "visual",
        inherited: false,
        animationType: "simpleListOfLpcDifferenceLpc",
        percentages: "referToDimensionOfContentArea",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "none",
        appliesto: "gridContainers",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/grid-template-rows"
      },
      "hanging-punctuation": {
        syntax: "none | [ first || [ force-end | allow-end ] || last ]",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation"
      },
      height: {
        syntax: "auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "regardingHeightOfGeneratedBoxContainingBlockPercentagesRelativeToContainingBlock",
        groups: [
          "CSS Box Model"
        ],
        initial: "auto",
        appliesto: "allElementsButNonReplacedAndTableColumns",
        computed: "percentageAutoOrAbsoluteLength",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/height"
      },
      hyphens: {
        syntax: "none | manual | auto",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text"
        ],
        initial: "manual",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/hyphens"
      },
      "image-orientation": {
        syntax: "from-image | <angle> | [ <angle>? flip ]",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Images"
        ],
        initial: "from-image",
        appliesto: "allElements",
        computed: "angleRoundedToNextQuarter",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/image-orientation"
      },
      "image-rendering": {
        syntax: "auto | crisp-edges | pixelated",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Images"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/image-rendering"
      },
      "image-resolution": {
        syntax: "[ from-image || <resolution> ] && snap?",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Images"
        ],
        initial: "1dppx",
        appliesto: "allElements",
        computed: "asSpecifiedWithExceptionOfResolution",
        order: "uniqueOrder",
        status: "experimental"
      },
      "ime-mode": {
        syntax: "auto | normal | active | inactive | disabled",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Basic User Interface"
        ],
        initial: "auto",
        appliesto: "textFields",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "obsolete",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/ime-mode"
      },
      "initial-letter": {
        syntax: "normal | [ <number> <integer>? ]",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Inline"
        ],
        initial: "normal",
        appliesto: "firstLetterPseudoElementsAndInlineLevelFirstChildren",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/initial-letter"
      },
      "initial-letter-align": {
        syntax: "[ auto | alphabetic | hanging | ideographic ]",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Inline"
        ],
        initial: "auto",
        appliesto: "firstLetterPseudoElementsAndInlineLevelFirstChildren",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/initial-letter-align"
      },
      "inline-size": {
        syntax: "<'width'>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "inlineSizeOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "auto",
        appliesto: "sameAsWidthAndHeight",
        computed: "sameAsWidthAndHeight",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/inline-size"
      },
      inset: {
        syntax: "<'top'>{1,4}",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "logicalHeightOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "auto",
        appliesto: "positionedElements",
        computed: "sameAsBoxOffsets",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/inset"
      },
      "inset-block": {
        syntax: "<'top'>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "logicalHeightOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "auto",
        appliesto: "positionedElements",
        computed: "sameAsBoxOffsets",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/inset-block"
      },
      "inset-block-end": {
        syntax: "<'top'>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "logicalHeightOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "auto",
        appliesto: "positionedElements",
        computed: "sameAsBoxOffsets",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/inset-block-end"
      },
      "inset-block-start": {
        syntax: "<'top'>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "logicalHeightOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "auto",
        appliesto: "positionedElements",
        computed: "sameAsBoxOffsets",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/inset-block-start"
      },
      "inset-inline": {
        syntax: "<'top'>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "auto",
        appliesto: "positionedElements",
        computed: "sameAsBoxOffsets",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/inset-inline"
      },
      "inset-inline-end": {
        syntax: "<'top'>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "auto",
        appliesto: "positionedElements",
        computed: "sameAsBoxOffsets",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/inset-inline-end"
      },
      "inset-inline-start": {
        syntax: "<'top'>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "auto",
        appliesto: "positionedElements",
        computed: "sameAsBoxOffsets",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/inset-inline-start"
      },
      isolation: {
        syntax: "auto | isolate",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Compositing and Blending"
        ],
        initial: "auto",
        appliesto: "allElementsSVGContainerGraphicsAndGraphicsReferencingElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/isolation"
      },
      "justify-content": {
        syntax: "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Box Alignment"
        ],
        initial: "normal",
        appliesto: "flexContainers",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/justify-content"
      },
      "justify-items": {
        syntax: "normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Box Alignment"
        ],
        initial: "legacy",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/justify-items"
      },
      "justify-self": {
        syntax: "auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Box Alignment"
        ],
        initial: "auto",
        appliesto: "blockLevelBoxesAndAbsolutelyPositionedBoxesAndGridItems",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/justify-self"
      },
      "justify-tracks": {
        syntax: "[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "normal",
        appliesto: "gridContainersWithMasonryLayoutInTheirInlineAxis",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/justify-tracks"
      },
      left: {
        syntax: "<length> | <percentage> | auto",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Positioning"
        ],
        initial: "auto",
        appliesto: "positionedElements",
        computed: "lengthAbsolutePercentageAsSpecifiedOtherwiseAuto",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/left"
      },
      "letter-spacing": {
        syntax: "normal | <length>",
        media: "visual",
        inherited: true,
        animationType: "length",
        percentages: "no",
        groups: [
          "CSS Text"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "optimumValueOfAbsoluteLengthOrNormal",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/letter-spacing"
      },
      "line-break": {
        syntax: "auto | loose | normal | strict | anywhere",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/line-break"
      },
      "line-clamp": {
        syntax: "none | <integer>",
        media: "visual",
        inherited: false,
        animationType: "integer",
        percentages: "no",
        groups: [
          "CSS Overflow"
        ],
        initial: "none",
        appliesto: "blockContainersExceptMultiColumnContainers",
        computed: "asSpecified",
        order: "perGrammar",
        status: "experimental"
      },
      "line-height": {
        syntax: "normal | <number> | <length> | <percentage>",
        media: "visual",
        inherited: true,
        animationType: "numberOrLength",
        percentages: "referToElementFontSize",
        groups: [
          "CSS Fonts"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "absoluteLengthOrAsSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/line-height"
      },
      "line-height-step": {
        syntax: "<length>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fonts"
        ],
        initial: "0",
        appliesto: "blockContainers",
        computed: "absoluteLength",
        order: "perGrammar",
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/line-height-step"
      },
      "list-style": {
        syntax: "<'list-style-type'> || <'list-style-position'> || <'list-style-image'>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Lists and Counters"
        ],
        initial: [
          "list-style-type",
          "list-style-position",
          "list-style-image"
        ],
        appliesto: "listItems",
        computed: [
          "list-style-image",
          "list-style-position",
          "list-style-type"
        ],
        order: "orderOfAppearance",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/list-style"
      },
      "list-style-image": {
        syntax: "<url> | none",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Lists and Counters"
        ],
        initial: "none",
        appliesto: "listItems",
        computed: "noneOrImageWithAbsoluteURI",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/list-style-image"
      },
      "list-style-position": {
        syntax: "inside | outside",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Lists and Counters"
        ],
        initial: "outside",
        appliesto: "listItems",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/list-style-position"
      },
      "list-style-type": {
        syntax: "<counter-style> | <string> | none",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Lists and Counters"
        ],
        initial: "disc",
        appliesto: "listItems",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/list-style-type"
      },
      margin: {
        syntax: "[ <length> | <percentage> | auto ]{1,4}",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Box Model"
        ],
        initial: [
          "margin-bottom",
          "margin-left",
          "margin-right",
          "margin-top"
        ],
        appliesto: "allElementsExceptTableDisplayTypes",
        computed: [
          "margin-bottom",
          "margin-left",
          "margin-right",
          "margin-top"
        ],
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/margin"
      },
      "margin-block": {
        syntax: "<'margin-left'>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "dependsOnLayoutModel",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "sameAsMargin",
        computed: "lengthAbsolutePercentageAsSpecifiedOtherwiseAuto",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/margin-block"
      },
      "margin-block-end": {
        syntax: "<'margin-left'>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "dependsOnLayoutModel",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "sameAsMargin",
        computed: "lengthAbsolutePercentageAsSpecifiedOtherwiseAuto",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/margin-block-end"
      },
      "margin-block-start": {
        syntax: "<'margin-left'>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "dependsOnLayoutModel",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "sameAsMargin",
        computed: "lengthAbsolutePercentageAsSpecifiedOtherwiseAuto",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/margin-block-start"
      },
      "margin-bottom": {
        syntax: "<length> | <percentage> | auto",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Box Model"
        ],
        initial: "0",
        appliesto: "allElementsExceptTableDisplayTypes",
        computed: "percentageAsSpecifiedOrAbsoluteLength",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/margin-bottom"
      },
      "margin-inline": {
        syntax: "<'margin-left'>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "dependsOnLayoutModel",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "sameAsMargin",
        computed: "lengthAbsolutePercentageAsSpecifiedOtherwiseAuto",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/margin-inline"
      },
      "margin-inline-end": {
        syntax: "<'margin-left'>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "dependsOnLayoutModel",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "sameAsMargin",
        computed: "lengthAbsolutePercentageAsSpecifiedOtherwiseAuto",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/margin-inline-end"
      },
      "margin-inline-start": {
        syntax: "<'margin-left'>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "dependsOnLayoutModel",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "sameAsMargin",
        computed: "lengthAbsolutePercentageAsSpecifiedOtherwiseAuto",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/margin-inline-start"
      },
      "margin-left": {
        syntax: "<length> | <percentage> | auto",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Box Model"
        ],
        initial: "0",
        appliesto: "allElementsExceptTableDisplayTypes",
        computed: "percentageAsSpecifiedOrAbsoluteLength",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/margin-left"
      },
      "margin-right": {
        syntax: "<length> | <percentage> | auto",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Box Model"
        ],
        initial: "0",
        appliesto: "allElementsExceptTableDisplayTypes",
        computed: "percentageAsSpecifiedOrAbsoluteLength",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/margin-right"
      },
      "margin-top": {
        syntax: "<length> | <percentage> | auto",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Box Model"
        ],
        initial: "0",
        appliesto: "allElementsExceptTableDisplayTypes",
        computed: "percentageAsSpecifiedOrAbsoluteLength",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/margin-top"
      },
      "margin-trim": {
        syntax: "none | in-flow | all",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Box Model"
        ],
        initial: "none",
        appliesto: "blockContainersAndMultiColumnContainers",
        computed: "asSpecified",
        order: "perGrammar",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line"
        ],
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/margin-trim"
      },
      mask: {
        syntax: "<mask-layer>#",
        media: "visual",
        inherited: false,
        animationType: [
          "mask-image",
          "mask-mode",
          "mask-repeat",
          "mask-position",
          "mask-clip",
          "mask-origin",
          "mask-size",
          "mask-composite"
        ],
        percentages: [
          "mask-position"
        ],
        groups: [
          "CSS Masking"
        ],
        initial: [
          "mask-image",
          "mask-mode",
          "mask-repeat",
          "mask-position",
          "mask-clip",
          "mask-origin",
          "mask-size",
          "mask-composite"
        ],
        appliesto: "allElementsSVGContainerElements",
        computed: [
          "mask-image",
          "mask-mode",
          "mask-repeat",
          "mask-position",
          "mask-clip",
          "mask-origin",
          "mask-size",
          "mask-composite"
        ],
        order: "perGrammar",
        stacking: true,
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask"
      },
      "mask-border": {
        syntax: "<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>",
        media: "visual",
        inherited: false,
        animationType: [
          "mask-border-mode",
          "mask-border-outset",
          "mask-border-repeat",
          "mask-border-slice",
          "mask-border-source",
          "mask-border-width"
        ],
        percentages: [
          "mask-border-slice",
          "mask-border-width"
        ],
        groups: [
          "CSS Masking"
        ],
        initial: [
          "mask-border-mode",
          "mask-border-outset",
          "mask-border-repeat",
          "mask-border-slice",
          "mask-border-source",
          "mask-border-width"
        ],
        appliesto: "allElementsSVGContainerElements",
        computed: [
          "mask-border-mode",
          "mask-border-outset",
          "mask-border-repeat",
          "mask-border-slice",
          "mask-border-source",
          "mask-border-width"
        ],
        order: "perGrammar",
        stacking: true,
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-border"
      },
      "mask-border-mode": {
        syntax: "luminance | alpha",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Masking"
        ],
        initial: "alpha",
        appliesto: "allElementsSVGContainerElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-border-mode"
      },
      "mask-border-outset": {
        syntax: "[ <length> | <number> ]{1,4}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Masking"
        ],
        initial: "0",
        appliesto: "allElementsSVGContainerElements",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-border-outset"
      },
      "mask-border-repeat": {
        syntax: "[ stretch | repeat | round | space ]{1,2}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Masking"
        ],
        initial: "stretch",
        appliesto: "allElementsSVGContainerElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat"
      },
      "mask-border-slice": {
        syntax: "<number-percentage>{1,4} fill?",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "referToSizeOfMaskBorderImage",
        groups: [
          "CSS Masking"
        ],
        initial: "0",
        appliesto: "allElementsSVGContainerElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-border-slice"
      },
      "mask-border-source": {
        syntax: "none | <image>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Masking"
        ],
        initial: "none",
        appliesto: "allElementsSVGContainerElements",
        computed: "asSpecifiedURLsAbsolute",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-border-source"
      },
      "mask-border-width": {
        syntax: "[ <length-percentage> | <number> | auto ]{1,4}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "relativeToMaskBorderImageArea",
        groups: [
          "CSS Masking"
        ],
        initial: "auto",
        appliesto: "allElementsSVGContainerElements",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-border-width"
      },
      "mask-clip": {
        syntax: "[ <geometry-box> | no-clip ]#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Masking"
        ],
        initial: "border-box",
        appliesto: "allElementsSVGContainerElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-clip"
      },
      "mask-composite": {
        syntax: "<compositing-operator>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Masking"
        ],
        initial: "add",
        appliesto: "allElementsSVGContainerElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-composite"
      },
      "mask-image": {
        syntax: "<mask-reference>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Masking"
        ],
        initial: "none",
        appliesto: "allElementsSVGContainerElements",
        computed: "asSpecifiedURLsAbsolute",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-image"
      },
      "mask-mode": {
        syntax: "<masking-mode>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Masking"
        ],
        initial: "match-source",
        appliesto: "allElementsSVGContainerElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-mode"
      },
      "mask-origin": {
        syntax: "<geometry-box>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Masking"
        ],
        initial: "border-box",
        appliesto: "allElementsSVGContainerElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-origin"
      },
      "mask-position": {
        syntax: "<position>#",
        media: "visual",
        inherited: false,
        animationType: "repeatableListOfSimpleListOfLpc",
        percentages: "referToSizeOfMaskPaintingArea",
        groups: [
          "CSS Masking"
        ],
        initial: "center",
        appliesto: "allElementsSVGContainerElements",
        computed: "consistsOfTwoKeywordsForOriginAndOffsets",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-position"
      },
      "mask-repeat": {
        syntax: "<repeat-style>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Masking"
        ],
        initial: "no-repeat",
        appliesto: "allElementsSVGContainerElements",
        computed: "consistsOfTwoDimensionKeywords",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-repeat"
      },
      "mask-size": {
        syntax: "<bg-size>#",
        media: "visual",
        inherited: false,
        animationType: "repeatableListOfSimpleListOfLpc",
        percentages: "no",
        groups: [
          "CSS Masking"
        ],
        initial: "auto",
        appliesto: "allElementsSVGContainerElements",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-size"
      },
      "mask-type": {
        syntax: "luminance | alpha",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Masking"
        ],
        initial: "luminance",
        appliesto: "maskElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mask-type"
      },
      "masonry-auto-flow": {
        syntax: "[ pack | next ] || [ definite-first | ordered ]",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Grid Layout"
        ],
        initial: "pack",
        appliesto: "gridContainersWithMasonryLayout",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/masonry-auto-flow"
      },
      "math-style": {
        syntax: "normal | compact",
        media: "visual",
        inherited: true,
        animationType: "notAnimatable",
        percentages: "no",
        groups: [
          "MathML"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/math-style"
      },
      "max-block-size": {
        syntax: "<'max-width'>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "blockSizeOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "sameAsWidthAndHeight",
        computed: "sameAsMaxWidthAndMaxHeight",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/max-block-size"
      },
      "max-height": {
        syntax: "none | <length-percentage> | min-content | max-content | fit-content(<length-percentage>)",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "regardingHeightOfGeneratedBoxContainingBlockPercentagesNone",
        groups: [
          "CSS Box Model"
        ],
        initial: "none",
        appliesto: "allElementsButNonReplacedAndTableColumns",
        computed: "percentageAsSpecifiedAbsoluteLengthOrNone",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/max-height"
      },
      "max-inline-size": {
        syntax: "<'max-width'>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "inlineSizeOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "sameAsWidthAndHeight",
        computed: "sameAsMaxWidthAndMaxHeight",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/max-inline-size"
      },
      "max-lines": {
        syntax: "none | <integer>",
        media: "visual",
        inherited: false,
        animationType: "integer",
        percentages: "no",
        groups: [
          "CSS Overflow"
        ],
        initial: "none",
        appliesto: "blockContainersExceptMultiColumnContainers",
        computed: "asSpecified",
        order: "perGrammar",
        status: "experimental"
      },
      "max-width": {
        syntax: "none | <length-percentage> | min-content | max-content | fit-content(<length-percentage>)",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Box Model"
        ],
        initial: "none",
        appliesto: "allElementsButNonReplacedAndTableRows",
        computed: "percentageAsSpecifiedAbsoluteLengthOrNone",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/max-width"
      },
      "min-block-size": {
        syntax: "<'min-width'>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "blockSizeOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "sameAsWidthAndHeight",
        computed: "sameAsMinWidthAndMinHeight",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/min-block-size"
      },
      "min-height": {
        syntax: "auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "regardingHeightOfGeneratedBoxContainingBlockPercentages0",
        groups: [
          "CSS Box Model"
        ],
        initial: "auto",
        appliesto: "allElementsButNonReplacedAndTableColumns",
        computed: "percentageAsSpecifiedOrAbsoluteLength",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/min-height"
      },
      "min-inline-size": {
        syntax: "<'min-width'>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "inlineSizeOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "sameAsWidthAndHeight",
        computed: "sameAsMinWidthAndMinHeight",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/min-inline-size"
      },
      "min-width": {
        syntax: "auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Box Model"
        ],
        initial: "auto",
        appliesto: "allElementsButNonReplacedAndTableRows",
        computed: "percentageAsSpecifiedOrAbsoluteLength",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/min-width"
      },
      "mix-blend-mode": {
        syntax: "<blend-mode>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Compositing and Blending"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        stacking: true,
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode"
      },
      "object-fit": {
        syntax: "fill | contain | cover | none | scale-down",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Images"
        ],
        initial: "fill",
        appliesto: "replacedElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/object-fit"
      },
      "object-position": {
        syntax: "<position>",
        media: "visual",
        inherited: true,
        animationType: "repeatableListOfSimpleListOfLpc",
        percentages: "referToWidthAndHeightOfElement",
        groups: [
          "CSS Images"
        ],
        initial: "50% 50%",
        appliesto: "replacedElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/object-position"
      },
      offset: {
        syntax: "[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?",
        media: "visual",
        inherited: false,
        animationType: [
          "offset-position",
          "offset-path",
          "offset-distance",
          "offset-anchor",
          "offset-rotate"
        ],
        percentages: [
          "offset-position",
          "offset-distance",
          "offset-anchor"
        ],
        groups: [
          "CSS Motion Path"
        ],
        initial: [
          "offset-position",
          "offset-path",
          "offset-distance",
          "offset-anchor",
          "offset-rotate"
        ],
        appliesto: "transformableElements",
        computed: [
          "offset-position",
          "offset-path",
          "offset-distance",
          "offset-anchor",
          "offset-rotate"
        ],
        order: "perGrammar",
        stacking: true,
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/offset"
      },
      "offset-anchor": {
        syntax: "auto | <position>",
        media: "visual",
        inherited: false,
        animationType: "position",
        percentages: "relativeToWidthAndHeight",
        groups: [
          "CSS Motion Path"
        ],
        initial: "auto",
        appliesto: "transformableElements",
        computed: "forLengthAbsoluteValueOtherwisePercentage",
        order: "perGrammar",
        status: "standard"
      },
      "offset-distance": {
        syntax: "<length-percentage>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToTotalPathLength",
        groups: [
          "CSS Motion Path"
        ],
        initial: "0",
        appliesto: "transformableElements",
        computed: "forLengthAbsoluteValueOtherwisePercentage",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/offset-distance"
      },
      "offset-path": {
        syntax: "none | ray( [ <angle> && <size> && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]",
        media: "visual",
        inherited: false,
        animationType: "angleOrBasicShapeOrPath",
        percentages: "no",
        groups: [
          "CSS Motion Path"
        ],
        initial: "none",
        appliesto: "transformableElements",
        computed: "asSpecified",
        order: "perGrammar",
        stacking: true,
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/offset-path"
      },
      "offset-position": {
        syntax: "auto | <position>",
        media: "visual",
        inherited: false,
        animationType: "position",
        percentages: "referToSizeOfContainingBlock",
        groups: [
          "CSS Motion Path"
        ],
        initial: "auto",
        appliesto: "transformableElements",
        computed: "forLengthAbsoluteValueOtherwisePercentage",
        order: "perGrammar",
        status: "experimental"
      },
      "offset-rotate": {
        syntax: "[ auto | reverse ] || <angle>",
        media: "visual",
        inherited: false,
        animationType: "angleOrBasicShapeOrPath",
        percentages: "no",
        groups: [
          "CSS Motion Path"
        ],
        initial: "auto",
        appliesto: "transformableElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/offset-rotate"
      },
      opacity: {
        syntax: "<alpha-value>",
        media: "visual",
        inherited: false,
        animationType: "number",
        percentages: "no",
        groups: [
          "CSS Color"
        ],
        initial: "1.0",
        appliesto: "allElements",
        computed: "specifiedValueClipped0To1",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/opacity"
      },
      order: {
        syntax: "<integer>",
        media: "visual",
        inherited: false,
        animationType: "integer",
        percentages: "no",
        groups: [
          "CSS Flexible Box Layout"
        ],
        initial: "0",
        appliesto: "flexItemsGridItemsAbsolutelyPositionedContainerChildren",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/order"
      },
      orphans: {
        syntax: "<integer>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fragmentation"
        ],
        initial: "2",
        appliesto: "blockContainerElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/orphans"
      },
      outline: {
        syntax: "[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]",
        media: [
          "visual",
          "interactive"
        ],
        inherited: false,
        animationType: [
          "outline-color",
          "outline-width",
          "outline-style"
        ],
        percentages: "no",
        groups: [
          "CSS Basic User Interface"
        ],
        initial: [
          "outline-color",
          "outline-style",
          "outline-width"
        ],
        appliesto: "allElements",
        computed: [
          "outline-color",
          "outline-width",
          "outline-style"
        ],
        order: "orderOfAppearance",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/outline"
      },
      "outline-color": {
        syntax: "<color> | invert",
        media: [
          "visual",
          "interactive"
        ],
        inherited: false,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Basic User Interface"
        ],
        initial: "invertOrCurrentColor",
        appliesto: "allElements",
        computed: "invertForTranslucentColorRGBAOtherwiseRGB",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/outline-color"
      },
      "outline-offset": {
        syntax: "<length>",
        media: [
          "visual",
          "interactive"
        ],
        inherited: false,
        animationType: "length",
        percentages: "no",
        groups: [
          "CSS Basic User Interface"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/outline-offset"
      },
      "outline-style": {
        syntax: "auto | <'border-style'>",
        media: [
          "visual",
          "interactive"
        ],
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Basic User Interface"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/outline-style"
      },
      "outline-width": {
        syntax: "<line-width>",
        media: [
          "visual",
          "interactive"
        ],
        inherited: false,
        animationType: "length",
        percentages: "no",
        groups: [
          "CSS Basic User Interface"
        ],
        initial: "medium",
        appliesto: "allElements",
        computed: "absoluteLength0ForNone",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/outline-width"
      },
      overflow: {
        syntax: "[ visible | hidden | clip | scroll | auto ]{1,2}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Overflow"
        ],
        initial: "visible",
        appliesto: "blockContainersFlexContainersGridContainers",
        computed: [
          "overflow-x",
          "overflow-y"
        ],
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/overflow"
      },
      "overflow-anchor": {
        syntax: "auto | none",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Scroll Anchoring"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard"
      },
      "overflow-block": {
        syntax: "visible | hidden | clip | scroll | auto",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Overflow"
        ],
        initial: "auto",
        appliesto: "blockContainersFlexContainersGridContainers",
        computed: "asSpecifiedButVisibleOrClipReplacedToAutoOrHiddenIfOtherValueDifferent",
        order: "perGrammar",
        status: "standard"
      },
      "overflow-clip-box": {
        syntax: "padding-box | content-box",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Mozilla Extensions"
        ],
        initial: "padding-box",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Mozilla/CSS/overflow-clip-box"
      },
      "overflow-inline": {
        syntax: "visible | hidden | clip | scroll | auto",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Overflow"
        ],
        initial: "auto",
        appliesto: "blockContainersFlexContainersGridContainers",
        computed: "asSpecifiedButVisibleOrClipReplacedToAutoOrHiddenIfOtherValueDifferent",
        order: "perGrammar",
        status: "standard"
      },
      "overflow-wrap": {
        syntax: "normal | break-word | anywhere",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text"
        ],
        initial: "normal",
        appliesto: "nonReplacedInlineElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/overflow-wrap"
      },
      "overflow-x": {
        syntax: "visible | hidden | clip | scroll | auto",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Overflow"
        ],
        initial: "visible",
        appliesto: "blockContainersFlexContainersGridContainers",
        computed: "asSpecifiedButVisibleOrClipReplacedToAutoOrHiddenIfOtherValueDifferent",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/overflow-x"
      },
      "overflow-y": {
        syntax: "visible | hidden | clip | scroll | auto",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Overflow"
        ],
        initial: "visible",
        appliesto: "blockContainersFlexContainersGridContainers",
        computed: "asSpecifiedButVisibleOrClipReplacedToAutoOrHiddenIfOtherValueDifferent",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/overflow-y"
      },
      "overscroll-behavior": {
        syntax: "[ contain | none | auto ]{1,2}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Box Model"
        ],
        initial: "auto",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior"
      },
      "overscroll-behavior-block": {
        syntax: "contain | none | auto",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Box Model"
        ],
        initial: "auto",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block"
      },
      "overscroll-behavior-inline": {
        syntax: "contain | none | auto",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Box Model"
        ],
        initial: "auto",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline"
      },
      "overscroll-behavior-x": {
        syntax: "contain | none | auto",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Box Model"
        ],
        initial: "auto",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x"
      },
      "overscroll-behavior-y": {
        syntax: "contain | none | auto",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Box Model"
        ],
        initial: "auto",
        appliesto: "nonReplacedBlockAndInlineBlockElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y"
      },
      padding: {
        syntax: "[ <length> | <percentage> ]{1,4}",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Box Model"
        ],
        initial: [
          "padding-bottom",
          "padding-left",
          "padding-right",
          "padding-top"
        ],
        appliesto: "allElementsExceptInternalTableDisplayTypes",
        computed: [
          "padding-bottom",
          "padding-left",
          "padding-right",
          "padding-top"
        ],
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/padding"
      },
      "padding-block": {
        syntax: "<'padding-left'>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asLength",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/padding-block"
      },
      "padding-block-end": {
        syntax: "<'padding-left'>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asLength",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/padding-block-end"
      },
      "padding-block-start": {
        syntax: "<'padding-left'>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asLength",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/padding-block-start"
      },
      "padding-bottom": {
        syntax: "<length> | <percentage>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Box Model"
        ],
        initial: "0",
        appliesto: "allElementsExceptInternalTableDisplayTypes",
        computed: "percentageAsSpecifiedOrAbsoluteLength",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/padding-bottom"
      },
      "padding-inline": {
        syntax: "<'padding-left'>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asLength",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/padding-inline"
      },
      "padding-inline-end": {
        syntax: "<'padding-left'>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asLength",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/padding-inline-end"
      },
      "padding-inline-start": {
        syntax: "<'padding-left'>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "logicalWidthOfContainingBlock",
        groups: [
          "CSS Logical Properties"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asLength",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/padding-inline-start"
      },
      "padding-left": {
        syntax: "<length> | <percentage>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Box Model"
        ],
        initial: "0",
        appliesto: "allElementsExceptInternalTableDisplayTypes",
        computed: "percentageAsSpecifiedOrAbsoluteLength",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/padding-left"
      },
      "padding-right": {
        syntax: "<length> | <percentage>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Box Model"
        ],
        initial: "0",
        appliesto: "allElementsExceptInternalTableDisplayTypes",
        computed: "percentageAsSpecifiedOrAbsoluteLength",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/padding-right"
      },
      "padding-top": {
        syntax: "<length> | <percentage>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Box Model"
        ],
        initial: "0",
        appliesto: "allElementsExceptInternalTableDisplayTypes",
        computed: "percentageAsSpecifiedOrAbsoluteLength",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/padding-top"
      },
      "page-break-after": {
        syntax: "auto | always | avoid | left | right | recto | verso",
        media: [
          "visual",
          "paged"
        ],
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Pages"
        ],
        initial: "auto",
        appliesto: "blockElementsInNormalFlow",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/page-break-after"
      },
      "page-break-before": {
        syntax: "auto | always | avoid | left | right | recto | verso",
        media: [
          "visual",
          "paged"
        ],
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Pages"
        ],
        initial: "auto",
        appliesto: "blockElementsInNormalFlow",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/page-break-before"
      },
      "page-break-inside": {
        syntax: "auto | avoid",
        media: [
          "visual",
          "paged"
        ],
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Pages"
        ],
        initial: "auto",
        appliesto: "blockElementsInNormalFlow",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/page-break-inside"
      },
      "paint-order": {
        syntax: "normal | [ fill || stroke || markers ]",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text"
        ],
        initial: "normal",
        appliesto: "textElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/paint-order"
      },
      perspective: {
        syntax: "none | <length>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "no",
        groups: [
          "CSS Transforms"
        ],
        initial: "none",
        appliesto: "transformableElements",
        computed: "absoluteLengthOrNone",
        order: "uniqueOrder",
        stacking: true,
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/perspective"
      },
      "perspective-origin": {
        syntax: "<position>",
        media: "visual",
        inherited: false,
        animationType: "simpleListOfLpc",
        percentages: "referToSizeOfBoundingBox",
        groups: [
          "CSS Transforms"
        ],
        initial: "50% 50%",
        appliesto: "transformableElements",
        computed: "forLengthAbsoluteValueOtherwisePercentage",
        order: "oneOrTwoValuesLengthAbsoluteKeywordsPercentages",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/perspective-origin"
      },
      "place-content": {
        syntax: "<'align-content'> <'justify-content'>?",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Box Alignment"
        ],
        initial: "normal",
        appliesto: "multilineFlexContainers",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/place-content"
      },
      "place-items": {
        syntax: "<'align-items'> <'justify-items'>?",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Box Alignment"
        ],
        initial: [
          "align-items",
          "justify-items"
        ],
        appliesto: "allElements",
        computed: [
          "align-items",
          "justify-items"
        ],
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/place-items"
      },
      "place-self": {
        syntax: "<'align-self'> <'justify-self'>?",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Box Alignment"
        ],
        initial: [
          "align-self",
          "justify-self"
        ],
        appliesto: "blockLevelBoxesAndAbsolutelyPositionedBoxesAndGridItems",
        computed: [
          "align-self",
          "justify-self"
        ],
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/place-self"
      },
      "pointer-events": {
        syntax: "auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Pointer Events"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/pointer-events"
      },
      position: {
        syntax: "static | relative | absolute | sticky | fixed",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Positioning"
        ],
        initial: "static",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        stacking: true,
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/position"
      },
      quotes: {
        syntax: "none | auto | [ <string> <string> ]+",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Generated Content"
        ],
        initial: "dependsOnUserAgent",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/quotes"
      },
      resize: {
        syntax: "none | both | horizontal | vertical | block | inline",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Basic User Interface"
        ],
        initial: "none",
        appliesto: "elementsWithOverflowNotVisibleAndReplacedElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/resize"
      },
      right: {
        syntax: "<length> | <percentage> | auto",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Positioning"
        ],
        initial: "auto",
        appliesto: "positionedElements",
        computed: "lengthAbsolutePercentageAsSpecifiedOtherwiseAuto",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/right"
      },
      rotate: {
        syntax: "none | <angle> | [ x | y | z | <number>{3} ] && <angle>",
        media: "visual",
        inherited: false,
        animationType: "transform",
        percentages: "no",
        groups: [
          "CSS Transforms"
        ],
        initial: "none",
        appliesto: "transformableElements",
        computed: "asSpecified",
        order: "perGrammar",
        stacking: true,
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/rotate"
      },
      "row-gap": {
        syntax: "normal | <length-percentage>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToDimensionOfContentArea",
        groups: [
          "CSS Box Alignment"
        ],
        initial: "normal",
        appliesto: "multiColumnElementsFlexContainersGridContainers",
        computed: "asSpecifiedWithLengthsAbsoluteAndNormalComputingToZeroExceptMultiColumn",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/row-gap"
      },
      "ruby-align": {
        syntax: "start | center | space-between | space-around",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Ruby"
        ],
        initial: "space-around",
        appliesto: "rubyBasesAnnotationsBaseAnnotationContainers",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/ruby-align"
      },
      "ruby-merge": {
        syntax: "separate | collapse | auto",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Ruby"
        ],
        initial: "separate",
        appliesto: "rubyAnnotationsContainers",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "experimental"
      },
      "ruby-position": {
        syntax: "over | under | inter-character",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Ruby"
        ],
        initial: "over",
        appliesto: "rubyAnnotationsContainers",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/ruby-position"
      },
      scale: {
        syntax: "none | <number>{1,3}",
        media: "visual",
        inherited: false,
        animationType: "transform",
        percentages: "no",
        groups: [
          "CSS Transforms"
        ],
        initial: "none",
        appliesto: "transformableElements",
        computed: "asSpecified",
        order: "perGrammar",
        stacking: true,
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scale"
      },
      "scrollbar-color": {
        syntax: "auto | dark | light | <color>{2}",
        media: "visual",
        inherited: true,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Scrollbars"
        ],
        initial: "auto",
        appliesto: "scrollingBoxes",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scrollbar-color"
      },
      "scrollbar-gutter": {
        syntax: "auto | [ stable | always ] && both? && force?",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Overflow"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter"
      },
      "scrollbar-width": {
        syntax: "auto | thin | none",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Scrollbars"
        ],
        initial: "auto",
        appliesto: "scrollingBoxes",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scrollbar-width"
      },
      "scroll-behavior": {
        syntax: "auto | smooth",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSSOM View"
        ],
        initial: "auto",
        appliesto: "scrollingBoxes",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-behavior"
      },
      "scroll-margin": {
        syntax: "<length>{1,4}",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin"
      },
      "scroll-margin-block": {
        syntax: "<length>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block"
      },
      "scroll-margin-block-start": {
        syntax: "<length>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start"
      },
      "scroll-margin-block-end": {
        syntax: "<length>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end"
      },
      "scroll-margin-bottom": {
        syntax: "<length>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom"
      },
      "scroll-margin-inline": {
        syntax: "<length>{1,2}",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline"
      },
      "scroll-margin-inline-start": {
        syntax: "<length>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start"
      },
      "scroll-margin-inline-end": {
        syntax: "<length>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end"
      },
      "scroll-margin-left": {
        syntax: "<length>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left"
      },
      "scroll-margin-right": {
        syntax: "<length>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right"
      },
      "scroll-margin-top": {
        syntax: "<length>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "0",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top"
      },
      "scroll-padding": {
        syntax: "[ auto | <length-percentage> ]{1,4}",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "relativeToTheScrollContainersScrollport",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "auto",
        appliesto: "scrollContainers",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding"
      },
      "scroll-padding-block": {
        syntax: "[ auto | <length-percentage> ]{1,2}",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "relativeToTheScrollContainersScrollport",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "auto",
        appliesto: "scrollContainers",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block"
      },
      "scroll-padding-block-start": {
        syntax: "auto | <length-percentage>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "relativeToTheScrollContainersScrollport",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "auto",
        appliesto: "scrollContainers",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start"
      },
      "scroll-padding-block-end": {
        syntax: "auto | <length-percentage>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "relativeToTheScrollContainersScrollport",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "auto",
        appliesto: "scrollContainers",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end"
      },
      "scroll-padding-bottom": {
        syntax: "auto | <length-percentage>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "relativeToTheScrollContainersScrollport",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "auto",
        appliesto: "scrollContainers",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom"
      },
      "scroll-padding-inline": {
        syntax: "[ auto | <length-percentage> ]{1,2}",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "relativeToTheScrollContainersScrollport",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "auto",
        appliesto: "scrollContainers",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline"
      },
      "scroll-padding-inline-start": {
        syntax: "auto | <length-percentage>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "relativeToTheScrollContainersScrollport",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "auto",
        appliesto: "scrollContainers",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start"
      },
      "scroll-padding-inline-end": {
        syntax: "auto | <length-percentage>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "relativeToTheScrollContainersScrollport",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "auto",
        appliesto: "scrollContainers",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end"
      },
      "scroll-padding-left": {
        syntax: "auto | <length-percentage>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "relativeToTheScrollContainersScrollport",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "auto",
        appliesto: "scrollContainers",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left"
      },
      "scroll-padding-right": {
        syntax: "auto | <length-percentage>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "relativeToTheScrollContainersScrollport",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "auto",
        appliesto: "scrollContainers",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right"
      },
      "scroll-padding-top": {
        syntax: "auto | <length-percentage>",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "relativeToTheScrollContainersScrollport",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "auto",
        appliesto: "scrollContainers",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top"
      },
      "scroll-snap-align": {
        syntax: "[ none | start | end | center ]{1,2}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align"
      },
      "scroll-snap-coordinate": {
        syntax: "none | <position>#",
        media: "interactive",
        inherited: false,
        animationType: "position",
        percentages: "referToBorderBox",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "uniqueOrder",
        status: "obsolete",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-coordinate"
      },
      "scroll-snap-destination": {
        syntax: "<position>",
        media: "interactive",
        inherited: false,
        animationType: "position",
        percentages: "relativeToScrollContainerPaddingBoxAxis",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "0px 0px",
        appliesto: "scrollContainers",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "uniqueOrder",
        status: "obsolete",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-destination"
      },
      "scroll-snap-points-x": {
        syntax: "none | repeat( <length-percentage> )",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "relativeToScrollContainerPaddingBoxAxis",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "none",
        appliesto: "scrollContainers",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "uniqueOrder",
        status: "obsolete",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-points-x"
      },
      "scroll-snap-points-y": {
        syntax: "none | repeat( <length-percentage> )",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "relativeToScrollContainerPaddingBoxAxis",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "none",
        appliesto: "scrollContainers",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "uniqueOrder",
        status: "obsolete",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-points-y"
      },
      "scroll-snap-stop": {
        syntax: "normal | always",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop"
      },
      "scroll-snap-type": {
        syntax: "none | [ x | y | block | inline | both ] [ mandatory | proximity ]?",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type"
      },
      "scroll-snap-type-x": {
        syntax: "none | mandatory | proximity",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "none",
        appliesto: "scrollContainers",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "obsolete",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type-x"
      },
      "scroll-snap-type-y": {
        syntax: "none | mandatory | proximity",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Scroll Snap"
        ],
        initial: "none",
        appliesto: "scrollContainers",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "obsolete",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type-y"
      },
      "shape-image-threshold": {
        syntax: "<alpha-value>",
        media: "visual",
        inherited: false,
        animationType: "number",
        percentages: "no",
        groups: [
          "CSS Shapes"
        ],
        initial: "0.0",
        appliesto: "floats",
        computed: "specifiedValueNumberClipped0To1",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold"
      },
      "shape-margin": {
        syntax: "<length-percentage>",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Shapes"
        ],
        initial: "0",
        appliesto: "floats",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/shape-margin"
      },
      "shape-outside": {
        syntax: "none | <shape-box> || <basic-shape> | <image>",
        media: "visual",
        inherited: false,
        animationType: "basicShapeOtherwiseNo",
        percentages: "no",
        groups: [
          "CSS Shapes"
        ],
        initial: "none",
        appliesto: "floats",
        computed: "asDefinedForBasicShapeWithAbsoluteURIOtherwiseAsSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/shape-outside"
      },
      "tab-size": {
        syntax: "<integer> | <length>",
        media: "visual",
        inherited: true,
        animationType: "length",
        percentages: "no",
        groups: [
          "CSS Text"
        ],
        initial: "8",
        appliesto: "blockContainers",
        computed: "specifiedIntegerOrAbsoluteLength",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/tab-size"
      },
      "table-layout": {
        syntax: "auto | fixed",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Table"
        ],
        initial: "auto",
        appliesto: "tableElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/table-layout"
      },
      "text-align": {
        syntax: "start | end | left | right | center | justify | match-parent",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text"
        ],
        initial: "startOrNamelessValueIfLTRRightIfRTL",
        appliesto: "blockContainers",
        computed: "asSpecifiedExceptMatchParent",
        order: "orderOfAppearance",
        alsoAppliesTo: [
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-align"
      },
      "text-align-last": {
        syntax: "auto | start | end | left | right | center | justify",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text"
        ],
        initial: "auto",
        appliesto: "blockContainers",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-align-last"
      },
      "text-combine-upright": {
        syntax: "none | all | [ digits <integer>? ]",
        media: "visual",
        inherited: true,
        animationType: "notAnimatable",
        percentages: "no",
        groups: [
          "CSS Writing Modes"
        ],
        initial: "none",
        appliesto: "nonReplacedInlineElements",
        computed: "keywordPlusIntegerIfDigits",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-combine-upright"
      },
      "text-decoration": {
        syntax: "<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>",
        media: "visual",
        inherited: false,
        animationType: [
          "text-decoration-color",
          "text-decoration-style",
          "text-decoration-line",
          "text-decoration-thickness"
        ],
        percentages: "no",
        groups: [
          "CSS Text Decoration"
        ],
        initial: [
          "text-decoration-color",
          "text-decoration-style",
          "text-decoration-line"
        ],
        appliesto: "allElements",
        computed: [
          "text-decoration-line",
          "text-decoration-style",
          "text-decoration-color",
          "text-decoration-thickness"
        ],
        order: "orderOfAppearance",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-decoration"
      },
      "text-decoration-color": {
        syntax: "<color>",
        media: "visual",
        inherited: false,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Text Decoration"
        ],
        initial: "currentcolor",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-decoration-color"
      },
      "text-decoration-line": {
        syntax: "none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text Decoration"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-decoration-line"
      },
      "text-decoration-skip": {
        syntax: "none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text Decoration"
        ],
        initial: "objects",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip"
      },
      "text-decoration-skip-ink": {
        syntax: "auto | all | none",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text Decoration"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink"
      },
      "text-decoration-style": {
        syntax: "solid | double | dotted | dashed | wavy",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text Decoration"
        ],
        initial: "solid",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-decoration-style"
      },
      "text-decoration-thickness": {
        syntax: "auto | from-font | <length> | <percentage> ",
        media: "visual",
        inherited: false,
        animationType: "byComputedValueType",
        percentages: "referToElementFontSize",
        groups: [
          "CSS Text Decoration"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness"
      },
      "text-emphasis": {
        syntax: "<'text-emphasis-style'> || <'text-emphasis-color'>",
        media: "visual",
        inherited: false,
        animationType: [
          "text-emphasis-color",
          "text-emphasis-style"
        ],
        percentages: "no",
        groups: [
          "CSS Text Decoration"
        ],
        initial: [
          "text-emphasis-style",
          "text-emphasis-color"
        ],
        appliesto: "allElements",
        computed: [
          "text-emphasis-style",
          "text-emphasis-color"
        ],
        order: "orderOfAppearance",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-emphasis"
      },
      "text-emphasis-color": {
        syntax: "<color>",
        media: "visual",
        inherited: false,
        animationType: "color",
        percentages: "no",
        groups: [
          "CSS Text Decoration"
        ],
        initial: "currentcolor",
        appliesto: "allElements",
        computed: "computedColor",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color"
      },
      "text-emphasis-position": {
        syntax: "[ over | under ] && [ right | left ]",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text Decoration"
        ],
        initial: "over right",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position"
      },
      "text-emphasis-style": {
        syntax: "none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text Decoration"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style"
      },
      "text-indent": {
        syntax: "<length-percentage> && hanging? && each-line?",
        media: "visual",
        inherited: true,
        animationType: "lpc",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Text"
        ],
        initial: "0",
        appliesto: "blockContainers",
        computed: "percentageOrAbsoluteLengthPlusKeywords",
        order: "lengthOrPercentageBeforeKeywords",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-indent"
      },
      "text-justify": {
        syntax: "auto | inter-character | inter-word | none",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text"
        ],
        initial: "auto",
        appliesto: "inlineLevelAndTableCellElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-justify"
      },
      "text-orientation": {
        syntax: "mixed | upright | sideways",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Writing Modes"
        ],
        initial: "mixed",
        appliesto: "allElementsExceptTableRowGroupsRowsColumnGroupsAndColumns",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-orientation"
      },
      "text-overflow": {
        syntax: "[ clip | ellipsis | <string> ]{1,2}",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Basic User Interface"
        ],
        initial: "clip",
        appliesto: "blockContainerElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-overflow"
      },
      "text-rendering": {
        syntax: "auto | optimizeSpeed | optimizeLegibility | geometricPrecision",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Miscellaneous"
        ],
        initial: "auto",
        appliesto: "textElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-rendering"
      },
      "text-shadow": {
        syntax: "none | <shadow-t>#",
        media: "visual",
        inherited: true,
        animationType: "shadowList",
        percentages: "no",
        groups: [
          "CSS Text Decoration"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "colorPlusThreeAbsoluteLengths",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-shadow"
      },
      "text-size-adjust": {
        syntax: "none | auto | <percentage>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "referToSizeOfFont",
        groups: [
          "CSS Text"
        ],
        initial: "autoForSmartphoneBrowsersSupportingInflation",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "experimental",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-size-adjust"
      },
      "text-transform": {
        syntax: "none | capitalize | uppercase | lowercase | full-width | full-size-kana",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text"
        ],
        initial: "none",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-transform"
      },
      "text-underline-offset": {
        syntax: "auto | <length> | <percentage> ",
        media: "visual",
        inherited: true,
        animationType: "byComputedValueType",
        percentages: "referToElementFontSize",
        groups: [
          "CSS Text Decoration"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-underline-offset"
      },
      "text-underline-position": {
        syntax: "auto | from-font | [ under || [ left | right ] ]",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text Decoration"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "orderOfAppearance",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/text-underline-position"
      },
      top: {
        syntax: "<length> | <percentage> | auto",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToContainingBlockHeight",
        groups: [
          "CSS Positioning"
        ],
        initial: "auto",
        appliesto: "positionedElements",
        computed: "lengthAbsolutePercentageAsSpecifiedOtherwiseAuto",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/top"
      },
      "touch-action": {
        syntax: "auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "Pointer Events"
        ],
        initial: "auto",
        appliesto: "allElementsExceptNonReplacedInlineElementsTableRowsColumnsRowColumnGroups",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/touch-action"
      },
      transform: {
        syntax: "none | <transform-list>",
        media: "visual",
        inherited: false,
        animationType: "transform",
        percentages: "referToSizeOfBoundingBox",
        groups: [
          "CSS Transforms"
        ],
        initial: "none",
        appliesto: "transformableElements",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "uniqueOrder",
        stacking: true,
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/transform"
      },
      "transform-box": {
        syntax: "content-box | border-box | fill-box | stroke-box | view-box",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Transforms"
        ],
        initial: "view-box",
        appliesto: "transformableElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/transform-box"
      },
      "transform-origin": {
        syntax: "[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?",
        media: "visual",
        inherited: false,
        animationType: "simpleListOfLpc",
        percentages: "referToSizeOfBoundingBox",
        groups: [
          "CSS Transforms"
        ],
        initial: "50% 50% 0",
        appliesto: "transformableElements",
        computed: "forLengthAbsoluteValueOtherwisePercentage",
        order: "oneOrTwoValuesLengthAbsoluteKeywordsPercentages",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/transform-origin"
      },
      "transform-style": {
        syntax: "flat | preserve-3d",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Transforms"
        ],
        initial: "flat",
        appliesto: "transformableElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        stacking: true,
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/transform-style"
      },
      transition: {
        syntax: "<single-transition>#",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Transitions"
        ],
        initial: [
          "transition-delay",
          "transition-duration",
          "transition-property",
          "transition-timing-function"
        ],
        appliesto: "allElementsAndPseudos",
        computed: [
          "transition-delay",
          "transition-duration",
          "transition-property",
          "transition-timing-function"
        ],
        order: "orderOfAppearance",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/transition"
      },
      "transition-delay": {
        syntax: "<time>#",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Transitions"
        ],
        initial: "0s",
        appliesto: "allElementsAndPseudos",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/transition-delay"
      },
      "transition-duration": {
        syntax: "<time>#",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Transitions"
        ],
        initial: "0s",
        appliesto: "allElementsAndPseudos",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/transition-duration"
      },
      "transition-property": {
        syntax: "none | <single-transition-property>#",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Transitions"
        ],
        initial: "all",
        appliesto: "allElementsAndPseudos",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/transition-property"
      },
      "transition-timing-function": {
        syntax: "<timing-function>#",
        media: "interactive",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Transitions"
        ],
        initial: "ease",
        appliesto: "allElementsAndPseudos",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/transition-timing-function"
      },
      translate: {
        syntax: "none | <length-percentage> [ <length-percentage> <length>? ]?",
        media: "visual",
        inherited: false,
        animationType: "transform",
        percentages: "referToSizeOfBoundingBox",
        groups: [
          "CSS Transforms"
        ],
        initial: "none",
        appliesto: "transformableElements",
        computed: "asSpecifiedRelativeToAbsoluteLengths",
        order: "perGrammar",
        stacking: true,
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/translate"
      },
      "unicode-bidi": {
        syntax: "normal | embed | isolate | bidi-override | isolate-override | plaintext",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Writing Modes"
        ],
        initial: "normal",
        appliesto: "allElementsSomeValuesNoEffectOnNonInlineElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/unicode-bidi"
      },
      "user-select": {
        syntax: "auto | text | none | contain | all",
        media: "visual",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Basic User Interface"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/user-select"
      },
      "vertical-align": {
        syntax: "baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>",
        media: "visual",
        inherited: false,
        animationType: "length",
        percentages: "referToLineHeight",
        groups: [
          "CSS Table"
        ],
        initial: "baseline",
        appliesto: "inlineLevelAndTableCellElements",
        computed: "absoluteLengthOrKeyword",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/vertical-align"
      },
      visibility: {
        syntax: "visible | hidden | collapse",
        media: "visual",
        inherited: true,
        animationType: "visibility",
        percentages: "no",
        groups: [
          "CSS Box Model"
        ],
        initial: "visible",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/visibility"
      },
      "white-space": {
        syntax: "normal | pre | nowrap | pre-wrap | pre-line | break-spaces",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/white-space"
      },
      widows: {
        syntax: "<integer>",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Fragmentation"
        ],
        initial: "2",
        appliesto: "blockContainerElements",
        computed: "asSpecified",
        order: "perGrammar",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/widows"
      },
      width: {
        syntax: "auto | <length> | <percentage> | min-content | max-content | fit-content(<length-percentage>)",
        media: "visual",
        inherited: false,
        animationType: "lpc",
        percentages: "referToWidthOfContainingBlock",
        groups: [
          "CSS Box Model"
        ],
        initial: "auto",
        appliesto: "allElementsButNonReplacedAndTableRows",
        computed: "percentageAutoOrAbsoluteLength",
        order: "lengthOrPercentageBeforeKeywordIfBothPresent",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/width"
      },
      "will-change": {
        syntax: "auto | <animateable-feature>#",
        media: "all",
        inherited: false,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Will Change"
        ],
        initial: "auto",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/will-change"
      },
      "word-break": {
        syntax: "normal | break-all | keep-all | break-word",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/word-break"
      },
      "word-spacing": {
        syntax: "normal | <length-percentage>",
        media: "visual",
        inherited: true,
        animationType: "length",
        percentages: "referToWidthOfAffectedGlyph",
        groups: [
          "CSS Text"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "optimumMinAndMaxValueOfAbsoluteLengthPercentageOrNormal",
        order: "uniqueOrder",
        alsoAppliesTo: [
          "::first-letter",
          "::first-line",
          "::placeholder"
        ],
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/word-spacing"
      },
      "word-wrap": {
        syntax: "normal | break-word",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Text"
        ],
        initial: "normal",
        appliesto: "nonReplacedInlineElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/overflow-wrap"
      },
      "writing-mode": {
        syntax: "horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr",
        media: "visual",
        inherited: true,
        animationType: "discrete",
        percentages: "no",
        groups: [
          "CSS Writing Modes"
        ],
        initial: "horizontal-tb",
        appliesto: "allElementsExceptTableRowColumnGroupsTableRowsColumns",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/writing-mode"
      },
      "z-index": {
        syntax: "auto | <integer>",
        media: "visual",
        inherited: false,
        animationType: "integer",
        percentages: "no",
        groups: [
          "CSS Positioning"
        ],
        initial: "auto",
        appliesto: "positionedElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        stacking: true,
        status: "standard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/z-index"
      },
      zoom: {
        syntax: "normal | reset | <number> | <percentage>",
        media: "visual",
        inherited: false,
        animationType: "integer",
        percentages: "no",
        groups: [
          "Microsoft Extensions"
        ],
        initial: "normal",
        appliesto: "allElements",
        computed: "asSpecified",
        order: "uniqueOrder",
        status: "nonstandard",
        mdn_url: "https://developer.mozilla.org/docs/Web/CSS/zoom"
      }
    };
  }
});

// node_modules/mdn-data/css/syntaxes.json
var require_syntaxes = __commonJS({
  "node_modules/mdn-data/css/syntaxes.json"(exports2, module2) {
    module2.exports = {
      "absolute-size": {
        syntax: "xx-small | x-small | small | medium | large | x-large | xx-large | xxx-large"
      },
      "alpha-value": {
        syntax: "<number> | <percentage>"
      },
      "angle-percentage": {
        syntax: "<angle> | <percentage>"
      },
      "angular-color-hint": {
        syntax: "<angle-percentage>"
      },
      "angular-color-stop": {
        syntax: "<color> && <color-stop-angle>?"
      },
      "angular-color-stop-list": {
        syntax: "[ <angular-color-stop> [, <angular-color-hint>]? ]# , <angular-color-stop>"
      },
      "animateable-feature": {
        syntax: "scroll-position | contents | <custom-ident>"
      },
      attachment: {
        syntax: "scroll | fixed | local"
      },
      "attr()": {
        syntax: "attr( <attr-name> <type-or-unit>? [, <attr-fallback> ]? )"
      },
      "attr-matcher": {
        syntax: "[ '~' | '|' | '^' | '$' | '*' ]? '='"
      },
      "attr-modifier": {
        syntax: "i | s"
      },
      "attribute-selector": {
        syntax: "'[' <wq-name> ']' | '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'"
      },
      "auto-repeat": {
        syntax: "repeat( [ auto-fill | auto-fit ] , [ <line-names>? <fixed-size> ]+ <line-names>? )"
      },
      "auto-track-list": {
        syntax: "[ <line-names>? [ <fixed-size> | <fixed-repeat> ] ]* <line-names>? <auto-repeat>\n[ <line-names>? [ <fixed-size> | <fixed-repeat> ] ]* <line-names>?"
      },
      "baseline-position": {
        syntax: "[ first | last ]? baseline"
      },
      "basic-shape": {
        syntax: "<inset()> | <circle()> | <ellipse()> | <polygon()> | <path()>"
      },
      "bg-image": {
        syntax: "none | <image>"
      },
      "bg-layer": {
        syntax: "<bg-image> || <bg-position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <box> || <box>"
      },
      "bg-position": {
        syntax: "[ [ left | center | right | top | bottom | <length-percentage> ] | [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ] | [ center | [ left | right ] <length-percentage>? ] && [ center | [ top | bottom ] <length-percentage>? ] ]"
      },
      "bg-size": {
        syntax: "[ <length-percentage> | auto ]{1,2} | cover | contain"
      },
      "blur()": {
        syntax: "blur( <length> )"
      },
      "blend-mode": {
        syntax: "normal | multiply | screen | overlay | darken | lighten | color-dodge | color-burn | hard-light | soft-light | difference | exclusion | hue | saturation | color | luminosity"
      },
      box: {
        syntax: "border-box | padding-box | content-box"
      },
      "brightness()": {
        syntax: "brightness( <number-percentage> )"
      },
      "calc()": {
        syntax: "calc( <calc-sum> )"
      },
      "calc-sum": {
        syntax: "<calc-product> [ [ '+' | '-' ] <calc-product> ]*"
      },
      "calc-product": {
        syntax: "<calc-value> [ '*' <calc-value> | '/' <number> ]*"
      },
      "calc-value": {
        syntax: "<number> | <dimension> | <percentage> | ( <calc-sum> )"
      },
      "cf-final-image": {
        syntax: "<image> | <color>"
      },
      "cf-mixing-image": {
        syntax: "<percentage>? && <image>"
      },
      "circle()": {
        syntax: "circle( [ <shape-radius> ]? [ at <position> ]? )"
      },
      "clamp()": {
        syntax: "clamp( <calc-sum>#{3} )"
      },
      "class-selector": {
        syntax: "'.' <ident-token>"
      },
      "clip-source": {
        syntax: "<url>"
      },
      color: {
        syntax: "<rgb()> | <rgba()> | <hsl()> | <hsla()> | <hex-color> | <named-color> | currentcolor | <deprecated-system-color>"
      },
      "color-stop": {
        syntax: "<color-stop-length> | <color-stop-angle>"
      },
      "color-stop-angle": {
        syntax: "<angle-percentage>{1,2}"
      },
      "color-stop-length": {
        syntax: "<length-percentage>{1,2}"
      },
      "color-stop-list": {
        syntax: "[ <linear-color-stop> [, <linear-color-hint>]? ]# , <linear-color-stop>"
      },
      combinator: {
        syntax: "'>' | '+' | '~' | [ '||' ]"
      },
      "common-lig-values": {
        syntax: "[ common-ligatures | no-common-ligatures ]"
      },
      "compat-auto": {
        syntax: "searchfield | textarea | push-button | slider-horizontal | checkbox | radio | square-button | menulist | listbox | meter | progress-bar | button"
      },
      "composite-style": {
        syntax: "clear | copy | source-over | source-in | source-out | source-atop | destination-over | destination-in | destination-out | destination-atop | xor"
      },
      "compositing-operator": {
        syntax: "add | subtract | intersect | exclude"
      },
      "compound-selector": {
        syntax: "[ <type-selector>? <subclass-selector>* [ <pseudo-element-selector> <pseudo-class-selector>* ]* ]!"
      },
      "compound-selector-list": {
        syntax: "<compound-selector>#"
      },
      "complex-selector": {
        syntax: "<compound-selector> [ <combinator>? <compound-selector> ]*"
      },
      "complex-selector-list": {
        syntax: "<complex-selector>#"
      },
      "conic-gradient()": {
        syntax: "conic-gradient( [ from <angle> ]? [ at <position> ]?, <angular-color-stop-list> )"
      },
      "contextual-alt-values": {
        syntax: "[ contextual | no-contextual ]"
      },
      "content-distribution": {
        syntax: "space-between | space-around | space-evenly | stretch"
      },
      "content-list": {
        syntax: "[ <string> | contents | <image> | <quote> | <target> | <leader()> ]+"
      },
      "content-position": {
        syntax: "center | start | end | flex-start | flex-end"
      },
      "content-replacement": {
        syntax: "<image>"
      },
      "contrast()": {
        syntax: "contrast( [ <number-percentage> ] )"
      },
      "counter()": {
        syntax: "counter( <custom-ident>, <counter-style>? )"
      },
      "counter-style": {
        syntax: "<counter-style-name> | symbols()"
      },
      "counter-style-name": {
        syntax: "<custom-ident>"
      },
      "counters()": {
        syntax: "counters( <custom-ident>, <string>, <counter-style>? )"
      },
      "cross-fade()": {
        syntax: "cross-fade( <cf-mixing-image> , <cf-final-image>? )"
      },
      "cubic-bezier-timing-function": {
        syntax: "ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number [0,1]>, <number>, <number [0,1]>, <number>)"
      },
      "deprecated-system-color": {
        syntax: "ActiveBorder | ActiveCaption | AppWorkspace | Background | ButtonFace | ButtonHighlight | ButtonShadow | ButtonText | CaptionText | GrayText | Highlight | HighlightText | InactiveBorder | InactiveCaption | InactiveCaptionText | InfoBackground | InfoText | Menu | MenuText | Scrollbar | ThreeDDarkShadow | ThreeDFace | ThreeDHighlight | ThreeDLightShadow | ThreeDShadow | Window | WindowFrame | WindowText"
      },
      "discretionary-lig-values": {
        syntax: "[ discretionary-ligatures | no-discretionary-ligatures ]"
      },
      "display-box": {
        syntax: "contents | none"
      },
      "display-inside": {
        syntax: "flow | flow-root | table | flex | grid | ruby"
      },
      "display-internal": {
        syntax: "table-row-group | table-header-group | table-footer-group | table-row | table-cell | table-column-group | table-column | table-caption | ruby-base | ruby-text | ruby-base-container | ruby-text-container"
      },
      "display-legacy": {
        syntax: "inline-block | inline-list-item | inline-table | inline-flex | inline-grid"
      },
      "display-listitem": {
        syntax: "<display-outside>? && [ flow | flow-root ]? && list-item"
      },
      "display-outside": {
        syntax: "block | inline | run-in"
      },
      "drop-shadow()": {
        syntax: "drop-shadow( <length>{2,3} <color>? )"
      },
      "east-asian-variant-values": {
        syntax: "[ jis78 | jis83 | jis90 | jis04 | simplified | traditional ]"
      },
      "east-asian-width-values": {
        syntax: "[ full-width | proportional-width ]"
      },
      "element()": {
        syntax: "element( <id-selector> )"
      },
      "ellipse()": {
        syntax: "ellipse( [ <shape-radius>{2} ]? [ at <position> ]? )"
      },
      "ending-shape": {
        syntax: "circle | ellipse"
      },
      "env()": {
        syntax: "env( <custom-ident> , <declaration-value>? )"
      },
      "explicit-track-list": {
        syntax: "[ <line-names>? <track-size> ]+ <line-names>?"
      },
      "family-name": {
        syntax: "<string> | <custom-ident>+"
      },
      "feature-tag-value": {
        syntax: "<string> [ <integer> | on | off ]?"
      },
      "feature-type": {
        syntax: "@stylistic | @historical-forms | @styleset | @character-variant | @swash | @ornaments | @annotation"
      },
      "feature-value-block": {
        syntax: "<feature-type> '{' <feature-value-declaration-list> '}'"
      },
      "feature-value-block-list": {
        syntax: "<feature-value-block>+"
      },
      "feature-value-declaration": {
        syntax: "<custom-ident>: <integer>+;"
      },
      "feature-value-declaration-list": {
        syntax: "<feature-value-declaration>"
      },
      "feature-value-name": {
        syntax: "<custom-ident>"
      },
      "fill-rule": {
        syntax: "nonzero | evenodd"
      },
      "filter-function": {
        syntax: "<blur()> | <brightness()> | <contrast()> | <drop-shadow()> | <grayscale()> | <hue-rotate()> | <invert()> | <opacity()> | <saturate()> | <sepia()>"
      },
      "filter-function-list": {
        syntax: "[ <filter-function> | <url> ]+"
      },
      "final-bg-layer": {
        syntax: "<'background-color'> || <bg-image> || <bg-position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <box> || <box>"
      },
      "fit-content()": {
        syntax: "fit-content( [ <length> | <percentage> ] )"
      },
      "fixed-breadth": {
        syntax: "<length-percentage>"
      },
      "fixed-repeat": {
        syntax: "repeat( [ <positive-integer> ] , [ <line-names>? <fixed-size> ]+ <line-names>? )"
      },
      "fixed-size": {
        syntax: "<fixed-breadth> | minmax( <fixed-breadth> , <track-breadth> ) | minmax( <inflexible-breadth> , <fixed-breadth> )"
      },
      "font-stretch-absolute": {
        syntax: "normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | <percentage>"
      },
      "font-variant-css21": {
        syntax: "[ normal | small-caps ]"
      },
      "font-weight-absolute": {
        syntax: "normal | bold | <number [1,1000]>"
      },
      "frequency-percentage": {
        syntax: "<frequency> | <percentage>"
      },
      "general-enclosed": {
        syntax: "[ <function-token> <any-value> ) ] | ( <ident> <any-value> )"
      },
      "generic-family": {
        syntax: "serif | sans-serif | cursive | fantasy | monospace"
      },
      "generic-name": {
        syntax: "serif | sans-serif | cursive | fantasy | monospace"
      },
      "geometry-box": {
        syntax: "<shape-box> | fill-box | stroke-box | view-box"
      },
      gradient: {
        syntax: "<linear-gradient()> | <repeating-linear-gradient()> | <radial-gradient()> | <repeating-radial-gradient()> | <conic-gradient()>"
      },
      "grayscale()": {
        syntax: "grayscale( <number-percentage> )"
      },
      "grid-line": {
        syntax: "auto | <custom-ident> | [ <integer> && <custom-ident>? ] | [ span && [ <integer> || <custom-ident> ] ]"
      },
      "historical-lig-values": {
        syntax: "[ historical-ligatures | no-historical-ligatures ]"
      },
      "hsl()": {
        syntax: "hsl( <hue> <percentage> <percentage> [ / <alpha-value> ]? ) | hsl( <hue>, <percentage>, <percentage>, <alpha-value>? )"
      },
      "hsla()": {
        syntax: "hsla( <hue> <percentage> <percentage> [ / <alpha-value> ]? ) | hsla( <hue>, <percentage>, <percentage>, <alpha-value>? )"
      },
      hue: {
        syntax: "<number> | <angle>"
      },
      "hue-rotate()": {
        syntax: "hue-rotate( <angle> )"
      },
      "id-selector": {
        syntax: "<hash-token>"
      },
      image: {
        syntax: "<url> | <image()> | <image-set()> | <element()> | <paint()> | <cross-fade()> | <gradient>"
      },
      "image()": {
        syntax: "image( <image-tags>? [ <image-src>? , <color>? ]! )"
      },
      "image-set()": {
        syntax: "image-set( <image-set-option># )"
      },
      "image-set-option": {
        syntax: "[ <image> | <string> ] <resolution>"
      },
      "image-src": {
        syntax: "<url> | <string>"
      },
      "image-tags": {
        syntax: "ltr | rtl"
      },
      "inflexible-breadth": {
        syntax: "<length> | <percentage> | min-content | max-content | auto"
      },
      "inset()": {
        syntax: "inset( <length-percentage>{1,4} [ round <'border-radius'> ]? )"
      },
      "invert()": {
        syntax: "invert( <number-percentage> )"
      },
      "keyframes-name": {
        syntax: "<custom-ident> | <string>"
      },
      "keyframe-block": {
        syntax: "<keyframe-selector># {\n  <declaration-list>\n}"
      },
      "keyframe-block-list": {
        syntax: "<keyframe-block>+"
      },
      "keyframe-selector": {
        syntax: "from | to | <percentage>"
      },
      "leader()": {
        syntax: "leader( <leader-type> )"
      },
      "leader-type": {
        syntax: "dotted | solid | space | <string>"
      },
      "length-percentage": {
        syntax: "<length> | <percentage>"
      },
      "line-names": {
        syntax: "'[' <custom-ident>* ']'"
      },
      "line-name-list": {
        syntax: "[ <line-names> | <name-repeat> ]+"
      },
      "line-style": {
        syntax: "none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset"
      },
      "line-width": {
        syntax: "<length> | thin | medium | thick"
      },
      "linear-color-hint": {
        syntax: "<length-percentage>"
      },
      "linear-color-stop": {
        syntax: "<color> <color-stop-length>?"
      },
      "linear-gradient()": {
        syntax: "linear-gradient( [ <angle> | to <side-or-corner> ]? , <color-stop-list> )"
      },
      "mask-layer": {
        syntax: "<mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || <geometry-box> || [ <geometry-box> | no-clip ] || <compositing-operator> || <masking-mode>"
      },
      "mask-position": {
        syntax: "[ <length-percentage> | left | center | right ] [ <length-percentage> | top | center | bottom ]?"
      },
      "mask-reference": {
        syntax: "none | <image> | <mask-source>"
      },
      "mask-source": {
        syntax: "<url>"
      },
      "masking-mode": {
        syntax: "alpha | luminance | match-source"
      },
      "matrix()": {
        syntax: "matrix( <number>#{6} )"
      },
      "matrix3d()": {
        syntax: "matrix3d( <number>#{16} )"
      },
      "max()": {
        syntax: "max( <calc-sum># )"
      },
      "media-and": {
        syntax: "<media-in-parens> [ and <media-in-parens> ]+"
      },
      "media-condition": {
        syntax: "<media-not> | <media-and> | <media-or> | <media-in-parens>"
      },
      "media-condition-without-or": {
        syntax: "<media-not> | <media-and> | <media-in-parens>"
      },
      "media-feature": {
        syntax: "( [ <mf-plain> | <mf-boolean> | <mf-range> ] )"
      },
      "media-in-parens": {
        syntax: "( <media-condition> ) | <media-feature> | <general-enclosed>"
      },
      "media-not": {
        syntax: "not <media-in-parens>"
      },
      "media-or": {
        syntax: "<media-in-parens> [ or <media-in-parens> ]+"
      },
      "media-query": {
        syntax: "<media-condition> | [ not | only ]? <media-type> [ and <media-condition-without-or> ]?"
      },
      "media-query-list": {
        syntax: "<media-query>#"
      },
      "media-type": {
        syntax: "<ident>"
      },
      "mf-boolean": {
        syntax: "<mf-name>"
      },
      "mf-name": {
        syntax: "<ident>"
      },
      "mf-plain": {
        syntax: "<mf-name> : <mf-value>"
      },
      "mf-range": {
        syntax: "<mf-name> [ '<' | '>' ]? '='? <mf-value>\n| <mf-value> [ '<' | '>' ]? '='? <mf-name>\n| <mf-value> '<' '='? <mf-name> '<' '='? <mf-value>\n| <mf-value> '>' '='? <mf-name> '>' '='? <mf-value>"
      },
      "mf-value": {
        syntax: "<number> | <dimension> | <ident> | <ratio>"
      },
      "min()": {
        syntax: "min( <calc-sum># )"
      },
      "minmax()": {
        syntax: "minmax( [ <length> | <percentage> | min-content | max-content | auto ] , [ <length> | <percentage> | <flex> | min-content | max-content | auto ] )"
      },
      "named-color": {
        syntax: "transparent | aliceblue | antiquewhite | aqua | aquamarine | azure | beige | bisque | black | blanchedalmond | blue | blueviolet | brown | burlywood | cadetblue | chartreuse | chocolate | coral | cornflowerblue | cornsilk | crimson | cyan | darkblue | darkcyan | darkgoldenrod | darkgray | darkgreen | darkgrey | darkkhaki | darkmagenta | darkolivegreen | darkorange | darkorchid | darkred | darksalmon | darkseagreen | darkslateblue | darkslategray | darkslategrey | darkturquoise | darkviolet | deeppink | deepskyblue | dimgray | dimgrey | dodgerblue | firebrick | floralwhite | forestgreen | fuchsia | gainsboro | ghostwhite | gold | goldenrod | gray | green | greenyellow | grey | honeydew | hotpink | indianred | indigo | ivory | khaki | lavender | lavenderblush | lawngreen | lemonchiffon | lightblue | lightcoral | lightcyan | lightgoldenrodyellow | lightgray | lightgreen | lightgrey | lightpink | lightsalmon | lightseagreen | lightskyblue | lightslategray | lightslategrey | lightsteelblue | lightyellow | lime | limegreen | linen | magenta | maroon | mediumaquamarine | mediumblue | mediumorchid | mediumpurple | mediumseagreen | mediumslateblue | mediumspringgreen | mediumturquoise | mediumvioletred | midnightblue | mintcream | mistyrose | moccasin | navajowhite | navy | oldlace | olive | olivedrab | orange | orangered | orchid | palegoldenrod | palegreen | paleturquoise | palevioletred | papayawhip | peachpuff | peru | pink | plum | powderblue | purple | rebeccapurple | red | rosybrown | royalblue | saddlebrown | salmon | sandybrown | seagreen | seashell | sienna | silver | skyblue | slateblue | slategray | slategrey | snow | springgreen | steelblue | tan | teal | thistle | tomato | turquoise | violet | wheat | white | whitesmoke | yellow | yellowgreen"
      },
      "namespace-prefix": {
        syntax: "<ident>"
      },
      "ns-prefix": {
        syntax: "[ <ident-token> | '*' ]? '|'"
      },
      "number-percentage": {
        syntax: "<number> | <percentage>"
      },
      "numeric-figure-values": {
        syntax: "[ lining-nums | oldstyle-nums ]"
      },
      "numeric-fraction-values": {
        syntax: "[ diagonal-fractions | stacked-fractions ]"
      },
      "numeric-spacing-values": {
        syntax: "[ proportional-nums | tabular-nums ]"
      },
      nth: {
        syntax: "<an-plus-b> | even | odd"
      },
      "opacity()": {
        syntax: "opacity( [ <number-percentage> ] )"
      },
      "overflow-position": {
        syntax: "unsafe | safe"
      },
      "outline-radius": {
        syntax: "<length> | <percentage>"
      },
      "page-body": {
        syntax: "<declaration>? [ ; <page-body> ]? | <page-margin-box> <page-body>"
      },
      "page-margin-box": {
        syntax: "<page-margin-box-type> '{' <declaration-list> '}'"
      },
      "page-margin-box-type": {
        syntax: "@top-left-corner | @top-left | @top-center | @top-right | @top-right-corner | @bottom-left-corner | @bottom-left | @bottom-center | @bottom-right | @bottom-right-corner | @left-top | @left-middle | @left-bottom | @right-top | @right-middle | @right-bottom"
      },
      "page-selector-list": {
        syntax: "[ <page-selector># ]?"
      },
      "page-selector": {
        syntax: "<pseudo-page>+ | <ident> <pseudo-page>*"
      },
      "path()": {
        syntax: "path( [ <fill-rule>, ]? <string> )"
      },
      "paint()": {
        syntax: "paint( <ident>, <declaration-value>? )"
      },
      "perspective()": {
        syntax: "perspective( <length> )"
      },
      "polygon()": {
        syntax: "polygon( <fill-rule>? , [ <length-percentage> <length-percentage> ]# )"
      },
      position: {
        syntax: "[ [ left | center | right ] || [ top | center | bottom ] | [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ]? | [ [ left | right ] <length-percentage> ] && [ [ top | bottom ] <length-percentage> ] ]"
      },
      "pseudo-class-selector": {
        syntax: "':' <ident-token> | ':' <function-token> <any-value> ')'"
      },
      "pseudo-element-selector": {
        syntax: "':' <pseudo-class-selector>"
      },
      "pseudo-page": {
        syntax: ": [ left | right | first | blank ]"
      },
      quote: {
        syntax: "open-quote | close-quote | no-open-quote | no-close-quote"
      },
      "radial-gradient()": {
        syntax: "radial-gradient( [ <ending-shape> || <size> ]? [ at <position> ]? , <color-stop-list> )"
      },
      "relative-selector": {
        syntax: "<combinator>? <complex-selector>"
      },
      "relative-selector-list": {
        syntax: "<relative-selector>#"
      },
      "relative-size": {
        syntax: "larger | smaller"
      },
      "repeat-style": {
        syntax: "repeat-x | repeat-y | [ repeat | space | round | no-repeat ]{1,2}"
      },
      "repeating-linear-gradient()": {
        syntax: "repeating-linear-gradient( [ <angle> | to <side-or-corner> ]? , <color-stop-list> )"
      },
      "repeating-radial-gradient()": {
        syntax: "repeating-radial-gradient( [ <ending-shape> || <size> ]? [ at <position> ]? , <color-stop-list> )"
      },
      "rgb()": {
        syntax: "rgb( <percentage>{3} [ / <alpha-value> ]? ) | rgb( <number>{3} [ / <alpha-value> ]? ) | rgb( <percentage>#{3} , <alpha-value>? ) | rgb( <number>#{3} , <alpha-value>? )"
      },
      "rgba()": {
        syntax: "rgba( <percentage>{3} [ / <alpha-value> ]? ) | rgba( <number>{3} [ / <alpha-value> ]? ) | rgba( <percentage>#{3} , <alpha-value>? ) | rgba( <number>#{3} , <alpha-value>? )"
      },
      "rotate()": {
        syntax: "rotate( [ <angle> | <zero> ] )"
      },
      "rotate3d()": {
        syntax: "rotate3d( <number> , <number> , <number> , [ <angle> | <zero> ] )"
      },
      "rotateX()": {
        syntax: "rotateX( [ <angle> | <zero> ] )"
      },
      "rotateY()": {
        syntax: "rotateY( [ <angle> | <zero> ] )"
      },
      "rotateZ()": {
        syntax: "rotateZ( [ <angle> | <zero> ] )"
      },
      "saturate()": {
        syntax: "saturate( <number-percentage> )"
      },
      "scale()": {
        syntax: "scale( <number> , <number>? )"
      },
      "scale3d()": {
        syntax: "scale3d( <number> , <number> , <number> )"
      },
      "scaleX()": {
        syntax: "scaleX( <number> )"
      },
      "scaleY()": {
        syntax: "scaleY( <number> )"
      },
      "scaleZ()": {
        syntax: "scaleZ( <number> )"
      },
      "self-position": {
        syntax: "center | start | end | self-start | self-end | flex-start | flex-end"
      },
      "shape-radius": {
        syntax: "<length-percentage> | closest-side | farthest-side"
      },
      "skew()": {
        syntax: "skew( [ <angle> | <zero> ] , [ <angle> | <zero> ]? )"
      },
      "skewX()": {
        syntax: "skewX( [ <angle> | <zero> ] )"
      },
      "skewY()": {
        syntax: "skewY( [ <angle> | <zero> ] )"
      },
      "sepia()": {
        syntax: "sepia( <number-percentage> )"
      },
      shadow: {
        syntax: "inset? && <length>{2,4} && <color>?"
      },
      "shadow-t": {
        syntax: "[ <length>{2,3} && <color>? ]"
      },
      shape: {
        syntax: "rect(<top>, <right>, <bottom>, <left>)"
      },
      "shape-box": {
        syntax: "<box> | margin-box"
      },
      "side-or-corner": {
        syntax: "[ left | right ] || [ top | bottom ]"
      },
      "single-animation": {
        syntax: "<time> || <timing-function> || <time> || <single-animation-iteration-count> || <single-animation-direction> || <single-animation-fill-mode> || <single-animation-play-state> || [ none | <keyframes-name> ]"
      },
      "single-animation-direction": {
        syntax: "normal | reverse | alternate | alternate-reverse"
      },
      "single-animation-fill-mode": {
        syntax: "none | forwards | backwards | both"
      },
      "single-animation-iteration-count": {
        syntax: "infinite | <number>"
      },
      "single-animation-play-state": {
        syntax: "running | paused"
      },
      "single-transition": {
        syntax: "[ none | <single-transition-property> ] || <time> || <timing-function> || <time>"
      },
      "single-transition-property": {
        syntax: "all | <custom-ident>"
      },
      size: {
        syntax: "closest-side | farthest-side | closest-corner | farthest-corner | <length> | <length-percentage>{2}"
      },
      "step-position": {
        syntax: "jump-start | jump-end | jump-none | jump-both | start | end"
      },
      "step-timing-function": {
        syntax: "step-start | step-end | steps(<integer>[, <step-position>]?)"
      },
      "subclass-selector": {
        syntax: "<id-selector> | <class-selector> | <attribute-selector> | <pseudo-class-selector>"
      },
      "supports-condition": {
        syntax: "not <supports-in-parens> | <supports-in-parens> [ and <supports-in-parens> ]* | <supports-in-parens> [ or <supports-in-parens> ]*"
      },
      "supports-in-parens": {
        syntax: "( <supports-condition> ) | <supports-feature> | <general-enclosed>"
      },
      "supports-feature": {
        syntax: "<supports-decl> | <supports-selector-fn>"
      },
      "supports-decl": {
        syntax: "( <declaration> )"
      },
      "supports-selector-fn": {
        syntax: "selector( <complex-selector> )"
      },
      symbol: {
        syntax: "<string> | <image> | <custom-ident>"
      },
      target: {
        syntax: "<target-counter()> | <target-counters()> | <target-text()>"
      },
      "target-counter()": {
        syntax: "target-counter( [ <string> | <url> ] , <custom-ident> , <counter-style>? )"
      },
      "target-counters()": {
        syntax: "target-counters( [ <string> | <url> ] , <custom-ident> , <string> , <counter-style>? )"
      },
      "target-text()": {
        syntax: "target-text( [ <string> | <url> ] , [ content | before | after | first-letter ]? )"
      },
      "time-percentage": {
        syntax: "<time> | <percentage>"
      },
      "timing-function": {
        syntax: "linear | <cubic-bezier-timing-function> | <step-timing-function>"
      },
      "track-breadth": {
        syntax: "<length-percentage> | <flex> | min-content | max-content | auto"
      },
      "track-list": {
        syntax: "[ <line-names>? [ <track-size> | <track-repeat> ] ]+ <line-names>?"
      },
      "track-repeat": {
        syntax: "repeat( [ <positive-integer> ] , [ <line-names>? <track-size> ]+ <line-names>? )"
      },
      "track-size": {
        syntax: "<track-breadth> | minmax( <inflexible-breadth> , <track-breadth> ) | fit-content( [ <length> | <percentage> ] )"
      },
      "transform-function": {
        syntax: "<matrix()> | <translate()> | <translateX()> | <translateY()> | <scale()> | <scaleX()> | <scaleY()> | <rotate()> | <skew()> | <skewX()> | <skewY()> | <matrix3d()> | <translate3d()> | <translateZ()> | <scale3d()> | <scaleZ()> | <rotate3d()> | <rotateX()> | <rotateY()> | <rotateZ()> | <perspective()>"
      },
      "transform-list": {
        syntax: "<transform-function>+"
      },
      "translate()": {
        syntax: "translate( <length-percentage> , <length-percentage>? )"
      },
      "translate3d()": {
        syntax: "translate3d( <length-percentage> , <length-percentage> , <length> )"
      },
      "translateX()": {
        syntax: "translateX( <length-percentage> )"
      },
      "translateY()": {
        syntax: "translateY( <length-percentage> )"
      },
      "translateZ()": {
        syntax: "translateZ( <length> )"
      },
      "type-or-unit": {
        syntax: "string | color | url | integer | number | length | angle | time | frequency | cap | ch | em | ex | ic | lh | rlh | rem | vb | vi | vw | vh | vmin | vmax | mm | Q | cm | in | pt | pc | px | deg | grad | rad | turn | ms | s | Hz | kHz | %"
      },
      "type-selector": {
        syntax: "<wq-name> | <ns-prefix>? '*'"
      },
      "var()": {
        syntax: "var( <custom-property-name> , <declaration-value>? )"
      },
      "viewport-length": {
        syntax: "auto | <length-percentage>"
      },
      "wq-name": {
        syntax: "<ns-prefix>? <ident-token>"
      }
    };
  }
});

// node_modules/css-tree/data/patch.json
var require_patch = __commonJS({
  "node_modules/css-tree/data/patch.json"(exports2, module2) {
    module2.exports = {
      atrules: {
        charset: {
          prelude: "<string>"
        },
        "font-face": {
          descriptors: {
            "unicode-range": {
              comment: "replaces <unicode-range>, an old production name",
              syntax: "<urange>#"
            }
          }
        }
      },
      properties: {
        "-moz-background-clip": {
          comment: "deprecated syntax in old Firefox, https://developer.mozilla.org/en/docs/Web/CSS/background-clip",
          syntax: "padding | border"
        },
        "-moz-border-radius-bottomleft": {
          comment: "https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius",
          syntax: "<'border-bottom-left-radius'>"
        },
        "-moz-border-radius-bottomright": {
          comment: "https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius",
          syntax: "<'border-bottom-right-radius'>"
        },
        "-moz-border-radius-topleft": {
          comment: "https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius",
          syntax: "<'border-top-left-radius'>"
        },
        "-moz-border-radius-topright": {
          comment: "https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius",
          syntax: "<'border-bottom-right-radius'>"
        },
        "-moz-control-character-visibility": {
          comment: "firefox specific keywords, https://bugzilla.mozilla.org/show_bug.cgi?id=947588",
          syntax: "visible | hidden"
        },
        "-moz-osx-font-smoothing": {
          comment: "misssed old syntax https://developer.mozilla.org/en-US/docs/Web/CSS/font-smooth",
          syntax: "auto | grayscale"
        },
        "-moz-user-select": {
          comment: "https://developer.mozilla.org/en-US/docs/Web/CSS/user-select",
          syntax: "none | text | all | -moz-none"
        },
        "-ms-flex-align": {
          comment: "misssed old syntax implemented in IE, https://www.w3.org/TR/2012/WD-css3-flexbox-20120322/#flex-align",
          syntax: "start | end | center | baseline | stretch"
        },
        "-ms-flex-item-align": {
          comment: "misssed old syntax implemented in IE, https://www.w3.org/TR/2012/WD-css3-flexbox-20120322/#flex-align",
          syntax: "auto | start | end | center | baseline | stretch"
        },
        "-ms-flex-line-pack": {
          comment: "misssed old syntax implemented in IE, https://www.w3.org/TR/2012/WD-css3-flexbox-20120322/#flex-line-pack",
          syntax: "start | end | center | justify | distribute | stretch"
        },
        "-ms-flex-negative": {
          comment: "misssed old syntax implemented in IE; TODO: find references for comfirmation",
          syntax: "<'flex-shrink'>"
        },
        "-ms-flex-pack": {
          comment: "misssed old syntax implemented in IE, https://www.w3.org/TR/2012/WD-css3-flexbox-20120322/#flex-pack",
          syntax: "start | end | center | justify | distribute"
        },
        "-ms-flex-order": {
          comment: "misssed old syntax implemented in IE; https://msdn.microsoft.com/en-us/library/jj127303(v=vs.85).aspx",
          syntax: "<integer>"
        },
        "-ms-flex-positive": {
          comment: "misssed old syntax implemented in IE; TODO: find references for comfirmation",
          syntax: "<'flex-grow'>"
        },
        "-ms-flex-preferred-size": {
          comment: "misssed old syntax implemented in IE; TODO: find references for comfirmation",
          syntax: "<'flex-basis'>"
        },
        "-ms-interpolation-mode": {
          comment: "https://msdn.microsoft.com/en-us/library/ff521095(v=vs.85).aspx",
          syntax: "nearest-neighbor | bicubic"
        },
        "-ms-grid-column-align": {
          comment: "add this property first since it uses as fallback for flexbox, https://msdn.microsoft.com/en-us/library/windows/apps/hh466338.aspx",
          syntax: "start | end | center | stretch"
        },
        "-ms-grid-row-align": {
          comment: "add this property first since it uses as fallback for flexbox, https://msdn.microsoft.com/en-us/library/windows/apps/hh466348.aspx",
          syntax: "start | end | center | stretch"
        },
        "-ms-hyphenate-limit-last": {
          comment: "misssed old syntax implemented in IE; https://www.w3.org/TR/css-text-4/#hyphenate-line-limits",
          syntax: "none | always | column | page | spread"
        },
        "-webkit-appearance": {
          comment: "webkit specific keywords",
          references: [
            "http://css-infos.net/property/-webkit-appearance"
          ],
          syntax: "none | button | button-bevel | caps-lock-indicator | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbargripper-horizontal | scrollbargripper-vertical | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button"
        },
        "-webkit-background-clip": {
          comment: "https://developer.mozilla.org/en/docs/Web/CSS/background-clip",
          syntax: "[ <box> | border | padding | content | text ]#"
        },
        "-webkit-column-break-after": {
          comment: "added, http://help.dottoro.com/lcrthhhv.php",
          syntax: "always | auto | avoid"
        },
        "-webkit-column-break-before": {
          comment: "added, http://help.dottoro.com/lcxquvkf.php",
          syntax: "always | auto | avoid"
        },
        "-webkit-column-break-inside": {
          comment: "added, http://help.dottoro.com/lclhnthl.php",
          syntax: "always | auto | avoid"
        },
        "-webkit-font-smoothing": {
          comment: "https://developer.mozilla.org/en-US/docs/Web/CSS/font-smooth",
          syntax: "auto | none | antialiased | subpixel-antialiased"
        },
        "-webkit-mask-box-image": {
          comment: "missed; https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-mask-box-image",
          syntax: "[ <url> | <gradient> | none ] [ <length-percentage>{4} <-webkit-mask-box-repeat>{2} ]?"
        },
        "-webkit-print-color-adjust": {
          comment: "missed",
          references: [
            "https://developer.mozilla.org/en/docs/Web/CSS/-webkit-print-color-adjust"
          ],
          syntax: "economy | exact"
        },
        "-webkit-text-security": {
          comment: "missed; http://help.dottoro.com/lcbkewgt.php",
          syntax: "none | circle | disc | square"
        },
        "-webkit-user-drag": {
          comment: "missed; http://help.dottoro.com/lcbixvwm.php",
          syntax: "none | element | auto"
        },
        "-webkit-user-select": {
          comment: "auto is supported by old webkit, https://developer.mozilla.org/en-US/docs/Web/CSS/user-select",
          syntax: "auto | none | text | all"
        },
        "alignment-baseline": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/text.html#AlignmentBaselineProperty"
          ],
          syntax: "auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical"
        },
        "baseline-shift": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/text.html#BaselineShiftProperty"
          ],
          syntax: "baseline | sub | super | <svg-length>"
        },
        behavior: {
          comment: "added old IE property https://msdn.microsoft.com/en-us/library/ms530723(v=vs.85).aspx",
          syntax: "<url>+"
        },
        "clip-rule": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/masking.html#ClipRuleProperty"
          ],
          syntax: "nonzero | evenodd"
        },
        cue: {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "<'cue-before'> <'cue-after'>?"
        },
        "cue-after": {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "<url> <decibel>? | none"
        },
        "cue-before": {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "<url> <decibel>? | none"
        },
        cursor: {
          comment: "added legacy keywords: hand, -webkit-grab. -webkit-grabbing, -webkit-zoom-in, -webkit-zoom-out, -moz-grab, -moz-grabbing, -moz-zoom-in, -moz-zoom-out",
          references: [
            "https://www.sitepoint.com/css3-cursor-styles/"
          ],
          syntax: "[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing | hand | -webkit-grab | -webkit-grabbing | -webkit-zoom-in | -webkit-zoom-out | -moz-grab | -moz-grabbing | -moz-zoom-in | -moz-zoom-out ] ]"
        },
        display: {
          comment: "extended with -ms-flexbox",
          syntax: "| <-non-standard-display>"
        },
        position: {
          comment: "extended with -webkit-sticky",
          syntax: "| -webkit-sticky"
        },
        "dominant-baseline": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/text.html#DominantBaselineProperty"
          ],
          syntax: "auto | use-script | no-change | reset-size | ideographic | alphabetic | hanging | mathematical | central | middle | text-after-edge | text-before-edge"
        },
        "image-rendering": {
          comment: "extended with <-non-standard-image-rendering>, added SVG keywords optimizeSpeed and optimizeQuality",
          references: [
            "https://developer.mozilla.org/en/docs/Web/CSS/image-rendering",
            "https://www.w3.org/TR/SVG/painting.html#ImageRenderingProperty"
          ],
          syntax: "| optimizeSpeed | optimizeQuality | <-non-standard-image-rendering>"
        },
        fill: {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#FillProperty"
          ],
          syntax: "<paint>"
        },
        "fill-opacity": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#FillProperty"
          ],
          syntax: "<number-zero-one>"
        },
        "fill-rule": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#FillProperty"
          ],
          syntax: "nonzero | evenodd"
        },
        filter: {
          comment: "extend with IE legacy syntaxes",
          syntax: "| <-ms-filter-function-list>"
        },
        "glyph-orientation-horizontal": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/text.html#GlyphOrientationHorizontalProperty"
          ],
          syntax: "<angle>"
        },
        "glyph-orientation-vertical": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/text.html#GlyphOrientationVerticalProperty"
          ],
          syntax: "<angle>"
        },
        kerning: {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/text.html#KerningProperty"
          ],
          syntax: "auto | <svg-length>"
        },
        "letter-spacing": {
          comment: "fix syntax <length> -> <length-percentage>",
          references: [
            "https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/letter-spacing"
          ],
          syntax: "normal | <length-percentage>"
        },
        marker: {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#MarkerProperties"
          ],
          syntax: "none | <url>"
        },
        "marker-end": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#MarkerProperties"
          ],
          syntax: "none | <url>"
        },
        "marker-mid": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#MarkerProperties"
          ],
          syntax: "none | <url>"
        },
        "marker-start": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#MarkerProperties"
          ],
          syntax: "none | <url>"
        },
        "max-width": {
          comment: "fix auto -> none (https://github.com/mdn/data/pull/431); extend by non-standard width keywords https://developer.mozilla.org/en-US/docs/Web/CSS/max-width",
          syntax: "none | <length-percentage> | min-content | max-content | fit-content(<length-percentage>) | <-non-standard-width>"
        },
        width: {
          comment: "per spec fit-content should be a function, however browsers are supporting it as a keyword (https://github.com/csstree/stylelint-validator/issues/29)",
          syntax: "| fit-content | -moz-fit-content | -webkit-fit-content"
        },
        "min-width": {
          comment: "extend by non-standard width keywords https://developer.mozilla.org/en-US/docs/Web/CSS/width",
          syntax: "auto | <length-percentage> | min-content | max-content | fit-content(<length-percentage>) | <-non-standard-width>"
        },
        overflow: {
          comment: "extend by vendor keywords https://developer.mozilla.org/en-US/docs/Web/CSS/overflow",
          syntax: "| <-non-standard-overflow>"
        },
        pause: {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "<'pause-before'> <'pause-after'>?"
        },
        "pause-after": {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "<time> | none | x-weak | weak | medium | strong | x-strong"
        },
        "pause-before": {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "<time> | none | x-weak | weak | medium | strong | x-strong"
        },
        rest: {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "<'rest-before'> <'rest-after'>?"
        },
        "rest-after": {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "<time> | none | x-weak | weak | medium | strong | x-strong"
        },
        "rest-before": {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "<time> | none | x-weak | weak | medium | strong | x-strong"
        },
        "shape-rendering": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#ShapeRenderingPropert"
          ],
          syntax: "auto | optimizeSpeed | crispEdges | geometricPrecision"
        },
        src: {
          comment: "added @font-face's src property https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/src",
          syntax: "[ <url> [ format( <string># ) ]? | local( <family-name> ) ]#"
        },
        speak: {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "auto | none | normal"
        },
        "speak-as": {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "normal | spell-out || digits || [ literal-punctuation | no-punctuation ]"
        },
        stroke: {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#StrokeProperties"
          ],
          syntax: "<paint>"
        },
        "stroke-dasharray": {
          comment: "added SVG property; a list of comma and/or white space separated <length>s and <percentage>s",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#StrokeProperties"
          ],
          syntax: "none | [ <svg-length>+ ]#"
        },
        "stroke-dashoffset": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#StrokeProperties"
          ],
          syntax: "<svg-length>"
        },
        "stroke-linecap": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#StrokeProperties"
          ],
          syntax: "butt | round | square"
        },
        "stroke-linejoin": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#StrokeProperties"
          ],
          syntax: "miter | round | bevel"
        },
        "stroke-miterlimit": {
          comment: "added SVG property (<miterlimit> = <number-one-or-greater>) ",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#StrokeProperties"
          ],
          syntax: "<number-one-or-greater>"
        },
        "stroke-opacity": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#StrokeProperties"
          ],
          syntax: "<number-zero-one>"
        },
        "stroke-width": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/painting.html#StrokeProperties"
          ],
          syntax: "<svg-length>"
        },
        "text-anchor": {
          comment: "added SVG property",
          references: [
            "https://www.w3.org/TR/SVG/text.html#TextAlignmentProperties"
          ],
          syntax: "start | middle | end"
        },
        "unicode-bidi": {
          comment: "added prefixed keywords https://developer.mozilla.org/en-US/docs/Web/CSS/unicode-bidi",
          syntax: "| -moz-isolate | -moz-isolate-override | -moz-plaintext | -webkit-isolate | -webkit-isolate-override | -webkit-plaintext"
        },
        "unicode-range": {
          comment: "added missed property https://developer.mozilla.org/en-US/docs/Web/CSS/%40font-face/unicode-range",
          syntax: "<urange>#"
        },
        "voice-balance": {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "<number> | left | center | right | leftwards | rightwards"
        },
        "voice-duration": {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "auto | <time>"
        },
        "voice-family": {
          comment: "<name> -> <family-name>, https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "[ [ <family-name> | <generic-voice> ] , ]* [ <family-name> | <generic-voice> ] | preserve"
        },
        "voice-pitch": {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "<frequency> && absolute | [ [ x-low | low | medium | high | x-high ] || [ <frequency> | <semitones> | <percentage> ] ]"
        },
        "voice-range": {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "<frequency> && absolute | [ [ x-low | low | medium | high | x-high ] || [ <frequency> | <semitones> | <percentage> ] ]"
        },
        "voice-rate": {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "[ normal | x-slow | slow | medium | fast | x-fast ] || <percentage>"
        },
        "voice-stress": {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "normal | strong | moderate | none | reduced"
        },
        "voice-volume": {
          comment: "https://www.w3.org/TR/css3-speech/#property-index",
          syntax: "silent | [ [ x-soft | soft | medium | loud | x-loud ] || <decibel> ]"
        },
        "writing-mode": {
          comment: "extend with SVG keywords",
          syntax: "| <svg-writing-mode>"
        }
      },
      syntaxes: {
        "-legacy-gradient": {
          comment: "added collection of legacy gradient syntaxes",
          syntax: "<-webkit-gradient()> | <-legacy-linear-gradient> | <-legacy-repeating-linear-gradient> | <-legacy-radial-gradient> | <-legacy-repeating-radial-gradient>"
        },
        "-legacy-linear-gradient": {
          comment: "like standard syntax but w/o `to` keyword https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient",
          syntax: "-moz-linear-gradient( <-legacy-linear-gradient-arguments> ) | -webkit-linear-gradient( <-legacy-linear-gradient-arguments> ) | -o-linear-gradient( <-legacy-linear-gradient-arguments> )"
        },
        "-legacy-repeating-linear-gradient": {
          comment: "like standard syntax but w/o `to` keyword https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient",
          syntax: "-moz-repeating-linear-gradient( <-legacy-linear-gradient-arguments> ) | -webkit-repeating-linear-gradient( <-legacy-linear-gradient-arguments> ) | -o-repeating-linear-gradient( <-legacy-linear-gradient-arguments> )"
        },
        "-legacy-linear-gradient-arguments": {
          comment: "like standard syntax but w/o `to` keyword https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient",
          syntax: "[ <angle> | <side-or-corner> ]? , <color-stop-list>"
        },
        "-legacy-radial-gradient": {
          comment: "deprecated syntax that implemented by some browsers https://www.w3.org/TR/2011/WD-css3-images-20110908/#radial-gradients",
          syntax: "-moz-radial-gradient( <-legacy-radial-gradient-arguments> ) | -webkit-radial-gradient( <-legacy-radial-gradient-arguments> ) | -o-radial-gradient( <-legacy-radial-gradient-arguments> )"
        },
        "-legacy-repeating-radial-gradient": {
          comment: "deprecated syntax that implemented by some browsers https://www.w3.org/TR/2011/WD-css3-images-20110908/#radial-gradients",
          syntax: "-moz-repeating-radial-gradient( <-legacy-radial-gradient-arguments> ) | -webkit-repeating-radial-gradient( <-legacy-radial-gradient-arguments> ) | -o-repeating-radial-gradient( <-legacy-radial-gradient-arguments> )"
        },
        "-legacy-radial-gradient-arguments": {
          comment: "deprecated syntax that implemented by some browsers https://www.w3.org/TR/2011/WD-css3-images-20110908/#radial-gradients",
          syntax: "[ <position> , ]? [ [ [ <-legacy-radial-gradient-shape> || <-legacy-radial-gradient-size> ] | [ <length> | <percentage> ]{2} ] , ]? <color-stop-list>"
        },
        "-legacy-radial-gradient-size": {
          comment: "before a standard it contains 2 extra keywords (`contain` and `cover`) https://www.w3.org/TR/2011/WD-css3-images-20110908/#ltsize",
          syntax: "closest-side | closest-corner | farthest-side | farthest-corner | contain | cover"
        },
        "-legacy-radial-gradient-shape": {
          comment: "define to double sure it doesn't extends in future https://www.w3.org/TR/2011/WD-css3-images-20110908/#ltshape",
          syntax: "circle | ellipse"
        },
        "-non-standard-font": {
          comment: "non standard fonts",
          references: [
            "https://webkit.org/blog/3709/using-the-system-font-in-web-content/"
          ],
          syntax: "-apple-system-body | -apple-system-headline | -apple-system-subheadline | -apple-system-caption1 | -apple-system-caption2 | -apple-system-footnote | -apple-system-short-body | -apple-system-short-headline | -apple-system-short-subheadline | -apple-system-short-caption1 | -apple-system-short-footnote | -apple-system-tall-body"
        },
        "-non-standard-color": {
          comment: "non standard colors",
          references: [
            "http://cssdot.ru/%D0%A1%D0%BF%D1%80%D0%B0%D0%B2%D0%BE%D1%87%D0%BD%D0%B8%D0%BA_CSS/color-i305.html",
            "https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#Mozilla_Color_Preference_Extensions"
          ],
          syntax: "-moz-ButtonDefault | -moz-ButtonHoverFace | -moz-ButtonHoverText | -moz-CellHighlight | -moz-CellHighlightText | -moz-Combobox | -moz-ComboboxText | -moz-Dialog | -moz-DialogText | -moz-dragtargetzone | -moz-EvenTreeRow | -moz-Field | -moz-FieldText | -moz-html-CellHighlight | -moz-html-CellHighlightText | -moz-mac-accentdarkestshadow | -moz-mac-accentdarkshadow | -moz-mac-accentface | -moz-mac-accentlightesthighlight | -moz-mac-accentlightshadow | -moz-mac-accentregularhighlight | -moz-mac-accentregularshadow | -moz-mac-chrome-active | -moz-mac-chrome-inactive | -moz-mac-focusring | -moz-mac-menuselect | -moz-mac-menushadow | -moz-mac-menutextselect | -moz-MenuHover | -moz-MenuHoverText | -moz-MenuBarText | -moz-MenuBarHoverText | -moz-nativehyperlinktext | -moz-OddTreeRow | -moz-win-communicationstext | -moz-win-mediatext | -moz-activehyperlinktext | -moz-default-background-color | -moz-default-color | -moz-hyperlinktext | -moz-visitedhyperlinktext | -webkit-activelink | -webkit-focus-ring-color | -webkit-link | -webkit-text"
        },
        "-non-standard-image-rendering": {
          comment: "non-standard keywords http://phrogz.net/tmp/canvas_image_zoom.html",
          syntax: "optimize-contrast | -moz-crisp-edges | -o-crisp-edges | -webkit-optimize-contrast"
        },
        "-non-standard-overflow": {
          comment: "non-standard keywords https://developer.mozilla.org/en-US/docs/Web/CSS/overflow",
          syntax: "-moz-scrollbars-none | -moz-scrollbars-horizontal | -moz-scrollbars-vertical | -moz-hidden-unscrollable"
        },
        "-non-standard-width": {
          comment: "non-standard keywords https://developer.mozilla.org/en-US/docs/Web/CSS/width",
          syntax: "fill-available | min-intrinsic | intrinsic | -moz-available | -moz-fit-content | -moz-min-content | -moz-max-content | -webkit-min-content | -webkit-max-content"
        },
        "-webkit-gradient()": {
          comment: "first Apple proposal gradient syntax https://webkit.org/blog/175/introducing-css-gradients/ - TODO: simplify when after match algorithm improvement ( [, point, radius | , point] -> [, radius]? , point )",
          syntax: "-webkit-gradient( <-webkit-gradient-type>, <-webkit-gradient-point> [, <-webkit-gradient-point> | , <-webkit-gradient-radius>, <-webkit-gradient-point> ] [, <-webkit-gradient-radius>]? [, <-webkit-gradient-color-stop>]* )"
        },
        "-webkit-gradient-color-stop": {
          comment: "first Apple proposal gradient syntax https://webkit.org/blog/175/introducing-css-gradients/",
          syntax: "from( <color> ) | color-stop( [ <number-zero-one> | <percentage> ] , <color> ) | to( <color> )"
        },
        "-webkit-gradient-point": {
          comment: "first Apple proposal gradient syntax https://webkit.org/blog/175/introducing-css-gradients/",
          syntax: "[ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ]"
        },
        "-webkit-gradient-radius": {
          comment: "first Apple proposal gradient syntax https://webkit.org/blog/175/introducing-css-gradients/",
          syntax: "<length> | <percentage>"
        },
        "-webkit-gradient-type": {
          comment: "first Apple proposal gradient syntax https://webkit.org/blog/175/introducing-css-gradients/",
          syntax: "linear | radial"
        },
        "-webkit-mask-box-repeat": {
          comment: "missed; https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-mask-box-image",
          syntax: "repeat | stretch | round"
        },
        "-webkit-mask-clip-style": {
          comment: "missed; there is no enough information about `-webkit-mask-clip` property, but looks like all those keywords are working",
          syntax: "border | border-box | padding | padding-box | content | content-box | text"
        },
        "-ms-filter-function-list": {
          comment: "https://developer.mozilla.org/en-US/docs/Web/CSS/-ms-filter",
          syntax: "<-ms-filter-function>+"
        },
        "-ms-filter-function": {
          comment: "https://developer.mozilla.org/en-US/docs/Web/CSS/-ms-filter",
          syntax: "<-ms-filter-function-progid> | <-ms-filter-function-legacy>"
        },
        "-ms-filter-function-progid": {
          comment: "https://developer.mozilla.org/en-US/docs/Web/CSS/-ms-filter",
          syntax: "'progid:' [ <ident-token> '.' ]* [ <ident-token> | <function-token> <any-value>? ) ]"
        },
        "-ms-filter-function-legacy": {
          comment: "https://developer.mozilla.org/en-US/docs/Web/CSS/-ms-filter",
          syntax: "<ident-token> | <function-token> <any-value>? )"
        },
        "-ms-filter": {
          syntax: "<string>"
        },
        age: {
          comment: "https://www.w3.org/TR/css3-speech/#voice-family",
          syntax: "child | young | old"
        },
        "attr-name": {
          syntax: "<wq-name>"
        },
        "attr-fallback": {
          syntax: "<any-value>"
        },
        "border-radius": {
          comment: "missed, https://drafts.csswg.org/css-backgrounds-3/#the-border-radius",
          syntax: "<length-percentage>{1,2}"
        },
        bottom: {
          comment: "missed; not sure we should add it, but no others except `shape` is using it so it's ok for now; https://drafts.fxtf.org/css-masking-1/#funcdef-clip-rect",
          syntax: "<length> | auto"
        },
        "content-list": {
          comment: "missed -> https://drafts.csswg.org/css-content/#typedef-content-list (document-url, <target> and leader() is omitted util stabilization)",
          syntax: "[ <string> | contents | <image> | <quote> | <target> | <leader()> | <attr()> | counter( <ident>, <'list-style-type'>? ) ]+"
        },
        "element()": {
          comment: "https://drafts.csswg.org/css-gcpm/#element-syntax & https://drafts.csswg.org/css-images-4/#element-notation",
          syntax: "element( <custom-ident> , [ first | start | last | first-except ]? ) | element( <id-selector> )"
        },
        "generic-voice": {
          comment: "https://www.w3.org/TR/css3-speech/#voice-family",
          syntax: "[ <age>? <gender> <integer>? ]"
        },
        gender: {
          comment: "https://www.w3.org/TR/css3-speech/#voice-family",
          syntax: "male | female | neutral"
        },
        "generic-family": {
          comment: "added -apple-system",
          references: [
            "https://webkit.org/blog/3709/using-the-system-font-in-web-content/"
          ],
          syntax: "| -apple-system"
        },
        gradient: {
          comment: "added legacy syntaxes support",
          syntax: "| <-legacy-gradient>"
        },
        left: {
          comment: "missed; not sure we should add it, but no others except `shape` is using it so it's ok for now; https://drafts.fxtf.org/css-masking-1/#funcdef-clip-rect",
          syntax: "<length> | auto"
        },
        "mask-image": {
          comment: "missed; https://drafts.fxtf.org/css-masking-1/#the-mask-image",
          syntax: "<mask-reference>#"
        },
        "name-repeat": {
          comment: "missed, and looks like obsolete, keep it as is since other property syntaxes should be changed too; https://www.w3.org/TR/2015/WD-css-grid-1-20150917/#typedef-name-repeat",
          syntax: "repeat( [ <positive-integer> | auto-fill ], <line-names>+)"
        },
        "named-color": {
          comment: "added non standard color names",
          syntax: "| <-non-standard-color>"
        },
        paint: {
          comment: "used by SVG https://www.w3.org/TR/SVG/painting.html#SpecifyingPaint",
          syntax: "none | <color> | <url> [ none | <color> ]? | context-fill | context-stroke"
        },
        "page-size": {
          comment: "https://www.w3.org/TR/css-page-3/#typedef-page-size-page-size",
          syntax: "A5 | A4 | A3 | B5 | B4 | JIS-B5 | JIS-B4 | letter | legal | ledger"
        },
        ratio: {
          comment: "missed, https://drafts.csswg.org/mediaqueries-4/#typedef-ratio",
          syntax: "<integer> / <integer>"
        },
        right: {
          comment: "missed; not sure we should add it, but no others except `shape` is using it so it's ok for now; https://drafts.fxtf.org/css-masking-1/#funcdef-clip-rect",
          syntax: "<length> | auto"
        },
        shape: {
          comment: "missed spaces in function body and add backwards compatible syntax",
          syntax: "rect( <top>, <right>, <bottom>, <left> ) | rect( <top> <right> <bottom> <left> )"
        },
        "svg-length": {
          comment: "All coordinates and lengths in SVG can be specified with or without a unit identifier",
          references: [
            "https://www.w3.org/TR/SVG11/coords.html#Units"
          ],
          syntax: "<percentage> | <length> | <number>"
        },
        "svg-writing-mode": {
          comment: "SVG specific keywords (deprecated for CSS)",
          references: [
            "https://developer.mozilla.org/en/docs/Web/CSS/writing-mode",
            "https://www.w3.org/TR/SVG/text.html#WritingModeProperty"
          ],
          syntax: "lr-tb | rl-tb | tb-rl | lr | rl | tb"
        },
        top: {
          comment: "missed; not sure we should add it, but no others except `shape` is using it so it's ok for now; https://drafts.fxtf.org/css-masking-1/#funcdef-clip-rect",
          syntax: "<length> | auto"
        },
        "track-group": {
          comment: "used by old grid-columns and grid-rows syntax v0",
          syntax: "'(' [ <string>* <track-minmax> <string>* ]+ ')' [ '[' <positive-integer> ']' ]? | <track-minmax>"
        },
        "track-list-v0": {
          comment: "used by old grid-columns and grid-rows syntax v0",
          syntax: "[ <string>* <track-group> <string>* ]+ | none"
        },
        "track-minmax": {
          comment: "used by old grid-columns and grid-rows syntax v0",
          syntax: "minmax( <track-breadth> , <track-breadth> ) | auto | <track-breadth> | fit-content"
        },
        x: {
          comment: "missed; not sure we should add it, but no others except `cursor` is using it so it's ok for now; https://drafts.csswg.org/css-ui-3/#cursor",
          syntax: "<number>"
        },
        y: {
          comment: "missed; not sure we should add it, but no others except `cursor` is using so it's ok for now; https://drafts.csswg.org/css-ui-3/#cursor",
          syntax: "<number>"
        },
        declaration: {
          comment: "missed, restored by https://drafts.csswg.org/css-syntax",
          syntax: "<ident-token> : <declaration-value>? [ '!' important ]?"
        },
        "declaration-list": {
          comment: "missed, restored by https://drafts.csswg.org/css-syntax",
          syntax: "[ <declaration>? ';' ]* <declaration>?"
        },
        url: {
          comment: "https://drafts.csswg.org/css-values-4/#urls",
          syntax: "url( <string> <url-modifier>* ) | <url-token>"
        },
        "url-modifier": {
          comment: "https://drafts.csswg.org/css-values-4/#typedef-url-modifier",
          syntax: "<ident> | <function-token> <any-value> )"
        },
        "number-zero-one": {
          syntax: "<number [0,1]>"
        },
        "number-one-or-greater": {
          syntax: "<number [1,\u221E]>"
        },
        "positive-integer": {
          syntax: "<integer [0,\u221E]>"
        },
        "-non-standard-display": {
          syntax: "-ms-inline-flexbox | -ms-grid | -ms-inline-grid | -webkit-flex | -webkit-inline-flex | -webkit-box | -webkit-inline-box | -moz-inline-stack | -moz-box | -moz-inline-box"
        }
      }
    };
  }
});

// node_modules/css-tree/data/index.js
var require_data = __commonJS({
  "node_modules/css-tree/data/index.js"(exports2, module2) {
    var mdnAtrules = require_at_rules();
    var mdnProperties = require_properties();
    var mdnSyntaxes = require_syntaxes();
    var patch = require_patch();
    var extendSyntax = /^\s*\|\s*/;
    function preprocessAtrules(dict) {
      const result = /* @__PURE__ */ Object.create(null);
      for (const atruleName in dict) {
        const atrule = dict[atruleName];
        let descriptors = null;
        if (atrule.descriptors) {
          descriptors = /* @__PURE__ */ Object.create(null);
          for (const descriptor in atrule.descriptors) {
            descriptors[descriptor] = atrule.descriptors[descriptor].syntax;
          }
        }
        result[atruleName.substr(1)] = {
          prelude: atrule.syntax.trim().match(/^@\S+\s+([^;\{]*)/)[1].trim() || null,
          descriptors
        };
      }
      return result;
    }
    function patchDictionary(dict, patchDict) {
      const result = {};
      for (const key in dict) {
        result[key] = dict[key].syntax || dict[key];
      }
      for (const key in patchDict) {
        if (key in dict) {
          if (patchDict[key].syntax) {
            result[key] = extendSyntax.test(patchDict[key].syntax) ? result[key] + " " + patchDict[key].syntax.trim() : patchDict[key].syntax;
          } else {
            delete result[key];
          }
        } else {
          if (patchDict[key].syntax) {
            result[key] = patchDict[key].syntax.replace(extendSyntax, "");
          }
        }
      }
      return result;
    }
    function unpackSyntaxes(dict) {
      const result = {};
      for (const key in dict) {
        result[key] = dict[key].syntax;
      }
      return result;
    }
    function patchAtrules(dict, patchDict) {
      const result = {};
      for (const key in dict) {
        const patchDescriptors = patchDict[key] && patchDict[key].descriptors || null;
        result[key] = {
          prelude: key in patchDict && "prelude" in patchDict[key] ? patchDict[key].prelude : dict[key].prelude || null,
          descriptors: dict[key].descriptors ? patchDictionary(dict[key].descriptors, patchDescriptors || {}) : patchDescriptors && unpackSyntaxes(patchDescriptors)
        };
      }
      for (const key in patchDict) {
        if (!hasOwnProperty.call(dict, key)) {
          result[key] = {
            prelude: patchDict[key].prelude || null,
            descriptors: patchDict[key].descriptors && unpackSyntaxes(patchDict[key].descriptors)
          };
        }
      }
      return result;
    }
    module2.exports = {
      types: patchDictionary(mdnSyntaxes, patch.syntaxes),
      atrules: patchAtrules(preprocessAtrules(mdnAtrules), patch.atrules),
      properties: patchDictionary(mdnProperties, patch.properties)
    };
  }
});

// node_modules/css-tree/lib/syntax/node/AnPlusB.js
var require_AnPlusB = __commonJS({
  "node_modules/css-tree/lib/syntax/node/AnPlusB.js"(exports2, module2) {
    var cmpChar = require_tokenizer().cmpChar;
    var isDigit = require_tokenizer().isDigit;
    var TYPE = require_tokenizer().TYPE;
    var WHITESPACE = TYPE.WhiteSpace;
    var COMMENT = TYPE.Comment;
    var IDENT = TYPE.Ident;
    var NUMBER = TYPE.Number;
    var DIMENSION = TYPE.Dimension;
    var PLUSSIGN = 43;
    var HYPHENMINUS = 45;
    var N = 110;
    var DISALLOW_SIGN = true;
    var ALLOW_SIGN = false;
    function checkInteger(offset, disallowSign) {
      var pos = this.scanner.tokenStart + offset;
      var code = this.scanner.source.charCodeAt(pos);
      if (code === PLUSSIGN || code === HYPHENMINUS) {
        if (disallowSign) {
          this.error("Number sign is not allowed");
        }
        pos++;
      }
      for (; pos < this.scanner.tokenEnd; pos++) {
        if (!isDigit(this.scanner.source.charCodeAt(pos))) {
          this.error("Integer is expected", pos);
        }
      }
    }
    function checkTokenIsInteger(disallowSign) {
      return checkInteger.call(this, 0, disallowSign);
    }
    function expectCharCode(offset, code) {
      if (!cmpChar(this.scanner.source, this.scanner.tokenStart + offset, code)) {
        var msg = "";
        switch (code) {
          case N:
            msg = "N is expected";
            break;
          case HYPHENMINUS:
            msg = "HyphenMinus is expected";
            break;
        }
        this.error(msg, this.scanner.tokenStart + offset);
      }
    }
    function consumeB() {
      var offset = 0;
      var sign = 0;
      var type = this.scanner.tokenType;
      while (type === WHITESPACE || type === COMMENT) {
        type = this.scanner.lookupType(++offset);
      }
      if (type !== NUMBER) {
        if (this.scanner.isDelim(PLUSSIGN, offset) || this.scanner.isDelim(HYPHENMINUS, offset)) {
          sign = this.scanner.isDelim(PLUSSIGN, offset) ? PLUSSIGN : HYPHENMINUS;
          do {
            type = this.scanner.lookupType(++offset);
          } while (type === WHITESPACE || type === COMMENT);
          if (type !== NUMBER) {
            this.scanner.skip(offset);
            checkTokenIsInteger.call(this, DISALLOW_SIGN);
          }
        } else {
          return null;
        }
      }
      if (offset > 0) {
        this.scanner.skip(offset);
      }
      if (sign === 0) {
        type = this.scanner.source.charCodeAt(this.scanner.tokenStart);
        if (type !== PLUSSIGN && type !== HYPHENMINUS) {
          this.error("Number sign is expected");
        }
      }
      checkTokenIsInteger.call(this, sign !== 0);
      return sign === HYPHENMINUS ? "-" + this.consume(NUMBER) : this.consume(NUMBER);
    }
    module2.exports = {
      name: "AnPlusB",
      structure: {
        a: [String, null],
        b: [String, null]
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        var a = null;
        var b = null;
        if (this.scanner.tokenType === NUMBER) {
          checkTokenIsInteger.call(this, ALLOW_SIGN);
          b = this.consume(NUMBER);
        } else if (this.scanner.tokenType === IDENT && cmpChar(this.scanner.source, this.scanner.tokenStart, HYPHENMINUS)) {
          a = "-1";
          expectCharCode.call(this, 1, N);
          switch (this.scanner.getTokenLength()) {
            case 2:
              this.scanner.next();
              b = consumeB.call(this);
              break;
            case 3:
              expectCharCode.call(this, 2, HYPHENMINUS);
              this.scanner.next();
              this.scanner.skipSC();
              checkTokenIsInteger.call(this, DISALLOW_SIGN);
              b = "-" + this.consume(NUMBER);
              break;
            default:
              expectCharCode.call(this, 2, HYPHENMINUS);
              checkInteger.call(this, 3, DISALLOW_SIGN);
              this.scanner.next();
              b = this.scanner.substrToCursor(start + 2);
          }
        } else if (this.scanner.tokenType === IDENT || this.scanner.isDelim(PLUSSIGN) && this.scanner.lookupType(1) === IDENT) {
          var sign = 0;
          a = "1";
          if (this.scanner.isDelim(PLUSSIGN)) {
            sign = 1;
            this.scanner.next();
          }
          expectCharCode.call(this, 0, N);
          switch (this.scanner.getTokenLength()) {
            case 1:
              this.scanner.next();
              b = consumeB.call(this);
              break;
            case 2:
              expectCharCode.call(this, 1, HYPHENMINUS);
              this.scanner.next();
              this.scanner.skipSC();
              checkTokenIsInteger.call(this, DISALLOW_SIGN);
              b = "-" + this.consume(NUMBER);
              break;
            default:
              expectCharCode.call(this, 1, HYPHENMINUS);
              checkInteger.call(this, 2, DISALLOW_SIGN);
              this.scanner.next();
              b = this.scanner.substrToCursor(start + sign + 1);
          }
        } else if (this.scanner.tokenType === DIMENSION) {
          var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);
          var sign = code === PLUSSIGN || code === HYPHENMINUS;
          for (var i = this.scanner.tokenStart + sign; i < this.scanner.tokenEnd; i++) {
            if (!isDigit(this.scanner.source.charCodeAt(i))) {
              break;
            }
          }
          if (i === this.scanner.tokenStart + sign) {
            this.error("Integer is expected", this.scanner.tokenStart + sign);
          }
          expectCharCode.call(this, i - this.scanner.tokenStart, N);
          a = this.scanner.source.substring(start, i);
          if (i + 1 === this.scanner.tokenEnd) {
            this.scanner.next();
            b = consumeB.call(this);
          } else {
            expectCharCode.call(this, i - this.scanner.tokenStart + 1, HYPHENMINUS);
            if (i + 2 === this.scanner.tokenEnd) {
              this.scanner.next();
              this.scanner.skipSC();
              checkTokenIsInteger.call(this, DISALLOW_SIGN);
              b = "-" + this.consume(NUMBER);
            } else {
              checkInteger.call(this, i - this.scanner.tokenStart + 2, DISALLOW_SIGN);
              this.scanner.next();
              b = this.scanner.substrToCursor(i + 1);
            }
          }
        } else {
          this.error();
        }
        if (a !== null && a.charCodeAt(0) === PLUSSIGN) {
          a = a.substr(1);
        }
        if (b !== null && b.charCodeAt(0) === PLUSSIGN) {
          b = b.substr(1);
        }
        return {
          type: "AnPlusB",
          loc: this.getLocation(start, this.scanner.tokenStart),
          a,
          b
        };
      },
      generate: function(node) {
        var a = node.a !== null && node.a !== void 0;
        var b = node.b !== null && node.b !== void 0;
        if (a) {
          this.chunk(
            node.a === "+1" ? "+n" : (
              // eslint-disable-line operator-linebreak, indent
              node.a === "1" ? "n" : (
                // eslint-disable-line operator-linebreak, indent
                node.a === "-1" ? "-n" : (
                  // eslint-disable-line operator-linebreak, indent
                  node.a + "n"
                )
              )
            )
            // eslint-disable-line operator-linebreak, indent
          );
          if (b) {
            b = String(node.b);
            if (b.charAt(0) === "-" || b.charAt(0) === "+") {
              this.chunk(b.charAt(0));
              this.chunk(b.substr(1));
            } else {
              this.chunk("+");
              this.chunk(b);
            }
          }
        } else {
          this.chunk(String(node.b));
        }
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Raw.js
var require_Raw = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Raw.js"(exports2, module2) {
    var tokenizer = require_tokenizer();
    var TYPE = tokenizer.TYPE;
    var WhiteSpace = TYPE.WhiteSpace;
    var Semicolon = TYPE.Semicolon;
    var LeftCurlyBracket = TYPE.LeftCurlyBracket;
    var Delim = TYPE.Delim;
    var EXCLAMATIONMARK = 33;
    function getOffsetExcludeWS() {
      if (this.scanner.tokenIndex > 0) {
        if (this.scanner.lookupType(-1) === WhiteSpace) {
          return this.scanner.tokenIndex > 1 ? this.scanner.getTokenStart(this.scanner.tokenIndex - 1) : this.scanner.firstCharOffset;
        }
      }
      return this.scanner.tokenStart;
    }
    function balanceEnd() {
      return 0;
    }
    function leftCurlyBracket(tokenType) {
      return tokenType === LeftCurlyBracket ? 1 : 0;
    }
    function leftCurlyBracketOrSemicolon(tokenType) {
      return tokenType === LeftCurlyBracket || tokenType === Semicolon ? 1 : 0;
    }
    function exclamationMarkOrSemicolon(tokenType, source, offset) {
      if (tokenType === Delim && source.charCodeAt(offset) === EXCLAMATIONMARK) {
        return 1;
      }
      return tokenType === Semicolon ? 1 : 0;
    }
    function semicolonIncluded(tokenType) {
      return tokenType === Semicolon ? 2 : 0;
    }
    module2.exports = {
      name: "Raw",
      structure: {
        value: String
      },
      parse: function(startToken, mode, excludeWhiteSpace) {
        var startOffset = this.scanner.getTokenStart(startToken);
        var endOffset;
        this.scanner.skip(
          this.scanner.getRawLength(startToken, mode || balanceEnd)
        );
        if (excludeWhiteSpace && this.scanner.tokenStart > startOffset) {
          endOffset = getOffsetExcludeWS.call(this);
        } else {
          endOffset = this.scanner.tokenStart;
        }
        return {
          type: "Raw",
          loc: this.getLocation(startOffset, endOffset),
          value: this.scanner.source.substring(startOffset, endOffset)
        };
      },
      generate: function(node) {
        this.chunk(node.value);
      },
      mode: {
        default: balanceEnd,
        leftCurlyBracket,
        leftCurlyBracketOrSemicolon,
        exclamationMarkOrSemicolon,
        semicolonIncluded
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Atrule.js
var require_Atrule = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Atrule.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var rawMode = require_Raw().mode;
    var ATKEYWORD = TYPE.AtKeyword;
    var SEMICOLON = TYPE.Semicolon;
    var LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;
    var RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;
    function consumeRaw(startToken) {
      return this.Raw(startToken, rawMode.leftCurlyBracketOrSemicolon, true);
    }
    function isDeclarationBlockAtrule() {
      for (var offset = 1, type; type = this.scanner.lookupType(offset); offset++) {
        if (type === RIGHTCURLYBRACKET) {
          return true;
        }
        if (type === LEFTCURLYBRACKET || type === ATKEYWORD) {
          return false;
        }
      }
      return false;
    }
    module2.exports = {
      name: "Atrule",
      structure: {
        name: String,
        prelude: ["AtrulePrelude", "Raw", null],
        block: ["Block", null]
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        var name;
        var nameLowerCase;
        var prelude = null;
        var block = null;
        this.eat(ATKEYWORD);
        name = this.scanner.substrToCursor(start + 1);
        nameLowerCase = name.toLowerCase();
        this.scanner.skipSC();
        if (this.scanner.eof === false && this.scanner.tokenType !== LEFTCURLYBRACKET && this.scanner.tokenType !== SEMICOLON) {
          if (this.parseAtrulePrelude) {
            prelude = this.parseWithFallback(this.AtrulePrelude.bind(this, name), consumeRaw);
            if (prelude.type === "AtrulePrelude" && prelude.children.head === null) {
              prelude = null;
            }
          } else {
            prelude = consumeRaw.call(this, this.scanner.tokenIndex);
          }
          this.scanner.skipSC();
        }
        switch (this.scanner.tokenType) {
          case SEMICOLON:
            this.scanner.next();
            break;
          case LEFTCURLYBRACKET:
            if (this.atrule.hasOwnProperty(nameLowerCase) && typeof this.atrule[nameLowerCase].block === "function") {
              block = this.atrule[nameLowerCase].block.call(this);
            } else {
              block = this.Block(isDeclarationBlockAtrule.call(this));
            }
            break;
        }
        return {
          type: "Atrule",
          loc: this.getLocation(start, this.scanner.tokenStart),
          name,
          prelude,
          block
        };
      },
      generate: function(node) {
        this.chunk("@");
        this.chunk(node.name);
        if (node.prelude !== null) {
          this.chunk(" ");
          this.node(node.prelude);
        }
        if (node.block) {
          this.node(node.block);
        } else {
          this.chunk(";");
        }
      },
      walkContext: "atrule"
    };
  }
});

// node_modules/css-tree/lib/syntax/node/AtrulePrelude.js
var require_AtrulePrelude = __commonJS({
  "node_modules/css-tree/lib/syntax/node/AtrulePrelude.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var SEMICOLON = TYPE.Semicolon;
    var LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;
    module2.exports = {
      name: "AtrulePrelude",
      structure: {
        children: [[]]
      },
      parse: function(name) {
        var children = null;
        if (name !== null) {
          name = name.toLowerCase();
        }
        this.scanner.skipSC();
        if (this.atrule.hasOwnProperty(name) && typeof this.atrule[name].prelude === "function") {
          children = this.atrule[name].prelude.call(this);
        } else {
          children = this.readSequence(this.scope.AtrulePrelude);
        }
        this.scanner.skipSC();
        if (this.scanner.eof !== true && this.scanner.tokenType !== LEFTCURLYBRACKET && this.scanner.tokenType !== SEMICOLON) {
          this.error("Semicolon or block is expected");
        }
        if (children === null) {
          children = this.createList();
        }
        return {
          type: "AtrulePrelude",
          loc: this.getLocationFromList(children),
          children
        };
      },
      generate: function(node) {
        this.children(node);
      },
      walkContext: "atrulePrelude"
    };
  }
});

// node_modules/css-tree/lib/syntax/node/AttributeSelector.js
var require_AttributeSelector = __commonJS({
  "node_modules/css-tree/lib/syntax/node/AttributeSelector.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var IDENT = TYPE.Ident;
    var STRING = TYPE.String;
    var COLON = TYPE.Colon;
    var LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;
    var RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;
    var DOLLARSIGN = 36;
    var ASTERISK = 42;
    var EQUALSSIGN = 61;
    var CIRCUMFLEXACCENT = 94;
    var VERTICALLINE = 124;
    var TILDE = 126;
    function getAttributeName() {
      if (this.scanner.eof) {
        this.error("Unexpected end of input");
      }
      var start = this.scanner.tokenStart;
      var expectIdent = false;
      var checkColon = true;
      if (this.scanner.isDelim(ASTERISK)) {
        expectIdent = true;
        checkColon = false;
        this.scanner.next();
      } else if (!this.scanner.isDelim(VERTICALLINE)) {
        this.eat(IDENT);
      }
      if (this.scanner.isDelim(VERTICALLINE)) {
        if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 1) !== EQUALSSIGN) {
          this.scanner.next();
          this.eat(IDENT);
        } else if (expectIdent) {
          this.error("Identifier is expected", this.scanner.tokenEnd);
        }
      } else if (expectIdent) {
        this.error("Vertical line is expected");
      }
      if (checkColon && this.scanner.tokenType === COLON) {
        this.scanner.next();
        this.eat(IDENT);
      }
      return {
        type: "Identifier",
        loc: this.getLocation(start, this.scanner.tokenStart),
        name: this.scanner.substrToCursor(start)
      };
    }
    function getOperator() {
      var start = this.scanner.tokenStart;
      var code = this.scanner.source.charCodeAt(start);
      if (code !== EQUALSSIGN && // =
      code !== TILDE && // ~=
      code !== CIRCUMFLEXACCENT && // ^=
      code !== DOLLARSIGN && // $=
      code !== ASTERISK && // *=
      code !== VERTICALLINE) {
        this.error("Attribute selector (=, ~=, ^=, $=, *=, |=) is expected");
      }
      this.scanner.next();
      if (code !== EQUALSSIGN) {
        if (!this.scanner.isDelim(EQUALSSIGN)) {
          this.error("Equal sign is expected");
        }
        this.scanner.next();
      }
      return this.scanner.substrToCursor(start);
    }
    module2.exports = {
      name: "AttributeSelector",
      structure: {
        name: "Identifier",
        matcher: [String, null],
        value: ["String", "Identifier", null],
        flags: [String, null]
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        var name;
        var matcher = null;
        var value = null;
        var flags = null;
        this.eat(LEFTSQUAREBRACKET);
        this.scanner.skipSC();
        name = getAttributeName.call(this);
        this.scanner.skipSC();
        if (this.scanner.tokenType !== RIGHTSQUAREBRACKET) {
          if (this.scanner.tokenType !== IDENT) {
            matcher = getOperator.call(this);
            this.scanner.skipSC();
            value = this.scanner.tokenType === STRING ? this.String() : this.Identifier();
            this.scanner.skipSC();
          }
          if (this.scanner.tokenType === IDENT) {
            flags = this.scanner.getTokenValue();
            this.scanner.next();
            this.scanner.skipSC();
          }
        }
        this.eat(RIGHTSQUAREBRACKET);
        return {
          type: "AttributeSelector",
          loc: this.getLocation(start, this.scanner.tokenStart),
          name,
          matcher,
          value,
          flags
        };
      },
      generate: function(node) {
        var flagsPrefix = " ";
        this.chunk("[");
        this.node(node.name);
        if (node.matcher !== null) {
          this.chunk(node.matcher);
          if (node.value !== null) {
            this.node(node.value);
            if (node.value.type === "String") {
              flagsPrefix = "";
            }
          }
        }
        if (node.flags !== null) {
          this.chunk(flagsPrefix);
          this.chunk(node.flags);
        }
        this.chunk("]");
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Block.js
var require_Block = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Block.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var rawMode = require_Raw().mode;
    var WHITESPACE = TYPE.WhiteSpace;
    var COMMENT = TYPE.Comment;
    var SEMICOLON = TYPE.Semicolon;
    var ATKEYWORD = TYPE.AtKeyword;
    var LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;
    var RIGHTCURLYBRACKET = TYPE.RightCurlyBracket;
    function consumeRaw(startToken) {
      return this.Raw(startToken, null, true);
    }
    function consumeRule() {
      return this.parseWithFallback(this.Rule, consumeRaw);
    }
    function consumeRawDeclaration(startToken) {
      return this.Raw(startToken, rawMode.semicolonIncluded, true);
    }
    function consumeDeclaration() {
      if (this.scanner.tokenType === SEMICOLON) {
        return consumeRawDeclaration.call(this, this.scanner.tokenIndex);
      }
      var node = this.parseWithFallback(this.Declaration, consumeRawDeclaration);
      if (this.scanner.tokenType === SEMICOLON) {
        this.scanner.next();
      }
      return node;
    }
    module2.exports = {
      name: "Block",
      structure: {
        children: [[
          "Atrule",
          "Rule",
          "Declaration"
        ]]
      },
      parse: function(isDeclaration) {
        var consumer = isDeclaration ? consumeDeclaration : consumeRule;
        var start = this.scanner.tokenStart;
        var children = this.createList();
        this.eat(LEFTCURLYBRACKET);
        scan:
          while (!this.scanner.eof) {
            switch (this.scanner.tokenType) {
              case RIGHTCURLYBRACKET:
                break scan;
              case WHITESPACE:
              case COMMENT:
                this.scanner.next();
                break;
              case ATKEYWORD:
                children.push(this.parseWithFallback(this.Atrule, consumeRaw));
                break;
              default:
                children.push(consumer.call(this));
            }
          }
        if (!this.scanner.eof) {
          this.eat(RIGHTCURLYBRACKET);
        }
        return {
          type: "Block",
          loc: this.getLocation(start, this.scanner.tokenStart),
          children
        };
      },
      generate: function(node) {
        this.chunk("{");
        this.children(node, function(prev) {
          if (prev.type === "Declaration") {
            this.chunk(";");
          }
        });
        this.chunk("}");
      },
      walkContext: "block"
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Brackets.js
var require_Brackets = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Brackets.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;
    var RIGHTSQUAREBRACKET = TYPE.RightSquareBracket;
    module2.exports = {
      name: "Brackets",
      structure: {
        children: [[]]
      },
      parse: function(readSequence, recognizer) {
        var start = this.scanner.tokenStart;
        var children = null;
        this.eat(LEFTSQUAREBRACKET);
        children = readSequence.call(this, recognizer);
        if (!this.scanner.eof) {
          this.eat(RIGHTSQUAREBRACKET);
        }
        return {
          type: "Brackets",
          loc: this.getLocation(start, this.scanner.tokenStart),
          children
        };
      },
      generate: function(node) {
        this.chunk("[");
        this.children(node);
        this.chunk("]");
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/CDC.js
var require_CDC = __commonJS({
  "node_modules/css-tree/lib/syntax/node/CDC.js"(exports2, module2) {
    var CDC = require_tokenizer().TYPE.CDC;
    module2.exports = {
      name: "CDC",
      structure: [],
      parse: function() {
        var start = this.scanner.tokenStart;
        this.eat(CDC);
        return {
          type: "CDC",
          loc: this.getLocation(start, this.scanner.tokenStart)
        };
      },
      generate: function() {
        this.chunk("-->");
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/CDO.js
var require_CDO = __commonJS({
  "node_modules/css-tree/lib/syntax/node/CDO.js"(exports2, module2) {
    var CDO = require_tokenizer().TYPE.CDO;
    module2.exports = {
      name: "CDO",
      structure: [],
      parse: function() {
        var start = this.scanner.tokenStart;
        this.eat(CDO);
        return {
          type: "CDO",
          loc: this.getLocation(start, this.scanner.tokenStart)
        };
      },
      generate: function() {
        this.chunk("<!--");
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/ClassSelector.js
var require_ClassSelector = __commonJS({
  "node_modules/css-tree/lib/syntax/node/ClassSelector.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var IDENT = TYPE.Ident;
    var FULLSTOP = 46;
    module2.exports = {
      name: "ClassSelector",
      structure: {
        name: String
      },
      parse: function() {
        if (!this.scanner.isDelim(FULLSTOP)) {
          this.error("Full stop is expected");
        }
        this.scanner.next();
        return {
          type: "ClassSelector",
          loc: this.getLocation(this.scanner.tokenStart - 1, this.scanner.tokenEnd),
          name: this.consume(IDENT)
        };
      },
      generate: function(node) {
        this.chunk(".");
        this.chunk(node.name);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Combinator.js
var require_Combinator = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Combinator.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var IDENT = TYPE.Ident;
    var PLUSSIGN = 43;
    var SOLIDUS = 47;
    var GREATERTHANSIGN = 62;
    var TILDE = 126;
    module2.exports = {
      name: "Combinator",
      structure: {
        name: String
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);
        switch (code) {
          case GREATERTHANSIGN:
          case PLUSSIGN:
          case TILDE:
            this.scanner.next();
            break;
          case SOLIDUS:
            this.scanner.next();
            if (this.scanner.tokenType !== IDENT || this.scanner.lookupValue(0, "deep") === false) {
              this.error("Identifier `deep` is expected");
            }
            this.scanner.next();
            if (!this.scanner.isDelim(SOLIDUS)) {
              this.error("Solidus is expected");
            }
            this.scanner.next();
            break;
          default:
            this.error("Combinator is expected");
        }
        return {
          type: "Combinator",
          loc: this.getLocation(start, this.scanner.tokenStart),
          name: this.scanner.substrToCursor(start)
        };
      },
      generate: function(node) {
        this.chunk(node.name);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Comment.js
var require_Comment = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Comment.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var COMMENT = TYPE.Comment;
    var ASTERISK = 42;
    var SOLIDUS = 47;
    module2.exports = {
      name: "Comment",
      structure: {
        value: String
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        var end = this.scanner.tokenEnd;
        this.eat(COMMENT);
        if (end - start + 2 >= 2 && this.scanner.source.charCodeAt(end - 2) === ASTERISK && this.scanner.source.charCodeAt(end - 1) === SOLIDUS) {
          end -= 2;
        }
        return {
          type: "Comment",
          loc: this.getLocation(start, this.scanner.tokenStart),
          value: this.scanner.source.substring(start + 2, end)
        };
      },
      generate: function(node) {
        this.chunk("/*");
        this.chunk(node.value);
        this.chunk("*/");
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Declaration.js
var require_Declaration = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Declaration.js"(exports2, module2) {
    var isCustomProperty = require_names().isCustomProperty;
    var TYPE = require_tokenizer().TYPE;
    var rawMode = require_Raw().mode;
    var IDENT = TYPE.Ident;
    var HASH = TYPE.Hash;
    var COLON = TYPE.Colon;
    var SEMICOLON = TYPE.Semicolon;
    var DELIM = TYPE.Delim;
    var WHITESPACE = TYPE.WhiteSpace;
    var EXCLAMATIONMARK = 33;
    var NUMBERSIGN = 35;
    var DOLLARSIGN = 36;
    var AMPERSAND = 38;
    var ASTERISK = 42;
    var PLUSSIGN = 43;
    var SOLIDUS = 47;
    function consumeValueRaw(startToken) {
      return this.Raw(startToken, rawMode.exclamationMarkOrSemicolon, true);
    }
    function consumeCustomPropertyRaw(startToken) {
      return this.Raw(startToken, rawMode.exclamationMarkOrSemicolon, false);
    }
    function consumeValue() {
      var startValueToken = this.scanner.tokenIndex;
      var value = this.Value();
      if (value.type !== "Raw" && this.scanner.eof === false && this.scanner.tokenType !== SEMICOLON && this.scanner.isDelim(EXCLAMATIONMARK) === false && this.scanner.isBalanceEdge(startValueToken) === false) {
        this.error();
      }
      return value;
    }
    module2.exports = {
      name: "Declaration",
      structure: {
        important: [Boolean, String],
        property: String,
        value: ["Value", "Raw"]
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        var startToken = this.scanner.tokenIndex;
        var property = readProperty.call(this);
        var customProperty = isCustomProperty(property);
        var parseValue = customProperty ? this.parseCustomProperty : this.parseValue;
        var consumeRaw = customProperty ? consumeCustomPropertyRaw : consumeValueRaw;
        var important = false;
        var value;
        this.scanner.skipSC();
        this.eat(COLON);
        const valueStart = this.scanner.tokenIndex;
        if (!customProperty) {
          this.scanner.skipSC();
        }
        if (parseValue) {
          value = this.parseWithFallback(consumeValue, consumeRaw);
        } else {
          value = consumeRaw.call(this, this.scanner.tokenIndex);
        }
        if (customProperty && value.type === "Value" && value.children.isEmpty()) {
          for (let offset = valueStart - this.scanner.tokenIndex; offset <= 0; offset++) {
            if (this.scanner.lookupType(offset) === WHITESPACE) {
              value.children.appendData({
                type: "WhiteSpace",
                loc: null,
                value: " "
              });
              break;
            }
          }
        }
        if (this.scanner.isDelim(EXCLAMATIONMARK)) {
          important = getImportant.call(this);
          this.scanner.skipSC();
        }
        if (this.scanner.eof === false && this.scanner.tokenType !== SEMICOLON && this.scanner.isBalanceEdge(startToken) === false) {
          this.error();
        }
        return {
          type: "Declaration",
          loc: this.getLocation(start, this.scanner.tokenStart),
          important,
          property,
          value
        };
      },
      generate: function(node) {
        this.chunk(node.property);
        this.chunk(":");
        this.node(node.value);
        if (node.important) {
          this.chunk(node.important === true ? "!important" : "!" + node.important);
        }
      },
      walkContext: "declaration"
    };
    function readProperty() {
      var start = this.scanner.tokenStart;
      var prefix = 0;
      if (this.scanner.tokenType === DELIM) {
        switch (this.scanner.source.charCodeAt(this.scanner.tokenStart)) {
          case ASTERISK:
          case DOLLARSIGN:
          case PLUSSIGN:
          case NUMBERSIGN:
          case AMPERSAND:
            this.scanner.next();
            break;
          case SOLIDUS:
            this.scanner.next();
            if (this.scanner.isDelim(SOLIDUS)) {
              this.scanner.next();
            }
            break;
        }
      }
      if (prefix) {
        this.scanner.skip(prefix);
      }
      if (this.scanner.tokenType === HASH) {
        this.eat(HASH);
      } else {
        this.eat(IDENT);
      }
      return this.scanner.substrToCursor(start);
    }
    function getImportant() {
      this.eat(DELIM);
      this.scanner.skipSC();
      var important = this.consume(IDENT);
      return important === "important" ? true : important;
    }
  }
});

// node_modules/css-tree/lib/syntax/node/DeclarationList.js
var require_DeclarationList = __commonJS({
  "node_modules/css-tree/lib/syntax/node/DeclarationList.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var rawMode = require_Raw().mode;
    var WHITESPACE = TYPE.WhiteSpace;
    var COMMENT = TYPE.Comment;
    var SEMICOLON = TYPE.Semicolon;
    function consumeRaw(startToken) {
      return this.Raw(startToken, rawMode.semicolonIncluded, true);
    }
    module2.exports = {
      name: "DeclarationList",
      structure: {
        children: [[
          "Declaration"
        ]]
      },
      parse: function() {
        var children = this.createList();
        scan:
          while (!this.scanner.eof) {
            switch (this.scanner.tokenType) {
              case WHITESPACE:
              case COMMENT:
              case SEMICOLON:
                this.scanner.next();
                break;
              default:
                children.push(this.parseWithFallback(this.Declaration, consumeRaw));
            }
          }
        return {
          type: "DeclarationList",
          loc: this.getLocationFromList(children),
          children
        };
      },
      generate: function(node) {
        this.children(node, function(prev) {
          if (prev.type === "Declaration") {
            this.chunk(";");
          }
        });
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Dimension.js
var require_Dimension = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Dimension.js"(exports2, module2) {
    var consumeNumber = require_utils().consumeNumber;
    var TYPE = require_tokenizer().TYPE;
    var DIMENSION = TYPE.Dimension;
    module2.exports = {
      name: "Dimension",
      structure: {
        value: String,
        unit: String
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        var numberEnd = consumeNumber(this.scanner.source, start);
        this.eat(DIMENSION);
        return {
          type: "Dimension",
          loc: this.getLocation(start, this.scanner.tokenStart),
          value: this.scanner.source.substring(start, numberEnd),
          unit: this.scanner.source.substring(numberEnd, this.scanner.tokenStart)
        };
      },
      generate: function(node) {
        this.chunk(node.value);
        this.chunk(node.unit);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Function.js
var require_Function = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Function.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var RIGHTPARENTHESIS = TYPE.RightParenthesis;
    module2.exports = {
      name: "Function",
      structure: {
        name: String,
        children: [[]]
      },
      parse: function(readSequence, recognizer) {
        var start = this.scanner.tokenStart;
        var name = this.consumeFunctionName();
        var nameLowerCase = name.toLowerCase();
        var children;
        children = recognizer.hasOwnProperty(nameLowerCase) ? recognizer[nameLowerCase].call(this, recognizer) : readSequence.call(this, recognizer);
        if (!this.scanner.eof) {
          this.eat(RIGHTPARENTHESIS);
        }
        return {
          type: "Function",
          loc: this.getLocation(start, this.scanner.tokenStart),
          name,
          children
        };
      },
      generate: function(node) {
        this.chunk(node.name);
        this.chunk("(");
        this.children(node);
        this.chunk(")");
      },
      walkContext: "function"
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Hash.js
var require_Hash = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Hash.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var HASH = TYPE.Hash;
    module2.exports = {
      name: "Hash",
      structure: {
        value: String
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        this.eat(HASH);
        return {
          type: "Hash",
          loc: this.getLocation(start, this.scanner.tokenStart),
          value: this.scanner.substrToCursor(start + 1)
        };
      },
      generate: function(node) {
        this.chunk("#");
        this.chunk(node.value);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Identifier.js
var require_Identifier = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Identifier.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var IDENT = TYPE.Ident;
    module2.exports = {
      name: "Identifier",
      structure: {
        name: String
      },
      parse: function() {
        return {
          type: "Identifier",
          loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
          name: this.consume(IDENT)
        };
      },
      generate: function(node) {
        this.chunk(node.name);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/IdSelector.js
var require_IdSelector = __commonJS({
  "node_modules/css-tree/lib/syntax/node/IdSelector.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var HASH = TYPE.Hash;
    module2.exports = {
      name: "IdSelector",
      structure: {
        name: String
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        this.eat(HASH);
        return {
          type: "IdSelector",
          loc: this.getLocation(start, this.scanner.tokenStart),
          name: this.scanner.substrToCursor(start + 1)
        };
      },
      generate: function(node) {
        this.chunk("#");
        this.chunk(node.name);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/MediaFeature.js
var require_MediaFeature = __commonJS({
  "node_modules/css-tree/lib/syntax/node/MediaFeature.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var IDENT = TYPE.Ident;
    var NUMBER = TYPE.Number;
    var DIMENSION = TYPE.Dimension;
    var LEFTPARENTHESIS = TYPE.LeftParenthesis;
    var RIGHTPARENTHESIS = TYPE.RightParenthesis;
    var COLON = TYPE.Colon;
    var DELIM = TYPE.Delim;
    module2.exports = {
      name: "MediaFeature",
      structure: {
        name: String,
        value: ["Identifier", "Number", "Dimension", "Ratio", null]
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        var name;
        var value = null;
        this.eat(LEFTPARENTHESIS);
        this.scanner.skipSC();
        name = this.consume(IDENT);
        this.scanner.skipSC();
        if (this.scanner.tokenType !== RIGHTPARENTHESIS) {
          this.eat(COLON);
          this.scanner.skipSC();
          switch (this.scanner.tokenType) {
            case NUMBER:
              if (this.lookupNonWSType(1) === DELIM) {
                value = this.Ratio();
              } else {
                value = this.Number();
              }
              break;
            case DIMENSION:
              value = this.Dimension();
              break;
            case IDENT:
              value = this.Identifier();
              break;
            default:
              this.error("Number, dimension, ratio or identifier is expected");
          }
          this.scanner.skipSC();
        }
        this.eat(RIGHTPARENTHESIS);
        return {
          type: "MediaFeature",
          loc: this.getLocation(start, this.scanner.tokenStart),
          name,
          value
        };
      },
      generate: function(node) {
        this.chunk("(");
        this.chunk(node.name);
        if (node.value !== null) {
          this.chunk(":");
          this.node(node.value);
        }
        this.chunk(")");
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/MediaQuery.js
var require_MediaQuery = __commonJS({
  "node_modules/css-tree/lib/syntax/node/MediaQuery.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var WHITESPACE = TYPE.WhiteSpace;
    var COMMENT = TYPE.Comment;
    var IDENT = TYPE.Ident;
    var LEFTPARENTHESIS = TYPE.LeftParenthesis;
    module2.exports = {
      name: "MediaQuery",
      structure: {
        children: [[
          "Identifier",
          "MediaFeature",
          "WhiteSpace"
        ]]
      },
      parse: function() {
        this.scanner.skipSC();
        var children = this.createList();
        var child = null;
        var space = null;
        scan:
          while (!this.scanner.eof) {
            switch (this.scanner.tokenType) {
              case COMMENT:
                this.scanner.next();
                continue;
              case WHITESPACE:
                space = this.WhiteSpace();
                continue;
              case IDENT:
                child = this.Identifier();
                break;
              case LEFTPARENTHESIS:
                child = this.MediaFeature();
                break;
              default:
                break scan;
            }
            if (space !== null) {
              children.push(space);
              space = null;
            }
            children.push(child);
          }
        if (child === null) {
          this.error("Identifier or parenthesis is expected");
        }
        return {
          type: "MediaQuery",
          loc: this.getLocationFromList(children),
          children
        };
      },
      generate: function(node) {
        this.children(node);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/MediaQueryList.js
var require_MediaQueryList = __commonJS({
  "node_modules/css-tree/lib/syntax/node/MediaQueryList.js"(exports2, module2) {
    var COMMA = require_tokenizer().TYPE.Comma;
    module2.exports = {
      name: "MediaQueryList",
      structure: {
        children: [[
          "MediaQuery"
        ]]
      },
      parse: function(relative) {
        var children = this.createList();
        this.scanner.skipSC();
        while (!this.scanner.eof) {
          children.push(this.MediaQuery(relative));
          if (this.scanner.tokenType !== COMMA) {
            break;
          }
          this.scanner.next();
        }
        return {
          type: "MediaQueryList",
          loc: this.getLocationFromList(children),
          children
        };
      },
      generate: function(node) {
        this.children(node, function() {
          this.chunk(",");
        });
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Nth.js
var require_Nth = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Nth.js"(exports2, module2) {
    module2.exports = {
      name: "Nth",
      structure: {
        nth: ["AnPlusB", "Identifier"],
        selector: ["SelectorList", null]
      },
      parse: function(allowOfClause) {
        this.scanner.skipSC();
        var start = this.scanner.tokenStart;
        var end = start;
        var selector = null;
        var query;
        if (this.scanner.lookupValue(0, "odd") || this.scanner.lookupValue(0, "even")) {
          query = this.Identifier();
        } else {
          query = this.AnPlusB();
        }
        this.scanner.skipSC();
        if (allowOfClause && this.scanner.lookupValue(0, "of")) {
          this.scanner.next();
          selector = this.SelectorList();
          if (this.needPositions) {
            end = this.getLastListNode(selector.children).loc.end.offset;
          }
        } else {
          if (this.needPositions) {
            end = query.loc.end.offset;
          }
        }
        return {
          type: "Nth",
          loc: this.getLocation(start, end),
          nth: query,
          selector
        };
      },
      generate: function(node) {
        this.node(node.nth);
        if (node.selector !== null) {
          this.chunk(" of ");
          this.node(node.selector);
        }
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Number.js
var require_Number = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Number.js"(exports2, module2) {
    var NUMBER = require_tokenizer().TYPE.Number;
    module2.exports = {
      name: "Number",
      structure: {
        value: String
      },
      parse: function() {
        return {
          type: "Number",
          loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
          value: this.consume(NUMBER)
        };
      },
      generate: function(node) {
        this.chunk(node.value);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Operator.js
var require_Operator = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Operator.js"(exports2, module2) {
    module2.exports = {
      name: "Operator",
      structure: {
        value: String
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        this.scanner.next();
        return {
          type: "Operator",
          loc: this.getLocation(start, this.scanner.tokenStart),
          value: this.scanner.substrToCursor(start)
        };
      },
      generate: function(node) {
        this.chunk(node.value);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Parentheses.js
var require_Parentheses = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Parentheses.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var LEFTPARENTHESIS = TYPE.LeftParenthesis;
    var RIGHTPARENTHESIS = TYPE.RightParenthesis;
    module2.exports = {
      name: "Parentheses",
      structure: {
        children: [[]]
      },
      parse: function(readSequence, recognizer) {
        var start = this.scanner.tokenStart;
        var children = null;
        this.eat(LEFTPARENTHESIS);
        children = readSequence.call(this, recognizer);
        if (!this.scanner.eof) {
          this.eat(RIGHTPARENTHESIS);
        }
        return {
          type: "Parentheses",
          loc: this.getLocation(start, this.scanner.tokenStart),
          children
        };
      },
      generate: function(node) {
        this.chunk("(");
        this.children(node);
        this.chunk(")");
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Percentage.js
var require_Percentage = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Percentage.js"(exports2, module2) {
    var consumeNumber = require_utils().consumeNumber;
    var TYPE = require_tokenizer().TYPE;
    var PERCENTAGE = TYPE.Percentage;
    module2.exports = {
      name: "Percentage",
      structure: {
        value: String
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        var numberEnd = consumeNumber(this.scanner.source, start);
        this.eat(PERCENTAGE);
        return {
          type: "Percentage",
          loc: this.getLocation(start, this.scanner.tokenStart),
          value: this.scanner.source.substring(start, numberEnd)
        };
      },
      generate: function(node) {
        this.chunk(node.value);
        this.chunk("%");
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/PseudoClassSelector.js
var require_PseudoClassSelector = __commonJS({
  "node_modules/css-tree/lib/syntax/node/PseudoClassSelector.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var IDENT = TYPE.Ident;
    var FUNCTION = TYPE.Function;
    var COLON = TYPE.Colon;
    var RIGHTPARENTHESIS = TYPE.RightParenthesis;
    module2.exports = {
      name: "PseudoClassSelector",
      structure: {
        name: String,
        children: [["Raw"], null]
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        var children = null;
        var name;
        var nameLowerCase;
        this.eat(COLON);
        if (this.scanner.tokenType === FUNCTION) {
          name = this.consumeFunctionName();
          nameLowerCase = name.toLowerCase();
          if (this.pseudo.hasOwnProperty(nameLowerCase)) {
            this.scanner.skipSC();
            children = this.pseudo[nameLowerCase].call(this);
            this.scanner.skipSC();
          } else {
            children = this.createList();
            children.push(
              this.Raw(this.scanner.tokenIndex, null, false)
            );
          }
          this.eat(RIGHTPARENTHESIS);
        } else {
          name = this.consume(IDENT);
        }
        return {
          type: "PseudoClassSelector",
          loc: this.getLocation(start, this.scanner.tokenStart),
          name,
          children
        };
      },
      generate: function(node) {
        this.chunk(":");
        this.chunk(node.name);
        if (node.children !== null) {
          this.chunk("(");
          this.children(node);
          this.chunk(")");
        }
      },
      walkContext: "function"
    };
  }
});

// node_modules/css-tree/lib/syntax/node/PseudoElementSelector.js
var require_PseudoElementSelector = __commonJS({
  "node_modules/css-tree/lib/syntax/node/PseudoElementSelector.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var IDENT = TYPE.Ident;
    var FUNCTION = TYPE.Function;
    var COLON = TYPE.Colon;
    var RIGHTPARENTHESIS = TYPE.RightParenthesis;
    module2.exports = {
      name: "PseudoElementSelector",
      structure: {
        name: String,
        children: [["Raw"], null]
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        var children = null;
        var name;
        var nameLowerCase;
        this.eat(COLON);
        this.eat(COLON);
        if (this.scanner.tokenType === FUNCTION) {
          name = this.consumeFunctionName();
          nameLowerCase = name.toLowerCase();
          if (this.pseudo.hasOwnProperty(nameLowerCase)) {
            this.scanner.skipSC();
            children = this.pseudo[nameLowerCase].call(this);
            this.scanner.skipSC();
          } else {
            children = this.createList();
            children.push(
              this.Raw(this.scanner.tokenIndex, null, false)
            );
          }
          this.eat(RIGHTPARENTHESIS);
        } else {
          name = this.consume(IDENT);
        }
        return {
          type: "PseudoElementSelector",
          loc: this.getLocation(start, this.scanner.tokenStart),
          name,
          children
        };
      },
      generate: function(node) {
        this.chunk("::");
        this.chunk(node.name);
        if (node.children !== null) {
          this.chunk("(");
          this.children(node);
          this.chunk(")");
        }
      },
      walkContext: "function"
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Ratio.js
var require_Ratio = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Ratio.js"(exports2, module2) {
    var isDigit = require_tokenizer().isDigit;
    var TYPE = require_tokenizer().TYPE;
    var NUMBER = TYPE.Number;
    var DELIM = TYPE.Delim;
    var SOLIDUS = 47;
    var FULLSTOP = 46;
    function consumeNumber() {
      this.scanner.skipWS();
      var value = this.consume(NUMBER);
      for (var i = 0; i < value.length; i++) {
        var code = value.charCodeAt(i);
        if (!isDigit(code) && code !== FULLSTOP) {
          this.error("Unsigned number is expected", this.scanner.tokenStart - value.length + i);
        }
      }
      if (Number(value) === 0) {
        this.error("Zero number is not allowed", this.scanner.tokenStart - value.length);
      }
      return value;
    }
    module2.exports = {
      name: "Ratio",
      structure: {
        left: String,
        right: String
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        var left = consumeNumber.call(this);
        var right;
        this.scanner.skipWS();
        if (!this.scanner.isDelim(SOLIDUS)) {
          this.error("Solidus is expected");
        }
        this.eat(DELIM);
        right = consumeNumber.call(this);
        return {
          type: "Ratio",
          loc: this.getLocation(start, this.scanner.tokenStart),
          left,
          right
        };
      },
      generate: function(node) {
        this.chunk(node.left);
        this.chunk("/");
        this.chunk(node.right);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Rule.js
var require_Rule = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Rule.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var rawMode = require_Raw().mode;
    var LEFTCURLYBRACKET = TYPE.LeftCurlyBracket;
    function consumeRaw(startToken) {
      return this.Raw(startToken, rawMode.leftCurlyBracket, true);
    }
    function consumePrelude() {
      var prelude = this.SelectorList();
      if (prelude.type !== "Raw" && this.scanner.eof === false && this.scanner.tokenType !== LEFTCURLYBRACKET) {
        this.error();
      }
      return prelude;
    }
    module2.exports = {
      name: "Rule",
      structure: {
        prelude: ["SelectorList", "Raw"],
        block: ["Block"]
      },
      parse: function() {
        var startToken = this.scanner.tokenIndex;
        var startOffset = this.scanner.tokenStart;
        var prelude;
        var block;
        if (this.parseRulePrelude) {
          prelude = this.parseWithFallback(consumePrelude, consumeRaw);
        } else {
          prelude = consumeRaw.call(this, startToken);
        }
        block = this.Block(true);
        return {
          type: "Rule",
          loc: this.getLocation(startOffset, this.scanner.tokenStart),
          prelude,
          block
        };
      },
      generate: function(node) {
        this.node(node.prelude);
        this.node(node.block);
      },
      walkContext: "rule"
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Selector.js
var require_Selector = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Selector.js"(exports2, module2) {
    module2.exports = {
      name: "Selector",
      structure: {
        children: [[
          "TypeSelector",
          "IdSelector",
          "ClassSelector",
          "AttributeSelector",
          "PseudoClassSelector",
          "PseudoElementSelector",
          "Combinator",
          "WhiteSpace"
        ]]
      },
      parse: function() {
        var children = this.readSequence(this.scope.Selector);
        if (this.getFirstListNode(children) === null) {
          this.error("Selector is expected");
        }
        return {
          type: "Selector",
          loc: this.getLocationFromList(children),
          children
        };
      },
      generate: function(node) {
        this.children(node);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/SelectorList.js
var require_SelectorList = __commonJS({
  "node_modules/css-tree/lib/syntax/node/SelectorList.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var COMMA = TYPE.Comma;
    module2.exports = {
      name: "SelectorList",
      structure: {
        children: [[
          "Selector",
          "Raw"
        ]]
      },
      parse: function() {
        var children = this.createList();
        while (!this.scanner.eof) {
          children.push(this.Selector());
          if (this.scanner.tokenType === COMMA) {
            this.scanner.next();
            continue;
          }
          break;
        }
        return {
          type: "SelectorList",
          loc: this.getLocationFromList(children),
          children
        };
      },
      generate: function(node) {
        this.children(node, function() {
          this.chunk(",");
        });
      },
      walkContext: "selector"
    };
  }
});

// node_modules/css-tree/lib/syntax/node/String.js
var require_String = __commonJS({
  "node_modules/css-tree/lib/syntax/node/String.js"(exports2, module2) {
    var STRING = require_tokenizer().TYPE.String;
    module2.exports = {
      name: "String",
      structure: {
        value: String
      },
      parse: function() {
        return {
          type: "String",
          loc: this.getLocation(this.scanner.tokenStart, this.scanner.tokenEnd),
          value: this.consume(STRING)
        };
      },
      generate: function(node) {
        this.chunk(node.value);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/StyleSheet.js
var require_StyleSheet = __commonJS({
  "node_modules/css-tree/lib/syntax/node/StyleSheet.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var WHITESPACE = TYPE.WhiteSpace;
    var COMMENT = TYPE.Comment;
    var ATKEYWORD = TYPE.AtKeyword;
    var CDO = TYPE.CDO;
    var CDC = TYPE.CDC;
    var EXCLAMATIONMARK = 33;
    function consumeRaw(startToken) {
      return this.Raw(startToken, null, false);
    }
    module2.exports = {
      name: "StyleSheet",
      structure: {
        children: [[
          "Comment",
          "CDO",
          "CDC",
          "Atrule",
          "Rule",
          "Raw"
        ]]
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        var children = this.createList();
        var child;
        scan:
          while (!this.scanner.eof) {
            switch (this.scanner.tokenType) {
              case WHITESPACE:
                this.scanner.next();
                continue;
              case COMMENT:
                if (this.scanner.source.charCodeAt(this.scanner.tokenStart + 2) !== EXCLAMATIONMARK) {
                  this.scanner.next();
                  continue;
                }
                child = this.Comment();
                break;
              case CDO:
                child = this.CDO();
                break;
              case CDC:
                child = this.CDC();
                break;
              case ATKEYWORD:
                child = this.parseWithFallback(this.Atrule, consumeRaw);
                break;
              default:
                child = this.parseWithFallback(this.Rule, consumeRaw);
            }
            children.push(child);
          }
        return {
          type: "StyleSheet",
          loc: this.getLocation(start, this.scanner.tokenStart),
          children
        };
      },
      generate: function(node) {
        this.children(node);
      },
      walkContext: "stylesheet"
    };
  }
});

// node_modules/css-tree/lib/syntax/node/TypeSelector.js
var require_TypeSelector = __commonJS({
  "node_modules/css-tree/lib/syntax/node/TypeSelector.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var IDENT = TYPE.Ident;
    var ASTERISK = 42;
    var VERTICALLINE = 124;
    function eatIdentifierOrAsterisk() {
      if (this.scanner.tokenType !== IDENT && this.scanner.isDelim(ASTERISK) === false) {
        this.error("Identifier or asterisk is expected");
      }
      this.scanner.next();
    }
    module2.exports = {
      name: "TypeSelector",
      structure: {
        name: String
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        if (this.scanner.isDelim(VERTICALLINE)) {
          this.scanner.next();
          eatIdentifierOrAsterisk.call(this);
        } else {
          eatIdentifierOrAsterisk.call(this);
          if (this.scanner.isDelim(VERTICALLINE)) {
            this.scanner.next();
            eatIdentifierOrAsterisk.call(this);
          }
        }
        return {
          type: "TypeSelector",
          loc: this.getLocation(start, this.scanner.tokenStart),
          name: this.scanner.substrToCursor(start)
        };
      },
      generate: function(node) {
        this.chunk(node.name);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/UnicodeRange.js
var require_UnicodeRange = __commonJS({
  "node_modules/css-tree/lib/syntax/node/UnicodeRange.js"(exports2, module2) {
    var isHexDigit = require_tokenizer().isHexDigit;
    var cmpChar = require_tokenizer().cmpChar;
    var TYPE = require_tokenizer().TYPE;
    var NAME = require_tokenizer().NAME;
    var IDENT = TYPE.Ident;
    var NUMBER = TYPE.Number;
    var DIMENSION = TYPE.Dimension;
    var PLUSSIGN = 43;
    var HYPHENMINUS = 45;
    var QUESTIONMARK = 63;
    var U = 117;
    function eatHexSequence(offset, allowDash) {
      for (var pos = this.scanner.tokenStart + offset, len = 0; pos < this.scanner.tokenEnd; pos++) {
        var code = this.scanner.source.charCodeAt(pos);
        if (code === HYPHENMINUS && allowDash && len !== 0) {
          if (eatHexSequence.call(this, offset + len + 1, false) === 0) {
            this.error();
          }
          return -1;
        }
        if (!isHexDigit(code)) {
          this.error(
            allowDash && len !== 0 ? "HyphenMinus" + (len < 6 ? " or hex digit" : "") + " is expected" : len < 6 ? "Hex digit is expected" : "Unexpected input",
            pos
          );
        }
        if (++len > 6) {
          this.error("Too many hex digits", pos);
        }
        ;
      }
      this.scanner.next();
      return len;
    }
    function eatQuestionMarkSequence(max) {
      var count = 0;
      while (this.scanner.isDelim(QUESTIONMARK)) {
        if (++count > max) {
          this.error("Too many question marks");
        }
        this.scanner.next();
      }
    }
    function startsWith(code) {
      if (this.scanner.source.charCodeAt(this.scanner.tokenStart) !== code) {
        this.error(NAME[code] + " is expected");
      }
    }
    function scanUnicodeRange() {
      var hexLength = 0;
      if (this.scanner.isDelim(PLUSSIGN)) {
        this.scanner.next();
        if (this.scanner.tokenType === IDENT) {
          hexLength = eatHexSequence.call(this, 0, true);
          if (hexLength > 0) {
            eatQuestionMarkSequence.call(this, 6 - hexLength);
          }
          return;
        }
        if (this.scanner.isDelim(QUESTIONMARK)) {
          this.scanner.next();
          eatQuestionMarkSequence.call(this, 5);
          return;
        }
        this.error("Hex digit or question mark is expected");
        return;
      }
      if (this.scanner.tokenType === NUMBER) {
        startsWith.call(this, PLUSSIGN);
        hexLength = eatHexSequence.call(this, 1, true);
        if (this.scanner.isDelim(QUESTIONMARK)) {
          eatQuestionMarkSequence.call(this, 6 - hexLength);
          return;
        }
        if (this.scanner.tokenType === DIMENSION || this.scanner.tokenType === NUMBER) {
          startsWith.call(this, HYPHENMINUS);
          eatHexSequence.call(this, 1, false);
          return;
        }
        return;
      }
      if (this.scanner.tokenType === DIMENSION) {
        startsWith.call(this, PLUSSIGN);
        hexLength = eatHexSequence.call(this, 1, true);
        if (hexLength > 0) {
          eatQuestionMarkSequence.call(this, 6 - hexLength);
        }
        return;
      }
      this.error();
    }
    module2.exports = {
      name: "UnicodeRange",
      structure: {
        value: String
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        if (!cmpChar(this.scanner.source, start, U)) {
          this.error("U is expected");
        }
        if (!cmpChar(this.scanner.source, start + 1, PLUSSIGN)) {
          this.error("Plus sign is expected");
        }
        this.scanner.next();
        scanUnicodeRange.call(this);
        return {
          type: "UnicodeRange",
          loc: this.getLocation(start, this.scanner.tokenStart),
          value: this.scanner.substrToCursor(start)
        };
      },
      generate: function(node) {
        this.chunk(node.value);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Url.js
var require_Url = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Url.js"(exports2, module2) {
    var isWhiteSpace = require_tokenizer().isWhiteSpace;
    var cmpStr = require_tokenizer().cmpStr;
    var TYPE = require_tokenizer().TYPE;
    var FUNCTION = TYPE.Function;
    var URL = TYPE.Url;
    var RIGHTPARENTHESIS = TYPE.RightParenthesis;
    module2.exports = {
      name: "Url",
      structure: {
        value: ["String", "Raw"]
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        var value;
        switch (this.scanner.tokenType) {
          case URL:
            var rawStart = start + 4;
            var rawEnd = this.scanner.tokenEnd - 1;
            while (rawStart < rawEnd && isWhiteSpace(this.scanner.source.charCodeAt(rawStart))) {
              rawStart++;
            }
            while (rawStart < rawEnd && isWhiteSpace(this.scanner.source.charCodeAt(rawEnd - 1))) {
              rawEnd--;
            }
            value = {
              type: "Raw",
              loc: this.getLocation(rawStart, rawEnd),
              value: this.scanner.source.substring(rawStart, rawEnd)
            };
            this.eat(URL);
            break;
          case FUNCTION:
            if (!cmpStr(this.scanner.source, this.scanner.tokenStart, this.scanner.tokenEnd, "url(")) {
              this.error("Function name must be `url`");
            }
            this.eat(FUNCTION);
            this.scanner.skipSC();
            value = this.String();
            this.scanner.skipSC();
            this.eat(RIGHTPARENTHESIS);
            break;
          default:
            this.error("Url or Function is expected");
        }
        return {
          type: "Url",
          loc: this.getLocation(start, this.scanner.tokenStart),
          value
        };
      },
      generate: function(node) {
        this.chunk("url");
        this.chunk("(");
        this.node(node.value);
        this.chunk(")");
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/Value.js
var require_Value = __commonJS({
  "node_modules/css-tree/lib/syntax/node/Value.js"(exports2, module2) {
    module2.exports = {
      name: "Value",
      structure: {
        children: [[]]
      },
      parse: function() {
        var start = this.scanner.tokenStart;
        var children = this.readSequence(this.scope.Value);
        return {
          type: "Value",
          loc: this.getLocation(start, this.scanner.tokenStart),
          children
        };
      },
      generate: function(node) {
        this.children(node);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/WhiteSpace.js
var require_WhiteSpace = __commonJS({
  "node_modules/css-tree/lib/syntax/node/WhiteSpace.js"(exports2, module2) {
    var WHITESPACE = require_tokenizer().TYPE.WhiteSpace;
    var SPACE = Object.freeze({
      type: "WhiteSpace",
      loc: null,
      value: " "
    });
    module2.exports = {
      name: "WhiteSpace",
      structure: {
        value: String
      },
      parse: function() {
        this.eat(WHITESPACE);
        return SPACE;
      },
      generate: function(node) {
        this.chunk(node.value);
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/node/index.js
var require_node2 = __commonJS({
  "node_modules/css-tree/lib/syntax/node/index.js"(exports2, module2) {
    module2.exports = {
      AnPlusB: require_AnPlusB(),
      Atrule: require_Atrule(),
      AtrulePrelude: require_AtrulePrelude(),
      AttributeSelector: require_AttributeSelector(),
      Block: require_Block(),
      Brackets: require_Brackets(),
      CDC: require_CDC(),
      CDO: require_CDO(),
      ClassSelector: require_ClassSelector(),
      Combinator: require_Combinator(),
      Comment: require_Comment(),
      Declaration: require_Declaration(),
      DeclarationList: require_DeclarationList(),
      Dimension: require_Dimension(),
      Function: require_Function(),
      Hash: require_Hash(),
      Identifier: require_Identifier(),
      IdSelector: require_IdSelector(),
      MediaFeature: require_MediaFeature(),
      MediaQuery: require_MediaQuery(),
      MediaQueryList: require_MediaQueryList(),
      Nth: require_Nth(),
      Number: require_Number(),
      Operator: require_Operator(),
      Parentheses: require_Parentheses(),
      Percentage: require_Percentage(),
      PseudoClassSelector: require_PseudoClassSelector(),
      PseudoElementSelector: require_PseudoElementSelector(),
      Ratio: require_Ratio(),
      Raw: require_Raw(),
      Rule: require_Rule(),
      Selector: require_Selector(),
      SelectorList: require_SelectorList(),
      String: require_String(),
      StyleSheet: require_StyleSheet(),
      TypeSelector: require_TypeSelector(),
      UnicodeRange: require_UnicodeRange(),
      Url: require_Url(),
      Value: require_Value(),
      WhiteSpace: require_WhiteSpace()
    };
  }
});

// node_modules/css-tree/lib/syntax/config/lexer.js
var require_lexer = __commonJS({
  "node_modules/css-tree/lib/syntax/config/lexer.js"(exports2, module2) {
    var data = require_data();
    module2.exports = {
      generic: true,
      types: data.types,
      atrules: data.atrules,
      properties: data.properties,
      node: require_node2()
    };
  }
});

// node_modules/css-tree/lib/syntax/scope/default.js
var require_default = __commonJS({
  "node_modules/css-tree/lib/syntax/scope/default.js"(exports2, module2) {
    var cmpChar = require_tokenizer().cmpChar;
    var cmpStr = require_tokenizer().cmpStr;
    var TYPE = require_tokenizer().TYPE;
    var IDENT = TYPE.Ident;
    var STRING = TYPE.String;
    var NUMBER = TYPE.Number;
    var FUNCTION = TYPE.Function;
    var URL = TYPE.Url;
    var HASH = TYPE.Hash;
    var DIMENSION = TYPE.Dimension;
    var PERCENTAGE = TYPE.Percentage;
    var LEFTPARENTHESIS = TYPE.LeftParenthesis;
    var LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;
    var COMMA = TYPE.Comma;
    var DELIM = TYPE.Delim;
    var NUMBERSIGN = 35;
    var ASTERISK = 42;
    var PLUSSIGN = 43;
    var HYPHENMINUS = 45;
    var SOLIDUS = 47;
    var U = 117;
    module2.exports = function defaultRecognizer(context) {
      switch (this.scanner.tokenType) {
        case HASH:
          return this.Hash();
        case COMMA:
          context.space = null;
          context.ignoreWSAfter = true;
          return this.Operator();
        case LEFTPARENTHESIS:
          return this.Parentheses(this.readSequence, context.recognizer);
        case LEFTSQUAREBRACKET:
          return this.Brackets(this.readSequence, context.recognizer);
        case STRING:
          return this.String();
        case DIMENSION:
          return this.Dimension();
        case PERCENTAGE:
          return this.Percentage();
        case NUMBER:
          return this.Number();
        case FUNCTION:
          return cmpStr(this.scanner.source, this.scanner.tokenStart, this.scanner.tokenEnd, "url(") ? this.Url() : this.Function(this.readSequence, context.recognizer);
        case URL:
          return this.Url();
        case IDENT:
          if (cmpChar(this.scanner.source, this.scanner.tokenStart, U) && cmpChar(this.scanner.source, this.scanner.tokenStart + 1, PLUSSIGN)) {
            return this.UnicodeRange();
          } else {
            return this.Identifier();
          }
        case DELIM:
          var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);
          if (code === SOLIDUS || code === ASTERISK || code === PLUSSIGN || code === HYPHENMINUS) {
            return this.Operator();
          }
          if (code === NUMBERSIGN) {
            this.error("Hex or identifier is expected", this.scanner.tokenStart + 1);
          }
          break;
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/scope/atrulePrelude.js
var require_atrulePrelude = __commonJS({
  "node_modules/css-tree/lib/syntax/scope/atrulePrelude.js"(exports2, module2) {
    module2.exports = {
      getNode: require_default()
    };
  }
});

// node_modules/css-tree/lib/syntax/scope/selector.js
var require_selector = __commonJS({
  "node_modules/css-tree/lib/syntax/scope/selector.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var DELIM = TYPE.Delim;
    var IDENT = TYPE.Ident;
    var DIMENSION = TYPE.Dimension;
    var PERCENTAGE = TYPE.Percentage;
    var NUMBER = TYPE.Number;
    var HASH = TYPE.Hash;
    var COLON = TYPE.Colon;
    var LEFTSQUAREBRACKET = TYPE.LeftSquareBracket;
    var NUMBERSIGN = 35;
    var ASTERISK = 42;
    var PLUSSIGN = 43;
    var SOLIDUS = 47;
    var FULLSTOP = 46;
    var GREATERTHANSIGN = 62;
    var VERTICALLINE = 124;
    var TILDE = 126;
    function getNode(context) {
      switch (this.scanner.tokenType) {
        case LEFTSQUAREBRACKET:
          return this.AttributeSelector();
        case HASH:
          return this.IdSelector();
        case COLON:
          if (this.scanner.lookupType(1) === COLON) {
            return this.PseudoElementSelector();
          } else {
            return this.PseudoClassSelector();
          }
        case IDENT:
          return this.TypeSelector();
        case NUMBER:
        case PERCENTAGE:
          return this.Percentage();
        case DIMENSION:
          if (this.scanner.source.charCodeAt(this.scanner.tokenStart) === FULLSTOP) {
            this.error("Identifier is expected", this.scanner.tokenStart + 1);
          }
          break;
        case DELIM:
          var code = this.scanner.source.charCodeAt(this.scanner.tokenStart);
          switch (code) {
            case PLUSSIGN:
            case GREATERTHANSIGN:
            case TILDE:
              context.space = null;
              context.ignoreWSAfter = true;
              return this.Combinator();
            case SOLIDUS:
              return this.Combinator();
            case FULLSTOP:
              return this.ClassSelector();
            case ASTERISK:
            case VERTICALLINE:
              return this.TypeSelector();
            case NUMBERSIGN:
              return this.IdSelector();
          }
          break;
      }
    }
    module2.exports = {
      getNode
    };
  }
});

// node_modules/css-tree/lib/syntax/function/expression.js
var require_expression = __commonJS({
  "node_modules/css-tree/lib/syntax/function/expression.js"(exports2, module2) {
    module2.exports = function() {
      return this.createSingleNodeList(
        this.Raw(this.scanner.tokenIndex, null, false)
      );
    };
  }
});

// node_modules/css-tree/lib/syntax/function/var.js
var require_var = __commonJS({
  "node_modules/css-tree/lib/syntax/function/var.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var rawMode = require_Raw().mode;
    var COMMA = TYPE.Comma;
    var WHITESPACE = TYPE.WhiteSpace;
    module2.exports = function() {
      var children = this.createList();
      this.scanner.skipSC();
      children.push(this.Identifier());
      this.scanner.skipSC();
      if (this.scanner.tokenType === COMMA) {
        children.push(this.Operator());
        const startIndex = this.scanner.tokenIndex;
        const value = this.parseCustomProperty ? this.Value(null) : this.Raw(this.scanner.tokenIndex, rawMode.exclamationMarkOrSemicolon, false);
        if (value.type === "Value" && value.children.isEmpty()) {
          for (let offset = startIndex - this.scanner.tokenIndex; offset <= 0; offset++) {
            if (this.scanner.lookupType(offset) === WHITESPACE) {
              value.children.appendData({
                type: "WhiteSpace",
                loc: null,
                value: " "
              });
              break;
            }
          }
        }
        children.push(value);
      }
      return children;
    };
  }
});

// node_modules/css-tree/lib/syntax/scope/value.js
var require_value = __commonJS({
  "node_modules/css-tree/lib/syntax/scope/value.js"(exports2, module2) {
    module2.exports = {
      getNode: require_default(),
      "expression": require_expression(),
      "var": require_var()
    };
  }
});

// node_modules/css-tree/lib/syntax/scope/index.js
var require_scope = __commonJS({
  "node_modules/css-tree/lib/syntax/scope/index.js"(exports2, module2) {
    module2.exports = {
      AtrulePrelude: require_atrulePrelude(),
      Selector: require_selector(),
      Value: require_value()
    };
  }
});

// node_modules/css-tree/lib/syntax/atrule/font-face.js
var require_font_face = __commonJS({
  "node_modules/css-tree/lib/syntax/atrule/font-face.js"(exports2, module2) {
    module2.exports = {
      parse: {
        prelude: null,
        block: function() {
          return this.Block(true);
        }
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/atrule/import.js
var require_import = __commonJS({
  "node_modules/css-tree/lib/syntax/atrule/import.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var STRING = TYPE.String;
    var IDENT = TYPE.Ident;
    var URL = TYPE.Url;
    var FUNCTION = TYPE.Function;
    var LEFTPARENTHESIS = TYPE.LeftParenthesis;
    module2.exports = {
      parse: {
        prelude: function() {
          var children = this.createList();
          this.scanner.skipSC();
          switch (this.scanner.tokenType) {
            case STRING:
              children.push(this.String());
              break;
            case URL:
            case FUNCTION:
              children.push(this.Url());
              break;
            default:
              this.error("String or url() is expected");
          }
          if (this.lookupNonWSType(0) === IDENT || this.lookupNonWSType(0) === LEFTPARENTHESIS) {
            children.push(this.WhiteSpace());
            children.push(this.MediaQueryList());
          }
          return children;
        },
        block: null
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/atrule/media.js
var require_media = __commonJS({
  "node_modules/css-tree/lib/syntax/atrule/media.js"(exports2, module2) {
    module2.exports = {
      parse: {
        prelude: function() {
          return this.createSingleNodeList(
            this.MediaQueryList()
          );
        },
        block: function() {
          return this.Block(false);
        }
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/atrule/page.js
var require_page = __commonJS({
  "node_modules/css-tree/lib/syntax/atrule/page.js"(exports2, module2) {
    module2.exports = {
      parse: {
        prelude: function() {
          return this.createSingleNodeList(
            this.SelectorList()
          );
        },
        block: function() {
          return this.Block(true);
        }
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/atrule/supports.js
var require_supports = __commonJS({
  "node_modules/css-tree/lib/syntax/atrule/supports.js"(exports2, module2) {
    var TYPE = require_tokenizer().TYPE;
    var WHITESPACE = TYPE.WhiteSpace;
    var COMMENT = TYPE.Comment;
    var IDENT = TYPE.Ident;
    var FUNCTION = TYPE.Function;
    var COLON = TYPE.Colon;
    var LEFTPARENTHESIS = TYPE.LeftParenthesis;
    function consumeRaw() {
      return this.createSingleNodeList(
        this.Raw(this.scanner.tokenIndex, null, false)
      );
    }
    function parentheses() {
      this.scanner.skipSC();
      if (this.scanner.tokenType === IDENT && this.lookupNonWSType(1) === COLON) {
        return this.createSingleNodeList(
          this.Declaration()
        );
      }
      return readSequence.call(this);
    }
    function readSequence() {
      var children = this.createList();
      var space = null;
      var child;
      this.scanner.skipSC();
      scan:
        while (!this.scanner.eof) {
          switch (this.scanner.tokenType) {
            case WHITESPACE:
              space = this.WhiteSpace();
              continue;
            case COMMENT:
              this.scanner.next();
              continue;
            case FUNCTION:
              child = this.Function(consumeRaw, this.scope.AtrulePrelude);
              break;
            case IDENT:
              child = this.Identifier();
              break;
            case LEFTPARENTHESIS:
              child = this.Parentheses(parentheses, this.scope.AtrulePrelude);
              break;
            default:
              break scan;
          }
          if (space !== null) {
            children.push(space);
            space = null;
          }
          children.push(child);
        }
      return children;
    }
    module2.exports = {
      parse: {
        prelude: function() {
          var children = readSequence.call(this);
          if (this.getFirstListNode(children) === null) {
            this.error("Condition is expected");
          }
          return children;
        },
        block: function() {
          return this.Block(false);
        }
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/atrule/index.js
var require_atrule = __commonJS({
  "node_modules/css-tree/lib/syntax/atrule/index.js"(exports2, module2) {
    module2.exports = {
      "font-face": require_font_face(),
      "import": require_import(),
      "media": require_media(),
      "page": require_page(),
      "supports": require_supports()
    };
  }
});

// node_modules/css-tree/lib/syntax/pseudo/dir.js
var require_dir = __commonJS({
  "node_modules/css-tree/lib/syntax/pseudo/dir.js"(exports2, module2) {
    module2.exports = {
      parse: function() {
        return this.createSingleNodeList(
          this.Identifier()
        );
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/pseudo/has.js
var require_has = __commonJS({
  "node_modules/css-tree/lib/syntax/pseudo/has.js"(exports2, module2) {
    module2.exports = {
      parse: function() {
        return this.createSingleNodeList(
          this.SelectorList()
        );
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/pseudo/lang.js
var require_lang = __commonJS({
  "node_modules/css-tree/lib/syntax/pseudo/lang.js"(exports2, module2) {
    module2.exports = {
      parse: function() {
        return this.createSingleNodeList(
          this.Identifier()
        );
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/pseudo/common/selectorList.js
var require_selectorList = __commonJS({
  "node_modules/css-tree/lib/syntax/pseudo/common/selectorList.js"(exports2, module2) {
    module2.exports = {
      parse: function selectorList() {
        return this.createSingleNodeList(
          this.SelectorList()
        );
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/pseudo/matches.js
var require_matches = __commonJS({
  "node_modules/css-tree/lib/syntax/pseudo/matches.js"(exports2, module2) {
    module2.exports = require_selectorList();
  }
});

// node_modules/css-tree/lib/syntax/pseudo/not.js
var require_not = __commonJS({
  "node_modules/css-tree/lib/syntax/pseudo/not.js"(exports2, module2) {
    module2.exports = require_selectorList();
  }
});

// node_modules/css-tree/lib/syntax/pseudo/common/nthWithOfClause.js
var require_nthWithOfClause = __commonJS({
  "node_modules/css-tree/lib/syntax/pseudo/common/nthWithOfClause.js"(exports2, module2) {
    var ALLOW_OF_CLAUSE = true;
    module2.exports = {
      parse: function nthWithOfClause() {
        return this.createSingleNodeList(
          this.Nth(ALLOW_OF_CLAUSE)
        );
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/pseudo/nth-child.js
var require_nth_child = __commonJS({
  "node_modules/css-tree/lib/syntax/pseudo/nth-child.js"(exports2, module2) {
    module2.exports = require_nthWithOfClause();
  }
});

// node_modules/css-tree/lib/syntax/pseudo/nth-last-child.js
var require_nth_last_child = __commonJS({
  "node_modules/css-tree/lib/syntax/pseudo/nth-last-child.js"(exports2, module2) {
    module2.exports = require_nthWithOfClause();
  }
});

// node_modules/css-tree/lib/syntax/pseudo/common/nth.js
var require_nth = __commonJS({
  "node_modules/css-tree/lib/syntax/pseudo/common/nth.js"(exports2, module2) {
    var DISALLOW_OF_CLAUSE = false;
    module2.exports = {
      parse: function nth() {
        return this.createSingleNodeList(
          this.Nth(DISALLOW_OF_CLAUSE)
        );
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/pseudo/nth-last-of-type.js
var require_nth_last_of_type = __commonJS({
  "node_modules/css-tree/lib/syntax/pseudo/nth-last-of-type.js"(exports2, module2) {
    module2.exports = require_nth();
  }
});

// node_modules/css-tree/lib/syntax/pseudo/nth-of-type.js
var require_nth_of_type = __commonJS({
  "node_modules/css-tree/lib/syntax/pseudo/nth-of-type.js"(exports2, module2) {
    module2.exports = require_nth();
  }
});

// node_modules/css-tree/lib/syntax/pseudo/slotted.js
var require_slotted = __commonJS({
  "node_modules/css-tree/lib/syntax/pseudo/slotted.js"(exports2, module2) {
    module2.exports = {
      parse: function compoundSelector() {
        return this.createSingleNodeList(
          this.Selector()
        );
      }
    };
  }
});

// node_modules/css-tree/lib/syntax/pseudo/index.js
var require_pseudo = __commonJS({
  "node_modules/css-tree/lib/syntax/pseudo/index.js"(exports2, module2) {
    module2.exports = {
      "dir": require_dir(),
      "has": require_has(),
      "lang": require_lang(),
      "matches": require_matches(),
      "not": require_not(),
      "nth-child": require_nth_child(),
      "nth-last-child": require_nth_last_child(),
      "nth-last-of-type": require_nth_last_of_type(),
      "nth-of-type": require_nth_of_type(),
      "slotted": require_slotted()
    };
  }
});

// node_modules/css-tree/lib/syntax/config/parser.js
var require_parser = __commonJS({
  "node_modules/css-tree/lib/syntax/config/parser.js"(exports2, module2) {
    module2.exports = {
      parseContext: {
        default: "StyleSheet",
        stylesheet: "StyleSheet",
        atrule: "Atrule",
        atrulePrelude: function(options) {
          return this.AtrulePrelude(options.atrule ? String(options.atrule) : null);
        },
        mediaQueryList: "MediaQueryList",
        mediaQuery: "MediaQuery",
        rule: "Rule",
        selectorList: "SelectorList",
        selector: "Selector",
        block: function() {
          return this.Block(true);
        },
        declarationList: "DeclarationList",
        declaration: "Declaration",
        value: "Value"
      },
      scope: require_scope(),
      atrule: require_atrule(),
      pseudo: require_pseudo(),
      node: require_node2()
    };
  }
});

// node_modules/css-tree/lib/syntax/config/walker.js
var require_walker = __commonJS({
  "node_modules/css-tree/lib/syntax/config/walker.js"(exports2, module2) {
    module2.exports = {
      node: require_node2()
    };
  }
});

// node_modules/css-tree/package.json
var require_package = __commonJS({
  "node_modules/css-tree/package.json"(exports2, module2) {
    module2.exports = {
      name: "css-tree",
      version: "1.1.3",
      description: "A tool set for CSS: fast detailed parser (CSS \u2192 AST), walker (AST traversal), generator (AST \u2192 CSS) and lexer (validation and matching) based on specs and browser implementations",
      author: "Roman Dvornov <rdvornov@gmail.com> (https://github.com/lahmatiy)",
      license: "MIT",
      repository: "csstree/csstree",
      keywords: [
        "css",
        "ast",
        "tokenizer",
        "parser",
        "walker",
        "lexer",
        "generator",
        "utils",
        "syntax",
        "validation"
      ],
      main: "lib/index.js",
      unpkg: "dist/csstree.min.js",
      jsdelivr: "dist/csstree.min.js",
      scripts: {
        build: "rollup --config",
        lint: "eslint data lib scripts test && node scripts/review-syntax-patch --lint && node scripts/update-docs --lint",
        "lint-and-test": "npm run lint && npm test",
        "update:docs": "node scripts/update-docs",
        "review:syntax-patch": "node scripts/review-syntax-patch",
        test: "mocha --reporter progress",
        coverage: "nyc npm test",
        travis: "nyc npm run lint-and-test && npm run coveralls",
        coveralls: "nyc report --reporter=text-lcov | coveralls",
        prepublishOnly: "npm run build",
        hydrogen: "node --trace-hydrogen --trace-phase=Z --trace-deopt --code-comments --hydrogen-track-positions --redirect-code-traces --redirect-code-traces-to=code.asm --trace_hydrogen_file=code.cfg --print-opt-code bin/parse --stat -o /dev/null"
      },
      dependencies: {
        "mdn-data": "2.0.14",
        "source-map": "^0.6.1"
      },
      devDependencies: {
        "@rollup/plugin-commonjs": "^11.0.2",
        "@rollup/plugin-json": "^4.0.2",
        "@rollup/plugin-node-resolve": "^7.1.1",
        coveralls: "^3.0.9",
        eslint: "^6.8.0",
        "json-to-ast": "^2.1.0",
        mocha: "^6.2.3",
        nyc: "^14.1.1",
        rollup: "^1.32.1",
        "rollup-plugin-terser": "^5.3.0"
      },
      engines: {
        node: ">=8.0.0"
      },
      files: [
        "data",
        "dist",
        "lib"
      ]
    };
  }
});

// node_modules/css-tree/lib/syntax/index.js
var require_syntax = __commonJS({
  "node_modules/css-tree/lib/syntax/index.js"(exports2, module2) {
    function merge() {
      var dest = {};
      for (var i = 0; i < arguments.length; i++) {
        var src = arguments[i];
        for (var key in src) {
          dest[key] = src[key];
        }
      }
      return dest;
    }
    module2.exports = require_create5().create(
      merge(
        require_lexer(),
        require_parser(),
        require_walker()
      )
    );
    module2.exports.version = require_package().version;
  }
});

// node_modules/css-tree/lib/index.js
var require_lib8 = __commonJS({
  "node_modules/css-tree/lib/index.js"(exports2, module2) {
    module2.exports = require_syntax();
  }
});

// node_modules/stable/stable.js
var require_stable = __commonJS({
  "node_modules/stable/stable.js"(exports2, module2) {
    (function(global, factory) {
      typeof exports2 === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.stable = factory();
    })(exports2, function() {
      "use strict";
      var stable = function(arr, comp) {
        return exec(arr.slice(), comp);
      };
      stable.inplace = function(arr, comp) {
        var result = exec(arr, comp);
        if (result !== arr) {
          pass(result, null, arr.length, arr);
        }
        return arr;
      };
      function exec(arr, comp) {
        if (typeof comp !== "function") {
          comp = function(a, b) {
            return String(a).localeCompare(b);
          };
        }
        var len = arr.length;
        if (len <= 1) {
          return arr;
        }
        var buffer = new Array(len);
        for (var chk = 1; chk < len; chk *= 2) {
          pass(arr, comp, chk, buffer);
          var tmp = arr;
          arr = buffer;
          buffer = tmp;
        }
        return arr;
      }
      var pass = function(arr, comp, chk, result) {
        var len = arr.length;
        var i = 0;
        var dbl = chk * 2;
        var l, r, e;
        var li, ri;
        for (l = 0; l < len; l += dbl) {
          r = l + chk;
          e = r + chk;
          if (r > len)
            r = len;
          if (e > len)
            e = len;
          li = l;
          ri = r;
          while (true) {
            if (li < r && ri < e) {
              if (comp(arr[li], arr[ri]) <= 0) {
                result[i++] = arr[li++];
              } else {
                result[i++] = arr[ri++];
              }
            } else if (li < r) {
              result[i++] = arr[li++];
            } else if (ri < e) {
              result[i++] = arr[ri++];
            } else {
              break;
            }
          }
        }
      };
      return stable;
    });
  }
});

// node_modules/csso/lib/restructure/prepare/specificity.js
var require_specificity = __commonJS({
  "node_modules/csso/lib/restructure/prepare/specificity.js"(exports2, module2) {
    module2.exports = function specificity(simpleSelector) {
      var A = 0;
      var B = 0;
      var C = 0;
      simpleSelector.children.each(function walk(node) {
        switch (node.type) {
          case "SelectorList":
          case "Selector":
            node.children.each(walk);
            break;
          case "IdSelector":
            A++;
            break;
          case "ClassSelector":
          case "AttributeSelector":
            B++;
            break;
          case "PseudoClassSelector":
            switch (node.name.toLowerCase()) {
              case "not":
                node.children.each(walk);
                break;
              case "before":
              case "after":
              case "first-line":
              case "first-letter":
                C++;
                break;
              default:
                B++;
            }
            break;
          case "PseudoElementSelector":
            C++;
            break;
          case "TypeSelector":
            if (node.name.charAt(node.name.length - 1) !== "*") {
              C++;
            }
            break;
        }
      });
      return [A, B, C];
    };
  }
});

// node_modules/svgo/lib/css-tools.js
var require_css_tools = __commonJS({
  "node_modules/svgo/lib/css-tools.js"(exports2, module2) {
    "use strict";
    var csstree = require_lib8();
    var List = csstree.List;
    var stable = require_stable();
    var specificity = require_specificity();
    function flattenToSelectors(cssAst) {
      var selectors = [];
      csstree.walk(cssAst, {
        visit: "Rule",
        enter: function(node) {
          if (node.type !== "Rule") {
            return;
          }
          var atrule = this.atrule;
          var rule = node;
          node.prelude.children.each(function(selectorNode, selectorItem) {
            var selector = {
              item: selectorItem,
              atrule,
              rule,
              pseudos: (
                /** @type {{item: any; list: any[]}[]} */
                []
              )
            };
            selectorNode.children.each(function(selectorChildNode, selectorChildItem, selectorChildList) {
              if (selectorChildNode.type === "PseudoClassSelector" || selectorChildNode.type === "PseudoElementSelector") {
                selector.pseudos.push({
                  item: selectorChildItem,
                  list: selectorChildList
                });
              }
            });
            selectors.push(selector);
          });
        }
      });
      return selectors;
    }
    function filterByMqs(selectors, useMqs) {
      return selectors.filter(function(selector) {
        if (selector.atrule === null) {
          return ~useMqs.indexOf("");
        }
        var mqName = selector.atrule.name;
        var mqStr = mqName;
        if (selector.atrule.expression && selector.atrule.expression.children.first().type === "MediaQueryList") {
          var mqExpr = csstree.generate(selector.atrule.expression);
          mqStr = [mqName, mqExpr].join(" ");
        }
        return ~useMqs.indexOf(mqStr);
      });
    }
    function filterByPseudos(selectors, usePseudos) {
      return selectors.filter(function(selector) {
        var pseudoSelectorsStr = csstree.generate({
          type: "Selector",
          children: new List().fromArray(
            selector.pseudos.map(function(pseudo) {
              return pseudo.item.data;
            })
          )
        });
        return ~usePseudos.indexOf(pseudoSelectorsStr);
      });
    }
    function cleanPseudos(selectors) {
      selectors.forEach(function(selector) {
        selector.pseudos.forEach(function(pseudo) {
          pseudo.list.remove(pseudo.item);
        });
      });
    }
    function compareSpecificity(aSpecificity, bSpecificity) {
      for (var i = 0; i < 4; i += 1) {
        if (aSpecificity[i] < bSpecificity[i]) {
          return -1;
        } else if (aSpecificity[i] > bSpecificity[i]) {
          return 1;
        }
      }
      return 0;
    }
    function compareSimpleSelectorNode(aSimpleSelectorNode, bSimpleSelectorNode) {
      var aSpecificity = specificity(aSimpleSelectorNode), bSpecificity = specificity(bSimpleSelectorNode);
      return compareSpecificity(aSpecificity, bSpecificity);
    }
    function _bySelectorSpecificity(selectorA, selectorB) {
      return compareSimpleSelectorNode(selectorA.item.data, selectorB.item.data);
    }
    function sortSelectors(selectors) {
      return stable(selectors, _bySelectorSpecificity);
    }
    function csstreeToStyleDeclaration(declaration) {
      var propertyName = declaration.property, propertyValue = csstree.generate(declaration.value), propertyPriority = declaration.important ? "important" : "";
      return {
        name: propertyName,
        value: propertyValue,
        priority: propertyPriority
      };
    }
    function getCssStr(elem) {
      if (elem.children.length > 0 && (elem.children[0].type === "text" || elem.children[0].type === "cdata")) {
        return elem.children[0].value;
      }
      return "";
    }
    function setCssStr(elem, css) {
      if (elem.children.length === 0) {
        elem.children.push({
          type: "text",
          value: ""
        });
      }
      if (elem.children[0].type !== "text" && elem.children[0].type !== "cdata") {
        return css;
      }
      elem.children[0].value = css;
      return css;
    }
    module2.exports.flattenToSelectors = flattenToSelectors;
    module2.exports.filterByMqs = filterByMqs;
    module2.exports.filterByPseudos = filterByPseudos;
    module2.exports.cleanPseudos = cleanPseudos;
    module2.exports.compareSpecificity = compareSpecificity;
    module2.exports.compareSimpleSelectorNode = compareSimpleSelectorNode;
    module2.exports.sortSelectors = sortSelectors;
    module2.exports.csstreeToStyleDeclaration = csstreeToStyleDeclaration;
    module2.exports.getCssStr = getCssStr;
    module2.exports.setCssStr = setCssStr;
  }
});

// node_modules/svgo/lib/svgo/css-style-declaration.js
var require_css_style_declaration = __commonJS({
  "node_modules/svgo/lib/svgo/css-style-declaration.js"(exports2, module2) {
    "use strict";
    var csstree = require_lib8();
    var csstools = require_css_tools();
    var CSSStyleDeclaration = function(node) {
      this.parentNode = node;
      this.properties = /* @__PURE__ */ new Map();
      this.hasSynced = false;
      this.styleValue = null;
      this.parseError = false;
      const value = node.attributes.style;
      if (value != null) {
        this.addStyleValueHandler();
        this.setStyleValue(value);
      }
    };
    CSSStyleDeclaration.prototype.addStyleValueHandler = function() {
      Object.defineProperty(this.parentNode.attributes, "style", {
        get: this.getStyleValue.bind(this),
        set: this.setStyleValue.bind(this),
        enumerable: true,
        configurable: true
      });
    };
    CSSStyleDeclaration.prototype.getStyleValue = function() {
      return this.getCssText();
    };
    CSSStyleDeclaration.prototype.setStyleValue = function(newValue) {
      this.properties.clear();
      this.styleValue = newValue;
      this.hasSynced = false;
    };
    CSSStyleDeclaration.prototype._loadCssText = function() {
      if (this.hasSynced) {
        return;
      }
      this.hasSynced = true;
      if (!this.styleValue || this.styleValue.length === 0) {
        return;
      }
      var inlineCssStr = this.styleValue;
      var declarations = {};
      try {
        declarations = csstree.parse(inlineCssStr, {
          context: "declarationList",
          parseValue: false
        });
      } catch (parseError) {
        this.parseError = parseError;
        return;
      }
      this.parseError = false;
      var self = this;
      declarations.children.each(function(declaration) {
        try {
          var styleDeclaration = csstools.csstreeToStyleDeclaration(declaration);
          self.setProperty(
            styleDeclaration.name,
            styleDeclaration.value,
            styleDeclaration.priority
          );
        } catch (styleError) {
          if (styleError.message !== "Unknown node type: undefined") {
            self.parseError = styleError;
          }
        }
      });
    };
    CSSStyleDeclaration.prototype.getCssText = function() {
      var properties = this.getProperties();
      if (this.parseError) {
        return this.styleValue;
      }
      var cssText = [];
      properties.forEach(function(property, propertyName) {
        var strImportant = property.priority === "important" ? "!important" : "";
        cssText.push(
          propertyName.trim() + ":" + property.value.trim() + strImportant
        );
      });
      return cssText.join(";");
    };
    CSSStyleDeclaration.prototype._handleParseError = function() {
      if (this.parseError) {
        console.warn(
          "Warning: Parse error when parsing inline styles, style properties of this element cannot be used. The raw styles can still be get/set using .attr('style').value. Error details: " + this.parseError
        );
      }
    };
    CSSStyleDeclaration.prototype._getProperty = function(propertyName) {
      if (typeof propertyName === "undefined") {
        throw Error("1 argument required, but only 0 present.");
      }
      var properties = this.getProperties();
      this._handleParseError();
      var property = properties.get(propertyName.trim());
      return property;
    };
    CSSStyleDeclaration.prototype.getPropertyPriority = function(propertyName) {
      var property = this._getProperty(propertyName);
      return property ? property.priority : "";
    };
    CSSStyleDeclaration.prototype.getPropertyValue = function(propertyName) {
      var property = this._getProperty(propertyName);
      return property ? property.value : null;
    };
    CSSStyleDeclaration.prototype.item = function(index) {
      if (typeof index === "undefined") {
        throw Error("1 argument required, but only 0 present.");
      }
      var properties = this.getProperties();
      this._handleParseError();
      return Array.from(properties.keys())[index];
    };
    CSSStyleDeclaration.prototype.getProperties = function() {
      this._loadCssText();
      return this.properties;
    };
    CSSStyleDeclaration.prototype.removeProperty = function(propertyName) {
      if (typeof propertyName === "undefined") {
        throw Error("1 argument required, but only 0 present.");
      }
      this.addStyleValueHandler();
      var properties = this.getProperties();
      this._handleParseError();
      var oldValue = this.getPropertyValue(propertyName);
      properties.delete(propertyName.trim());
      return oldValue;
    };
    CSSStyleDeclaration.prototype.setProperty = function(propertyName, value, priority) {
      if (typeof propertyName === "undefined") {
        throw Error("propertyName argument required, but only not present.");
      }
      this.addStyleValueHandler();
      var properties = this.getProperties();
      this._handleParseError();
      var property = {
        value: value.trim(),
        priority: priority.trim()
      };
      properties.set(propertyName.trim(), property);
      return property;
    };
    module2.exports = CSSStyleDeclaration;
  }
});

// node_modules/svgo/lib/svgo/jsAPI.js
var require_jsAPI = __commonJS({
  "node_modules/svgo/lib/svgo/jsAPI.js"(exports2, module2) {
    "use strict";
    var { selectAll, selectOne, is } = require_lib7();
    var svgoCssSelectAdapter = require_css_select_adapter();
    var CSSClassList = require_css_class_list();
    var CSSStyleDeclaration = require_css_style_declaration();
    var parseName = (name) => {
      if (name == null) {
        return {
          prefix: "",
          local: ""
        };
      }
      if (name === "xmlns") {
        return {
          prefix: "xmlns",
          local: ""
        };
      }
      const chunks = name.split(":");
      if (chunks.length === 1) {
        return {
          prefix: "",
          local: chunks[0]
        };
      }
      return {
        prefix: chunks[0],
        local: chunks[1]
      };
    };
    var cssSelectOpts = {
      xmlMode: true,
      adapter: svgoCssSelectAdapter
    };
    var attrsHandler = {
      get: (attributes, name) => {
        if (attributes.hasOwnProperty(name)) {
          return {
            name,
            get value() {
              return attributes[name];
            },
            set value(value) {
              attributes[name] = value;
            }
          };
        }
      },
      set: (attributes, name, attr) => {
        attributes[name] = attr.value;
        return true;
      }
    };
    var JSAPI = function(data, parentNode) {
      Object.assign(this, data);
      if (this.type === "element") {
        if (this.attributes == null) {
          this.attributes = {};
        }
        if (this.children == null) {
          this.children = [];
        }
        Object.defineProperty(this, "class", {
          writable: true,
          configurable: true,
          value: new CSSClassList(this)
        });
        Object.defineProperty(this, "style", {
          writable: true,
          configurable: true,
          value: new CSSStyleDeclaration(this)
        });
        Object.defineProperty(this, "parentNode", {
          writable: true,
          value: parentNode
        });
        const element = this;
        Object.defineProperty(this, "attrs", {
          configurable: true,
          get() {
            return new Proxy(element.attributes, attrsHandler);
          },
          set(value) {
            const newAttributes = {};
            for (const attr of Object.values(value)) {
              newAttributes[attr.name] = attr.value;
            }
            element.attributes = newAttributes;
          }
        });
      }
    };
    module2.exports = JSAPI;
    JSAPI.prototype.clone = function() {
      const { children, ...nodeData } = this;
      const clonedNode = new JSAPI(JSON.parse(JSON.stringify(nodeData)), null);
      if (children) {
        clonedNode.children = children.map((child) => {
          const clonedChild = child.clone();
          clonedChild.parentNode = clonedNode;
          return clonedChild;
        });
      }
      return clonedNode;
    };
    JSAPI.prototype.isElem = function(param) {
      if (this.type !== "element") {
        return false;
      }
      if (param == null) {
        return true;
      }
      if (Array.isArray(param)) {
        return param.includes(this.name);
      }
      return this.name === param;
    };
    JSAPI.prototype.renameElem = function(name) {
      if (name && typeof name === "string")
        this.name = name;
      return this;
    };
    JSAPI.prototype.isEmpty = function() {
      return !this.children || !this.children.length;
    };
    JSAPI.prototype.closestElem = function(elemName) {
      var elem = this;
      while ((elem = elem.parentNode) && !elem.isElem(elemName))
        ;
      return elem;
    };
    JSAPI.prototype.spliceContent = function(start, n, insertion) {
      if (arguments.length < 2)
        return [];
      if (!Array.isArray(insertion))
        insertion = Array.apply(null, arguments).slice(2);
      insertion.forEach(function(inner) {
        inner.parentNode = this;
      }, this);
      return this.children.splice.apply(
        this.children,
        [start, n].concat(insertion)
      );
    };
    JSAPI.prototype.hasAttr = function(name, val) {
      if (this.type !== "element") {
        return false;
      }
      if (Object.keys(this.attributes).length === 0) {
        return false;
      }
      if (name == null) {
        return true;
      }
      if (this.attributes.hasOwnProperty(name) === false) {
        return false;
      }
      if (val !== void 0) {
        return this.attributes[name] === val.toString();
      }
      return true;
    };
    JSAPI.prototype.hasAttrLocal = function(localName, val) {
      if (!this.attrs || !Object.keys(this.attrs).length)
        return false;
      if (!arguments.length)
        return !!this.attrs;
      var callback;
      switch (val != null && val.constructor && val.constructor.name) {
        case "Number":
        case "String":
          callback = stringValueTest;
          break;
        case "RegExp":
          callback = regexpValueTest;
          break;
        case "Function":
          callback = funcValueTest;
          break;
        default:
          callback = nameTest;
      }
      return this.someAttr(callback);
      function nameTest(attr) {
        const { local } = parseName(attr.name);
        return local === localName;
      }
      function stringValueTest(attr) {
        const { local } = parseName(attr.name);
        return local === localName && val == attr.value;
      }
      function regexpValueTest(attr) {
        const { local } = parseName(attr.name);
        return local === localName && val.test(attr.value);
      }
      function funcValueTest(attr) {
        const { local } = parseName(attr.name);
        return local === localName && val(attr.value);
      }
    };
    JSAPI.prototype.attr = function(name, val) {
      if (this.hasAttr(name, val)) {
        return this.attrs[name];
      }
    };
    JSAPI.prototype.computedAttr = function(name, val) {
      if (!arguments.length)
        return;
      for (var elem = this; elem && (!elem.hasAttr(name) || !elem.attributes[name]); elem = elem.parentNode)
        ;
      if (val != null) {
        return elem ? elem.hasAttr(name, val) : false;
      } else if (elem && elem.hasAttr(name)) {
        return elem.attributes[name];
      }
    };
    JSAPI.prototype.removeAttr = function(name, val) {
      if (this.type !== "element") {
        return false;
      }
      if (arguments.length === 0) {
        return false;
      }
      if (Array.isArray(name)) {
        for (const nameItem of name) {
          this.removeAttr(nameItem, val);
        }
        return false;
      }
      if (this.hasAttr(name, val) === false) {
        return false;
      }
      delete this.attributes[name];
      return true;
    };
    JSAPI.prototype.addAttr = function(attr) {
      attr = attr || {};
      if (attr.name === void 0)
        return false;
      this.attributes[attr.name] = attr.value;
      if (attr.name === "class") {
        this.class.addClassValueHandler();
      }
      if (attr.name === "style") {
        this.style.addStyleValueHandler();
      }
      return this.attrs[attr.name];
    };
    JSAPI.prototype.eachAttr = function(callback, context) {
      if (this.type !== "element") {
        return false;
      }
      if (callback == null) {
        return false;
      }
      for (const attr of Object.values(this.attrs)) {
        callback.call(context, attr);
      }
      return true;
    };
    JSAPI.prototype.someAttr = function(callback, context) {
      if (this.type !== "element") {
        return false;
      }
      for (const attr of Object.values(this.attrs)) {
        if (callback.call(context, attr))
          return true;
      }
      return false;
    };
    JSAPI.prototype.querySelectorAll = function(selectors) {
      var matchedEls = selectAll(selectors, this, cssSelectOpts);
      return matchedEls.length > 0 ? matchedEls : null;
    };
    JSAPI.prototype.querySelector = function(selectors) {
      return selectOne(selectors, this, cssSelectOpts);
    };
    JSAPI.prototype.matches = function(selector) {
      return is(this, selector, cssSelectOpts);
    };
  }
});

// node_modules/svgo/plugins/mergeStyles.js
var require_mergeStyles = __commonJS({
  "node_modules/svgo/plugins/mergeStyles.js"(exports2) {
    "use strict";
    var { visitSkip, detachNodeFromParent } = require_xast();
    var JSAPI = require_jsAPI();
    exports2.name = "mergeStyles";
    exports2.type = "visitor";
    exports2.active = true;
    exports2.description = "merge multiple style elements into one";
    exports2.fn = () => {
      let firstStyleElement = null;
      let collectedStyles = "";
      let styleContentType = "text";
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name === "foreignObject") {
              return visitSkip;
            }
            if (node.name !== "style") {
              return;
            }
            if (node.attributes.type != null && node.attributes.type !== "" && node.attributes.type !== "text/css") {
              return;
            }
            let css = "";
            for (const child of node.children) {
              if (child.type === "text") {
                css += child.value;
              }
              if (child.type === "cdata") {
                styleContentType = "cdata";
                css += child.value;
              }
            }
            if (css.trim().length === 0) {
              detachNodeFromParent(node, parentNode);
              return;
            }
            if (node.attributes.media == null) {
              collectedStyles += css;
            } else {
              collectedStyles += `@media ${node.attributes.media}{${css}}`;
              delete node.attributes.media;
            }
            if (firstStyleElement == null) {
              firstStyleElement = node;
            } else {
              detachNodeFromParent(node, parentNode);
              firstStyleElement.children = [
                new JSAPI(
                  { type: styleContentType, value: collectedStyles },
                  firstStyleElement
                )
              ];
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/inlineStyles.js
var require_inlineStyles = __commonJS({
  "node_modules/svgo/plugins/inlineStyles.js"(exports2) {
    "use strict";
    var csstree = require_lib8();
    var specificity = require_specificity();
    var stable = require_stable();
    var {
      visitSkip,
      querySelectorAll,
      detachNodeFromParent
    } = require_xast();
    exports2.type = "visitor";
    exports2.name = "inlineStyles";
    exports2.active = true;
    exports2.description = "inline styles (additional options)";
    var compareSpecificity = (a, b) => {
      for (var i = 0; i < 4; i += 1) {
        if (a[i] < b[i]) {
          return -1;
        } else if (a[i] > b[i]) {
          return 1;
        }
      }
      return 0;
    };
    exports2.fn = (root, params) => {
      const {
        onlyMatchedOnce = true,
        removeMatchedSelectors = true,
        useMqs = ["", "screen"],
        usePseudos = [""]
      } = params;
      const styles = [];
      let selectors = [];
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name === "foreignObject") {
              return visitSkip;
            }
            if (node.name !== "style" || node.children.length === 0) {
              return;
            }
            if (node.attributes.type != null && node.attributes.type !== "" && node.attributes.type !== "text/css") {
              return;
            }
            let cssText = "";
            for (const child of node.children) {
              if (child.type === "text" || child.type === "cdata") {
                cssText += child.value;
              }
            }
            let cssAst = null;
            try {
              cssAst = csstree.parse(cssText, {
                parseValue: false,
                parseCustomProperty: false
              });
            } catch {
              return;
            }
            if (cssAst.type === "StyleSheet") {
              styles.push({ node, parentNode, cssAst });
            }
            csstree.walk(cssAst, {
              visit: "Selector",
              enter(node2, item) {
                const atrule = this.atrule;
                const rule = this.rule;
                if (rule == null) {
                  return;
                }
                let mq = "";
                if (atrule != null) {
                  mq = atrule.name;
                  if (atrule.prelude != null) {
                    mq += ` ${csstree.generate(atrule.prelude)}`;
                  }
                }
                if (useMqs.includes(mq) === false) {
                  return;
                }
                const pseudos = [];
                if (node2.type === "Selector") {
                  node2.children.each((childNode, childItem, childList) => {
                    if (childNode.type === "PseudoClassSelector" || childNode.type === "PseudoElementSelector") {
                      pseudos.push({ item: childItem, list: childList });
                    }
                  });
                }
                const pseudoSelectors = csstree.generate({
                  type: "Selector",
                  children: new csstree.List().fromArray(
                    pseudos.map((pseudo) => pseudo.item.data)
                  )
                });
                if (usePseudos.includes(pseudoSelectors) === false) {
                  return;
                }
                for (const pseudo of pseudos) {
                  pseudo.list.remove(pseudo.item);
                }
                selectors.push({ node: node2, item, rule });
              }
            });
          }
        },
        root: {
          exit: () => {
            if (styles.length === 0) {
              return;
            }
            const sortedSelectors = stable(selectors, (a, b) => {
              const aSpecificity = specificity(a.item.data);
              const bSpecificity = specificity(b.item.data);
              return compareSpecificity(aSpecificity, bSpecificity);
            }).reverse();
            for (const selector of sortedSelectors) {
              const selectorText = csstree.generate(selector.item.data);
              const matchedElements = [];
              try {
                for (const node of querySelectorAll(root, selectorText)) {
                  if (node.type === "element") {
                    matchedElements.push(node);
                  }
                }
              } catch (selectError) {
                continue;
              }
              if (matchedElements.length === 0) {
                continue;
              }
              if (onlyMatchedOnce && matchedElements.length > 1) {
                continue;
              }
              for (const selectedEl of matchedElements) {
                const styleDeclarationList = csstree.parse(
                  selectedEl.attributes.style == null ? "" : selectedEl.attributes.style,
                  {
                    context: "declarationList",
                    parseValue: false
                  }
                );
                if (styleDeclarationList.type !== "DeclarationList") {
                  continue;
                }
                const styleDeclarationItems = /* @__PURE__ */ new Map();
                csstree.walk(styleDeclarationList, {
                  visit: "Declaration",
                  enter(node, item) {
                    styleDeclarationItems.set(node.property, item);
                  }
                });
                csstree.walk(selector.rule, {
                  visit: "Declaration",
                  enter(ruleDeclaration) {
                    const matchedItem = styleDeclarationItems.get(
                      ruleDeclaration.property
                    );
                    const ruleDeclarationItem = styleDeclarationList.children.createItem(ruleDeclaration);
                    if (matchedItem == null) {
                      styleDeclarationList.children.append(ruleDeclarationItem);
                    } else if (matchedItem.data.important !== true && ruleDeclaration.important === true) {
                      styleDeclarationList.children.replace(
                        matchedItem,
                        ruleDeclarationItem
                      );
                      styleDeclarationItems.set(
                        ruleDeclaration.property,
                        ruleDeclarationItem
                      );
                    }
                  }
                });
                selectedEl.attributes.style = csstree.generate(styleDeclarationList);
              }
              if (removeMatchedSelectors && matchedElements.length !== 0 && selector.rule.prelude.type === "SelectorList") {
                selector.rule.prelude.children.remove(selector.item);
              }
              selector.matchedElements = matchedElements;
            }
            if (removeMatchedSelectors === false) {
              return;
            }
            for (const selector of sortedSelectors) {
              if (selector.matchedElements == null) {
                continue;
              }
              if (onlyMatchedOnce && selector.matchedElements.length > 1) {
                continue;
              }
              for (const selectedEl of selector.matchedElements) {
                const classList = new Set(
                  selectedEl.attributes.class == null ? null : selectedEl.attributes.class.split(" ")
                );
                const firstSubSelector = selector.node.children.first();
                if (firstSubSelector != null && firstSubSelector.type === "ClassSelector") {
                  classList.delete(firstSubSelector.name);
                }
                if (classList.size === 0) {
                  delete selectedEl.attributes.class;
                } else {
                  selectedEl.attributes.class = Array.from(classList).join(" ");
                }
                if (firstSubSelector != null && firstSubSelector.type === "IdSelector") {
                  if (selectedEl.attributes.id === firstSubSelector.name) {
                    delete selectedEl.attributes.id;
                  }
                }
              }
            }
            for (const style of styles) {
              csstree.walk(style.cssAst, {
                visit: "Rule",
                enter: function(node, item, list) {
                  if (node.type === "Rule" && node.prelude.type === "SelectorList" && node.prelude.children.isEmpty()) {
                    list.remove(item);
                  }
                }
              });
              if (style.cssAst.children.isEmpty()) {
                detachNodeFromParent(style.node, style.parentNode);
              } else {
                const firstChild = style.node.children[0];
                if (firstChild.type === "text" || firstChild.type === "cdata") {
                  firstChild.value = csstree.generate(style.cssAst);
                }
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/csso/lib/usage.js
var require_usage = __commonJS({
  "node_modules/csso/lib/usage.js"(exports2, module2) {
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    function buildMap(list, caseInsensitive) {
      var map = /* @__PURE__ */ Object.create(null);
      if (!Array.isArray(list)) {
        return null;
      }
      for (var i = 0; i < list.length; i++) {
        var name = list[i];
        if (caseInsensitive) {
          name = name.toLowerCase();
        }
        map[name] = true;
      }
      return map;
    }
    function buildList(data) {
      if (!data) {
        return null;
      }
      var tags = buildMap(data.tags, true);
      var ids = buildMap(data.ids);
      var classes = buildMap(data.classes);
      if (tags === null && ids === null && classes === null) {
        return null;
      }
      return {
        tags,
        ids,
        classes
      };
    }
    function buildIndex(data) {
      var scopes = false;
      if (data.scopes && Array.isArray(data.scopes)) {
        scopes = /* @__PURE__ */ Object.create(null);
        for (var i = 0; i < data.scopes.length; i++) {
          var list = data.scopes[i];
          if (!list || !Array.isArray(list)) {
            throw new Error("Wrong usage format");
          }
          for (var j = 0; j < list.length; j++) {
            var name = list[j];
            if (hasOwnProperty2.call(scopes, name)) {
              throw new Error("Class can't be used for several scopes: " + name);
            }
            scopes[name] = i + 1;
          }
        }
      }
      return {
        whitelist: buildList(data),
        blacklist: buildList(data.blacklist),
        scopes
      };
    }
    module2.exports = {
      buildIndex
    };
  }
});

// node_modules/csso/lib/clean/utils.js
var require_utils2 = __commonJS({
  "node_modules/csso/lib/clean/utils.js"(exports2, module2) {
    module2.exports = {
      hasNoChildren: function(node) {
        return !node || !node.children || node.children.isEmpty();
      },
      isNodeChildrenList: function(node, list) {
        return node !== null && node.children === list;
      }
    };
  }
});

// node_modules/csso/lib/clean/Atrule.js
var require_Atrule2 = __commonJS({
  "node_modules/csso/lib/clean/Atrule.js"(exports2, module2) {
    var resolveKeyword = require_lib8().keyword;
    var { hasNoChildren } = require_utils2();
    module2.exports = function cleanAtrule(node, item, list) {
      if (node.block) {
        if (this.stylesheet !== null) {
          this.stylesheet.firstAtrulesAllowed = false;
        }
        if (hasNoChildren(node.block)) {
          list.remove(item);
          return;
        }
      }
      switch (node.name) {
        case "charset":
          if (hasNoChildren(node.prelude)) {
            list.remove(item);
            return;
          }
          if (item.prev) {
            list.remove(item);
            return;
          }
          break;
        case "import":
          if (this.stylesheet === null || !this.stylesheet.firstAtrulesAllowed) {
            list.remove(item);
            return;
          }
          list.prevUntil(item.prev, function(rule) {
            if (rule.type === "Atrule") {
              if (rule.name === "import" || rule.name === "charset") {
                return;
              }
            }
            this.root.firstAtrulesAllowed = false;
            list.remove(item);
            return true;
          }, this);
          break;
        default:
          var name = resolveKeyword(node.name).basename;
          if (name === "keyframes" || name === "media" || name === "supports") {
            if (hasNoChildren(node.prelude) || hasNoChildren(node.block)) {
              list.remove(item);
            }
          }
      }
    };
  }
});

// node_modules/csso/lib/clean/Comment.js
var require_Comment2 = __commonJS({
  "node_modules/csso/lib/clean/Comment.js"(exports2, module2) {
    module2.exports = function cleanComment(data, item, list) {
      list.remove(item);
    };
  }
});

// node_modules/csso/lib/clean/Declaration.js
var require_Declaration2 = __commonJS({
  "node_modules/csso/lib/clean/Declaration.js"(exports2, module2) {
    var property = require_lib8().property;
    module2.exports = function cleanDeclartion(node, item, list) {
      if (node.value.children && node.value.children.isEmpty()) {
        list.remove(item);
        return;
      }
      if (property(node.property).custom) {
        if (/\S/.test(node.value.value)) {
          node.value.value = node.value.value.trim();
        }
      }
    };
  }
});

// node_modules/csso/lib/clean/Raw.js
var require_Raw2 = __commonJS({
  "node_modules/csso/lib/clean/Raw.js"(exports2, module2) {
    var { isNodeChildrenList } = require_utils2();
    module2.exports = function cleanRaw(node, item, list) {
      if (isNodeChildrenList(this.stylesheet, list) || isNodeChildrenList(this.block, list)) {
        list.remove(item);
      }
    };
  }
});

// node_modules/csso/lib/clean/Rule.js
var require_Rule2 = __commonJS({
  "node_modules/csso/lib/clean/Rule.js"(exports2, module2) {
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var walk = require_lib8().walk;
    var { hasNoChildren } = require_utils2();
    function cleanUnused(selectorList, usageData) {
      selectorList.children.each(function(selector, item, list) {
        var shouldRemove = false;
        walk(selector, function(node) {
          if (this.selector === null || this.selector === selectorList) {
            switch (node.type) {
              case "SelectorList":
                if (this.function === null || this.function.name.toLowerCase() !== "not") {
                  if (cleanUnused(node, usageData)) {
                    shouldRemove = true;
                  }
                }
                break;
              case "ClassSelector":
                if (usageData.whitelist !== null && usageData.whitelist.classes !== null && !hasOwnProperty2.call(usageData.whitelist.classes, node.name)) {
                  shouldRemove = true;
                }
                if (usageData.blacklist !== null && usageData.blacklist.classes !== null && hasOwnProperty2.call(usageData.blacklist.classes, node.name)) {
                  shouldRemove = true;
                }
                break;
              case "IdSelector":
                if (usageData.whitelist !== null && usageData.whitelist.ids !== null && !hasOwnProperty2.call(usageData.whitelist.ids, node.name)) {
                  shouldRemove = true;
                }
                if (usageData.blacklist !== null && usageData.blacklist.ids !== null && hasOwnProperty2.call(usageData.blacklist.ids, node.name)) {
                  shouldRemove = true;
                }
                break;
              case "TypeSelector":
                if (node.name.charAt(node.name.length - 1) !== "*") {
                  if (usageData.whitelist !== null && usageData.whitelist.tags !== null && !hasOwnProperty2.call(usageData.whitelist.tags, node.name.toLowerCase())) {
                    shouldRemove = true;
                  }
                  if (usageData.blacklist !== null && usageData.blacklist.tags !== null && hasOwnProperty2.call(usageData.blacklist.tags, node.name.toLowerCase())) {
                    shouldRemove = true;
                  }
                }
                break;
            }
          }
        });
        if (shouldRemove) {
          list.remove(item);
        }
      });
      return selectorList.children.isEmpty();
    }
    module2.exports = function cleanRule(node, item, list, options) {
      if (hasNoChildren(node.prelude) || hasNoChildren(node.block)) {
        list.remove(item);
        return;
      }
      var usageData = options.usage;
      if (usageData && (usageData.whitelist !== null || usageData.blacklist !== null)) {
        cleanUnused(node.prelude, usageData);
        if (hasNoChildren(node.prelude)) {
          list.remove(item);
          return;
        }
      }
    };
  }
});

// node_modules/csso/lib/clean/TypeSelector.js
var require_TypeSelector2 = __commonJS({
  "node_modules/csso/lib/clean/TypeSelector.js"(exports2, module2) {
    module2.exports = function cleanTypeSelector(node, item, list) {
      var name = item.data.name;
      if (name !== "*") {
        return;
      }
      var nextType = item.next && item.next.data.type;
      if (nextType === "IdSelector" || nextType === "ClassSelector" || nextType === "AttributeSelector" || nextType === "PseudoClassSelector" || nextType === "PseudoElementSelector") {
        list.remove(item);
      }
    };
  }
});

// node_modules/csso/lib/clean/WhiteSpace.js
var require_WhiteSpace2 = __commonJS({
  "node_modules/csso/lib/clean/WhiteSpace.js"(exports2, module2) {
    var { isNodeChildrenList } = require_utils2();
    function isSafeOperator(node) {
      return node.type === "Operator" && node.value !== "+" && node.value !== "-";
    }
    module2.exports = function cleanWhitespace(node, item, list) {
      if (item.next === null || item.prev === null) {
        list.remove(item);
        return;
      }
      if (isNodeChildrenList(this.stylesheet, list) || isNodeChildrenList(this.block, list)) {
        list.remove(item);
        return;
      }
      if (item.next.data.type === "WhiteSpace") {
        list.remove(item);
        return;
      }
      if (isSafeOperator(item.prev.data) || isSafeOperator(item.next.data)) {
        list.remove(item);
        return;
      }
    };
  }
});

// node_modules/csso/lib/clean/index.js
var require_clean = __commonJS({
  "node_modules/csso/lib/clean/index.js"(exports2, module2) {
    var walk = require_lib8().walk;
    var handlers = {
      Atrule: require_Atrule2(),
      Comment: require_Comment2(),
      Declaration: require_Declaration2(),
      Raw: require_Raw2(),
      Rule: require_Rule2(),
      TypeSelector: require_TypeSelector2(),
      WhiteSpace: require_WhiteSpace2()
    };
    module2.exports = function(ast, options) {
      walk(ast, {
        leave: function(node, item, list) {
          if (handlers.hasOwnProperty(node.type)) {
            handlers[node.type].call(this, node, item, list, options);
          }
        }
      });
    };
  }
});

// node_modules/csso/lib/replace/atrule/keyframes.js
var require_keyframes = __commonJS({
  "node_modules/csso/lib/replace/atrule/keyframes.js"(exports2, module2) {
    module2.exports = function(node) {
      node.block.children.each(function(rule) {
        rule.prelude.children.each(function(simpleselector) {
          simpleselector.children.each(function(data, item) {
            if (data.type === "Percentage" && data.value === "100") {
              item.data = {
                type: "TypeSelector",
                loc: data.loc,
                name: "to"
              };
            } else if (data.type === "TypeSelector" && data.name === "from") {
              item.data = {
                type: "Percentage",
                loc: data.loc,
                value: "0"
              };
            }
          });
        });
      });
    };
  }
});

// node_modules/csso/lib/replace/Atrule.js
var require_Atrule3 = __commonJS({
  "node_modules/csso/lib/replace/Atrule.js"(exports2, module2) {
    var resolveKeyword = require_lib8().keyword;
    var compressKeyframes = require_keyframes();
    module2.exports = function(node) {
      if (resolveKeyword(node.name).basename === "keyframes") {
        compressKeyframes(node);
      }
    };
  }
});

// node_modules/csso/lib/replace/AttributeSelector.js
var require_AttributeSelector2 = __commonJS({
  "node_modules/csso/lib/replace/AttributeSelector.js"(exports2, module2) {
    var escapesRx = /\\([0-9A-Fa-f]{1,6})(\r\n|[ \t\n\f\r])?|\\./g;
    var blockUnquoteRx = /^(-?\d|--)|[\u0000-\u002c\u002e\u002f\u003A-\u0040\u005B-\u005E\u0060\u007B-\u009f]/;
    function canUnquote(value) {
      if (value === "" || value === "-") {
        return;
      }
      value = value.replace(escapesRx, "a");
      return !blockUnquoteRx.test(value);
    }
    module2.exports = function(node) {
      var attrValue = node.value;
      if (!attrValue || attrValue.type !== "String") {
        return;
      }
      var unquotedValue = attrValue.value.replace(/^(.)(.*)\1$/, "$2");
      if (canUnquote(unquotedValue)) {
        node.value = {
          type: "Identifier",
          loc: attrValue.loc,
          name: unquotedValue
        };
      }
    };
  }
});

// node_modules/csso/lib/replace/property/font.js
var require_font = __commonJS({
  "node_modules/csso/lib/replace/property/font.js"(exports2, module2) {
    module2.exports = function compressFont(node) {
      var list = node.children;
      list.eachRight(function(node2, item) {
        if (node2.type === "Identifier") {
          if (node2.name === "bold") {
            item.data = {
              type: "Number",
              loc: node2.loc,
              value: "700"
            };
          } else if (node2.name === "normal") {
            var prev = item.prev;
            if (prev && prev.data.type === "Operator" && prev.data.value === "/") {
              this.remove(prev);
            }
            this.remove(item);
          } else if (node2.name === "medium") {
            var next = item.next;
            if (!next || next.data.type !== "Operator") {
              this.remove(item);
            }
          }
        }
      });
      list.each(function(node2, item) {
        if (node2.type === "WhiteSpace") {
          if (!item.prev || !item.next || item.next.data.type === "WhiteSpace") {
            this.remove(item);
          }
        }
      });
      if (list.isEmpty()) {
        list.insert(list.createItem({
          type: "Identifier",
          name: "normal"
        }));
      }
    };
  }
});

// node_modules/csso/lib/replace/property/font-weight.js
var require_font_weight = __commonJS({
  "node_modules/csso/lib/replace/property/font-weight.js"(exports2, module2) {
    module2.exports = function compressFontWeight(node) {
      var value = node.children.head.data;
      if (value.type === "Identifier") {
        switch (value.name) {
          case "normal":
            node.children.head.data = {
              type: "Number",
              loc: value.loc,
              value: "400"
            };
            break;
          case "bold":
            node.children.head.data = {
              type: "Number",
              loc: value.loc,
              value: "700"
            };
            break;
        }
      }
    };
  }
});

// node_modules/csso/lib/replace/property/background.js
var require_background = __commonJS({
  "node_modules/csso/lib/replace/property/background.js"(exports2, module2) {
    var List = require_lib8().List;
    module2.exports = function compressBackground(node) {
      function lastType() {
        if (buffer.length) {
          return buffer[buffer.length - 1].type;
        }
      }
      function flush() {
        if (lastType() === "WhiteSpace") {
          buffer.pop();
        }
        if (!buffer.length) {
          buffer.unshift(
            {
              type: "Number",
              loc: null,
              value: "0"
            },
            {
              type: "WhiteSpace",
              value: " "
            },
            {
              type: "Number",
              loc: null,
              value: "0"
            }
          );
        }
        newValue.push.apply(newValue, buffer);
        buffer = [];
      }
      var newValue = [];
      var buffer = [];
      node.children.each(function(node2) {
        if (node2.type === "Operator" && node2.value === ",") {
          flush();
          newValue.push(node2);
          return;
        }
        if (node2.type === "Identifier") {
          if (node2.name === "transparent" || node2.name === "none" || node2.name === "repeat" || node2.name === "scroll") {
            return;
          }
        }
        if (node2.type === "WhiteSpace" && (!buffer.length || lastType() === "WhiteSpace")) {
          return;
        }
        buffer.push(node2);
      });
      flush();
      node.children = new List().fromArray(newValue);
    };
  }
});

// node_modules/csso/lib/replace/property/border.js
var require_border = __commonJS({
  "node_modules/csso/lib/replace/property/border.js"(exports2, module2) {
    function removeItemAndRedundantWhiteSpace(list, item) {
      var prev = item.prev;
      var next = item.next;
      if (next !== null) {
        if (next.data.type === "WhiteSpace" && (prev === null || prev.data.type === "WhiteSpace")) {
          list.remove(next);
        }
      } else if (prev !== null && prev.data.type === "WhiteSpace") {
        list.remove(prev);
      }
      list.remove(item);
    }
    module2.exports = function compressBorder(node) {
      node.children.each(function(node2, item, list) {
        if (node2.type === "Identifier" && node2.name.toLowerCase() === "none") {
          if (list.head === list.tail) {
            item.data = {
              type: "Number",
              loc: node2.loc,
              value: "0"
            };
          } else {
            removeItemAndRedundantWhiteSpace(list, item);
          }
        }
      });
    };
  }
});

// node_modules/csso/lib/replace/Value.js
var require_Value2 = __commonJS({
  "node_modules/csso/lib/replace/Value.js"(exports2, module2) {
    var resolveName = require_lib8().property;
    var handlers = {
      "font": require_font(),
      "font-weight": require_font_weight(),
      "background": require_background(),
      "border": require_border(),
      "outline": require_border()
    };
    module2.exports = function compressValue(node) {
      if (!this.declaration) {
        return;
      }
      var property = resolveName(this.declaration.property);
      if (handlers.hasOwnProperty(property.basename)) {
        handlers[property.basename](node);
      }
    };
  }
});

// node_modules/csso/lib/replace/Number.js
var require_Number2 = __commonJS({
  "node_modules/csso/lib/replace/Number.js"(exports2, module2) {
    var OMIT_PLUSSIGN = /^(?:\+|(-))?0*(\d*)(?:\.0*|(\.\d*?)0*)?$/;
    var KEEP_PLUSSIGN = /^([\+\-])?0*(\d*)(?:\.0*|(\.\d*?)0*)?$/;
    var unsafeToRemovePlusSignAfter = {
      Dimension: true,
      Hash: true,
      Identifier: true,
      Number: true,
      Raw: true,
      UnicodeRange: true
    };
    function packNumber(value, item) {
      var regexp = item && item.prev !== null && unsafeToRemovePlusSignAfter.hasOwnProperty(item.prev.data.type) ? KEEP_PLUSSIGN : OMIT_PLUSSIGN;
      value = String(value).replace(regexp, "$1$2$3");
      if (value === "" || value === "-") {
        value = "0";
      }
      return value;
    }
    module2.exports = function(node, item) {
      node.value = packNumber(node.value, item);
    };
    module2.exports.pack = packNumber;
  }
});

// node_modules/csso/lib/replace/Dimension.js
var require_Dimension2 = __commonJS({
  "node_modules/csso/lib/replace/Dimension.js"(exports2, module2) {
    var packNumber = require_Number2().pack;
    var MATH_FUNCTIONS = {
      "calc": true,
      "min": true,
      "max": true,
      "clamp": true
    };
    var LENGTH_UNIT = {
      // absolute length units
      "px": true,
      "mm": true,
      "cm": true,
      "in": true,
      "pt": true,
      "pc": true,
      // relative length units
      "em": true,
      "ex": true,
      "ch": true,
      "rem": true,
      // viewport-percentage lengths
      "vh": true,
      "vw": true,
      "vmin": true,
      "vmax": true,
      "vm": true
    };
    module2.exports = function compressDimension(node, item) {
      var value = packNumber(node.value, item);
      node.value = value;
      if (value === "0" && this.declaration !== null && this.atrulePrelude === null) {
        var unit = node.unit.toLowerCase();
        if (!LENGTH_UNIT.hasOwnProperty(unit)) {
          return;
        }
        if (this.declaration.property === "-ms-flex" || this.declaration.property === "flex") {
          return;
        }
        if (this.function && MATH_FUNCTIONS.hasOwnProperty(this.function.name)) {
          return;
        }
        item.data = {
          type: "Number",
          loc: node.loc,
          value
        };
      }
    };
  }
});

// node_modules/csso/lib/replace/Percentage.js
var require_Percentage2 = __commonJS({
  "node_modules/csso/lib/replace/Percentage.js"(exports2, module2) {
    var lexer = require_lib8().lexer;
    var packNumber = require_Number2().pack;
    var blacklist = /* @__PURE__ */ new Set([
      // see https://github.com/jakubpawlowicz/clean-css/issues/957
      "width",
      "min-width",
      "max-width",
      "height",
      "min-height",
      "max-height",
      // issue #410: Don’t remove units in flex-basis value for (-ms-)flex shorthand
      // issue #362: shouldn't remove unit in -ms-flex since it breaks flex in IE10/11
      // issue #200: shouldn't remove unit in flex since it breaks flex in IE10/11
      "flex",
      "-ms-flex"
    ]);
    module2.exports = function compressPercentage(node, item) {
      node.value = packNumber(node.value, item);
      if (node.value === "0" && this.declaration && !blacklist.has(this.declaration.property)) {
        item.data = {
          type: "Number",
          loc: node.loc,
          value: node.value
        };
        if (!lexer.matchDeclaration(this.declaration).isType(item.data, "length")) {
          item.data = node;
        }
      }
    };
  }
});

// node_modules/csso/lib/replace/String.js
var require_String2 = __commonJS({
  "node_modules/csso/lib/replace/String.js"(exports2, module2) {
    module2.exports = function(node) {
      var value = node.value;
      value = value.replace(/\\(\r\n|\r|\n|\f)/g, "");
      node.value = value;
    };
  }
});

// node_modules/csso/lib/replace/Url.js
var require_Url2 = __commonJS({
  "node_modules/csso/lib/replace/Url.js"(exports2, module2) {
    var UNICODE = "\\\\[0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?";
    var ESCAPE = "(" + UNICODE + "|\\\\[^\\n\\r\\f0-9a-fA-F])";
    var NONPRINTABLE = "\0\b\v-\x7F";
    var SAFE_URL = new RegExp("^(" + ESCAPE + `|[^"'\\(\\)\\\\\\s` + NONPRINTABLE + "])*$", "i");
    module2.exports = function(node) {
      var value = node.value;
      if (value.type !== "String") {
        return;
      }
      var quote = value.value[0];
      var url = value.value.substr(1, value.value.length - 2);
      url = url.replace(/\\\\/g, "/");
      if (SAFE_URL.test(url)) {
        node.value = {
          type: "Raw",
          loc: node.value.loc,
          value: url
        };
      } else {
        node.value.value = url.indexOf('"') === -1 ? '"' + url + '"' : quote + url + quote;
      }
    };
  }
});

// node_modules/csso/lib/replace/color.js
var require_color = __commonJS({
  "node_modules/csso/lib/replace/color.js"(exports2, module2) {
    var lexer = require_lib8().lexer;
    var packNumber = require_Number2().pack;
    var NAME_TO_HEX = {
      "aliceblue": "f0f8ff",
      "antiquewhite": "faebd7",
      "aqua": "0ff",
      "aquamarine": "7fffd4",
      "azure": "f0ffff",
      "beige": "f5f5dc",
      "bisque": "ffe4c4",
      "black": "000",
      "blanchedalmond": "ffebcd",
      "blue": "00f",
      "blueviolet": "8a2be2",
      "brown": "a52a2a",
      "burlywood": "deb887",
      "cadetblue": "5f9ea0",
      "chartreuse": "7fff00",
      "chocolate": "d2691e",
      "coral": "ff7f50",
      "cornflowerblue": "6495ed",
      "cornsilk": "fff8dc",
      "crimson": "dc143c",
      "cyan": "0ff",
      "darkblue": "00008b",
      "darkcyan": "008b8b",
      "darkgoldenrod": "b8860b",
      "darkgray": "a9a9a9",
      "darkgrey": "a9a9a9",
      "darkgreen": "006400",
      "darkkhaki": "bdb76b",
      "darkmagenta": "8b008b",
      "darkolivegreen": "556b2f",
      "darkorange": "ff8c00",
      "darkorchid": "9932cc",
      "darkred": "8b0000",
      "darksalmon": "e9967a",
      "darkseagreen": "8fbc8f",
      "darkslateblue": "483d8b",
      "darkslategray": "2f4f4f",
      "darkslategrey": "2f4f4f",
      "darkturquoise": "00ced1",
      "darkviolet": "9400d3",
      "deeppink": "ff1493",
      "deepskyblue": "00bfff",
      "dimgray": "696969",
      "dimgrey": "696969",
      "dodgerblue": "1e90ff",
      "firebrick": "b22222",
      "floralwhite": "fffaf0",
      "forestgreen": "228b22",
      "fuchsia": "f0f",
      "gainsboro": "dcdcdc",
      "ghostwhite": "f8f8ff",
      "gold": "ffd700",
      "goldenrod": "daa520",
      "gray": "808080",
      "grey": "808080",
      "green": "008000",
      "greenyellow": "adff2f",
      "honeydew": "f0fff0",
      "hotpink": "ff69b4",
      "indianred": "cd5c5c",
      "indigo": "4b0082",
      "ivory": "fffff0",
      "khaki": "f0e68c",
      "lavender": "e6e6fa",
      "lavenderblush": "fff0f5",
      "lawngreen": "7cfc00",
      "lemonchiffon": "fffacd",
      "lightblue": "add8e6",
      "lightcoral": "f08080",
      "lightcyan": "e0ffff",
      "lightgoldenrodyellow": "fafad2",
      "lightgray": "d3d3d3",
      "lightgrey": "d3d3d3",
      "lightgreen": "90ee90",
      "lightpink": "ffb6c1",
      "lightsalmon": "ffa07a",
      "lightseagreen": "20b2aa",
      "lightskyblue": "87cefa",
      "lightslategray": "789",
      "lightslategrey": "789",
      "lightsteelblue": "b0c4de",
      "lightyellow": "ffffe0",
      "lime": "0f0",
      "limegreen": "32cd32",
      "linen": "faf0e6",
      "magenta": "f0f",
      "maroon": "800000",
      "mediumaquamarine": "66cdaa",
      "mediumblue": "0000cd",
      "mediumorchid": "ba55d3",
      "mediumpurple": "9370db",
      "mediumseagreen": "3cb371",
      "mediumslateblue": "7b68ee",
      "mediumspringgreen": "00fa9a",
      "mediumturquoise": "48d1cc",
      "mediumvioletred": "c71585",
      "midnightblue": "191970",
      "mintcream": "f5fffa",
      "mistyrose": "ffe4e1",
      "moccasin": "ffe4b5",
      "navajowhite": "ffdead",
      "navy": "000080",
      "oldlace": "fdf5e6",
      "olive": "808000",
      "olivedrab": "6b8e23",
      "orange": "ffa500",
      "orangered": "ff4500",
      "orchid": "da70d6",
      "palegoldenrod": "eee8aa",
      "palegreen": "98fb98",
      "paleturquoise": "afeeee",
      "palevioletred": "db7093",
      "papayawhip": "ffefd5",
      "peachpuff": "ffdab9",
      "peru": "cd853f",
      "pink": "ffc0cb",
      "plum": "dda0dd",
      "powderblue": "b0e0e6",
      "purple": "800080",
      "rebeccapurple": "639",
      "red": "f00",
      "rosybrown": "bc8f8f",
      "royalblue": "4169e1",
      "saddlebrown": "8b4513",
      "salmon": "fa8072",
      "sandybrown": "f4a460",
      "seagreen": "2e8b57",
      "seashell": "fff5ee",
      "sienna": "a0522d",
      "silver": "c0c0c0",
      "skyblue": "87ceeb",
      "slateblue": "6a5acd",
      "slategray": "708090",
      "slategrey": "708090",
      "snow": "fffafa",
      "springgreen": "00ff7f",
      "steelblue": "4682b4",
      "tan": "d2b48c",
      "teal": "008080",
      "thistle": "d8bfd8",
      "tomato": "ff6347",
      "turquoise": "40e0d0",
      "violet": "ee82ee",
      "wheat": "f5deb3",
      "white": "fff",
      "whitesmoke": "f5f5f5",
      "yellow": "ff0",
      "yellowgreen": "9acd32"
    };
    var HEX_TO_NAME = {
      "800000": "maroon",
      "800080": "purple",
      "808000": "olive",
      "808080": "gray",
      "00ffff": "cyan",
      "f0ffff": "azure",
      "f5f5dc": "beige",
      "ffe4c4": "bisque",
      "000000": "black",
      "0000ff": "blue",
      "a52a2a": "brown",
      "ff7f50": "coral",
      "ffd700": "gold",
      "008000": "green",
      "4b0082": "indigo",
      "fffff0": "ivory",
      "f0e68c": "khaki",
      "00ff00": "lime",
      "faf0e6": "linen",
      "000080": "navy",
      "ffa500": "orange",
      "da70d6": "orchid",
      "cd853f": "peru",
      "ffc0cb": "pink",
      "dda0dd": "plum",
      "f00": "red",
      "ff0000": "red",
      "fa8072": "salmon",
      "a0522d": "sienna",
      "c0c0c0": "silver",
      "fffafa": "snow",
      "d2b48c": "tan",
      "008080": "teal",
      "ff6347": "tomato",
      "ee82ee": "violet",
      "f5deb3": "wheat",
      "ffffff": "white",
      "ffff00": "yellow"
    };
    function hueToRgb(p, q, t) {
      if (t < 0) {
        t += 1;
      }
      if (t > 1) {
        t -= 1;
      }
      if (t < 1 / 6) {
        return p + (q - p) * 6 * t;
      }
      if (t < 1 / 2) {
        return q;
      }
      if (t < 2 / 3) {
        return p + (q - p) * (2 / 3 - t) * 6;
      }
      return p;
    }
    function hslToRgb(h, s, l, a) {
      var r;
      var g;
      var b;
      if (s === 0) {
        r = g = b = l;
      } else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = hueToRgb(p, q, h + 1 / 3);
        g = hueToRgb(p, q, h);
        b = hueToRgb(p, q, h - 1 / 3);
      }
      return [
        Math.round(r * 255),
        Math.round(g * 255),
        Math.round(b * 255),
        a
      ];
    }
    function toHex(value) {
      value = value.toString(16);
      return value.length === 1 ? "0" + value : value;
    }
    function parseFunctionArgs(functionArgs, count, rgb) {
      var cursor = functionArgs.head;
      var args = [];
      var wasValue = false;
      while (cursor !== null) {
        var node = cursor.data;
        var type = node.type;
        switch (type) {
          case "Number":
          case "Percentage":
            if (wasValue) {
              return;
            }
            wasValue = true;
            args.push({
              type,
              value: Number(node.value)
            });
            break;
          case "Operator":
            if (node.value === ",") {
              if (!wasValue) {
                return;
              }
              wasValue = false;
            } else if (wasValue || node.value !== "+") {
              return;
            }
            break;
          default:
            return;
        }
        cursor = cursor.next;
      }
      if (args.length !== count) {
        return;
      }
      if (args.length === 4) {
        if (args[3].type !== "Number") {
          return;
        }
        args[3].type = "Alpha";
      }
      if (rgb) {
        if (args[0].type !== args[1].type || args[0].type !== args[2].type) {
          return;
        }
      } else {
        if (args[0].type !== "Number" || args[1].type !== "Percentage" || args[2].type !== "Percentage") {
          return;
        }
        args[0].type = "Angle";
      }
      return args.map(function(arg) {
        var value = Math.max(0, arg.value);
        switch (arg.type) {
          case "Number":
            value = Math.min(value, 255);
            break;
          case "Percentage":
            value = Math.min(value, 100) / 100;
            if (!rgb) {
              return value;
            }
            value = 255 * value;
            break;
          case "Angle":
            return (value % 360 + 360) % 360 / 360;
          case "Alpha":
            return Math.min(value, 1);
        }
        return Math.round(value);
      });
    }
    function compressFunction(node, item, list) {
      var functionName = node.name;
      var args;
      if (functionName === "rgba" || functionName === "hsla") {
        args = parseFunctionArgs(node.children, 4, functionName === "rgba");
        if (!args) {
          return;
        }
        if (functionName === "hsla") {
          args = hslToRgb.apply(null, args);
          node.name = "rgba";
        }
        if (args[3] === 0) {
          var scopeFunctionName = this.function && this.function.name;
          if (args[0] === 0 && args[1] === 0 && args[2] === 0 || !/^(?:to|from|color-stop)$|gradient$/i.test(scopeFunctionName)) {
            item.data = {
              type: "Identifier",
              loc: node.loc,
              name: "transparent"
            };
            return;
          }
        }
        if (args[3] !== 1) {
          node.children.each(function(node2, item2, list2) {
            if (node2.type === "Operator") {
              if (node2.value !== ",") {
                list2.remove(item2);
              }
              return;
            }
            item2.data = {
              type: "Number",
              loc: node2.loc,
              value: packNumber(args.shift(), null)
            };
          });
          return;
        }
        functionName = "rgb";
      }
      if (functionName === "hsl") {
        args = args || parseFunctionArgs(node.children, 3, false);
        if (!args) {
          return;
        }
        args = hslToRgb.apply(null, args);
        functionName = "rgb";
      }
      if (functionName === "rgb") {
        args = args || parseFunctionArgs(node.children, 3, true);
        if (!args) {
          return;
        }
        var next = item.next;
        if (next && next.data.type !== "WhiteSpace") {
          list.insert(list.createItem({
            type: "WhiteSpace",
            value: " "
          }), next);
        }
        item.data = {
          type: "Hash",
          loc: node.loc,
          value: toHex(args[0]) + toHex(args[1]) + toHex(args[2])
        };
        compressHex(item.data, item);
      }
    }
    function compressIdent(node, item) {
      if (this.declaration === null) {
        return;
      }
      var color = node.name.toLowerCase();
      if (NAME_TO_HEX.hasOwnProperty(color) && lexer.matchDeclaration(this.declaration).isType(node, "color")) {
        var hex = NAME_TO_HEX[color];
        if (hex.length + 1 <= color.length) {
          item.data = {
            type: "Hash",
            loc: node.loc,
            value: hex
          };
        } else {
          if (color === "grey") {
            color = "gray";
          }
          node.name = color;
        }
      }
    }
    function compressHex(node, item) {
      var color = node.value.toLowerCase();
      if (color.length === 6 && color[0] === color[1] && color[2] === color[3] && color[4] === color[5]) {
        color = color[0] + color[2] + color[4];
      }
      if (HEX_TO_NAME[color]) {
        item.data = {
          type: "Identifier",
          loc: node.loc,
          name: HEX_TO_NAME[color]
        };
      } else {
        node.value = color;
      }
    }
    module2.exports = {
      compressFunction,
      compressIdent,
      compressHex
    };
  }
});

// node_modules/csso/lib/replace/index.js
var require_replace = __commonJS({
  "node_modules/csso/lib/replace/index.js"(exports2, module2) {
    var walk = require_lib8().walk;
    var handlers = {
      Atrule: require_Atrule3(),
      AttributeSelector: require_AttributeSelector2(),
      Value: require_Value2(),
      Dimension: require_Dimension2(),
      Percentage: require_Percentage2(),
      Number: require_Number2(),
      String: require_String2(),
      Url: require_Url2(),
      Hash: require_color().compressHex,
      Identifier: require_color().compressIdent,
      Function: require_color().compressFunction
    };
    module2.exports = function(ast) {
      walk(ast, {
        leave: function(node, item, list) {
          if (handlers.hasOwnProperty(node.type)) {
            handlers[node.type].call(this, node, item, list);
          }
        }
      });
    };
  }
});

// node_modules/csso/lib/restructure/prepare/createDeclarationIndexer.js
var require_createDeclarationIndexer = __commonJS({
  "node_modules/csso/lib/restructure/prepare/createDeclarationIndexer.js"(exports2, module2) {
    var generate = require_lib8().generate;
    function Index() {
      this.seed = 0;
      this.map = /* @__PURE__ */ Object.create(null);
    }
    Index.prototype.resolve = function(str) {
      var index = this.map[str];
      if (!index) {
        index = ++this.seed;
        this.map[str] = index;
      }
      return index;
    };
    module2.exports = function createDeclarationIndexer() {
      var ids = new Index();
      return function markDeclaration(node) {
        var id = generate(node);
        node.id = ids.resolve(id);
        node.length = id.length;
        node.fingerprint = null;
        return node;
      };
    };
  }
});

// node_modules/csso/lib/restructure/prepare/processSelector.js
var require_processSelector = __commonJS({
  "node_modules/csso/lib/restructure/prepare/processSelector.js"(exports2, module2) {
    var generate = require_lib8().generate;
    var specificity = require_specificity();
    var nonFreezePseudoElements = {
      "first-letter": true,
      "first-line": true,
      "after": true,
      "before": true
    };
    var nonFreezePseudoClasses = {
      "link": true,
      "visited": true,
      "hover": true,
      "active": true,
      "first-letter": true,
      "first-line": true,
      "after": true,
      "before": true
    };
    module2.exports = function freeze(node, usageData) {
      var pseudos = /* @__PURE__ */ Object.create(null);
      var hasPseudo = false;
      node.prelude.children.each(function(simpleSelector) {
        var tagName = "*";
        var scope = 0;
        simpleSelector.children.each(function(node2) {
          switch (node2.type) {
            case "ClassSelector":
              if (usageData && usageData.scopes) {
                var classScope = usageData.scopes[node2.name] || 0;
                if (scope !== 0 && classScope !== scope) {
                  throw new Error("Selector can't has classes from different scopes: " + generate(simpleSelector));
                }
                scope = classScope;
              }
              break;
            case "PseudoClassSelector":
              var name = node2.name.toLowerCase();
              if (!nonFreezePseudoClasses.hasOwnProperty(name)) {
                pseudos[":" + name] = true;
                hasPseudo = true;
              }
              break;
            case "PseudoElementSelector":
              var name = node2.name.toLowerCase();
              if (!nonFreezePseudoElements.hasOwnProperty(name)) {
                pseudos["::" + name] = true;
                hasPseudo = true;
              }
              break;
            case "TypeSelector":
              tagName = node2.name.toLowerCase();
              break;
            case "AttributeSelector":
              if (node2.flags) {
                pseudos["[" + node2.flags.toLowerCase() + "]"] = true;
                hasPseudo = true;
              }
              break;
            case "WhiteSpace":
            case "Combinator":
              tagName = "*";
              break;
          }
        });
        simpleSelector.compareMarker = specificity(simpleSelector).toString();
        simpleSelector.id = null;
        simpleSelector.id = generate(simpleSelector);
        if (scope) {
          simpleSelector.compareMarker += ":" + scope;
        }
        if (tagName !== "*") {
          simpleSelector.compareMarker += "," + tagName;
        }
      });
      node.pseudoSignature = hasPseudo && Object.keys(pseudos).sort().join(",");
    };
  }
});

// node_modules/csso/lib/restructure/prepare/index.js
var require_prepare = __commonJS({
  "node_modules/csso/lib/restructure/prepare/index.js"(exports2, module2) {
    var resolveKeyword = require_lib8().keyword;
    var walk = require_lib8().walk;
    var generate = require_lib8().generate;
    var createDeclarationIndexer = require_createDeclarationIndexer();
    var processSelector = require_processSelector();
    module2.exports = function prepare(ast, options) {
      var markDeclaration = createDeclarationIndexer();
      walk(ast, {
        visit: "Rule",
        enter: function processRule(node) {
          node.block.children.each(markDeclaration);
          processSelector(node, options.usage);
        }
      });
      walk(ast, {
        visit: "Atrule",
        enter: function(node) {
          if (node.prelude) {
            node.prelude.id = null;
            node.prelude.id = generate(node.prelude);
          }
          if (resolveKeyword(node.name).basename === "keyframes") {
            node.block.avoidRulesMerge = true;
            node.block.children.each(function(rule) {
              rule.prelude.children.each(function(simpleselector) {
                simpleselector.compareMarker = simpleselector.id;
              });
            });
          }
        }
      });
      return {
        declaration: markDeclaration
      };
    };
  }
});

// node_modules/csso/lib/restructure/1-mergeAtrule.js
var require_mergeAtrule = __commonJS({
  "node_modules/csso/lib/restructure/1-mergeAtrule.js"(exports2, module2) {
    var List = require_lib8().List;
    var resolveKeyword = require_lib8().keyword;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var walk = require_lib8().walk;
    function addRuleToMap(map, item, list, single) {
      var node = item.data;
      var name = resolveKeyword(node.name).basename;
      var id = node.name.toLowerCase() + "/" + (node.prelude ? node.prelude.id : null);
      if (!hasOwnProperty2.call(map, name)) {
        map[name] = /* @__PURE__ */ Object.create(null);
      }
      if (single) {
        delete map[name][id];
      }
      if (!hasOwnProperty2.call(map[name], id)) {
        map[name][id] = new List();
      }
      map[name][id].append(list.remove(item));
    }
    function relocateAtrules(ast, options) {
      var collected = /* @__PURE__ */ Object.create(null);
      var topInjectPoint = null;
      ast.children.each(function(node, item, list) {
        if (node.type === "Atrule") {
          var name = resolveKeyword(node.name).basename;
          switch (name) {
            case "keyframes":
              addRuleToMap(collected, item, list, true);
              return;
            case "media":
              if (options.forceMediaMerge) {
                addRuleToMap(collected, item, list, false);
                return;
              }
              break;
          }
          if (topInjectPoint === null && name !== "charset" && name !== "import") {
            topInjectPoint = item;
          }
        } else {
          if (topInjectPoint === null) {
            topInjectPoint = item;
          }
        }
      });
      for (var atrule in collected) {
        for (var id in collected[atrule]) {
          ast.children.insertList(
            collected[atrule][id],
            atrule === "media" ? null : topInjectPoint
          );
        }
      }
    }
    function isMediaRule(node) {
      return node.type === "Atrule" && node.name === "media";
    }
    function processAtrule(node, item, list) {
      if (!isMediaRule(node)) {
        return;
      }
      var prev = item.prev && item.prev.data;
      if (!prev || !isMediaRule(prev)) {
        return;
      }
      if (node.prelude && prev.prelude && node.prelude.id === prev.prelude.id) {
        prev.block.children.appendList(node.block.children);
        list.remove(item);
      }
    }
    module2.exports = function rejoinAtrule(ast, options) {
      relocateAtrules(ast, options);
      walk(ast, {
        visit: "Atrule",
        reverse: true,
        enter: processAtrule
      });
    };
  }
});

// node_modules/csso/lib/restructure/utils.js
var require_utils3 = __commonJS({
  "node_modules/csso/lib/restructure/utils.js"(exports2, module2) {
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    function isEqualSelectors(a, b) {
      var cursor1 = a.head;
      var cursor2 = b.head;
      while (cursor1 !== null && cursor2 !== null && cursor1.data.id === cursor2.data.id) {
        cursor1 = cursor1.next;
        cursor2 = cursor2.next;
      }
      return cursor1 === null && cursor2 === null;
    }
    function isEqualDeclarations(a, b) {
      var cursor1 = a.head;
      var cursor2 = b.head;
      while (cursor1 !== null && cursor2 !== null && cursor1.data.id === cursor2.data.id) {
        cursor1 = cursor1.next;
        cursor2 = cursor2.next;
      }
      return cursor1 === null && cursor2 === null;
    }
    function compareDeclarations(declarations1, declarations2) {
      var result = {
        eq: [],
        ne1: [],
        ne2: [],
        ne2overrided: []
      };
      var fingerprints = /* @__PURE__ */ Object.create(null);
      var declarations2hash = /* @__PURE__ */ Object.create(null);
      for (var cursor = declarations2.head; cursor; cursor = cursor.next) {
        declarations2hash[cursor.data.id] = true;
      }
      for (var cursor = declarations1.head; cursor; cursor = cursor.next) {
        var data = cursor.data;
        if (data.fingerprint) {
          fingerprints[data.fingerprint] = data.important;
        }
        if (declarations2hash[data.id]) {
          declarations2hash[data.id] = false;
          result.eq.push(data);
        } else {
          result.ne1.push(data);
        }
      }
      for (var cursor = declarations2.head; cursor; cursor = cursor.next) {
        var data = cursor.data;
        if (declarations2hash[data.id]) {
          if (!hasOwnProperty2.call(fingerprints, data.fingerprint) || !fingerprints[data.fingerprint] && data.important) {
            result.ne2.push(data);
          }
          result.ne2overrided.push(data);
        }
      }
      return result;
    }
    function addSelectors(dest, source) {
      source.each(function(sourceData) {
        var newStr = sourceData.id;
        var cursor = dest.head;
        while (cursor) {
          var nextStr = cursor.data.id;
          if (nextStr === newStr) {
            return;
          }
          if (nextStr > newStr) {
            break;
          }
          cursor = cursor.next;
        }
        dest.insert(dest.createItem(sourceData), cursor);
      });
      return dest;
    }
    function hasSimilarSelectors(selectors1, selectors2) {
      var cursor1 = selectors1.head;
      while (cursor1 !== null) {
        var cursor2 = selectors2.head;
        while (cursor2 !== null) {
          if (cursor1.data.compareMarker === cursor2.data.compareMarker) {
            return true;
          }
          cursor2 = cursor2.next;
        }
        cursor1 = cursor1.next;
      }
      return false;
    }
    function unsafeToSkipNode(node) {
      switch (node.type) {
        case "Rule":
          return hasSimilarSelectors(node.prelude.children, this);
        case "Atrule":
          if (node.block) {
            return node.block.children.some(unsafeToSkipNode, this);
          }
          break;
        case "Declaration":
          return false;
      }
      return true;
    }
    module2.exports = {
      isEqualSelectors,
      isEqualDeclarations,
      compareDeclarations,
      addSelectors,
      hasSimilarSelectors,
      unsafeToSkipNode
    };
  }
});

// node_modules/csso/lib/restructure/2-initialMergeRuleset.js
var require_initialMergeRuleset = __commonJS({
  "node_modules/csso/lib/restructure/2-initialMergeRuleset.js"(exports2, module2) {
    var walk = require_lib8().walk;
    var utils = require_utils3();
    function processRule(node, item, list) {
      var selectors = node.prelude.children;
      var declarations = node.block.children;
      list.prevUntil(item.prev, function(prev) {
        if (prev.type !== "Rule") {
          return utils.unsafeToSkipNode.call(selectors, prev);
        }
        var prevSelectors = prev.prelude.children;
        var prevDeclarations = prev.block.children;
        if (node.pseudoSignature === prev.pseudoSignature) {
          if (utils.isEqualSelectors(prevSelectors, selectors)) {
            prevDeclarations.appendList(declarations);
            list.remove(item);
            return true;
          }
          if (utils.isEqualDeclarations(declarations, prevDeclarations)) {
            utils.addSelectors(prevSelectors, selectors);
            list.remove(item);
            return true;
          }
        }
        return utils.hasSimilarSelectors(selectors, prevSelectors);
      });
    }
    module2.exports = function initialMergeRule(ast) {
      walk(ast, {
        visit: "Rule",
        enter: processRule
      });
    };
  }
});

// node_modules/csso/lib/restructure/3-disjoinRuleset.js
var require_disjoinRuleset = __commonJS({
  "node_modules/csso/lib/restructure/3-disjoinRuleset.js"(exports2, module2) {
    var List = require_lib8().List;
    var walk = require_lib8().walk;
    function processRule(node, item, list) {
      var selectors = node.prelude.children;
      while (selectors.head !== selectors.tail) {
        var newSelectors = new List();
        newSelectors.insert(selectors.remove(selectors.head));
        list.insert(list.createItem({
          type: "Rule",
          loc: node.loc,
          prelude: {
            type: "SelectorList",
            loc: node.prelude.loc,
            children: newSelectors
          },
          block: {
            type: "Block",
            loc: node.block.loc,
            children: node.block.children.copy()
          },
          pseudoSignature: node.pseudoSignature
        }), item);
      }
    }
    module2.exports = function disjoinRule(ast) {
      walk(ast, {
        visit: "Rule",
        reverse: true,
        enter: processRule
      });
    };
  }
});

// node_modules/csso/lib/restructure/4-restructShorthand.js
var require_restructShorthand = __commonJS({
  "node_modules/csso/lib/restructure/4-restructShorthand.js"(exports2, module2) {
    var List = require_lib8().List;
    var generate = require_lib8().generate;
    var walk = require_lib8().walk;
    var REPLACE = 1;
    var REMOVE = 2;
    var TOP = 0;
    var RIGHT = 1;
    var BOTTOM = 2;
    var LEFT = 3;
    var SIDES = ["top", "right", "bottom", "left"];
    var SIDE = {
      "margin-top": "top",
      "margin-right": "right",
      "margin-bottom": "bottom",
      "margin-left": "left",
      "padding-top": "top",
      "padding-right": "right",
      "padding-bottom": "bottom",
      "padding-left": "left",
      "border-top-color": "top",
      "border-right-color": "right",
      "border-bottom-color": "bottom",
      "border-left-color": "left",
      "border-top-width": "top",
      "border-right-width": "right",
      "border-bottom-width": "bottom",
      "border-left-width": "left",
      "border-top-style": "top",
      "border-right-style": "right",
      "border-bottom-style": "bottom",
      "border-left-style": "left"
    };
    var MAIN_PROPERTY = {
      "margin": "margin",
      "margin-top": "margin",
      "margin-right": "margin",
      "margin-bottom": "margin",
      "margin-left": "margin",
      "padding": "padding",
      "padding-top": "padding",
      "padding-right": "padding",
      "padding-bottom": "padding",
      "padding-left": "padding",
      "border-color": "border-color",
      "border-top-color": "border-color",
      "border-right-color": "border-color",
      "border-bottom-color": "border-color",
      "border-left-color": "border-color",
      "border-width": "border-width",
      "border-top-width": "border-width",
      "border-right-width": "border-width",
      "border-bottom-width": "border-width",
      "border-left-width": "border-width",
      "border-style": "border-style",
      "border-top-style": "border-style",
      "border-right-style": "border-style",
      "border-bottom-style": "border-style",
      "border-left-style": "border-style"
    };
    function TRBL(name) {
      this.name = name;
      this.loc = null;
      this.iehack = void 0;
      this.sides = {
        "top": null,
        "right": null,
        "bottom": null,
        "left": null
      };
    }
    TRBL.prototype.getValueSequence = function(declaration, count) {
      var values = [];
      var iehack = "";
      var hasBadValues = declaration.value.type !== "Value" || declaration.value.children.some(function(child) {
        var special = false;
        switch (child.type) {
          case "Identifier":
            switch (child.name) {
              case "\\0":
              case "\\9":
                iehack = child.name;
                return;
              case "inherit":
              case "initial":
              case "unset":
              case "revert":
                special = child.name;
                break;
            }
            break;
          case "Dimension":
            switch (child.unit) {
              case "rem":
              case "vw":
              case "vh":
              case "vmin":
              case "vmax":
              case "vm":
                special = child.unit;
                break;
            }
            break;
          case "Hash":
          case "Number":
          case "Percentage":
            break;
          case "Function":
            if (child.name === "var") {
              return true;
            }
            special = child.name;
            break;
          case "WhiteSpace":
            return false;
          default:
            return true;
        }
        values.push({
          node: child,
          special,
          important: declaration.important
        });
      });
      if (hasBadValues || values.length > count) {
        return false;
      }
      if (typeof this.iehack === "string" && this.iehack !== iehack) {
        return false;
      }
      this.iehack = iehack;
      return values;
    };
    TRBL.prototype.canOverride = function(side, value) {
      var currentValue = this.sides[side];
      return !currentValue || value.important && !currentValue.important;
    };
    TRBL.prototype.add = function(name, declaration) {
      function attemptToAdd() {
        var sides = this.sides;
        var side = SIDE[name];
        if (side) {
          if (side in sides === false) {
            return false;
          }
          var values = this.getValueSequence(declaration, 1);
          if (!values || !values.length) {
            return false;
          }
          for (var key in sides) {
            if (sides[key] !== null && sides[key].special !== values[0].special) {
              return false;
            }
          }
          if (!this.canOverride(side, values[0])) {
            return true;
          }
          sides[side] = values[0];
          return true;
        } else if (name === this.name) {
          var values = this.getValueSequence(declaration, 4);
          if (!values || !values.length) {
            return false;
          }
          switch (values.length) {
            case 1:
              values[RIGHT] = values[TOP];
              values[BOTTOM] = values[TOP];
              values[LEFT] = values[TOP];
              break;
            case 2:
              values[BOTTOM] = values[TOP];
              values[LEFT] = values[RIGHT];
              break;
            case 3:
              values[LEFT] = values[RIGHT];
              break;
          }
          for (var i = 0; i < 4; i++) {
            for (var key in sides) {
              if (sides[key] !== null && sides[key].special !== values[i].special) {
                return false;
              }
            }
          }
          for (var i = 0; i < 4; i++) {
            if (this.canOverride(SIDES[i], values[i])) {
              sides[SIDES[i]] = values[i];
            }
          }
          return true;
        }
      }
      if (!attemptToAdd.call(this)) {
        return false;
      }
      if (!this.loc) {
        this.loc = declaration.loc;
      }
      return true;
    };
    TRBL.prototype.isOkToMinimize = function() {
      var top = this.sides.top;
      var right = this.sides.right;
      var bottom = this.sides.bottom;
      var left = this.sides.left;
      if (top && right && bottom && left) {
        var important = top.important + right.important + bottom.important + left.important;
        return important === 0 || important === 4;
      }
      return false;
    };
    TRBL.prototype.getValue = function() {
      var result = new List();
      var sides = this.sides;
      var values = [
        sides.top,
        sides.right,
        sides.bottom,
        sides.left
      ];
      var stringValues = [
        generate(sides.top.node),
        generate(sides.right.node),
        generate(sides.bottom.node),
        generate(sides.left.node)
      ];
      if (stringValues[LEFT] === stringValues[RIGHT]) {
        values.pop();
        if (stringValues[BOTTOM] === stringValues[TOP]) {
          values.pop();
          if (stringValues[RIGHT] === stringValues[TOP]) {
            values.pop();
          }
        }
      }
      for (var i = 0; i < values.length; i++) {
        if (i) {
          result.appendData({ type: "WhiteSpace", value: " " });
        }
        result.appendData(values[i].node);
      }
      if (this.iehack) {
        result.appendData({ type: "WhiteSpace", value: " " });
        result.appendData({
          type: "Identifier",
          loc: null,
          name: this.iehack
        });
      }
      return {
        type: "Value",
        loc: null,
        children: result
      };
    };
    TRBL.prototype.getDeclaration = function() {
      return {
        type: "Declaration",
        loc: this.loc,
        important: this.sides.top.important,
        property: this.name,
        value: this.getValue()
      };
    };
    function processRule(rule, shorts, shortDeclarations, lastShortSelector) {
      var declarations = rule.block.children;
      var selector = rule.prelude.children.first().id;
      rule.block.children.eachRight(function(declaration, item) {
        var property = declaration.property;
        if (!MAIN_PROPERTY.hasOwnProperty(property)) {
          return;
        }
        var key = MAIN_PROPERTY[property];
        var shorthand;
        var operation;
        if (!lastShortSelector || selector === lastShortSelector) {
          if (key in shorts) {
            operation = REMOVE;
            shorthand = shorts[key];
          }
        }
        if (!shorthand || !shorthand.add(property, declaration)) {
          operation = REPLACE;
          shorthand = new TRBL(key);
          if (!shorthand.add(property, declaration)) {
            lastShortSelector = null;
            return;
          }
        }
        shorts[key] = shorthand;
        shortDeclarations.push({
          operation,
          block: declarations,
          item,
          shorthand
        });
        lastShortSelector = selector;
      });
      return lastShortSelector;
    }
    function processShorthands(shortDeclarations, markDeclaration) {
      shortDeclarations.forEach(function(item) {
        var shorthand = item.shorthand;
        if (!shorthand.isOkToMinimize()) {
          return;
        }
        if (item.operation === REPLACE) {
          item.item.data = markDeclaration(shorthand.getDeclaration());
        } else {
          item.block.remove(item.item);
        }
      });
    }
    module2.exports = function restructBlock(ast, indexer) {
      var stylesheetMap = {};
      var shortDeclarations = [];
      walk(ast, {
        visit: "Rule",
        reverse: true,
        enter: function(node) {
          var stylesheet = this.block || this.stylesheet;
          var ruleId = (node.pseudoSignature || "") + "|" + node.prelude.children.first().id;
          var ruleMap;
          var shorts;
          if (!stylesheetMap.hasOwnProperty(stylesheet.id)) {
            ruleMap = {
              lastShortSelector: null
            };
            stylesheetMap[stylesheet.id] = ruleMap;
          } else {
            ruleMap = stylesheetMap[stylesheet.id];
          }
          if (ruleMap.hasOwnProperty(ruleId)) {
            shorts = ruleMap[ruleId];
          } else {
            shorts = {};
            ruleMap[ruleId] = shorts;
          }
          ruleMap.lastShortSelector = processRule.call(this, node, shorts, shortDeclarations, ruleMap.lastShortSelector);
        }
      });
      processShorthands(shortDeclarations, indexer.declaration);
    };
  }
});

// node_modules/csso/lib/restructure/6-restructBlock.js
var require_restructBlock = __commonJS({
  "node_modules/csso/lib/restructure/6-restructBlock.js"(exports2, module2) {
    var resolveProperty = require_lib8().property;
    var resolveKeyword = require_lib8().keyword;
    var walk = require_lib8().walk;
    var generate = require_lib8().generate;
    var fingerprintId = 1;
    var dontRestructure = {
      "src": 1
      // https://github.com/afelix/csso/issues/50
    };
    var DONT_MIX_VALUE = {
      // https://developer.mozilla.org/en-US/docs/Web/CSS/display#Browser_compatibility
      "display": /table|ruby|flex|-(flex)?box$|grid|contents|run-in/i,
      // https://developer.mozilla.org/en/docs/Web/CSS/text-align
      "text-align": /^(start|end|match-parent|justify-all)$/i
    };
    var SAFE_VALUES = {
      cursor: [
        "auto",
        "crosshair",
        "default",
        "move",
        "text",
        "wait",
        "help",
        "n-resize",
        "e-resize",
        "s-resize",
        "w-resize",
        "ne-resize",
        "nw-resize",
        "se-resize",
        "sw-resize",
        "pointer",
        "progress",
        "not-allowed",
        "no-drop",
        "vertical-text",
        "all-scroll",
        "col-resize",
        "row-resize"
      ],
      overflow: [
        "hidden",
        "visible",
        "scroll",
        "auto"
      ],
      position: [
        "static",
        "relative",
        "absolute",
        "fixed"
      ]
    };
    var NEEDLESS_TABLE = {
      "border-width": ["border"],
      "border-style": ["border"],
      "border-color": ["border"],
      "border-top": ["border"],
      "border-right": ["border"],
      "border-bottom": ["border"],
      "border-left": ["border"],
      "border-top-width": ["border-top", "border-width", "border"],
      "border-right-width": ["border-right", "border-width", "border"],
      "border-bottom-width": ["border-bottom", "border-width", "border"],
      "border-left-width": ["border-left", "border-width", "border"],
      "border-top-style": ["border-top", "border-style", "border"],
      "border-right-style": ["border-right", "border-style", "border"],
      "border-bottom-style": ["border-bottom", "border-style", "border"],
      "border-left-style": ["border-left", "border-style", "border"],
      "border-top-color": ["border-top", "border-color", "border"],
      "border-right-color": ["border-right", "border-color", "border"],
      "border-bottom-color": ["border-bottom", "border-color", "border"],
      "border-left-color": ["border-left", "border-color", "border"],
      "margin-top": ["margin"],
      "margin-right": ["margin"],
      "margin-bottom": ["margin"],
      "margin-left": ["margin"],
      "padding-top": ["padding"],
      "padding-right": ["padding"],
      "padding-bottom": ["padding"],
      "padding-left": ["padding"],
      "font-style": ["font"],
      "font-variant": ["font"],
      "font-weight": ["font"],
      "font-size": ["font"],
      "font-family": ["font"],
      "list-style-type": ["list-style"],
      "list-style-position": ["list-style"],
      "list-style-image": ["list-style"]
    };
    function getPropertyFingerprint(propertyName, declaration, fingerprints) {
      var realName = resolveProperty(propertyName).basename;
      if (realName === "background") {
        return propertyName + ":" + generate(declaration.value);
      }
      var declarationId = declaration.id;
      var fingerprint = fingerprints[declarationId];
      if (!fingerprint) {
        switch (declaration.value.type) {
          case "Value":
            var vendorId = "";
            var iehack = "";
            var special = {};
            var raw = false;
            declaration.value.children.each(function walk2(node) {
              switch (node.type) {
                case "Value":
                case "Brackets":
                case "Parentheses":
                  node.children.each(walk2);
                  break;
                case "Raw":
                  raw = true;
                  break;
                case "Identifier":
                  var name = node.name;
                  if (!vendorId) {
                    vendorId = resolveKeyword(name).vendor;
                  }
                  if (/\\[09]/.test(name)) {
                    iehack = RegExp.lastMatch;
                  }
                  if (SAFE_VALUES.hasOwnProperty(realName)) {
                    if (SAFE_VALUES[realName].indexOf(name) === -1) {
                      special[name] = true;
                    }
                  } else if (DONT_MIX_VALUE.hasOwnProperty(realName)) {
                    if (DONT_MIX_VALUE[realName].test(name)) {
                      special[name] = true;
                    }
                  }
                  break;
                case "Function":
                  var name = node.name;
                  if (!vendorId) {
                    vendorId = resolveKeyword(name).vendor;
                  }
                  if (name === "rect") {
                    var hasComma = node.children.some(function(node2) {
                      return node2.type === "Operator" && node2.value === ",";
                    });
                    if (!hasComma) {
                      name = "rect-backward";
                    }
                  }
                  special[name + "()"] = true;
                  node.children.each(walk2);
                  break;
                case "Dimension":
                  var unit = node.unit;
                  if (/\\[09]/.test(unit)) {
                    iehack = RegExp.lastMatch;
                  }
                  switch (unit) {
                    case "rem":
                    case "vw":
                    case "vh":
                    case "vmin":
                    case "vmax":
                    case "vm":
                      special[unit] = true;
                      break;
                  }
                  break;
              }
            });
            fingerprint = raw ? "!" + fingerprintId++ : "!" + Object.keys(special).sort() + "|" + iehack + vendorId;
            break;
          case "Raw":
            fingerprint = "!" + declaration.value.value;
            break;
          default:
            fingerprint = generate(declaration.value);
        }
        fingerprints[declarationId] = fingerprint;
      }
      return propertyName + fingerprint;
    }
    function needless(props, declaration, fingerprints) {
      var property = resolveProperty(declaration.property);
      if (NEEDLESS_TABLE.hasOwnProperty(property.basename)) {
        var table = NEEDLESS_TABLE[property.basename];
        for (var i = 0; i < table.length; i++) {
          var ppre = getPropertyFingerprint(property.prefix + table[i], declaration, fingerprints);
          var prev = props.hasOwnProperty(ppre) ? props[ppre] : null;
          if (prev && (!declaration.important || prev.item.data.important)) {
            return prev;
          }
        }
      }
    }
    function processRule(rule, item, list, props, fingerprints) {
      var declarations = rule.block.children;
      declarations.eachRight(function(declaration, declarationItem) {
        var property = declaration.property;
        var fingerprint = getPropertyFingerprint(property, declaration, fingerprints);
        var prev = props[fingerprint];
        if (prev && !dontRestructure.hasOwnProperty(property)) {
          if (declaration.important && !prev.item.data.important) {
            props[fingerprint] = {
              block: declarations,
              item: declarationItem
            };
            prev.block.remove(prev.item);
          } else {
            declarations.remove(declarationItem);
          }
        } else {
          var prev = needless(props, declaration, fingerprints);
          if (prev) {
            declarations.remove(declarationItem);
          } else {
            declaration.fingerprint = fingerprint;
            props[fingerprint] = {
              block: declarations,
              item: declarationItem
            };
          }
        }
      });
      if (declarations.isEmpty()) {
        list.remove(item);
      }
    }
    module2.exports = function restructBlock(ast) {
      var stylesheetMap = {};
      var fingerprints = /* @__PURE__ */ Object.create(null);
      walk(ast, {
        visit: "Rule",
        reverse: true,
        enter: function(node, item, list) {
          var stylesheet = this.block || this.stylesheet;
          var ruleId = (node.pseudoSignature || "") + "|" + node.prelude.children.first().id;
          var ruleMap;
          var props;
          if (!stylesheetMap.hasOwnProperty(stylesheet.id)) {
            ruleMap = {};
            stylesheetMap[stylesheet.id] = ruleMap;
          } else {
            ruleMap = stylesheetMap[stylesheet.id];
          }
          if (ruleMap.hasOwnProperty(ruleId)) {
            props = ruleMap[ruleId];
          } else {
            props = {};
            ruleMap[ruleId] = props;
          }
          processRule.call(this, node, item, list, props, fingerprints);
        }
      });
    };
  }
});

// node_modules/csso/lib/restructure/7-mergeRuleset.js
var require_mergeRuleset = __commonJS({
  "node_modules/csso/lib/restructure/7-mergeRuleset.js"(exports2, module2) {
    var walk = require_lib8().walk;
    var utils = require_utils3();
    function processRule(node, item, list) {
      var selectors = node.prelude.children;
      var declarations = node.block.children;
      var nodeCompareMarker = selectors.first().compareMarker;
      var skippedCompareMarkers = {};
      list.nextUntil(item.next, function(next, nextItem) {
        if (next.type !== "Rule") {
          return utils.unsafeToSkipNode.call(selectors, next);
        }
        if (node.pseudoSignature !== next.pseudoSignature) {
          return true;
        }
        var nextFirstSelector = next.prelude.children.head;
        var nextDeclarations = next.block.children;
        var nextCompareMarker = nextFirstSelector.data.compareMarker;
        if (nextCompareMarker in skippedCompareMarkers) {
          return true;
        }
        if (selectors.head === selectors.tail) {
          if (selectors.first().id === nextFirstSelector.data.id) {
            declarations.appendList(nextDeclarations);
            list.remove(nextItem);
            return;
          }
        }
        if (utils.isEqualDeclarations(declarations, nextDeclarations)) {
          var nextStr = nextFirstSelector.data.id;
          selectors.some(function(data, item2) {
            var curStr = data.id;
            if (nextStr < curStr) {
              selectors.insert(nextFirstSelector, item2);
              return true;
            }
            if (!item2.next) {
              selectors.insert(nextFirstSelector);
              return true;
            }
          });
          list.remove(nextItem);
          return;
        }
        if (nextCompareMarker === nodeCompareMarker) {
          return true;
        }
        skippedCompareMarkers[nextCompareMarker] = true;
      });
    }
    module2.exports = function mergeRule(ast) {
      walk(ast, {
        visit: "Rule",
        enter: processRule
      });
    };
  }
});

// node_modules/csso/lib/restructure/8-restructRuleset.js
var require_restructRuleset = __commonJS({
  "node_modules/csso/lib/restructure/8-restructRuleset.js"(exports2, module2) {
    var List = require_lib8().List;
    var walk = require_lib8().walk;
    var utils = require_utils3();
    function calcSelectorLength(list) {
      var length = 0;
      list.each(function(data) {
        length += data.id.length + 1;
      });
      return length - 1;
    }
    function calcDeclarationsLength(tokens) {
      var length = 0;
      for (var i = 0; i < tokens.length; i++) {
        length += tokens[i].length;
      }
      return length + // declarations
      tokens.length - 1;
    }
    function processRule(node, item, list) {
      var avoidRulesMerge = this.block !== null ? this.block.avoidRulesMerge : false;
      var selectors = node.prelude.children;
      var block = node.block;
      var disallowDownMarkers = /* @__PURE__ */ Object.create(null);
      var allowMergeUp = true;
      var allowMergeDown = true;
      list.prevUntil(item.prev, function(prev, prevItem) {
        var prevBlock = prev.block;
        var prevType = prev.type;
        if (prevType !== "Rule") {
          var unsafe = utils.unsafeToSkipNode.call(selectors, prev);
          if (!unsafe && prevType === "Atrule" && prevBlock) {
            walk(prevBlock, {
              visit: "Rule",
              enter: function(node2) {
                node2.prelude.children.each(function(data) {
                  disallowDownMarkers[data.compareMarker] = true;
                });
              }
            });
          }
          return unsafe;
        }
        var prevSelectors = prev.prelude.children;
        if (node.pseudoSignature !== prev.pseudoSignature) {
          return true;
        }
        allowMergeDown = !prevSelectors.some(function(selector) {
          return selector.compareMarker in disallowDownMarkers;
        });
        if (!allowMergeDown && !allowMergeUp) {
          return true;
        }
        if (allowMergeUp && utils.isEqualSelectors(prevSelectors, selectors)) {
          prevBlock.children.appendList(block.children);
          list.remove(item);
          return true;
        }
        var diff = utils.compareDeclarations(block.children, prevBlock.children);
        if (diff.eq.length) {
          if (!diff.ne1.length && !diff.ne2.length) {
            if (allowMergeDown) {
              utils.addSelectors(selectors, prevSelectors);
              list.remove(prevItem);
            }
            return true;
          } else if (!avoidRulesMerge) {
            if (diff.ne1.length && !diff.ne2.length) {
              var selectorLength = calcSelectorLength(selectors);
              var blockLength = calcDeclarationsLength(diff.eq);
              if (allowMergeUp && selectorLength < blockLength) {
                utils.addSelectors(prevSelectors, selectors);
                block.children = new List().fromArray(diff.ne1);
              }
            } else if (!diff.ne1.length && diff.ne2.length) {
              var selectorLength = calcSelectorLength(prevSelectors);
              var blockLength = calcDeclarationsLength(diff.eq);
              if (allowMergeDown && selectorLength < blockLength) {
                utils.addSelectors(selectors, prevSelectors);
                prevBlock.children = new List().fromArray(diff.ne2);
              }
            } else {
              var newSelector = {
                type: "SelectorList",
                loc: null,
                children: utils.addSelectors(prevSelectors.copy(), selectors)
              };
              var newBlockLength = calcSelectorLength(newSelector.children) + 2;
              var blockLength = calcDeclarationsLength(diff.eq);
              if (blockLength >= newBlockLength) {
                var newItem = list.createItem({
                  type: "Rule",
                  loc: null,
                  prelude: newSelector,
                  block: {
                    type: "Block",
                    loc: null,
                    children: new List().fromArray(diff.eq)
                  },
                  pseudoSignature: node.pseudoSignature
                });
                block.children = new List().fromArray(diff.ne1);
                prevBlock.children = new List().fromArray(diff.ne2overrided);
                if (allowMergeUp) {
                  list.insert(newItem, prevItem);
                } else {
                  list.insert(newItem, item);
                }
                return true;
              }
            }
          }
        }
        if (allowMergeUp) {
          allowMergeUp = !prevSelectors.some(function(prevSelector) {
            return selectors.some(function(selector) {
              return selector.compareMarker === prevSelector.compareMarker;
            });
          });
        }
        prevSelectors.each(function(data) {
          disallowDownMarkers[data.compareMarker] = true;
        });
      });
    }
    module2.exports = function restructRule(ast) {
      walk(ast, {
        visit: "Rule",
        reverse: true,
        enter: processRule
      });
    };
  }
});

// node_modules/csso/lib/restructure/index.js
var require_restructure = __commonJS({
  "node_modules/csso/lib/restructure/index.js"(exports2, module2) {
    var prepare = require_prepare();
    var mergeAtrule = require_mergeAtrule();
    var initialMergeRuleset = require_initialMergeRuleset();
    var disjoinRuleset = require_disjoinRuleset();
    var restructShorthand = require_restructShorthand();
    var restructBlock = require_restructBlock();
    var mergeRuleset = require_mergeRuleset();
    var restructRuleset = require_restructRuleset();
    module2.exports = function(ast, options) {
      var indexer = prepare(ast, options);
      options.logger("prepare", ast);
      mergeAtrule(ast, options);
      options.logger("mergeAtrule", ast);
      initialMergeRuleset(ast);
      options.logger("initialMergeRuleset", ast);
      disjoinRuleset(ast);
      options.logger("disjoinRuleset", ast);
      restructShorthand(ast, indexer);
      options.logger("restructShorthand", ast);
      restructBlock(ast);
      options.logger("restructBlock", ast);
      mergeRuleset(ast);
      options.logger("mergeRuleset", ast);
      restructRuleset(ast);
      options.logger("restructRuleset", ast);
    };
  }
});

// node_modules/csso/lib/compress.js
var require_compress = __commonJS({
  "node_modules/csso/lib/compress.js"(exports2, module2) {
    var List = require_lib8().List;
    var clone = require_lib8().clone;
    var usageUtils = require_usage();
    var clean = require_clean();
    var replace = require_replace();
    var restructure = require_restructure();
    var walk = require_lib8().walk;
    function readChunk(children, specialComments) {
      var buffer = new List();
      var nonSpaceTokenInBuffer = false;
      var protectedComment;
      children.nextUntil(children.head, function(node, item, list) {
        if (node.type === "Comment") {
          if (!specialComments || node.value.charAt(0) !== "!") {
            list.remove(item);
            return;
          }
          if (nonSpaceTokenInBuffer || protectedComment) {
            return true;
          }
          list.remove(item);
          protectedComment = node;
          return;
        }
        if (node.type !== "WhiteSpace") {
          nonSpaceTokenInBuffer = true;
        }
        buffer.insert(list.remove(item));
      });
      return {
        comment: protectedComment,
        stylesheet: {
          type: "StyleSheet",
          loc: null,
          children: buffer
        }
      };
    }
    function compressChunk(ast, firstAtrulesAllowed, num, options) {
      options.logger("Compress block #" + num, null, true);
      var seed = 1;
      if (ast.type === "StyleSheet") {
        ast.firstAtrulesAllowed = firstAtrulesAllowed;
        ast.id = seed++;
      }
      walk(ast, {
        visit: "Atrule",
        enter: function markScopes(node) {
          if (node.block !== null) {
            node.block.id = seed++;
          }
        }
      });
      options.logger("init", ast);
      clean(ast, options);
      options.logger("clean", ast);
      replace(ast, options);
      options.logger("replace", ast);
      if (options.restructuring) {
        restructure(ast, options);
      }
      return ast;
    }
    function getCommentsOption(options) {
      var comments = "comments" in options ? options.comments : "exclamation";
      if (typeof comments === "boolean") {
        comments = comments ? "exclamation" : false;
      } else if (comments !== "exclamation" && comments !== "first-exclamation") {
        comments = false;
      }
      return comments;
    }
    function getRestructureOption(options) {
      if ("restructure" in options) {
        return options.restructure;
      }
      return "restructuring" in options ? options.restructuring : true;
    }
    function wrapBlock(block) {
      return new List().appendData({
        type: "Rule",
        loc: null,
        prelude: {
          type: "SelectorList",
          loc: null,
          children: new List().appendData({
            type: "Selector",
            loc: null,
            children: new List().appendData({
              type: "TypeSelector",
              loc: null,
              name: "x"
            })
          })
        },
        block
      });
    }
    module2.exports = function compress(ast, options) {
      ast = ast || { type: "StyleSheet", loc: null, children: new List() };
      options = options || {};
      var compressOptions = {
        logger: typeof options.logger === "function" ? options.logger : function() {
        },
        restructuring: getRestructureOption(options),
        forceMediaMerge: Boolean(options.forceMediaMerge),
        usage: options.usage ? usageUtils.buildIndex(options.usage) : false
      };
      var specialComments = getCommentsOption(options);
      var firstAtrulesAllowed = true;
      var input;
      var output = new List();
      var chunk;
      var chunkNum = 1;
      var chunkChildren;
      if (options.clone) {
        ast = clone(ast);
      }
      if (ast.type === "StyleSheet") {
        input = ast.children;
        ast.children = output;
      } else {
        input = wrapBlock(ast);
      }
      do {
        chunk = readChunk(input, Boolean(specialComments));
        compressChunk(chunk.stylesheet, firstAtrulesAllowed, chunkNum++, compressOptions);
        chunkChildren = chunk.stylesheet.children;
        if (chunk.comment) {
          if (!output.isEmpty()) {
            output.insert(List.createItem({
              type: "Raw",
              value: "\n"
            }));
          }
          output.insert(List.createItem(chunk.comment));
          if (!chunkChildren.isEmpty()) {
            output.insert(List.createItem({
              type: "Raw",
              value: "\n"
            }));
          }
        }
        if (firstAtrulesAllowed && !chunkChildren.isEmpty()) {
          var lastRule = chunkChildren.last();
          if (lastRule.type !== "Atrule" || lastRule.name !== "import" && lastRule.name !== "charset") {
            firstAtrulesAllowed = false;
          }
        }
        if (specialComments !== "exclamation") {
          specialComments = false;
        }
        output.appendList(chunkChildren);
      } while (!input.isEmpty());
      return {
        ast
      };
    };
  }
});

// node_modules/csso/package.json
var require_package2 = __commonJS({
  "node_modules/csso/package.json"(exports2, module2) {
    module2.exports = {
      name: "csso",
      version: "4.2.0",
      description: "CSS minifier with structural optimisations",
      homepage: "https://github.com/css/csso",
      author: "Sergey Kryzhanovsky <skryzhanovsky@ya.ru> (https://github.com/afelix)",
      maintainers: [
        {
          name: "Roman Dvornov",
          email: "rdvornov@gmail.com",
          "github-username": "lahmatiy"
        }
      ],
      license: "MIT",
      repository: "css/csso",
      bugs: {
        url: "https://github.com/css/csso/issues"
      },
      keywords: [
        "css",
        "compress",
        "minifier",
        "minify",
        "optimise",
        "optimisation",
        "csstree"
      ],
      main: "./lib/index",
      scripts: {
        test: "mocha --reporter dot",
        lint: "eslint lib test",
        "lint-and-test": "npm run lint && npm test",
        build: "rollup --config && terser dist/csso.js --compress --mangle -o dist/csso.min.js",
        coverage: "nyc npm test",
        coveralls: "nyc report --reporter=text-lcov | coveralls",
        travis: "nyc npm run lint-and-test && npm run coveralls",
        hydrogen: "node --trace-hydrogen --trace-phase=Z --trace-deopt --code-comments --hydrogen-track-positions --redirect-code-traces --redirect-code-traces-to=code.asm --trace_hydrogen_file=code.cfg --print-opt-code bin/csso --stat -o /dev/null",
        prepublishOnly: "npm run build"
      },
      dependencies: {
        "css-tree": "^1.1.2"
      },
      browser: {
        "css-tree": "css-tree/dist/csstree.min.js"
      },
      devDependencies: {
        "@rollup/plugin-commonjs": "^11.0.1",
        "@rollup/plugin-json": "^4.0.1",
        "@rollup/plugin-node-resolve": "^7.0.0",
        coveralls: "^3.0.11",
        eslint: "^6.8.0",
        mocha: "^7.1.1",
        nyc: "^15.0.0",
        rollup: "^1.29.0",
        "source-map": "^0.6.1",
        terser: "^4.6.3"
      },
      engines: {
        node: ">=8.0.0"
      },
      files: [
        "dist",
        "lib"
      ]
    };
  }
});

// node_modules/csso/lib/index.js
var require_lib9 = __commonJS({
  "node_modules/csso/lib/index.js"(exports2, module2) {
    var csstree = require_lib8();
    var parse = csstree.parse;
    var compress = require_compress();
    var generate = csstree.generate;
    function debugOutput(name, options, startTime, data) {
      if (options.debug) {
        console.error("## " + name + " done in %d ms\n", Date.now() - startTime);
      }
      return data;
    }
    function createDefaultLogger(level) {
      var lastDebug;
      return function logger(title, ast) {
        var line = title;
        if (ast) {
          line = "[" + ((Date.now() - lastDebug) / 1e3).toFixed(3) + "s] " + line;
        }
        if (level > 1 && ast) {
          var css = generate(ast);
          if (level === 2 && css.length > 256) {
            css = css.substr(0, 256) + "...";
          }
          line += "\n  " + css + "\n";
        }
        console.error(line);
        lastDebug = Date.now();
      };
    }
    function copy(obj) {
      var result = {};
      for (var key in obj) {
        result[key] = obj[key];
      }
      return result;
    }
    function buildCompressOptions(options) {
      options = copy(options);
      if (typeof options.logger !== "function" && options.debug) {
        options.logger = createDefaultLogger(options.debug);
      }
      return options;
    }
    function runHandler(ast, options, handlers) {
      if (!Array.isArray(handlers)) {
        handlers = [handlers];
      }
      handlers.forEach(function(fn) {
        fn(ast, options);
      });
    }
    function minify(context, source, options) {
      options = options || {};
      var filename = options.filename || "<unknown>";
      var result;
      var ast = debugOutput(
        "parsing",
        options,
        Date.now(),
        parse(source, {
          context,
          filename,
          positions: Boolean(options.sourceMap)
        })
      );
      if (options.beforeCompress) {
        debugOutput(
          "beforeCompress",
          options,
          Date.now(),
          runHandler(ast, options, options.beforeCompress)
        );
      }
      var compressResult = debugOutput(
        "compress",
        options,
        Date.now(),
        compress(ast, buildCompressOptions(options))
      );
      if (options.afterCompress) {
        debugOutput(
          "afterCompress",
          options,
          Date.now(),
          runHandler(compressResult, options, options.afterCompress)
        );
      }
      if (options.sourceMap) {
        result = debugOutput("generate(sourceMap: true)", options, Date.now(), function() {
          var tmp = generate(compressResult.ast, { sourceMap: true });
          tmp.map._file = filename;
          tmp.map.setSourceContent(filename, source);
          return tmp;
        }());
      } else {
        result = debugOutput("generate", options, Date.now(), {
          css: generate(compressResult.ast),
          map: null
        });
      }
      return result;
    }
    function minifyStylesheet(source, options) {
      return minify("stylesheet", source, options);
    }
    function minifyBlock(source, options) {
      return minify("declarationList", source, options);
    }
    module2.exports = {
      version: require_package2().version,
      // main methods
      minify: minifyStylesheet,
      minifyBlock,
      // css syntax parser/walkers/generator/etc
      syntax: Object.assign({
        compress
      }, csstree)
    };
  }
});

// node_modules/svgo/plugins/minifyStyles.js
var require_minifyStyles = __commonJS({
  "node_modules/svgo/plugins/minifyStyles.js"(exports2) {
    "use strict";
    var csso = require_lib9();
    exports2.type = "visitor";
    exports2.name = "minifyStyles";
    exports2.active = true;
    exports2.description = "minifies styles and removes unused styles based on usage data";
    exports2.fn = (_root, { usage, ...params }) => {
      let enableTagsUsage = true;
      let enableIdsUsage = true;
      let enableClassesUsage = true;
      let forceUsageDeoptimized = false;
      if (typeof usage === "boolean") {
        enableTagsUsage = usage;
        enableIdsUsage = usage;
        enableClassesUsage = usage;
      } else if (usage) {
        enableTagsUsage = usage.tags == null ? true : usage.tags;
        enableIdsUsage = usage.ids == null ? true : usage.ids;
        enableClassesUsage = usage.classes == null ? true : usage.classes;
        forceUsageDeoptimized = usage.force == null ? false : usage.force;
      }
      const styleElements = [];
      const elementsWithStyleAttributes = [];
      let deoptimized = false;
      const tagsUsage = /* @__PURE__ */ new Set();
      const idsUsage = /* @__PURE__ */ new Set();
      const classesUsage = /* @__PURE__ */ new Set();
      return {
        element: {
          enter: (node) => {
            if (node.name === "script") {
              deoptimized = true;
            }
            for (const name of Object.keys(node.attributes)) {
              if (name.startsWith("on")) {
                deoptimized = true;
              }
            }
            tagsUsage.add(node.name);
            if (node.attributes.id != null) {
              idsUsage.add(node.attributes.id);
            }
            if (node.attributes.class != null) {
              for (const className of node.attributes.class.split(/\s+/)) {
                classesUsage.add(className);
              }
            }
            if (node.name === "style" && node.children.length !== 0) {
              styleElements.push(node);
            } else if (node.attributes.style != null) {
              elementsWithStyleAttributes.push(node);
            }
          }
        },
        root: {
          exit: () => {
            const cssoUsage = {};
            if (deoptimized === false || forceUsageDeoptimized === true) {
              if (enableTagsUsage && tagsUsage.size !== 0) {
                cssoUsage.tags = Array.from(tagsUsage);
              }
              if (enableIdsUsage && idsUsage.size !== 0) {
                cssoUsage.ids = Array.from(idsUsage);
              }
              if (enableClassesUsage && classesUsage.size !== 0) {
                cssoUsage.classes = Array.from(classesUsage);
              }
            }
            for (const node of styleElements) {
              if (node.children[0].type === "text" || node.children[0].type === "cdata") {
                const cssText = node.children[0].value;
                const minified = csso.minify(cssText, {
                  ...params,
                  usage: cssoUsage
                }).css;
                if (cssText.indexOf(">") >= 0 || cssText.indexOf("<") >= 0) {
                  node.children[0].type = "cdata";
                  node.children[0].value = minified;
                } else {
                  node.children[0].type = "text";
                  node.children[0].value = minified;
                }
              }
            }
            for (const node of elementsWithStyleAttributes) {
              const elemStyle = node.attributes.style;
              node.attributes.style = csso.minifyBlock(elemStyle, {
                ...params
              }).css;
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/cleanupIDs.js
var require_cleanupIDs = __commonJS({
  "node_modules/svgo/plugins/cleanupIDs.js"(exports2) {
    "use strict";
    var { visitSkip } = require_xast();
    var { referencesProps } = require_collections();
    exports2.type = "visitor";
    exports2.name = "cleanupIDs";
    exports2.active = true;
    exports2.description = "removes unused IDs and minifies used";
    var regReferencesUrl = /\burl\(("|')?#(.+?)\1\)/;
    var regReferencesHref = /^#(.+?)$/;
    var regReferencesBegin = /(\w+)\./;
    var generateIDchars = [
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z"
    ];
    var maxIDindex = generateIDchars.length - 1;
    var hasStringPrefix = (string, prefixes) => {
      for (const prefix of prefixes) {
        if (string.startsWith(prefix)) {
          return true;
        }
      }
      return false;
    };
    var generateID = (currentID) => {
      if (currentID == null) {
        return [0];
      }
      currentID[currentID.length - 1] += 1;
      for (let i = currentID.length - 1; i > 0; i--) {
        if (currentID[i] > maxIDindex) {
          currentID[i] = 0;
          if (currentID[i - 1] !== void 0) {
            currentID[i - 1]++;
          }
        }
      }
      if (currentID[0] > maxIDindex) {
        currentID[0] = 0;
        currentID.unshift(0);
      }
      return currentID;
    };
    var getIDstring = (arr, prefix) => {
      return prefix + arr.map((i) => generateIDchars[i]).join("");
    };
    exports2.fn = (_root, params) => {
      const {
        remove = true,
        minify = true,
        prefix = "",
        preserve = [],
        preservePrefixes = [],
        force = false
      } = params;
      const preserveIDs = new Set(
        Array.isArray(preserve) ? preserve : preserve ? [preserve] : []
      );
      const preserveIDPrefixes = Array.isArray(preservePrefixes) ? preservePrefixes : preservePrefixes ? [preservePrefixes] : [];
      const nodeById = /* @__PURE__ */ new Map();
      const referencesById = /* @__PURE__ */ new Map();
      let deoptimized = false;
      return {
        element: {
          enter: (node) => {
            if (force == false) {
              if ((node.name === "style" || node.name === "script") && node.children.length !== 0) {
                deoptimized = true;
                return;
              }
              if (node.name === "svg") {
                let hasDefsOnly = true;
                for (const child of node.children) {
                  if (child.type !== "element" || child.name !== "defs") {
                    hasDefsOnly = false;
                    break;
                  }
                }
                if (hasDefsOnly) {
                  return visitSkip;
                }
              }
            }
            for (const [name, value] of Object.entries(node.attributes)) {
              if (name === "id") {
                const id = value;
                if (nodeById.has(id)) {
                  delete node.attributes.id;
                } else {
                  nodeById.set(id, node);
                }
              } else {
                let id = null;
                if (referencesProps.includes(name)) {
                  const match = value.match(regReferencesUrl);
                  if (match != null) {
                    id = match[2];
                  }
                }
                if (name === "href" || name.endsWith(":href")) {
                  const match = value.match(regReferencesHref);
                  if (match != null) {
                    id = match[1];
                  }
                }
                if (name === "begin") {
                  const match = value.match(regReferencesBegin);
                  if (match != null) {
                    id = match[1];
                  }
                }
                if (id != null) {
                  let refs = referencesById.get(id);
                  if (refs == null) {
                    refs = [];
                    referencesById.set(id, refs);
                  }
                  refs.push({ element: node, name, value });
                }
              }
            }
          }
        },
        root: {
          exit: () => {
            if (deoptimized) {
              return;
            }
            const isIdPreserved = (id) => preserveIDs.has(id) || hasStringPrefix(id, preserveIDPrefixes);
            let currentID = null;
            for (const [id, refs] of referencesById) {
              const node = nodeById.get(id);
              if (node != null) {
                if (minify && isIdPreserved(id) === false) {
                  let currentIDString = null;
                  do {
                    currentID = generateID(currentID);
                    currentIDString = getIDstring(currentID, prefix);
                  } while (isIdPreserved(currentIDString));
                  node.attributes.id = currentIDString;
                  for (const { element, name, value } of refs) {
                    if (value.includes("#")) {
                      element.attributes[name] = value.replace(
                        `#${id}`,
                        `#${currentIDString}`
                      );
                    } else {
                      element.attributes[name] = value.replace(
                        `${id}.`,
                        `${currentIDString}.`
                      );
                    }
                  }
                }
                nodeById.delete(id);
              }
            }
            if (remove) {
              for (const [id, node] of nodeById) {
                if (isIdPreserved(id) === false) {
                  delete node.attributes.id;
                }
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeUselessDefs.js
var require_removeUselessDefs = __commonJS({
  "node_modules/svgo/plugins/removeUselessDefs.js"(exports2) {
    "use strict";
    var { detachNodeFromParent } = require_xast();
    var { elemsGroups } = require_collections();
    exports2.type = "visitor";
    exports2.name = "removeUselessDefs";
    exports2.active = true;
    exports2.description = "removes elements in <defs> without id";
    exports2.fn = () => {
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name === "defs") {
              const usefulNodes = [];
              collectUsefulNodes(node, usefulNodes);
              if (usefulNodes.length === 0) {
                detachNodeFromParent(node, parentNode);
              }
              for (const usefulNode of usefulNodes) {
                usefulNode.parentNode = node;
              }
              node.children = usefulNodes;
            } else if (elemsGroups.nonRendering.includes(node.name) && node.attributes.id == null) {
              detachNodeFromParent(node, parentNode);
            }
          }
        }
      };
    };
    var collectUsefulNodes = (node, usefulNodes) => {
      for (const child of node.children) {
        if (child.type === "element") {
          if (child.attributes.id != null || child.name === "style") {
            usefulNodes.push(child);
          } else {
            collectUsefulNodes(child, usefulNodes);
          }
        }
      }
    };
  }
});

// node_modules/svgo/lib/svgo/tools.js
var require_tools = __commonJS({
  "node_modules/svgo/lib/svgo/tools.js"(exports2) {
    "use strict";
    exports2.encodeSVGDatauri = (str, type) => {
      var prefix = "data:image/svg+xml";
      if (!type || type === "base64") {
        prefix += ";base64,";
        str = prefix + Buffer.from(str).toString("base64");
      } else if (type === "enc") {
        str = prefix + "," + encodeURIComponent(str);
      } else if (type === "unenc") {
        str = prefix + "," + str;
      }
      return str;
    };
    exports2.decodeSVGDatauri = (str) => {
      var regexp = /data:image\/svg\+xml(;charset=[^;,]*)?(;base64)?,(.*)/;
      var match = regexp.exec(str);
      if (!match)
        return str;
      var data = match[3];
      if (match[2]) {
        str = Buffer.from(data, "base64").toString("utf8");
      } else if (data.charAt(0) === "%") {
        str = decodeURIComponent(data);
      } else if (data.charAt(0) === "<") {
        str = data;
      }
      return str;
    };
    exports2.cleanupOutData = (data, params, command) => {
      let str = "";
      let delimiter;
      let prev;
      data.forEach((item, i) => {
        delimiter = " ";
        if (i == 0)
          delimiter = "";
        if (params.noSpaceAfterFlags && (command == "A" || command == "a")) {
          var pos = i % 7;
          if (pos == 4 || pos == 5)
            delimiter = "";
        }
        const itemStr = params.leadingZero ? removeLeadingZero(item) : item.toString();
        if (params.negativeExtraSpace && delimiter != "" && (item < 0 || itemStr.charAt(0) === "." && prev % 1 !== 0)) {
          delimiter = "";
        }
        prev = item;
        str += delimiter + itemStr;
      });
      return str;
    };
    var removeLeadingZero = (num) => {
      var strNum = num.toString();
      if (0 < num && num < 1 && strNum.charAt(0) === "0") {
        strNum = strNum.slice(1);
      } else if (-1 < num && num < 0 && strNum.charAt(1) === "0") {
        strNum = strNum.charAt(0) + strNum.slice(2);
      }
      return strNum;
    };
    exports2.removeLeadingZero = removeLeadingZero;
  }
});

// node_modules/svgo/plugins/cleanupNumericValues.js
var require_cleanupNumericValues = __commonJS({
  "node_modules/svgo/plugins/cleanupNumericValues.js"(exports2) {
    "use strict";
    var { removeLeadingZero } = require_tools();
    exports2.name = "cleanupNumericValues";
    exports2.type = "visitor";
    exports2.active = true;
    exports2.description = "rounds numeric values to the fixed precision, removes default \u2018px\u2019 units";
    var regNumericValues = /^([-+]?\d*\.?\d+([eE][-+]?\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/;
    var absoluteLengths = {
      // relative to px
      cm: 96 / 2.54,
      mm: 96 / 25.4,
      in: 96,
      pt: 4 / 3,
      pc: 16,
      px: 1
    };
    exports2.fn = (_root, params) => {
      const {
        floatPrecision = 3,
        leadingZero = true,
        defaultPx = true,
        convertToPx = true
      } = params;
      return {
        element: {
          enter: (node) => {
            if (node.attributes.viewBox != null) {
              const nums = node.attributes.viewBox.split(/\s,?\s*|,\s*/g);
              node.attributes.viewBox = nums.map((value) => {
                const num = Number(value);
                return Number.isNaN(num) ? value : Number(num.toFixed(floatPrecision));
              }).join(" ");
            }
            for (const [name, value] of Object.entries(node.attributes)) {
              if (name === "version") {
                continue;
              }
              const match = value.match(regNumericValues);
              if (match) {
                let num = Number(Number(match[1]).toFixed(floatPrecision));
                let matchedUnit = match[3] || "";
                let units = matchedUnit;
                if (convertToPx && units !== "" && units in absoluteLengths) {
                  const pxNum = Number(
                    (absoluteLengths[units] * Number(match[1])).toFixed(
                      floatPrecision
                    )
                  );
                  if (pxNum.toString().length < match[0].length) {
                    num = pxNum;
                    units = "px";
                  }
                }
                let str;
                if (leadingZero) {
                  str = removeLeadingZero(num);
                } else {
                  str = num.toString();
                }
                if (defaultPx && units === "px") {
                  units = "";
                }
                node.attributes[name] = str + units;
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/convertColors.js
var require_convertColors = __commonJS({
  "node_modules/svgo/plugins/convertColors.js"(exports2) {
    "use strict";
    var collections = require_collections();
    exports2.type = "visitor";
    exports2.name = "convertColors";
    exports2.active = true;
    exports2.description = "converts colors: rgb() to #rrggbb and #rrggbb to #rgb";
    var rNumber = "([+-]?(?:\\d*\\.\\d+|\\d+\\.?)%?)";
    var rComma = "\\s*,\\s*";
    var regRGB = new RegExp(
      "^rgb\\(\\s*" + rNumber + rComma + rNumber + rComma + rNumber + "\\s*\\)$"
    );
    var regHEX = /^#(([a-fA-F0-9])\2){3}$/;
    var convertRgbToHex = ([r, g, b]) => {
      const hexNumber = (
        // operator precedence is (+) > (<<) > (|)
        (256 + // [1][0]
        r << // [1][r]
        8 | // [1][r][0]
        g) << // [1][r][g]
        8 | // [1][r][g][0]
        b
      );
      return "#" + hexNumber.toString(16).slice(1).toUpperCase();
    };
    exports2.fn = (_root, params) => {
      const {
        currentColor = false,
        names2hex = true,
        rgb2hex = true,
        shorthex = true,
        shortname = true
      } = params;
      return {
        element: {
          enter: (node) => {
            for (const [name, value] of Object.entries(node.attributes)) {
              if (collections.colorsProps.includes(name)) {
                let val = value;
                if (currentColor) {
                  let matched;
                  if (typeof currentColor === "string") {
                    matched = val === currentColor;
                  } else if (currentColor instanceof RegExp) {
                    matched = currentColor.exec(val) != null;
                  } else {
                    matched = val !== "none";
                  }
                  if (matched) {
                    val = "currentColor";
                  }
                }
                if (names2hex) {
                  const colorName = val.toLowerCase();
                  if (collections.colorsNames[colorName] != null) {
                    val = collections.colorsNames[colorName];
                  }
                }
                if (rgb2hex) {
                  let match = val.match(regRGB);
                  if (match != null) {
                    let nums = match.slice(1, 4).map((m) => {
                      let n;
                      if (m.indexOf("%") > -1) {
                        n = Math.round(parseFloat(m) * 2.55);
                      } else {
                        n = Number(m);
                      }
                      return Math.max(0, Math.min(n, 255));
                    });
                    val = convertRgbToHex(nums);
                  }
                }
                if (shorthex) {
                  let match = val.match(regHEX);
                  if (match != null) {
                    val = "#" + match[0][1] + match[0][3] + match[0][5];
                  }
                }
                if (shortname) {
                  const colorName = val.toLowerCase();
                  if (collections.colorsShortNames[colorName] != null) {
                    val = collections.colorsShortNames[colorName];
                  }
                }
                node.attributes[name] = val;
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/lib/style.js
var require_style = __commonJS({
  "node_modules/svgo/lib/style.js"(exports2) {
    "use strict";
    var stable = require_stable();
    var csstree = require_lib8();
    var specificity = require_specificity();
    var { visit, matches } = require_xast();
    var {
      attrsGroups,
      inheritableAttrs,
      presentationNonInheritableGroupAttrs
    } = require_collections();
    var csstreeWalkSkip = csstree.walk.skip;
    var parseRule = (ruleNode, dynamic) => {
      let selectors;
      let selectorsSpecificity;
      const declarations = [];
      csstree.walk(ruleNode, (cssNode) => {
        if (cssNode.type === "SelectorList") {
          selectorsSpecificity = specificity(cssNode);
          const newSelectorsNode = csstree.clone(cssNode);
          csstree.walk(newSelectorsNode, (pseudoClassNode, item, list) => {
            if (pseudoClassNode.type === "PseudoClassSelector") {
              dynamic = true;
              list.remove(item);
            }
          });
          selectors = csstree.generate(newSelectorsNode);
          return csstreeWalkSkip;
        }
        if (cssNode.type === "Declaration") {
          declarations.push({
            name: cssNode.property,
            value: csstree.generate(cssNode.value),
            important: cssNode.important === true
          });
          return csstreeWalkSkip;
        }
      });
      if (selectors == null || selectorsSpecificity == null) {
        throw Error("assert");
      }
      return {
        dynamic,
        selectors,
        specificity: selectorsSpecificity,
        declarations
      };
    };
    var parseStylesheet = (css, dynamic) => {
      const rules = [];
      const ast = csstree.parse(css, {
        parseValue: false,
        parseAtrulePrelude: false
      });
      csstree.walk(ast, (cssNode) => {
        if (cssNode.type === "Rule") {
          rules.push(parseRule(cssNode, dynamic || false));
          return csstreeWalkSkip;
        }
        if (cssNode.type === "Atrule") {
          if (cssNode.name === "keyframes") {
            return csstreeWalkSkip;
          }
          csstree.walk(cssNode, (ruleNode) => {
            if (ruleNode.type === "Rule") {
              rules.push(parseRule(ruleNode, dynamic || true));
              return csstreeWalkSkip;
            }
          });
          return csstreeWalkSkip;
        }
      });
      return rules;
    };
    var parseStyleDeclarations = (css) => {
      const declarations = [];
      const ast = csstree.parse(css, {
        context: "declarationList",
        parseValue: false
      });
      csstree.walk(ast, (cssNode) => {
        if (cssNode.type === "Declaration") {
          declarations.push({
            name: cssNode.property,
            value: csstree.generate(cssNode.value),
            important: cssNode.important === true
          });
        }
      });
      return declarations;
    };
    var computeOwnStyle = (stylesheet, node) => {
      const computedStyle = {};
      const importantStyles = /* @__PURE__ */ new Map();
      for (const [name, value] of Object.entries(node.attributes)) {
        if (attrsGroups.presentation.includes(name)) {
          computedStyle[name] = { type: "static", inherited: false, value };
          importantStyles.set(name, false);
        }
      }
      for (const { selectors, declarations, dynamic } of stylesheet.rules) {
        if (matches(node, selectors)) {
          for (const { name, value, important } of declarations) {
            const computed = computedStyle[name];
            if (computed && computed.type === "dynamic") {
              continue;
            }
            if (dynamic) {
              computedStyle[name] = { type: "dynamic", inherited: false };
              continue;
            }
            if (computed == null || important === true || importantStyles.get(name) === false) {
              computedStyle[name] = { type: "static", inherited: false, value };
              importantStyles.set(name, important);
            }
          }
        }
      }
      const styleDeclarations = node.attributes.style == null ? [] : parseStyleDeclarations(node.attributes.style);
      for (const { name, value, important } of styleDeclarations) {
        const computed = computedStyle[name];
        if (computed && computed.type === "dynamic") {
          continue;
        }
        if (computed == null || important === true || importantStyles.get(name) === false) {
          computedStyle[name] = { type: "static", inherited: false, value };
          importantStyles.set(name, important);
        }
      }
      return computedStyle;
    };
    var compareSpecificity = (a, b) => {
      for (var i = 0; i < 4; i += 1) {
        if (a[i] < b[i]) {
          return -1;
        } else if (a[i] > b[i]) {
          return 1;
        }
      }
      return 0;
    };
    var collectStylesheet = (root) => {
      const rules = [];
      const parents = /* @__PURE__ */ new Map();
      visit(root, {
        element: {
          enter: (node, parentNode) => {
            parents.set(node, parentNode);
            if (node.name === "style") {
              const dynamic = node.attributes.media != null && node.attributes.media !== "all";
              if (node.attributes.type == null || node.attributes.type === "" || node.attributes.type === "text/css") {
                const children = node.children;
                for (const child of children) {
                  if (child.type === "text" || child.type === "cdata") {
                    rules.push(...parseStylesheet(child.value, dynamic));
                  }
                }
              }
            }
          }
        }
      });
      stable.inplace(
        rules,
        (a, b) => compareSpecificity(a.specificity, b.specificity)
      );
      return { rules, parents };
    };
    exports2.collectStylesheet = collectStylesheet;
    var computeStyle = (stylesheet, node) => {
      const { parents } = stylesheet;
      const computedStyles = computeOwnStyle(stylesheet, node);
      let parent = parents.get(node);
      while (parent != null && parent.type !== "root") {
        const inheritedStyles = computeOwnStyle(stylesheet, parent);
        for (const [name, computed] of Object.entries(inheritedStyles)) {
          if (computedStyles[name] == null && // ignore not inheritable styles
          inheritableAttrs.includes(name) === true && presentationNonInheritableGroupAttrs.includes(name) === false) {
            computedStyles[name] = { ...computed, inherited: true };
          }
        }
        parent = parents.get(parent);
      }
      return computedStyles;
    };
    exports2.computeStyle = computeStyle;
  }
});

// node_modules/svgo/plugins/removeUnknownsAndDefaults.js
var require_removeUnknownsAndDefaults = __commonJS({
  "node_modules/svgo/plugins/removeUnknownsAndDefaults.js"(exports2) {
    "use strict";
    var { visitSkip, detachNodeFromParent } = require_xast();
    var { collectStylesheet, computeStyle } = require_style();
    var {
      elems,
      attrsGroups,
      elemsGroups,
      attrsGroupsDefaults,
      presentationNonInheritableGroupAttrs
    } = require_collections();
    exports2.type = "visitor";
    exports2.name = "removeUnknownsAndDefaults";
    exports2.active = true;
    exports2.description = "removes unknown elements content and attributes, removes attrs with default values";
    var allowedChildrenPerElement = /* @__PURE__ */ new Map();
    var allowedAttributesPerElement = /* @__PURE__ */ new Map();
    var attributesDefaultsPerElement = /* @__PURE__ */ new Map();
    for (const [name, config] of Object.entries(elems)) {
      const allowedChildren = /* @__PURE__ */ new Set();
      if (config.content) {
        for (const elementName of config.content) {
          allowedChildren.add(elementName);
        }
      }
      if (config.contentGroups) {
        for (const contentGroupName of config.contentGroups) {
          const elemsGroup = elemsGroups[contentGroupName];
          if (elemsGroup) {
            for (const elementName of elemsGroup) {
              allowedChildren.add(elementName);
            }
          }
        }
      }
      const allowedAttributes = /* @__PURE__ */ new Set();
      if (config.attrs) {
        for (const attrName of config.attrs) {
          allowedAttributes.add(attrName);
        }
      }
      const attributesDefaults = /* @__PURE__ */ new Map();
      if (config.defaults) {
        for (const [attrName, defaultValue] of Object.entries(config.defaults)) {
          attributesDefaults.set(attrName, defaultValue);
        }
      }
      for (const attrsGroupName of config.attrsGroups) {
        const attrsGroup = attrsGroups[attrsGroupName];
        if (attrsGroup) {
          for (const attrName of attrsGroup) {
            allowedAttributes.add(attrName);
          }
        }
        const groupDefaults = attrsGroupsDefaults[attrsGroupName];
        if (groupDefaults) {
          for (const [attrName, defaultValue] of Object.entries(groupDefaults)) {
            attributesDefaults.set(attrName, defaultValue);
          }
        }
      }
      allowedChildrenPerElement.set(name, allowedChildren);
      allowedAttributesPerElement.set(name, allowedAttributes);
      attributesDefaultsPerElement.set(name, attributesDefaults);
    }
    exports2.fn = (root, params) => {
      const {
        unknownContent = true,
        unknownAttrs = true,
        defaultAttrs = true,
        uselessOverrides = true,
        keepDataAttrs = true,
        keepAriaAttrs = true,
        keepRoleAttr = false
      } = params;
      const stylesheet = collectStylesheet(root);
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name.includes(":")) {
              return;
            }
            if (node.name === "foreignObject") {
              return visitSkip;
            }
            if (unknownContent && parentNode.type === "element") {
              const allowedChildren = allowedChildrenPerElement.get(
                parentNode.name
              );
              if (allowedChildren == null || allowedChildren.size === 0) {
                if (allowedChildrenPerElement.get(node.name) == null) {
                  detachNodeFromParent(node, parentNode);
                  return;
                }
              } else {
                if (allowedChildren.has(node.name) === false) {
                  detachNodeFromParent(node, parentNode);
                  return;
                }
              }
            }
            const allowedAttributes = allowedAttributesPerElement.get(node.name);
            const attributesDefaults = attributesDefaultsPerElement.get(node.name);
            const computedParentStyle = parentNode.type === "element" ? computeStyle(stylesheet, parentNode) : null;
            for (const [name, value] of Object.entries(node.attributes)) {
              if (keepDataAttrs && name.startsWith("data-")) {
                continue;
              }
              if (keepAriaAttrs && name.startsWith("aria-")) {
                continue;
              }
              if (keepRoleAttr && name === "role") {
                continue;
              }
              if (name === "xmlns") {
                continue;
              }
              if (name.includes(":")) {
                const [prefix] = name.split(":");
                if (prefix !== "xml" && prefix !== "xlink") {
                  continue;
                }
              }
              if (unknownAttrs && allowedAttributes && allowedAttributes.has(name) === false) {
                delete node.attributes[name];
              }
              if (defaultAttrs && node.attributes.id == null && attributesDefaults && attributesDefaults.get(name) === value) {
                if (computedParentStyle == null || computedParentStyle[name] == null) {
                  delete node.attributes[name];
                }
              }
              if (uselessOverrides && node.attributes.id == null) {
                const style = computedParentStyle == null ? null : computedParentStyle[name];
                if (presentationNonInheritableGroupAttrs.includes(name) === false && style != null && style.type === "static" && style.value === value) {
                  delete node.attributes[name];
                }
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeNonInheritableGroupAttrs.js
var require_removeNonInheritableGroupAttrs = __commonJS({
  "node_modules/svgo/plugins/removeNonInheritableGroupAttrs.js"(exports2) {
    "use strict";
    exports2.name = "removeNonInheritableGroupAttrs";
    exports2.type = "perItem";
    exports2.active = true;
    exports2.description = "removes non-inheritable group\u2019s presentational attributes";
    var {
      inheritableAttrs,
      attrsGroups,
      presentationNonInheritableGroupAttrs
    } = require_collections();
    exports2.fn = function(item) {
      if (item.type === "element" && item.name === "g") {
        for (const name of Object.keys(item.attributes)) {
          if (attrsGroups.presentation.includes(name) === true && inheritableAttrs.includes(name) === false && presentationNonInheritableGroupAttrs.includes(name) === false) {
            delete item.attributes[name];
          }
        }
      }
    };
  }
});

// node_modules/svgo/plugins/removeUselessStrokeAndFill.js
var require_removeUselessStrokeAndFill = __commonJS({
  "node_modules/svgo/plugins/removeUselessStrokeAndFill.js"(exports2) {
    "use strict";
    var { visit, visitSkip, detachNodeFromParent } = require_xast();
    var { collectStylesheet, computeStyle } = require_style();
    var { elemsGroups } = require_collections();
    exports2.type = "visitor";
    exports2.name = "removeUselessStrokeAndFill";
    exports2.active = true;
    exports2.description = "removes useless stroke and fill attributes";
    exports2.fn = (root, params) => {
      const {
        stroke: removeStroke = true,
        fill: removeFill = true,
        removeNone = false
      } = params;
      let hasStyleOrScript = false;
      visit(root, {
        element: {
          enter: (node) => {
            if (node.name === "style" || node.name === "script") {
              hasStyleOrScript = true;
            }
          }
        }
      });
      if (hasStyleOrScript) {
        return null;
      }
      const stylesheet = collectStylesheet(root);
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.attributes.id != null) {
              return visitSkip;
            }
            if (elemsGroups.shape.includes(node.name) == false) {
              return;
            }
            const computedStyle = computeStyle(stylesheet, node);
            const stroke = computedStyle.stroke;
            const strokeOpacity = computedStyle["stroke-opacity"];
            const strokeWidth = computedStyle["stroke-width"];
            const markerEnd = computedStyle["marker-end"];
            const fill = computedStyle.fill;
            const fillOpacity = computedStyle["fill-opacity"];
            const computedParentStyle = parentNode.type === "element" ? computeStyle(stylesheet, parentNode) : null;
            const parentStroke = computedParentStyle == null ? null : computedParentStyle.stroke;
            if (removeStroke) {
              if (stroke == null || stroke.type === "static" && stroke.value == "none" || strokeOpacity != null && strokeOpacity.type === "static" && strokeOpacity.value === "0" || strokeWidth != null && strokeWidth.type === "static" && strokeWidth.value === "0") {
                if (strokeWidth != null && strokeWidth.type === "static" && strokeWidth.value === "0" || markerEnd == null) {
                  for (const name of Object.keys(node.attributes)) {
                    if (name.startsWith("stroke")) {
                      delete node.attributes[name];
                    }
                  }
                  if (parentStroke != null && parentStroke.type === "static" && parentStroke.value !== "none") {
                    node.attributes.stroke = "none";
                  }
                }
              }
            }
            if (removeFill) {
              if (fill != null && fill.type === "static" && fill.value === "none" || fillOpacity != null && fillOpacity.type === "static" && fillOpacity.value === "0") {
                for (const name of Object.keys(node.attributes)) {
                  if (name.startsWith("fill-")) {
                    delete node.attributes[name];
                  }
                }
                if (fill == null || fill.type === "static" && fill.value !== "none") {
                  node.attributes.fill = "none";
                }
              }
            }
            if (removeNone) {
              if ((stroke == null || node.attributes.stroke === "none") && (fill != null && fill.type === "static" && fill.value === "none" || node.attributes.fill === "none")) {
                detachNodeFromParent(node, parentNode);
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeViewBox.js
var require_removeViewBox = __commonJS({
  "node_modules/svgo/plugins/removeViewBox.js"(exports2) {
    "use strict";
    exports2.type = "visitor";
    exports2.name = "removeViewBox";
    exports2.active = true;
    exports2.description = "removes viewBox attribute when possible";
    var viewBoxElems = ["svg", "pattern", "symbol"];
    exports2.fn = () => {
      return {
        element: {
          enter: (node, parentNode) => {
            if (viewBoxElems.includes(node.name) && node.attributes.viewBox != null && node.attributes.width != null && node.attributes.height != null) {
              if (node.name === "svg" && parentNode.type !== "root") {
                return;
              }
              const nums = node.attributes.viewBox.split(/[ ,]+/g);
              if (nums[0] === "0" && nums[1] === "0" && node.attributes.width.replace(/px$/, "") === nums[2] && // could use parseFloat too
              node.attributes.height.replace(/px$/, "") === nums[3]) {
                delete node.attributes.viewBox;
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/cleanupEnableBackground.js
var require_cleanupEnableBackground = __commonJS({
  "node_modules/svgo/plugins/cleanupEnableBackground.js"(exports2) {
    "use strict";
    var { visit } = require_xast();
    exports2.type = "visitor";
    exports2.name = "cleanupEnableBackground";
    exports2.active = true;
    exports2.description = "remove or cleanup enable-background attribute when possible";
    exports2.fn = (root) => {
      const regEnableBackground = /^new\s0\s0\s([-+]?\d*\.?\d+([eE][-+]?\d+)?)\s([-+]?\d*\.?\d+([eE][-+]?\d+)?)$/;
      let hasFilter = false;
      visit(root, {
        element: {
          enter: (node) => {
            if (node.name === "filter") {
              hasFilter = true;
            }
          }
        }
      });
      return {
        element: {
          enter: (node) => {
            if (node.attributes["enable-background"] == null) {
              return;
            }
            if (hasFilter) {
              if ((node.name === "svg" || node.name === "mask" || node.name === "pattern") && node.attributes.width != null && node.attributes.height != null) {
                const match = node.attributes["enable-background"].match(regEnableBackground);
                if (match != null && node.attributes.width === match[1] && node.attributes.height === match[3]) {
                  if (node.name === "svg") {
                    delete node.attributes["enable-background"];
                  } else {
                    node.attributes["enable-background"] = "new";
                  }
                }
              }
            } else {
              delete node.attributes["enable-background"];
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/lib/path.js
var require_path = __commonJS({
  "node_modules/svgo/lib/path.js"(exports2) {
    "use strict";
    var argsCountPerCommand = {
      M: 2,
      m: 2,
      Z: 0,
      z: 0,
      L: 2,
      l: 2,
      H: 1,
      h: 1,
      V: 1,
      v: 1,
      C: 6,
      c: 6,
      S: 4,
      s: 4,
      Q: 4,
      q: 4,
      T: 2,
      t: 2,
      A: 7,
      a: 7
    };
    var isCommand = (c) => {
      return c in argsCountPerCommand;
    };
    var isWsp = (c) => {
      const codePoint = c.codePointAt(0);
      return codePoint === 32 || codePoint === 9 || codePoint === 13 || codePoint === 10;
    };
    var isDigit = (c) => {
      const codePoint = c.codePointAt(0);
      if (codePoint == null) {
        return false;
      }
      return 48 <= codePoint && codePoint <= 57;
    };
    var readNumber = (string, cursor) => {
      let i = cursor;
      let value = "";
      let state = (
        /** @type {ReadNumberState} */
        "none"
      );
      for (; i < string.length; i += 1) {
        const c = string[i];
        if (c === "+" || c === "-") {
          if (state === "none") {
            state = "sign";
            value += c;
            continue;
          }
          if (state === "e") {
            state = "exponent_sign";
            value += c;
            continue;
          }
        }
        if (isDigit(c)) {
          if (state === "none" || state === "sign" || state === "whole") {
            state = "whole";
            value += c;
            continue;
          }
          if (state === "decimal_point" || state === "decimal") {
            state = "decimal";
            value += c;
            continue;
          }
          if (state === "e" || state === "exponent_sign" || state === "exponent") {
            state = "exponent";
            value += c;
            continue;
          }
        }
        if (c === ".") {
          if (state === "none" || state === "sign" || state === "whole") {
            state = "decimal_point";
            value += c;
            continue;
          }
        }
        if (c === "E" || c == "e") {
          if (state === "whole" || state === "decimal_point" || state === "decimal") {
            state = "e";
            value += c;
            continue;
          }
        }
        break;
      }
      const number = Number.parseFloat(value);
      if (Number.isNaN(number)) {
        return [cursor, null];
      } else {
        return [i - 1, number];
      }
    };
    var parsePathData = (string) => {
      const pathData = [];
      let command = null;
      let args = (
        /** @type {number[]} */
        []
      );
      let argsCount = 0;
      let canHaveComma = false;
      let hadComma = false;
      for (let i = 0; i < string.length; i += 1) {
        const c = string.charAt(i);
        if (isWsp(c)) {
          continue;
        }
        if (canHaveComma && c === ",") {
          if (hadComma) {
            break;
          }
          hadComma = true;
          continue;
        }
        if (isCommand(c)) {
          if (hadComma) {
            return pathData;
          }
          if (command == null) {
            if (c !== "M" && c !== "m") {
              return pathData;
            }
          } else {
            if (args.length !== 0) {
              return pathData;
            }
          }
          command = c;
          args = [];
          argsCount = argsCountPerCommand[command];
          canHaveComma = false;
          if (argsCount === 0) {
            pathData.push({ command, args });
          }
          continue;
        }
        if (command == null) {
          return pathData;
        }
        let newCursor = i;
        let number = null;
        if (command === "A" || command === "a") {
          const position = args.length;
          if (position === 0 || position === 1) {
            if (c !== "+" && c !== "-") {
              [newCursor, number] = readNumber(string, i);
            }
          }
          if (position === 2 || position === 5 || position === 6) {
            [newCursor, number] = readNumber(string, i);
          }
          if (position === 3 || position === 4) {
            if (c === "0") {
              number = 0;
            }
            if (c === "1") {
              number = 1;
            }
          }
        } else {
          [newCursor, number] = readNumber(string, i);
        }
        if (number == null) {
          return pathData;
        }
        args.push(number);
        canHaveComma = true;
        hadComma = false;
        i = newCursor;
        if (args.length === argsCount) {
          pathData.push({ command, args });
          if (command === "M") {
            command = "L";
          }
          if (command === "m") {
            command = "l";
          }
          args = [];
        }
      }
      return pathData;
    };
    exports2.parsePathData = parsePathData;
    var stringifyNumber = (number, precision) => {
      if (precision != null) {
        const ratio = 10 ** precision;
        number = Math.round(number * ratio) / ratio;
      }
      return number.toString().replace(/^0\./, ".").replace(/^-0\./, "-.");
    };
    var stringifyArgs = (command, args, precision, disableSpaceAfterFlags) => {
      let result = "";
      let prev = "";
      for (let i = 0; i < args.length; i += 1) {
        const number = args[i];
        const numberString = stringifyNumber(number, precision);
        if (disableSpaceAfterFlags && (command === "A" || command === "a") && // consider combined arcs
        (i % 7 === 4 || i % 7 === 5)) {
          result += numberString;
        } else if (i === 0 || numberString.startsWith("-")) {
          result += numberString;
        } else if (prev.includes(".") && numberString.startsWith(".")) {
          result += numberString;
        } else {
          result += ` ${numberString}`;
        }
        prev = numberString;
      }
      return result;
    };
    var stringifyPathData = ({ pathData, precision, disableSpaceAfterFlags }) => {
      let combined = [];
      for (let i = 0; i < pathData.length; i += 1) {
        const { command, args } = pathData[i];
        if (i === 0) {
          combined.push({ command, args });
        } else {
          const last = combined[combined.length - 1];
          if (i === 1) {
            if (command === "L") {
              last.command = "M";
            }
            if (command === "l") {
              last.command = "m";
            }
          }
          if (last.command === command && last.command !== "M" && last.command !== "m" || // combine matching moveto and lineto sequences
          last.command === "M" && command === "L" || last.command === "m" && command === "l") {
            last.args = [...last.args, ...args];
          } else {
            combined.push({ command, args });
          }
        }
      }
      let result = "";
      for (const { command, args } of combined) {
        result += command + stringifyArgs(command, args, precision, disableSpaceAfterFlags);
      }
      return result;
    };
    exports2.stringifyPathData = stringifyPathData;
  }
});

// node_modules/svgo/plugins/removeHiddenElems.js
var require_removeHiddenElems = __commonJS({
  "node_modules/svgo/plugins/removeHiddenElems.js"(exports2) {
    "use strict";
    var {
      querySelector,
      closestByName,
      detachNodeFromParent
    } = require_xast();
    var { collectStylesheet, computeStyle } = require_style();
    var { parsePathData } = require_path();
    exports2.name = "removeHiddenElems";
    exports2.type = "visitor";
    exports2.active = true;
    exports2.description = "removes hidden elements (zero sized, with absent attributes)";
    exports2.fn = (root, params) => {
      const {
        isHidden = true,
        displayNone = true,
        opacity0 = true,
        circleR0 = true,
        ellipseRX0 = true,
        ellipseRY0 = true,
        rectWidth0 = true,
        rectHeight0 = true,
        patternWidth0 = true,
        patternHeight0 = true,
        imageWidth0 = true,
        imageHeight0 = true,
        pathEmptyD = true,
        polylineEmptyPoints = true,
        polygonEmptyPoints = true
      } = params;
      const stylesheet = collectStylesheet(root);
      return {
        element: {
          enter: (node, parentNode) => {
            const computedStyle = computeStyle(stylesheet, node);
            if (isHidden && computedStyle.visibility && computedStyle.visibility.type === "static" && computedStyle.visibility.value === "hidden" && // keep if any descendant enables visibility
            querySelector(node, "[visibility=visible]") == null) {
              detachNodeFromParent(node, parentNode);
              return;
            }
            if (displayNone && computedStyle.display && computedStyle.display.type === "static" && computedStyle.display.value === "none" && // markers with display: none still rendered
            node.name !== "marker") {
              detachNodeFromParent(node, parentNode);
              return;
            }
            if (opacity0 && computedStyle.opacity && computedStyle.opacity.type === "static" && computedStyle.opacity.value === "0" && // transparent element inside clipPath still affect clipped elements
            closestByName(node, "clipPath") == null) {
              detachNodeFromParent(node, parentNode);
              return;
            }
            if (circleR0 && node.name === "circle" && node.children.length === 0 && node.attributes.r === "0") {
              detachNodeFromParent(node, parentNode);
              return;
            }
            if (ellipseRX0 && node.name === "ellipse" && node.children.length === 0 && node.attributes.rx === "0") {
              detachNodeFromParent(node, parentNode);
              return;
            }
            if (ellipseRY0 && node.name === "ellipse" && node.children.length === 0 && node.attributes.ry === "0") {
              detachNodeFromParent(node, parentNode);
              return;
            }
            if (rectWidth0 && node.name === "rect" && node.children.length === 0 && node.attributes.width === "0") {
              detachNodeFromParent(node, parentNode);
              return;
            }
            if (rectHeight0 && rectWidth0 && node.name === "rect" && node.children.length === 0 && node.attributes.height === "0") {
              detachNodeFromParent(node, parentNode);
              return;
            }
            if (patternWidth0 && node.name === "pattern" && node.attributes.width === "0") {
              detachNodeFromParent(node, parentNode);
              return;
            }
            if (patternHeight0 && node.name === "pattern" && node.attributes.height === "0") {
              detachNodeFromParent(node, parentNode);
              return;
            }
            if (imageWidth0 && node.name === "image" && node.attributes.width === "0") {
              detachNodeFromParent(node, parentNode);
              return;
            }
            if (imageHeight0 && node.name === "image" && node.attributes.height === "0") {
              detachNodeFromParent(node, parentNode);
              return;
            }
            if (pathEmptyD && node.name === "path") {
              if (node.attributes.d == null) {
                detachNodeFromParent(node, parentNode);
                return;
              }
              const pathData = parsePathData(node.attributes.d);
              if (pathData.length === 0) {
                detachNodeFromParent(node, parentNode);
                return;
              }
              if (pathData.length === 1 && computedStyle["marker-start"] == null && computedStyle["marker-end"] == null) {
                detachNodeFromParent(node, parentNode);
                return;
              }
              return;
            }
            if (polylineEmptyPoints && node.name === "polyline" && node.attributes.points == null) {
              detachNodeFromParent(node, parentNode);
              return;
            }
            if (polygonEmptyPoints && node.name === "polygon" && node.attributes.points == null) {
              detachNodeFromParent(node, parentNode);
              return;
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeEmptyText.js
var require_removeEmptyText = __commonJS({
  "node_modules/svgo/plugins/removeEmptyText.js"(exports2) {
    "use strict";
    var { detachNodeFromParent } = require_xast();
    exports2.name = "removeEmptyText";
    exports2.type = "visitor";
    exports2.active = true;
    exports2.description = "removes empty <text> elements";
    exports2.fn = (root, params) => {
      const { text = true, tspan = true, tref = true } = params;
      return {
        element: {
          enter: (node, parentNode) => {
            if (text && node.name === "text" && node.children.length === 0) {
              detachNodeFromParent(node, parentNode);
            }
            if (tspan && node.name === "tspan" && node.children.length === 0) {
              detachNodeFromParent(node, parentNode);
            }
            if (tref && node.name === "tref" && node.attributes["xlink:href"] == null) {
              detachNodeFromParent(node, parentNode);
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/convertShapeToPath.js
var require_convertShapeToPath = __commonJS({
  "node_modules/svgo/plugins/convertShapeToPath.js"(exports2) {
    "use strict";
    var { stringifyPathData } = require_path();
    var { detachNodeFromParent } = require_xast();
    exports2.name = "convertShapeToPath";
    exports2.type = "visitor";
    exports2.active = true;
    exports2.description = "converts basic shapes to more compact path form";
    var regNumber = /[-+]?(?:\d*\.\d+|\d+\.?)(?:[eE][-+]?\d+)?/g;
    exports2.fn = (root, params) => {
      const { convertArcs = false, floatPrecision: precision } = params;
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name === "rect" && node.attributes.width != null && node.attributes.height != null && node.attributes.rx == null && node.attributes.ry == null) {
              const x = Number(node.attributes.x || "0");
              const y = Number(node.attributes.y || "0");
              const width = Number(node.attributes.width);
              const height = Number(node.attributes.height);
              if (Number.isNaN(x - y + width - height))
                return;
              const pathData = [
                { command: "M", args: [x, y] },
                { command: "H", args: [x + width] },
                { command: "V", args: [y + height] },
                { command: "H", args: [x] },
                { command: "z", args: [] }
              ];
              node.name = "path";
              node.attributes.d = stringifyPathData({ pathData, precision });
              delete node.attributes.x;
              delete node.attributes.y;
              delete node.attributes.width;
              delete node.attributes.height;
            }
            if (node.name === "line") {
              const x1 = Number(node.attributes.x1 || "0");
              const y1 = Number(node.attributes.y1 || "0");
              const x2 = Number(node.attributes.x2 || "0");
              const y2 = Number(node.attributes.y2 || "0");
              if (Number.isNaN(x1 - y1 + x2 - y2))
                return;
              const pathData = [
                { command: "M", args: [x1, y1] },
                { command: "L", args: [x2, y2] }
              ];
              node.name = "path";
              node.attributes.d = stringifyPathData({ pathData, precision });
              delete node.attributes.x1;
              delete node.attributes.y1;
              delete node.attributes.x2;
              delete node.attributes.y2;
            }
            if ((node.name === "polyline" || node.name === "polygon") && node.attributes.points != null) {
              const coords = (node.attributes.points.match(regNumber) || []).map(
                Number
              );
              if (coords.length < 4) {
                detachNodeFromParent(node, parentNode);
                return;
              }
              const pathData = [];
              for (let i = 0; i < coords.length; i += 2) {
                pathData.push({
                  command: i === 0 ? "M" : "L",
                  args: coords.slice(i, i + 2)
                });
              }
              if (node.name === "polygon") {
                pathData.push({ command: "z", args: [] });
              }
              node.name = "path";
              node.attributes.d = stringifyPathData({ pathData, precision });
              delete node.attributes.points;
            }
            if (node.name === "circle" && convertArcs) {
              const cx = Number(node.attributes.cx || "0");
              const cy = Number(node.attributes.cy || "0");
              const r = Number(node.attributes.r || "0");
              if (Number.isNaN(cx - cy + r)) {
                return;
              }
              const pathData = [
                { command: "M", args: [cx, cy - r] },
                { command: "A", args: [r, r, 0, 1, 0, cx, cy + r] },
                { command: "A", args: [r, r, 0, 1, 0, cx, cy - r] },
                { command: "z", args: [] }
              ];
              node.name = "path";
              node.attributes.d = stringifyPathData({ pathData, precision });
              delete node.attributes.cx;
              delete node.attributes.cy;
              delete node.attributes.r;
            }
            if (node.name === "ellipse" && convertArcs) {
              const ecx = Number(node.attributes.cx || "0");
              const ecy = Number(node.attributes.cy || "0");
              const rx = Number(node.attributes.rx || "0");
              const ry = Number(node.attributes.ry || "0");
              if (Number.isNaN(ecx - ecy + rx - ry)) {
                return;
              }
              const pathData = [
                { command: "M", args: [ecx, ecy - ry] },
                { command: "A", args: [rx, ry, 0, 1, 0, ecx, ecy + ry] },
                { command: "A", args: [rx, ry, 0, 1, 0, ecx, ecy - ry] },
                { command: "z", args: [] }
              ];
              node.name = "path";
              node.attributes.d = stringifyPathData({ pathData, precision });
              delete node.attributes.cx;
              delete node.attributes.cy;
              delete node.attributes.rx;
              delete node.attributes.ry;
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/convertEllipseToCircle.js
var require_convertEllipseToCircle = __commonJS({
  "node_modules/svgo/plugins/convertEllipseToCircle.js"(exports2) {
    "use strict";
    exports2.name = "convertEllipseToCircle";
    exports2.type = "visitor";
    exports2.active = true;
    exports2.description = "converts non-eccentric <ellipse>s to <circle>s";
    exports2.fn = () => {
      return {
        element: {
          enter: (node) => {
            if (node.name === "ellipse") {
              const rx = node.attributes.rx || "0";
              const ry = node.attributes.ry || "0";
              if (rx === ry || rx === "auto" || ry === "auto") {
                node.name = "circle";
                const radius = rx === "auto" ? ry : rx;
                delete node.attributes.rx;
                delete node.attributes.ry;
                node.attributes.r = radius;
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/moveElemsAttrsToGroup.js
var require_moveElemsAttrsToGroup = __commonJS({
  "node_modules/svgo/plugins/moveElemsAttrsToGroup.js"(exports2) {
    "use strict";
    var { visit } = require_xast();
    var { inheritableAttrs, pathElems } = require_collections();
    exports2.type = "visitor";
    exports2.name = "moveElemsAttrsToGroup";
    exports2.active = true;
    exports2.description = "Move common attributes of group children to the group";
    exports2.fn = (root) => {
      let deoptimizedWithStyles = false;
      visit(root, {
        element: {
          enter: (node) => {
            if (node.name === "style") {
              deoptimizedWithStyles = true;
            }
          }
        }
      });
      return {
        element: {
          exit: (node) => {
            if (node.name !== "g" || node.children.length <= 1) {
              return;
            }
            if (deoptimizedWithStyles) {
              return;
            }
            const commonAttributes = /* @__PURE__ */ new Map();
            let initial = true;
            let everyChildIsPath = true;
            for (const child of node.children) {
              if (child.type === "element") {
                if (pathElems.includes(child.name) === false) {
                  everyChildIsPath = false;
                }
                if (initial) {
                  initial = false;
                  for (const [name, value] of Object.entries(child.attributes)) {
                    if (inheritableAttrs.includes(name)) {
                      commonAttributes.set(name, value);
                    }
                  }
                } else {
                  for (const [name, value] of commonAttributes) {
                    if (child.attributes[name] !== value) {
                      commonAttributes.delete(name);
                    }
                  }
                }
              }
            }
            if (node.attributes["clip-path"] != null || node.attributes.mask != null) {
              commonAttributes.delete("transform");
            }
            if (everyChildIsPath) {
              commonAttributes.delete("transform");
            }
            for (const [name, value] of commonAttributes) {
              if (name === "transform") {
                if (node.attributes.transform != null) {
                  node.attributes.transform = `${node.attributes.transform} ${value}`;
                } else {
                  node.attributes.transform = value;
                }
              } else {
                node.attributes[name] = value;
              }
            }
            for (const child of node.children) {
              if (child.type === "element") {
                for (const [name] of commonAttributes) {
                  delete child.attributes[name];
                }
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/moveGroupAttrsToElems.js
var require_moveGroupAttrsToElems = __commonJS({
  "node_modules/svgo/plugins/moveGroupAttrsToElems.js"(exports2) {
    "use strict";
    var { pathElems, referencesProps } = require_collections();
    exports2.name = "moveGroupAttrsToElems";
    exports2.type = "perItem";
    exports2.active = true;
    exports2.description = "moves some group attributes to the content elements";
    var pathElemsWithGroupsAndText = [...pathElems, "g", "text"];
    exports2.fn = function(item) {
      if (item.type === "element" && item.name === "g" && item.children.length !== 0 && item.attributes.transform != null && Object.entries(item.attributes).some(
        ([name, value]) => referencesProps.includes(name) && value.includes("url(")
      ) === false && item.children.every(
        (inner) => pathElemsWithGroupsAndText.includes(inner.name) && inner.attributes.id == null
      )) {
        for (const inner of item.children) {
          const value = item.attributes.transform;
          if (inner.attributes.transform != null) {
            inner.attributes.transform = value + " " + inner.attributes.transform;
          } else {
            inner.attributes.transform = value;
          }
        }
        delete item.attributes.transform;
      }
    };
  }
});

// node_modules/svgo/plugins/collapseGroups.js
var require_collapseGroups = __commonJS({
  "node_modules/svgo/plugins/collapseGroups.js"(exports2) {
    "use strict";
    var { inheritableAttrs, elemsGroups } = require_collections();
    exports2.type = "visitor";
    exports2.name = "collapseGroups";
    exports2.active = true;
    exports2.description = "collapses useless groups";
    var hasAnimatedAttr = (node, name) => {
      if (node.type === "element") {
        if (elemsGroups.animation.includes(node.name) && node.attributes.attributeName === name) {
          return true;
        }
        for (const child of node.children) {
          if (hasAnimatedAttr(child, name)) {
            return true;
          }
        }
      }
      return false;
    };
    exports2.fn = () => {
      return {
        element: {
          exit: (node, parentNode) => {
            if (parentNode.type === "root" || parentNode.name === "switch") {
              return;
            }
            if (node.name !== "g" || node.children.length === 0) {
              return;
            }
            if (Object.keys(node.attributes).length !== 0 && node.children.length === 1) {
              const firstChild = node.children[0];
              if (firstChild.type === "element" && firstChild.attributes.id == null && node.attributes.filter == null && (node.attributes.class == null || firstChild.attributes.class == null) && (node.attributes["clip-path"] == null && node.attributes.mask == null || firstChild.name === "g" && node.attributes.transform == null && firstChild.attributes.transform == null)) {
                for (const [name, value] of Object.entries(node.attributes)) {
                  if (hasAnimatedAttr(firstChild, name)) {
                    return;
                  }
                  if (firstChild.attributes[name] == null) {
                    firstChild.attributes[name] = value;
                  } else if (name === "transform") {
                    firstChild.attributes[name] = value + " " + firstChild.attributes[name];
                  } else if (firstChild.attributes[name] === "inherit") {
                    firstChild.attributes[name] = value;
                  } else if (inheritableAttrs.includes(name) === false && firstChild.attributes[name] !== value) {
                    return;
                  }
                  delete node.attributes[name];
                }
              }
            }
            if (Object.keys(node.attributes).length === 0) {
              for (const child of node.children) {
                if (child.type === "element" && elemsGroups.animation.includes(child.name)) {
                  return;
                }
              }
              const index = parentNode.children.indexOf(node);
              parentNode.children.splice(index, 1, ...node.children);
              for (const child of node.children) {
                child.parentNode = parentNode;
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/_path.js
var require_path2 = __commonJS({
  "node_modules/svgo/plugins/_path.js"(exports2) {
    "use strict";
    var { parsePathData, stringifyPathData } = require_path();
    var prevCtrlPoint;
    var path2js = (path3) => {
      if (path3.pathJS)
        return path3.pathJS;
      const pathData = [];
      const newPathData = parsePathData(path3.attributes.d);
      for (const { command, args } of newPathData) {
        pathData.push({ command, args });
      }
      if (pathData.length && pathData[0].command == "m") {
        pathData[0].command = "M";
      }
      path3.pathJS = pathData;
      return pathData;
    };
    exports2.path2js = path2js;
    var convertRelativeToAbsolute = (data) => {
      const newData = [];
      let start = [0, 0];
      let cursor = [0, 0];
      for (let { command, args } of data) {
        args = args.slice();
        if (command === "m") {
          args[0] += cursor[0];
          args[1] += cursor[1];
          command = "M";
        }
        if (command === "M") {
          cursor[0] = args[0];
          cursor[1] = args[1];
          start[0] = cursor[0];
          start[1] = cursor[1];
        }
        if (command === "h") {
          args[0] += cursor[0];
          command = "H";
        }
        if (command === "H") {
          cursor[0] = args[0];
        }
        if (command === "v") {
          args[0] += cursor[1];
          command = "V";
        }
        if (command === "V") {
          cursor[1] = args[0];
        }
        if (command === "l") {
          args[0] += cursor[0];
          args[1] += cursor[1];
          command = "L";
        }
        if (command === "L") {
          cursor[0] = args[0];
          cursor[1] = args[1];
        }
        if (command === "c") {
          args[0] += cursor[0];
          args[1] += cursor[1];
          args[2] += cursor[0];
          args[3] += cursor[1];
          args[4] += cursor[0];
          args[5] += cursor[1];
          command = "C";
        }
        if (command === "C") {
          cursor[0] = args[4];
          cursor[1] = args[5];
        }
        if (command === "s") {
          args[0] += cursor[0];
          args[1] += cursor[1];
          args[2] += cursor[0];
          args[3] += cursor[1];
          command = "S";
        }
        if (command === "S") {
          cursor[0] = args[2];
          cursor[1] = args[3];
        }
        if (command === "q") {
          args[0] += cursor[0];
          args[1] += cursor[1];
          args[2] += cursor[0];
          args[3] += cursor[1];
          command = "Q";
        }
        if (command === "Q") {
          cursor[0] = args[2];
          cursor[1] = args[3];
        }
        if (command === "t") {
          args[0] += cursor[0];
          args[1] += cursor[1];
          command = "T";
        }
        if (command === "T") {
          cursor[0] = args[0];
          cursor[1] = args[1];
        }
        if (command === "a") {
          args[5] += cursor[0];
          args[6] += cursor[1];
          command = "A";
        }
        if (command === "A") {
          cursor[0] = args[5];
          cursor[1] = args[6];
        }
        if (command === "z" || command === "Z") {
          cursor[0] = start[0];
          cursor[1] = start[1];
          command = "z";
        }
        newData.push({ command, args });
      }
      return newData;
    };
    exports2.js2path = function(path3, data, params) {
      path3.pathJS = data;
      const pathData = [];
      for (const item of data) {
        if (pathData.length !== 0 && (item.command === "M" || item.command === "m")) {
          const last = pathData[pathData.length - 1];
          if (last.command === "M" || last.command === "m") {
            pathData.pop();
          }
        }
        pathData.push({
          command: item.command,
          args: item.args
        });
      }
      path3.attributes.d = stringifyPathData({
        pathData,
        precision: params.floatPrecision,
        disableSpaceAfterFlags: params.noSpaceAfterFlags
      });
    };
    function set(dest, source) {
      dest[0] = source[source.length - 2];
      dest[1] = source[source.length - 1];
      return dest;
    }
    exports2.intersects = function(path1, path22) {
      const points1 = gatherPoints(convertRelativeToAbsolute(path1));
      const points2 = gatherPoints(convertRelativeToAbsolute(path22));
      if (points1.maxX <= points2.minX || points2.maxX <= points1.minX || points1.maxY <= points2.minY || points2.maxY <= points1.minY || points1.list.every((set1) => {
        return points2.list.every((set2) => {
          return set1.list[set1.maxX][0] <= set2.list[set2.minX][0] || set2.list[set2.maxX][0] <= set1.list[set1.minX][0] || set1.list[set1.maxY][1] <= set2.list[set2.minY][1] || set2.list[set2.maxY][1] <= set1.list[set1.minY][1];
        });
      }))
        return false;
      const hullNest1 = points1.list.map(convexHull);
      const hullNest2 = points2.list.map(convexHull);
      return hullNest1.some(function(hull1) {
        if (hull1.list.length < 3)
          return false;
        return hullNest2.some(function(hull2) {
          if (hull2.list.length < 3)
            return false;
          var simplex = [getSupport(hull1, hull2, [1, 0])], direction = minus(simplex[0]);
          var iterations = 1e4;
          while (true) {
            if (iterations-- == 0) {
              console.error(
                "Error: infinite loop while processing mergePaths plugin."
              );
              return true;
            }
            simplex.push(getSupport(hull1, hull2, direction));
            if (dot(direction, simplex[simplex.length - 1]) <= 0)
              return false;
            if (processSimplex(simplex, direction))
              return true;
          }
        });
      });
      function getSupport(a, b, direction) {
        return sub(supportPoint(a, direction), supportPoint(b, minus(direction)));
      }
      function supportPoint(polygon, direction) {
        var index = direction[1] >= 0 ? direction[0] < 0 ? polygon.maxY : polygon.maxX : direction[0] < 0 ? polygon.minX : polygon.minY, max = -Infinity, value;
        while ((value = dot(polygon.list[index], direction)) > max) {
          max = value;
          index = ++index % polygon.list.length;
        }
        return polygon.list[(index || polygon.list.length) - 1];
      }
    };
    function processSimplex(simplex, direction) {
      if (simplex.length == 2) {
        let a = simplex[1], b = simplex[0], AO = minus(simplex[1]), AB = sub(b, a);
        if (dot(AO, AB) > 0) {
          set(direction, orth(AB, a));
        } else {
          set(direction, AO);
          simplex.shift();
        }
      } else {
        let a = simplex[2], b = simplex[1], c = simplex[0], AB = sub(b, a), AC = sub(c, a), AO = minus(a), ACB = orth(AB, AC), ABC = orth(AC, AB);
        if (dot(ACB, AO) > 0) {
          if (dot(AB, AO) > 0) {
            set(direction, ACB);
            simplex.shift();
          } else {
            set(direction, AO);
            simplex.splice(0, 2);
          }
        } else if (dot(ABC, AO) > 0) {
          if (dot(AC, AO) > 0) {
            set(direction, ABC);
            simplex.splice(1, 1);
          } else {
            set(direction, AO);
            simplex.splice(0, 2);
          }
        } else
          return true;
      }
      return false;
    }
    function minus(v) {
      return [-v[0], -v[1]];
    }
    function sub(v1, v2) {
      return [v1[0] - v2[0], v1[1] - v2[1]];
    }
    function dot(v1, v2) {
      return v1[0] * v2[0] + v1[1] * v2[1];
    }
    function orth(v, from) {
      var o = [-v[1], v[0]];
      return dot(o, minus(from)) < 0 ? minus(o) : o;
    }
    function gatherPoints(pathData) {
      const points = { list: [], minX: 0, minY: 0, maxX: 0, maxY: 0 };
      const addPoint = (path3, point) => {
        if (!path3.list.length || point[1] > path3.list[path3.maxY][1]) {
          path3.maxY = path3.list.length;
          points.maxY = points.list.length ? Math.max(point[1], points.maxY) : point[1];
        }
        if (!path3.list.length || point[0] > path3.list[path3.maxX][0]) {
          path3.maxX = path3.list.length;
          points.maxX = points.list.length ? Math.max(point[0], points.maxX) : point[0];
        }
        if (!path3.list.length || point[1] < path3.list[path3.minY][1]) {
          path3.minY = path3.list.length;
          points.minY = points.list.length ? Math.min(point[1], points.minY) : point[1];
        }
        if (!path3.list.length || point[0] < path3.list[path3.minX][0]) {
          path3.minX = path3.list.length;
          points.minX = points.list.length ? Math.min(point[0], points.minX) : point[0];
        }
        path3.list.push(point);
      };
      for (let i = 0; i < pathData.length; i += 1) {
        const pathDataItem = pathData[i];
        let subPath = points.list.length === 0 ? { list: [], minX: 0, minY: 0, maxX: 0, maxY: 0 } : points.list[points.list.length - 1];
        let prev = i === 0 ? null : pathData[i - 1];
        let basePoint = subPath.list.length === 0 ? null : subPath.list[subPath.list.length - 1];
        let data = pathDataItem.args;
        let ctrlPoint = basePoint;
        const toAbsolute = (n, i2) => n + (basePoint == null ? 0 : basePoint[i2 % 2]);
        switch (pathDataItem.command) {
          case "M":
            subPath = { list: [], minX: 0, minY: 0, maxX: 0, maxY: 0 };
            points.list.push(subPath);
            break;
          case "H":
            if (basePoint != null) {
              addPoint(subPath, [data[0], basePoint[1]]);
            }
            break;
          case "V":
            if (basePoint != null) {
              addPoint(subPath, [basePoint[0], data[0]]);
            }
            break;
          case "Q":
            addPoint(subPath, data.slice(0, 2));
            prevCtrlPoint = [data[2] - data[0], data[3] - data[1]];
            break;
          case "T":
            if (basePoint != null && prev != null && (prev.command == "Q" || prev.command == "T")) {
              ctrlPoint = [
                basePoint[0] + prevCtrlPoint[0],
                basePoint[1] + prevCtrlPoint[1]
              ];
              addPoint(subPath, ctrlPoint);
              prevCtrlPoint = [data[0] - ctrlPoint[0], data[1] - ctrlPoint[1]];
            }
            break;
          case "C":
            if (basePoint != null) {
              addPoint(subPath, [
                0.5 * (basePoint[0] + data[0]),
                0.5 * (basePoint[1] + data[1])
              ]);
            }
            addPoint(subPath, [
              0.5 * (data[0] + data[2]),
              0.5 * (data[1] + data[3])
            ]);
            addPoint(subPath, [
              0.5 * (data[2] + data[4]),
              0.5 * (data[3] + data[5])
            ]);
            prevCtrlPoint = [data[4] - data[2], data[5] - data[3]];
            break;
          case "S":
            if (basePoint != null && prev != null && (prev.command == "C" || prev.command == "S")) {
              addPoint(subPath, [
                basePoint[0] + 0.5 * prevCtrlPoint[0],
                basePoint[1] + 0.5 * prevCtrlPoint[1]
              ]);
              ctrlPoint = [
                basePoint[0] + prevCtrlPoint[0],
                basePoint[1] + prevCtrlPoint[1]
              ];
            }
            if (ctrlPoint != null) {
              addPoint(subPath, [
                0.5 * (ctrlPoint[0] + data[0]),
                0.5 * (ctrlPoint[1] + data[1])
              ]);
            }
            addPoint(subPath, [
              0.5 * (data[0] + data[2]),
              0.5 * (data[1] + data[3])
            ]);
            prevCtrlPoint = [data[2] - data[0], data[3] - data[1]];
            break;
          case "A":
            if (basePoint != null) {
              var curves = a2c.apply(0, basePoint.concat(data));
              for (var cData; (cData = curves.splice(0, 6).map(toAbsolute)).length; ) {
                if (basePoint != null) {
                  addPoint(subPath, [
                    0.5 * (basePoint[0] + cData[0]),
                    0.5 * (basePoint[1] + cData[1])
                  ]);
                }
                addPoint(subPath, [
                  0.5 * (cData[0] + cData[2]),
                  0.5 * (cData[1] + cData[3])
                ]);
                addPoint(subPath, [
                  0.5 * (cData[2] + cData[4]),
                  0.5 * (cData[3] + cData[5])
                ]);
                if (curves.length)
                  addPoint(subPath, basePoint = cData.slice(-2));
              }
            }
            break;
        }
        if (data.length >= 2)
          addPoint(subPath, data.slice(-2));
      }
      return points;
    }
    function convexHull(points) {
      points.list.sort(function(a, b) {
        return a[0] == b[0] ? a[1] - b[1] : a[0] - b[0];
      });
      var lower = [], minY = 0, bottom = 0;
      for (let i = 0; i < points.list.length; i++) {
        while (lower.length >= 2 && cross(lower[lower.length - 2], lower[lower.length - 1], points.list[i]) <= 0) {
          lower.pop();
        }
        if (points.list[i][1] < points.list[minY][1]) {
          minY = i;
          bottom = lower.length;
        }
        lower.push(points.list[i]);
      }
      var upper = [], maxY = points.list.length - 1, top = 0;
      for (let i = points.list.length; i--; ) {
        while (upper.length >= 2 && cross(upper[upper.length - 2], upper[upper.length - 1], points.list[i]) <= 0) {
          upper.pop();
        }
        if (points.list[i][1] > points.list[maxY][1]) {
          maxY = i;
          top = upper.length;
        }
        upper.push(points.list[i]);
      }
      upper.pop();
      lower.pop();
      const hullList = lower.concat(upper);
      const hull = {
        list: hullList,
        minX: 0,
        // by sorting
        maxX: lower.length,
        minY: bottom,
        maxY: (lower.length + top) % hullList.length
      };
      return hull;
    }
    function cross(o, a, b) {
      return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]);
    }
    var a2c = (x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) => {
      const _120 = Math.PI * 120 / 180;
      const rad = Math.PI / 180 * (+angle || 0);
      let res = [];
      const rotateX = (x3, y3, rad2) => {
        return x3 * Math.cos(rad2) - y3 * Math.sin(rad2);
      };
      const rotateY = (x3, y3, rad2) => {
        return x3 * Math.sin(rad2) + y3 * Math.cos(rad2);
      };
      if (!recursive) {
        x1 = rotateX(x1, y1, -rad);
        y1 = rotateY(x1, y1, -rad);
        x2 = rotateX(x2, y2, -rad);
        y2 = rotateY(x2, y2, -rad);
        var x = (x1 - x2) / 2, y = (y1 - y2) / 2;
        var h = x * x / (rx * rx) + y * y / (ry * ry);
        if (h > 1) {
          h = Math.sqrt(h);
          rx = h * rx;
          ry = h * ry;
        }
        var rx2 = rx * rx;
        var ry2 = ry * ry;
        var k = (large_arc_flag == sweep_flag ? -1 : 1) * Math.sqrt(
          Math.abs(
            (rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)
          )
        );
        var cx = k * rx * y / ry + (x1 + x2) / 2;
        var cy = k * -ry * x / rx + (y1 + y2) / 2;
        var f1 = Math.asin(Number(((y1 - cy) / ry).toFixed(9)));
        var f2 = Math.asin(Number(((y2 - cy) / ry).toFixed(9)));
        f1 = x1 < cx ? Math.PI - f1 : f1;
        f2 = x2 < cx ? Math.PI - f2 : f2;
        f1 < 0 && (f1 = Math.PI * 2 + f1);
        f2 < 0 && (f2 = Math.PI * 2 + f2);
        if (sweep_flag && f1 > f2) {
          f1 = f1 - Math.PI * 2;
        }
        if (!sweep_flag && f2 > f1) {
          f2 = f2 - Math.PI * 2;
        }
      } else {
        f1 = recursive[0];
        f2 = recursive[1];
        cx = recursive[2];
        cy = recursive[3];
      }
      var df = f2 - f1;
      if (Math.abs(df) > _120) {
        var f2old = f2, x2old = x2, y2old = y2;
        f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
        x2 = cx + rx * Math.cos(f2);
        y2 = cy + ry * Math.sin(f2);
        res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [
          f2,
          f2old,
          cx,
          cy
        ]);
      }
      df = f2 - f1;
      var c1 = Math.cos(f1), s1 = Math.sin(f1), c2 = Math.cos(f2), s2 = Math.sin(f2), t = Math.tan(df / 4), hx = 4 / 3 * rx * t, hy = 4 / 3 * ry * t, m = [
        -hx * s1,
        hy * c1,
        x2 + hx * s2 - x1,
        y2 - hy * c2 - y1,
        x2 - x1,
        y2 - y1
      ];
      if (recursive) {
        return m.concat(res);
      } else {
        res = m.concat(res);
        var newres = [];
        for (var i = 0, n = res.length; i < n; i++) {
          newres[i] = i % 2 ? rotateY(res[i - 1], res[i], rad) : rotateX(res[i], res[i + 1], rad);
        }
        return newres;
      }
    };
  }
});

// node_modules/svgo/plugins/_transforms.js
var require_transforms = __commonJS({
  "node_modules/svgo/plugins/_transforms.js"(exports2) {
    "use strict";
    var regTransformTypes = /matrix|translate|scale|rotate|skewX|skewY/;
    var regTransformSplit = /\s*(matrix|translate|scale|rotate|skewX|skewY)\s*\(\s*(.+?)\s*\)[\s,]*/;
    var regNumericValues = /[-+]?(?:\d*\.\d+|\d+\.?)(?:[eE][-+]?\d+)?/g;
    exports2.transform2js = (transformString) => {
      const transforms = [];
      let current = null;
      for (const item of transformString.split(regTransformSplit)) {
        var num;
        if (item) {
          if (regTransformTypes.test(item)) {
            current = { name: item, data: [] };
            transforms.push(current);
          } else {
            while (num = regNumericValues.exec(item)) {
              num = Number(num);
              if (current != null) {
                current.data.push(num);
              }
            }
          }
        }
      }
      return current == null || current.data.length == 0 ? [] : transforms;
    };
    exports2.transformsMultiply = (transforms) => {
      const matrixData = transforms.map((transform) => {
        if (transform.name === "matrix") {
          return transform.data;
        }
        return transformToMatrix(transform);
      });
      const matrixTransform = {
        name: "matrix",
        data: matrixData.length > 0 ? matrixData.reduce(multiplyTransformMatrices) : []
      };
      return matrixTransform;
    };
    var mth = {
      /**
       * @type {(deg: number) => number}
       */
      rad: (deg) => {
        return deg * Math.PI / 180;
      },
      /**
       * @type {(rad: number) => number}
       */
      deg: (rad) => {
        return rad * 180 / Math.PI;
      },
      /**
       * @type {(deg: number) => number}
       */
      cos: (deg) => {
        return Math.cos(mth.rad(deg));
      },
      /**
       * @type {(val: number, floatPrecision: number) => number}
       */
      acos: (val, floatPrecision) => {
        return Number(mth.deg(Math.acos(val)).toFixed(floatPrecision));
      },
      /**
       * @type {(deg: number) => number}
       */
      sin: (deg) => {
        return Math.sin(mth.rad(deg));
      },
      /**
       * @type {(val: number, floatPrecision: number) => number}
       */
      asin: (val, floatPrecision) => {
        return Number(mth.deg(Math.asin(val)).toFixed(floatPrecision));
      },
      /**
       * @type {(deg: number) => number}
       */
      tan: (deg) => {
        return Math.tan(mth.rad(deg));
      },
      /**
       * @type {(val: number, floatPrecision: number) => number}
       */
      atan: (val, floatPrecision) => {
        return Number(mth.deg(Math.atan(val)).toFixed(floatPrecision));
      }
    };
    exports2.matrixToTransform = (transform, params) => {
      let floatPrecision = params.floatPrecision;
      let data = transform.data;
      let transforms = [];
      let sx = Number(
        Math.hypot(data[0], data[1]).toFixed(params.transformPrecision)
      );
      let sy = Number(
        ((data[0] * data[3] - data[1] * data[2]) / sx).toFixed(
          params.transformPrecision
        )
      );
      let colsSum = data[0] * data[2] + data[1] * data[3];
      let rowsSum = data[0] * data[1] + data[2] * data[3];
      let scaleBefore = rowsSum != 0 || sx == sy;
      if (data[4] || data[5]) {
        transforms.push({
          name: "translate",
          data: data.slice(4, data[5] ? 6 : 5)
        });
      }
      if (!data[1] && data[2]) {
        transforms.push({
          name: "skewX",
          data: [mth.atan(data[2] / sy, floatPrecision)]
        });
      } else if (data[1] && !data[2]) {
        transforms.push({
          name: "skewY",
          data: [mth.atan(data[1] / data[0], floatPrecision)]
        });
        sx = data[0];
        sy = data[3];
      } else if (!colsSum || sx == 1 && sy == 1 || !scaleBefore) {
        if (!scaleBefore) {
          sx = (data[0] < 0 ? -1 : 1) * Math.hypot(data[0], data[2]);
          sy = (data[3] < 0 ? -1 : 1) * Math.hypot(data[1], data[3]);
          transforms.push({ name: "scale", data: [sx, sy] });
        }
        var angle = Math.min(Math.max(-1, data[0] / sx), 1), rotate = [
          mth.acos(angle, floatPrecision) * ((scaleBefore ? 1 : sy) * data[1] < 0 ? -1 : 1)
        ];
        if (rotate[0])
          transforms.push({ name: "rotate", data: rotate });
        if (rowsSum && colsSum)
          transforms.push({
            name: "skewX",
            data: [mth.atan(colsSum / (sx * sx), floatPrecision)]
          });
        if (rotate[0] && (data[4] || data[5])) {
          transforms.shift();
          var cos = data[0] / sx, sin = data[1] / (scaleBefore ? sx : sy), x = data[4] * (scaleBefore ? 1 : sy), y = data[5] * (scaleBefore ? 1 : sx), denom = (Math.pow(1 - cos, 2) + Math.pow(sin, 2)) * (scaleBefore ? 1 : sx * sy);
          rotate.push(((1 - cos) * x - sin * y) / denom);
          rotate.push(((1 - cos) * y + sin * x) / denom);
        }
      } else if (data[1] || data[2]) {
        return [transform];
      }
      if (scaleBefore && (sx != 1 || sy != 1) || !transforms.length)
        transforms.push({
          name: "scale",
          data: sx == sy ? [sx] : [sx, sy]
        });
      return transforms;
    };
    var transformToMatrix = (transform) => {
      if (transform.name === "matrix") {
        return transform.data;
      }
      switch (transform.name) {
        case "translate":
          return [1, 0, 0, 1, transform.data[0], transform.data[1] || 0];
        case "scale":
          return [
            transform.data[0],
            0,
            0,
            transform.data[1] || transform.data[0],
            0,
            0
          ];
        case "rotate":
          var cos = mth.cos(transform.data[0]), sin = mth.sin(transform.data[0]), cx = transform.data[1] || 0, cy = transform.data[2] || 0;
          return [
            cos,
            sin,
            -sin,
            cos,
            (1 - cos) * cx + sin * cy,
            (1 - cos) * cy - sin * cx
          ];
        case "skewX":
          return [1, 0, mth.tan(transform.data[0]), 1, 0, 0];
        case "skewY":
          return [1, mth.tan(transform.data[0]), 0, 1, 0, 0];
        default:
          throw Error(`Unknown transform ${transform.name}`);
      }
    };
    exports2.transformArc = (cursor, arc, transform) => {
      const x = arc[5] - cursor[0];
      const y = arc[6] - cursor[1];
      let a = arc[0];
      let b = arc[1];
      const rot = arc[2] * Math.PI / 180;
      const cos = Math.cos(rot);
      const sin = Math.sin(rot);
      if (a > 0 && b > 0) {
        let h = Math.pow(x * cos + y * sin, 2) / (4 * a * a) + Math.pow(y * cos - x * sin, 2) / (4 * b * b);
        if (h > 1) {
          h = Math.sqrt(h);
          a *= h;
          b *= h;
        }
      }
      const ellipse = [a * cos, a * sin, -b * sin, b * cos, 0, 0];
      const m = multiplyTransformMatrices(transform, ellipse);
      const lastCol = m[2] * m[2] + m[3] * m[3];
      const squareSum = m[0] * m[0] + m[1] * m[1] + lastCol;
      const root = Math.hypot(m[0] - m[3], m[1] + m[2]) * Math.hypot(m[0] + m[3], m[1] - m[2]);
      if (!root) {
        arc[0] = arc[1] = Math.sqrt(squareSum / 2);
        arc[2] = 0;
      } else {
        const majorAxisSqr = (squareSum + root) / 2;
        const minorAxisSqr = (squareSum - root) / 2;
        const major = Math.abs(majorAxisSqr - lastCol) > 1e-6;
        const sub = (major ? majorAxisSqr : minorAxisSqr) - lastCol;
        const rowsSum = m[0] * m[2] + m[1] * m[3];
        const term1 = m[0] * sub + m[2] * rowsSum;
        const term2 = m[1] * sub + m[3] * rowsSum;
        arc[0] = Math.sqrt(majorAxisSqr);
        arc[1] = Math.sqrt(minorAxisSqr);
        arc[2] = ((major ? term2 < 0 : term1 > 0) ? -1 : 1) * Math.acos((major ? term1 : term2) / Math.hypot(term1, term2)) * 180 / Math.PI;
      }
      if (transform[0] < 0 !== transform[3] < 0) {
        arc[4] = 1 - arc[4];
      }
      return arc;
    };
    var multiplyTransformMatrices = (a, b) => {
      return [
        a[0] * b[0] + a[2] * b[1],
        a[1] * b[0] + a[3] * b[1],
        a[0] * b[2] + a[2] * b[3],
        a[1] * b[2] + a[3] * b[3],
        a[0] * b[4] + a[2] * b[5] + a[4],
        a[1] * b[4] + a[3] * b[5] + a[5]
      ];
    };
  }
});

// node_modules/svgo/plugins/_applyTransforms.js
var require_applyTransforms = __commonJS({
  "node_modules/svgo/plugins/_applyTransforms.js"(exports2) {
    "use strict";
    var {
      transformsMultiply,
      transform2js,
      transformArc
    } = require_transforms();
    var { removeLeadingZero } = require_tools();
    var { referencesProps, attrsGroupsDefaults } = require_collections();
    var regNumericValues = /[-+]?(\d*\.\d+|\d+\.?)(?:[eE][-+]?\d+)?/g;
    var defaultStrokeWidth = attrsGroupsDefaults.presentation["stroke-width"];
    var applyTransforms = (elem, pathData, params) => {
      if (elem.attributes.transform == null || elem.attributes.transform === "" || // styles are not considered when applying transform
      // can be fixed properly with new style engine
      elem.attributes.style != null || Object.entries(elem.attributes).some(
        ([name, value]) => referencesProps.includes(name) && value.includes("url(")
      )) {
        return;
      }
      const matrix = transformsMultiply(transform2js(elem.attributes.transform));
      const stroke = elem.computedAttr("stroke");
      const id = elem.computedAttr("id");
      const transformPrecision = params.transformPrecision;
      if (stroke && stroke != "none") {
        if (!params.applyTransformsStroked || (matrix.data[0] != matrix.data[3] || matrix.data[1] != -matrix.data[2]) && (matrix.data[0] != -matrix.data[3] || matrix.data[1] != matrix.data[2]))
          return;
        if (id) {
          let idElem = elem;
          let hasStrokeWidth = false;
          do {
            if (idElem.attributes["stroke-width"]) {
              hasStrokeWidth = true;
            }
          } while (idElem.attributes.id !== id && !hasStrokeWidth && (idElem = idElem.parentNode));
          if (!hasStrokeWidth)
            return;
        }
        const scale = +Math.sqrt(
          matrix.data[0] * matrix.data[0] + matrix.data[1] * matrix.data[1]
        ).toFixed(transformPrecision);
        if (scale !== 1) {
          const strokeWidth = elem.computedAttr("stroke-width") || defaultStrokeWidth;
          if (elem.attributes["vector-effect"] == null || elem.attributes["vector-effect"] !== "non-scaling-stroke") {
            if (elem.attributes["stroke-width"] != null) {
              elem.attributes["stroke-width"] = elem.attributes["stroke-width"].trim().replace(regNumericValues, (num) => removeLeadingZero(num * scale));
            } else {
              elem.attributes["stroke-width"] = strokeWidth.replace(
                regNumericValues,
                (num) => removeLeadingZero(num * scale)
              );
            }
            if (elem.attributes["stroke-dashoffset"] != null) {
              elem.attributes["stroke-dashoffset"] = elem.attributes["stroke-dashoffset"].trim().replace(regNumericValues, (num) => removeLeadingZero(num * scale));
            }
            if (elem.attributes["stroke-dasharray"] != null) {
              elem.attributes["stroke-dasharray"] = elem.attributes["stroke-dasharray"].trim().replace(regNumericValues, (num) => removeLeadingZero(num * scale));
            }
          }
        }
      } else if (id) {
        return;
      }
      applyMatrixToPathData(pathData, matrix.data);
      delete elem.attributes.transform;
      return;
    };
    exports2.applyTransforms = applyTransforms;
    var transformAbsolutePoint = (matrix, x, y) => {
      const newX = matrix[0] * x + matrix[2] * y + matrix[4];
      const newY = matrix[1] * x + matrix[3] * y + matrix[5];
      return [newX, newY];
    };
    var transformRelativePoint = (matrix, x, y) => {
      const newX = matrix[0] * x + matrix[2] * y;
      const newY = matrix[1] * x + matrix[3] * y;
      return [newX, newY];
    };
    var applyMatrixToPathData = (pathData, matrix) => {
      const start = [0, 0];
      const cursor = [0, 0];
      for (const pathItem of pathData) {
        let { command, args } = pathItem;
        if (command === "M") {
          cursor[0] = args[0];
          cursor[1] = args[1];
          start[0] = cursor[0];
          start[1] = cursor[1];
          const [x, y] = transformAbsolutePoint(matrix, args[0], args[1]);
          args[0] = x;
          args[1] = y;
        }
        if (command === "m") {
          cursor[0] += args[0];
          cursor[1] += args[1];
          start[0] = cursor[0];
          start[1] = cursor[1];
          const [x, y] = transformRelativePoint(matrix, args[0], args[1]);
          args[0] = x;
          args[1] = y;
        }
        if (command === "H") {
          command = "L";
          args = [args[0], cursor[1]];
        }
        if (command === "h") {
          command = "l";
          args = [args[0], 0];
        }
        if (command === "V") {
          command = "L";
          args = [cursor[0], args[0]];
        }
        if (command === "v") {
          command = "l";
          args = [0, args[0]];
        }
        if (command === "L") {
          cursor[0] = args[0];
          cursor[1] = args[1];
          const [x, y] = transformAbsolutePoint(matrix, args[0], args[1]);
          args[0] = x;
          args[1] = y;
        }
        if (command === "l") {
          cursor[0] += args[0];
          cursor[1] += args[1];
          const [x, y] = transformRelativePoint(matrix, args[0], args[1]);
          args[0] = x;
          args[1] = y;
        }
        if (command === "C") {
          cursor[0] = args[4];
          cursor[1] = args[5];
          const [x1, y1] = transformAbsolutePoint(matrix, args[0], args[1]);
          const [x2, y2] = transformAbsolutePoint(matrix, args[2], args[3]);
          const [x, y] = transformAbsolutePoint(matrix, args[4], args[5]);
          args[0] = x1;
          args[1] = y1;
          args[2] = x2;
          args[3] = y2;
          args[4] = x;
          args[5] = y;
        }
        if (command === "c") {
          cursor[0] += args[4];
          cursor[1] += args[5];
          const [x1, y1] = transformRelativePoint(matrix, args[0], args[1]);
          const [x2, y2] = transformRelativePoint(matrix, args[2], args[3]);
          const [x, y] = transformRelativePoint(matrix, args[4], args[5]);
          args[0] = x1;
          args[1] = y1;
          args[2] = x2;
          args[3] = y2;
          args[4] = x;
          args[5] = y;
        }
        if (command === "S") {
          cursor[0] = args[2];
          cursor[1] = args[3];
          const [x2, y2] = transformAbsolutePoint(matrix, args[0], args[1]);
          const [x, y] = transformAbsolutePoint(matrix, args[2], args[3]);
          args[0] = x2;
          args[1] = y2;
          args[2] = x;
          args[3] = y;
        }
        if (command === "s") {
          cursor[0] += args[2];
          cursor[1] += args[3];
          const [x2, y2] = transformRelativePoint(matrix, args[0], args[1]);
          const [x, y] = transformRelativePoint(matrix, args[2], args[3]);
          args[0] = x2;
          args[1] = y2;
          args[2] = x;
          args[3] = y;
        }
        if (command === "Q") {
          cursor[0] = args[2];
          cursor[1] = args[3];
          const [x1, y1] = transformAbsolutePoint(matrix, args[0], args[1]);
          const [x, y] = transformAbsolutePoint(matrix, args[2], args[3]);
          args[0] = x1;
          args[1] = y1;
          args[2] = x;
          args[3] = y;
        }
        if (command === "q") {
          cursor[0] += args[2];
          cursor[1] += args[3];
          const [x1, y1] = transformRelativePoint(matrix, args[0], args[1]);
          const [x, y] = transformRelativePoint(matrix, args[2], args[3]);
          args[0] = x1;
          args[1] = y1;
          args[2] = x;
          args[3] = y;
        }
        if (command === "T") {
          cursor[0] = args[0];
          cursor[1] = args[1];
          const [x, y] = transformAbsolutePoint(matrix, args[0], args[1]);
          args[0] = x;
          args[1] = y;
        }
        if (command === "t") {
          cursor[0] += args[0];
          cursor[1] += args[1];
          const [x, y] = transformRelativePoint(matrix, args[0], args[1]);
          args[0] = x;
          args[1] = y;
        }
        if (command === "A") {
          transformArc(cursor, args, matrix);
          cursor[0] = args[5];
          cursor[1] = args[6];
          if (Math.abs(args[2]) > 80) {
            const a = args[0];
            const rotation = args[2];
            args[0] = args[1];
            args[1] = a;
            args[2] = rotation + (rotation > 0 ? -90 : 90);
          }
          const [x, y] = transformAbsolutePoint(matrix, args[5], args[6]);
          args[5] = x;
          args[6] = y;
        }
        if (command === "a") {
          transformArc([0, 0], args, matrix);
          cursor[0] += args[5];
          cursor[1] += args[6];
          if (Math.abs(args[2]) > 80) {
            const a = args[0];
            const rotation = args[2];
            args[0] = args[1];
            args[1] = a;
            args[2] = rotation + (rotation > 0 ? -90 : 90);
          }
          const [x, y] = transformRelativePoint(matrix, args[5], args[6]);
          args[5] = x;
          args[6] = y;
        }
        if (command === "z" || command === "Z") {
          cursor[0] = start[0];
          cursor[1] = start[1];
        }
        pathItem.command = command;
        pathItem.args = args;
      }
    };
  }
});

// node_modules/svgo/plugins/convertPathData.js
var require_convertPathData = __commonJS({
  "node_modules/svgo/plugins/convertPathData.js"(exports2) {
    "use strict";
    var { collectStylesheet, computeStyle } = require_style();
    var { pathElems } = require_collections();
    var { path2js, js2path } = require_path2();
    var { applyTransforms } = require_applyTransforms();
    var { cleanupOutData } = require_tools();
    exports2.name = "convertPathData";
    exports2.type = "visitor";
    exports2.active = true;
    exports2.description = "optimizes path data: writes in shorter form, applies transformations";
    exports2.params = {
      applyTransforms: true,
      applyTransformsStroked: true,
      makeArcs: {
        threshold: 2.5,
        // coefficient of rounding error
        tolerance: 0.5
        // percentage of radius
      },
      straightCurves: true,
      lineShorthands: true,
      curveSmoothShorthands: true,
      floatPrecision: 3,
      transformPrecision: 5,
      removeUseless: true,
      collapseRepeated: true,
      utilizeAbsolute: true,
      leadingZero: true,
      negativeExtraSpace: true,
      noSpaceAfterFlags: false,
      // a20 60 45 0 1 30 20 → a20 60 45 0130 20
      forceAbsolutePath: false
    };
    var roundData;
    var precision;
    var error;
    var arcThreshold;
    var arcTolerance;
    exports2.fn = (root, params) => {
      const stylesheet = collectStylesheet(root);
      return {
        element: {
          enter: (node) => {
            if (pathElems.includes(node.name) && node.attributes.d != null) {
              const computedStyle = computeStyle(stylesheet, node);
              precision = params.floatPrecision;
              error = precision !== false ? +Math.pow(0.1, precision).toFixed(precision) : 0.01;
              roundData = precision > 0 && precision < 20 ? strongRound : round;
              if (params.makeArcs) {
                arcThreshold = params.makeArcs.threshold;
                arcTolerance = params.makeArcs.tolerance;
              }
              const hasMarkerMid = computedStyle["marker-mid"] != null;
              const maybeHasStroke = computedStyle.stroke && (computedStyle.stroke.type === "dynamic" || computedStyle.stroke.value !== "none");
              const maybeHasLinecap = computedStyle["stroke-linecap"] && (computedStyle["stroke-linecap"].type === "dynamic" || computedStyle["stroke-linecap"].value !== "butt");
              const maybeHasStrokeAndLinecap = maybeHasStroke && maybeHasLinecap;
              var data = path2js(node);
              if (data.length) {
                if (params.applyTransforms) {
                  applyTransforms(node, data, params);
                }
                convertToRelative(data);
                data = filters(data, params, {
                  maybeHasStrokeAndLinecap,
                  hasMarkerMid
                });
                if (params.utilizeAbsolute) {
                  data = convertToMixed(data, params);
                }
                js2path(node, data, params);
              }
            }
          }
        }
      };
    };
    var convertToRelative = (pathData) => {
      let start = [0, 0];
      let cursor = [0, 0];
      let prevCoords = [0, 0];
      for (let i = 0; i < pathData.length; i += 1) {
        const pathItem = pathData[i];
        let { command, args } = pathItem;
        if (command === "m") {
          cursor[0] += args[0];
          cursor[1] += args[1];
          start[0] = cursor[0];
          start[1] = cursor[1];
        }
        if (command === "M") {
          if (i !== 0) {
            command = "m";
          }
          args[0] -= cursor[0];
          args[1] -= cursor[1];
          cursor[0] += args[0];
          cursor[1] += args[1];
          start[0] = cursor[0];
          start[1] = cursor[1];
        }
        if (command === "l") {
          cursor[0] += args[0];
          cursor[1] += args[1];
        }
        if (command === "L") {
          command = "l";
          args[0] -= cursor[0];
          args[1] -= cursor[1];
          cursor[0] += args[0];
          cursor[1] += args[1];
        }
        if (command === "h") {
          cursor[0] += args[0];
        }
        if (command === "H") {
          command = "h";
          args[0] -= cursor[0];
          cursor[0] += args[0];
        }
        if (command === "v") {
          cursor[1] += args[0];
        }
        if (command === "V") {
          command = "v";
          args[0] -= cursor[1];
          cursor[1] += args[0];
        }
        if (command === "c") {
          cursor[0] += args[4];
          cursor[1] += args[5];
        }
        if (command === "C") {
          command = "c";
          args[0] -= cursor[0];
          args[1] -= cursor[1];
          args[2] -= cursor[0];
          args[3] -= cursor[1];
          args[4] -= cursor[0];
          args[5] -= cursor[1];
          cursor[0] += args[4];
          cursor[1] += args[5];
        }
        if (command === "s") {
          cursor[0] += args[2];
          cursor[1] += args[3];
        }
        if (command === "S") {
          command = "s";
          args[0] -= cursor[0];
          args[1] -= cursor[1];
          args[2] -= cursor[0];
          args[3] -= cursor[1];
          cursor[0] += args[2];
          cursor[1] += args[3];
        }
        if (command === "q") {
          cursor[0] += args[2];
          cursor[1] += args[3];
        }
        if (command === "Q") {
          command = "q";
          args[0] -= cursor[0];
          args[1] -= cursor[1];
          args[2] -= cursor[0];
          args[3] -= cursor[1];
          cursor[0] += args[2];
          cursor[1] += args[3];
        }
        if (command === "t") {
          cursor[0] += args[0];
          cursor[1] += args[1];
        }
        if (command === "T") {
          command = "t";
          args[0] -= cursor[0];
          args[1] -= cursor[1];
          cursor[0] += args[0];
          cursor[1] += args[1];
        }
        if (command === "a") {
          cursor[0] += args[5];
          cursor[1] += args[6];
        }
        if (command === "A") {
          command = "a";
          args[5] -= cursor[0];
          args[6] -= cursor[1];
          cursor[0] += args[5];
          cursor[1] += args[6];
        }
        if (command === "Z" || command === "z") {
          cursor[0] = start[0];
          cursor[1] = start[1];
        }
        pathItem.command = command;
        pathItem.args = args;
        pathItem.base = prevCoords;
        pathItem.coords = [cursor[0], cursor[1]];
        prevCoords = pathItem.coords;
      }
      return pathData;
    };
    function filters(path3, params, { maybeHasStrokeAndLinecap, hasMarkerMid }) {
      var stringify = data2Path.bind(null, params), relSubpoint = [0, 0], pathBase = [0, 0], prev = {};
      path3 = path3.filter(function(item, index, path4) {
        let command = item.command;
        let data = item.args;
        let next = path4[index + 1];
        if (command !== "Z" && command !== "z") {
          var sdata = data, circle;
          if (command === "s") {
            sdata = [0, 0].concat(data);
            if (command === "c" || command === "s") {
              var pdata = prev.args, n = pdata.length;
              sdata[0] = pdata[n - 2] - pdata[n - 4];
              sdata[1] = pdata[n - 1] - pdata[n - 3];
            }
          }
          if (params.makeArcs && (command == "c" || command == "s") && isConvex(sdata) && (circle = findCircle(sdata))) {
            var r = roundData([circle.radius])[0], angle = findArcAngle(sdata, circle), sweep = sdata[5] * sdata[0] - sdata[4] * sdata[1] > 0 ? 1 : 0, arc = {
              command: "a",
              args: [r, r, 0, 0, sweep, sdata[4], sdata[5]],
              coords: item.coords.slice(),
              base: item.base
            }, output = [arc], relCenter = [
              circle.center[0] - sdata[4],
              circle.center[1] - sdata[5]
            ], relCircle = { center: relCenter, radius: circle.radius }, arcCurves = [item], hasPrev = 0, suffix = "", nextLonghand;
            if (prev.command == "c" && isConvex(prev.args) && isArcPrev(prev.args, circle) || prev.command == "a" && prev.sdata && isArcPrev(prev.sdata, circle)) {
              arcCurves.unshift(prev);
              arc.base = prev.base;
              arc.args[5] = arc.coords[0] - arc.base[0];
              arc.args[6] = arc.coords[1] - arc.base[1];
              var prevData = prev.command == "a" ? prev.sdata : prev.args;
              var prevAngle = findArcAngle(prevData, {
                center: [
                  prevData[4] + circle.center[0],
                  prevData[5] + circle.center[1]
                ],
                radius: circle.radius
              });
              angle += prevAngle;
              if (angle > Math.PI)
                arc.args[3] = 1;
              hasPrev = 1;
            }
            for (var j = index; (next = path4[++j]) && ~"cs".indexOf(next.command); ) {
              var nextData = next.args;
              if (next.command == "s") {
                nextLonghand = makeLonghand(
                  { command: "s", args: next.args.slice() },
                  path4[j - 1].args
                );
                nextData = nextLonghand.args;
                nextLonghand.args = nextData.slice(0, 2);
                suffix = stringify([nextLonghand]);
              }
              if (isConvex(nextData) && isArc(nextData, relCircle)) {
                angle += findArcAngle(nextData, relCircle);
                if (angle - 2 * Math.PI > 1e-3)
                  break;
                if (angle > Math.PI)
                  arc.args[3] = 1;
                arcCurves.push(next);
                if (2 * Math.PI - angle > 1e-3) {
                  arc.coords = next.coords;
                  arc.args[5] = arc.coords[0] - arc.base[0];
                  arc.args[6] = arc.coords[1] - arc.base[1];
                } else {
                  arc.args[5] = 2 * (relCircle.center[0] - nextData[4]);
                  arc.args[6] = 2 * (relCircle.center[1] - nextData[5]);
                  arc.coords = [
                    arc.base[0] + arc.args[5],
                    arc.base[1] + arc.args[6]
                  ];
                  arc = {
                    command: "a",
                    args: [
                      r,
                      r,
                      0,
                      0,
                      sweep,
                      next.coords[0] - arc.coords[0],
                      next.coords[1] - arc.coords[1]
                    ],
                    coords: next.coords,
                    base: arc.coords
                  };
                  output.push(arc);
                  j++;
                  break;
                }
                relCenter[0] -= nextData[4];
                relCenter[1] -= nextData[5];
              } else
                break;
            }
            if ((stringify(output) + suffix).length < stringify(arcCurves).length) {
              if (path4[j] && path4[j].command == "s") {
                makeLonghand(path4[j], path4[j - 1].args);
              }
              if (hasPrev) {
                var prevArc = output.shift();
                roundData(prevArc.args);
                relSubpoint[0] += prevArc.args[5] - prev.args[prev.args.length - 2];
                relSubpoint[1] += prevArc.args[6] - prev.args[prev.args.length - 1];
                prev.command = "a";
                prev.args = prevArc.args;
                item.base = prev.coords = prevArc.coords;
              }
              arc = output.shift();
              if (arcCurves.length == 1) {
                item.sdata = sdata.slice();
              } else if (arcCurves.length - 1 - hasPrev > 0) {
                path4.splice.apply(
                  path4,
                  [index + 1, arcCurves.length - 1 - hasPrev].concat(output)
                );
              }
              if (!arc)
                return false;
              command = "a";
              data = arc.args;
              item.coords = arc.coords;
            }
          }
          if (precision !== false) {
            if (command === "m" || command === "l" || command === "t" || command === "q" || command === "s" || command === "c") {
              for (var i = data.length; i--; ) {
                data[i] += item.base[i % 2] - relSubpoint[i % 2];
              }
            } else if (command == "h") {
              data[0] += item.base[0] - relSubpoint[0];
            } else if (command == "v") {
              data[0] += item.base[1] - relSubpoint[1];
            } else if (command == "a") {
              data[5] += item.base[0] - relSubpoint[0];
              data[6] += item.base[1] - relSubpoint[1];
            }
            roundData(data);
            if (command == "h")
              relSubpoint[0] += data[0];
            else if (command == "v")
              relSubpoint[1] += data[0];
            else {
              relSubpoint[0] += data[data.length - 2];
              relSubpoint[1] += data[data.length - 1];
            }
            roundData(relSubpoint);
            if (command === "M" || command === "m") {
              pathBase[0] = relSubpoint[0];
              pathBase[1] = relSubpoint[1];
            }
          }
          if (params.straightCurves) {
            if (command === "c" && isCurveStraightLine(data) || command === "s" && isCurveStraightLine(sdata)) {
              if (next && next.command == "s")
                makeLonghand(next, data);
              command = "l";
              data = data.slice(-2);
            } else if (command === "q" && isCurveStraightLine(data)) {
              if (next && next.command == "t")
                makeLonghand(next, data);
              command = "l";
              data = data.slice(-2);
            } else if (command === "t" && prev.command !== "q" && prev.command !== "t") {
              command = "l";
              data = data.slice(-2);
            } else if (command === "a" && (data[0] === 0 || data[1] === 0)) {
              command = "l";
              data = data.slice(-2);
            }
          }
          if (params.lineShorthands && command === "l") {
            if (data[1] === 0) {
              command = "h";
              data.pop();
            } else if (data[0] === 0) {
              command = "v";
              data.shift();
            }
          }
          if (params.collapseRepeated && hasMarkerMid === false && (command === "m" || command === "h" || command === "v") && prev.command && command == prev.command.toLowerCase() && (command != "h" && command != "v" || prev.args[0] >= 0 == data[0] >= 0)) {
            prev.args[0] += data[0];
            if (command != "h" && command != "v") {
              prev.args[1] += data[1];
            }
            prev.coords = item.coords;
            path4[index] = prev;
            return false;
          }
          if (params.curveSmoothShorthands && prev.command) {
            if (command === "c") {
              if (prev.command === "c" && data[0] === -(prev.args[2] - prev.args[4]) && data[1] === -(prev.args[3] - prev.args[5])) {
                command = "s";
                data = data.slice(2);
              } else if (prev.command === "s" && data[0] === -(prev.args[0] - prev.args[2]) && data[1] === -(prev.args[1] - prev.args[3])) {
                command = "s";
                data = data.slice(2);
              } else if (prev.command !== "c" && prev.command !== "s" && data[0] === 0 && data[1] === 0) {
                command = "s";
                data = data.slice(2);
              }
            } else if (command === "q") {
              if (prev.command === "q" && data[0] === prev.args[2] - prev.args[0] && data[1] === prev.args[3] - prev.args[1]) {
                command = "t";
                data = data.slice(2);
              } else if (prev.command === "t" && data[2] === prev.args[0] && data[3] === prev.args[1]) {
                command = "t";
                data = data.slice(2);
              }
            }
          }
          if (params.removeUseless && !maybeHasStrokeAndLinecap) {
            if ((command === "l" || command === "h" || command === "v" || command === "q" || command === "t" || command === "c" || command === "s") && data.every(function(i2) {
              return i2 === 0;
            })) {
              path4[index] = prev;
              return false;
            }
            if (command === "a" && data[5] === 0 && data[6] === 0) {
              path4[index] = prev;
              return false;
            }
          }
          item.command = command;
          item.args = data;
          prev = item;
        } else {
          relSubpoint[0] = pathBase[0];
          relSubpoint[1] = pathBase[1];
          if (prev.command === "Z" || prev.command === "z")
            return false;
          prev = item;
        }
        return true;
      });
      return path3;
    }
    function convertToMixed(path3, params) {
      var prev = path3[0];
      path3 = path3.filter(function(item, index) {
        if (index == 0)
          return true;
        if (item.command === "Z" || item.command === "z") {
          prev = item;
          return true;
        }
        var command = item.command, data = item.args, adata = data.slice();
        if (command === "m" || command === "l" || command === "t" || command === "q" || command === "s" || command === "c") {
          for (var i = adata.length; i--; ) {
            adata[i] += item.base[i % 2];
          }
        } else if (command == "h") {
          adata[0] += item.base[0];
        } else if (command == "v") {
          adata[0] += item.base[1];
        } else if (command == "a") {
          adata[5] += item.base[0];
          adata[6] += item.base[1];
        }
        roundData(adata);
        var absoluteDataStr = cleanupOutData(adata, params), relativeDataStr = cleanupOutData(data, params);
        if (params.forceAbsolutePath || absoluteDataStr.length < relativeDataStr.length && !(params.negativeExtraSpace && command == prev.command && prev.command.charCodeAt(0) > 96 && absoluteDataStr.length == relativeDataStr.length - 1 && (data[0] < 0 || /^0\./.test(data[0]) && prev.args[prev.args.length - 1] % 1))) {
          item.command = command.toUpperCase();
          item.args = adata;
        }
        prev = item;
        return true;
      });
      return path3;
    }
    function isConvex(data) {
      var center = getIntersection([
        0,
        0,
        data[2],
        data[3],
        data[0],
        data[1],
        data[4],
        data[5]
      ]);
      return center && data[2] < center[0] == center[0] < 0 && data[3] < center[1] == center[1] < 0 && data[4] < center[0] == center[0] < data[0] && data[5] < center[1] == center[1] < data[1];
    }
    function getIntersection(coords) {
      var a1 = coords[1] - coords[3], b1 = coords[2] - coords[0], c1 = coords[0] * coords[3] - coords[2] * coords[1], a2 = coords[5] - coords[7], b2 = coords[6] - coords[4], c2 = coords[4] * coords[7] - coords[5] * coords[6], denom = a1 * b2 - a2 * b1;
      if (!denom)
        return;
      var cross = [(b1 * c2 - b2 * c1) / denom, (a1 * c2 - a2 * c1) / -denom];
      if (!isNaN(cross[0]) && !isNaN(cross[1]) && isFinite(cross[0]) && isFinite(cross[1])) {
        return cross;
      }
    }
    function strongRound(data) {
      for (var i = data.length; i-- > 0; ) {
        if (data[i].toFixed(precision) != data[i]) {
          var rounded = +data[i].toFixed(precision - 1);
          data[i] = +Math.abs(rounded - data[i]).toFixed(precision + 1) >= error ? +data[i].toFixed(precision) : rounded;
        }
      }
      return data;
    }
    function round(data) {
      for (var i = data.length; i-- > 0; ) {
        data[i] = Math.round(data[i]);
      }
      return data;
    }
    function isCurveStraightLine(data) {
      var i = data.length - 2, a = -data[i + 1], b = data[i], d = 1 / (a * a + b * b);
      if (i <= 1 || !isFinite(d))
        return false;
      while ((i -= 2) >= 0) {
        if (Math.sqrt(Math.pow(a * data[i] + b * data[i + 1], 2) * d) > error)
          return false;
      }
      return true;
    }
    function makeLonghand(item, data) {
      switch (item.command) {
        case "s":
          item.command = "c";
          break;
        case "t":
          item.command = "q";
          break;
      }
      item.args.unshift(
        data[data.length - 2] - data[data.length - 4],
        data[data.length - 1] - data[data.length - 3]
      );
      return item;
    }
    function getDistance(point1, point2) {
      return Math.hypot(point1[0] - point2[0], point1[1] - point2[1]);
    }
    function getCubicBezierPoint(curve, t) {
      var sqrT = t * t, cubT = sqrT * t, mt = 1 - t, sqrMt = mt * mt;
      return [
        3 * sqrMt * t * curve[0] + 3 * mt * sqrT * curve[2] + cubT * curve[4],
        3 * sqrMt * t * curve[1] + 3 * mt * sqrT * curve[3] + cubT * curve[5]
      ];
    }
    function findCircle(curve) {
      var midPoint = getCubicBezierPoint(curve, 1 / 2), m1 = [midPoint[0] / 2, midPoint[1] / 2], m2 = [(midPoint[0] + curve[4]) / 2, (midPoint[1] + curve[5]) / 2], center = getIntersection([
        m1[0],
        m1[1],
        m1[0] + m1[1],
        m1[1] - m1[0],
        m2[0],
        m2[1],
        m2[0] + (m2[1] - midPoint[1]),
        m2[1] - (m2[0] - midPoint[0])
      ]), radius = center && getDistance([0, 0], center), tolerance = Math.min(arcThreshold * error, arcTolerance * radius / 100);
      if (center && radius < 1e15 && [1 / 4, 3 / 4].every(function(point) {
        return Math.abs(
          getDistance(getCubicBezierPoint(curve, point), center) - radius
        ) <= tolerance;
      }))
        return { center, radius };
    }
    function isArc(curve, circle) {
      var tolerance = Math.min(
        arcThreshold * error,
        arcTolerance * circle.radius / 100
      );
      return [0, 1 / 4, 1 / 2, 3 / 4, 1].every(function(point) {
        return Math.abs(
          getDistance(getCubicBezierPoint(curve, point), circle.center) - circle.radius
        ) <= tolerance;
      });
    }
    function isArcPrev(curve, circle) {
      return isArc(curve, {
        center: [circle.center[0] + curve[4], circle.center[1] + curve[5]],
        radius: circle.radius
      });
    }
    function findArcAngle(curve, relCircle) {
      var x1 = -relCircle.center[0], y1 = -relCircle.center[1], x2 = curve[4] - relCircle.center[0], y2 = curve[5] - relCircle.center[1];
      return Math.acos(
        (x1 * x2 + y1 * y2) / Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2))
      );
    }
    function data2Path(params, pathData) {
      return pathData.reduce(function(pathString, item) {
        var strData = "";
        if (item.args) {
          strData = cleanupOutData(roundData(item.args.slice()), params);
        }
        return pathString + item.command + strData;
      }, "");
    }
  }
});

// node_modules/svgo/plugins/convertTransform.js
var require_convertTransform = __commonJS({
  "node_modules/svgo/plugins/convertTransform.js"(exports2) {
    "use strict";
    var { cleanupOutData } = require_tools();
    var {
      transform2js,
      transformsMultiply,
      matrixToTransform
    } = require_transforms();
    exports2.type = "visitor";
    exports2.name = "convertTransform";
    exports2.active = true;
    exports2.description = "collapses multiple transformations and optimizes it";
    exports2.fn = (_root, params) => {
      const {
        convertToShorts: convertToShorts2 = true,
        // degPrecision = 3, // transformPrecision (or matrix precision) - 2 by default
        degPrecision,
        floatPrecision = 3,
        transformPrecision = 5,
        matrixToTransform: matrixToTransform2 = true,
        shortTranslate = true,
        shortScale = true,
        shortRotate = true,
        removeUseless: removeUseless2 = true,
        collapseIntoOne = true,
        leadingZero = true,
        negativeExtraSpace = false
      } = params;
      const newParams = {
        convertToShorts: convertToShorts2,
        degPrecision,
        floatPrecision,
        transformPrecision,
        matrixToTransform: matrixToTransform2,
        shortTranslate,
        shortScale,
        shortRotate,
        removeUseless: removeUseless2,
        collapseIntoOne,
        leadingZero,
        negativeExtraSpace
      };
      return {
        element: {
          enter: (node) => {
            if (node.attributes.transform != null) {
              convertTransform(node, "transform", newParams);
            }
            if (node.attributes.gradientTransform != null) {
              convertTransform(node, "gradientTransform", newParams);
            }
            if (node.attributes.patternTransform != null) {
              convertTransform(node, "patternTransform", newParams);
            }
          }
        }
      };
    };
    var convertTransform = (item, attrName, params) => {
      let data = transform2js(item.attributes[attrName]);
      params = definePrecision(data, params);
      if (params.collapseIntoOne && data.length > 1) {
        data = [transformsMultiply(data)];
      }
      if (params.convertToShorts) {
        data = convertToShorts(data, params);
      } else {
        data.forEach((item2) => roundTransform(item2, params));
      }
      if (params.removeUseless) {
        data = removeUseless(data);
      }
      if (data.length) {
        item.attributes[attrName] = js2transform(data, params);
      } else {
        delete item.attributes[attrName];
      }
    };
    var definePrecision = (data, { ...newParams }) => {
      const matrixData = [];
      for (const item of data) {
        if (item.name == "matrix") {
          matrixData.push(...item.data.slice(0, 4));
        }
      }
      let significantDigits = newParams.transformPrecision;
      if (matrixData.length) {
        newParams.transformPrecision = Math.min(
          newParams.transformPrecision,
          Math.max.apply(Math, matrixData.map(floatDigits)) || newParams.transformPrecision
        );
        significantDigits = Math.max.apply(
          Math,
          matrixData.map(
            (n) => n.toString().replace(/\D+/g, "").length
            // Number of digits in a number. 123.45 → 5
          )
        );
      }
      if (newParams.degPrecision == null) {
        newParams.degPrecision = Math.max(
          0,
          Math.min(newParams.floatPrecision, significantDigits - 2)
        );
      }
      return newParams;
    };
    var degRound = (data, params) => {
      if (params.degPrecision != null && params.degPrecision >= 1 && params.floatPrecision < 20) {
        return smartRound(params.degPrecision, data);
      } else {
        return round(data);
      }
    };
    var floatRound = (data, params) => {
      if (params.floatPrecision >= 1 && params.floatPrecision < 20) {
        return smartRound(params.floatPrecision, data);
      } else {
        return round(data);
      }
    };
    var transformRound = (data, params) => {
      if (params.transformPrecision >= 1 && params.floatPrecision < 20) {
        return smartRound(params.transformPrecision, data);
      } else {
        return round(data);
      }
    };
    var floatDigits = (n) => {
      const str = n.toString();
      return str.slice(str.indexOf(".")).length - 1;
    };
    var convertToShorts = (transforms, params) => {
      for (var i = 0; i < transforms.length; i++) {
        var transform = transforms[i];
        if (params.matrixToTransform && transform.name === "matrix") {
          var decomposed = matrixToTransform(transform, params);
          if (js2transform(decomposed, params).length <= js2transform([transform], params).length) {
            transforms.splice(i, 1, ...decomposed);
          }
          transform = transforms[i];
        }
        roundTransform(transform, params);
        if (params.shortTranslate && transform.name === "translate" && transform.data.length === 2 && !transform.data[1]) {
          transform.data.pop();
        }
        if (params.shortScale && transform.name === "scale" && transform.data.length === 2 && transform.data[0] === transform.data[1]) {
          transform.data.pop();
        }
        if (params.shortRotate && transforms[i - 2] && transforms[i - 2].name === "translate" && transforms[i - 1].name === "rotate" && transforms[i].name === "translate" && transforms[i - 2].data[0] === -transforms[i].data[0] && transforms[i - 2].data[1] === -transforms[i].data[1]) {
          transforms.splice(i - 2, 3, {
            name: "rotate",
            data: [
              transforms[i - 1].data[0],
              transforms[i - 2].data[0],
              transforms[i - 2].data[1]
            ]
          });
          i -= 2;
        }
      }
      return transforms;
    };
    var removeUseless = (transforms) => {
      return transforms.filter((transform) => {
        if (["translate", "rotate", "skewX", "skewY"].indexOf(transform.name) > -1 && (transform.data.length == 1 || transform.name == "rotate") && !transform.data[0] || // translate(0, 0)
        transform.name == "translate" && !transform.data[0] && !transform.data[1] || // scale(1)
        transform.name == "scale" && transform.data[0] == 1 && (transform.data.length < 2 || transform.data[1] == 1) || // matrix(1 0 0 1 0 0)
        transform.name == "matrix" && transform.data[0] == 1 && transform.data[3] == 1 && !(transform.data[1] || transform.data[2] || transform.data[4] || transform.data[5])) {
          return false;
        }
        return true;
      });
    };
    var js2transform = (transformJS, params) => {
      var transformString = "";
      transformJS.forEach((transform) => {
        roundTransform(transform, params);
        transformString += (transformString && " ") + transform.name + "(" + cleanupOutData(transform.data, params) + ")";
      });
      return transformString;
    };
    var roundTransform = (transform, params) => {
      switch (transform.name) {
        case "translate":
          transform.data = floatRound(transform.data, params);
          break;
        case "rotate":
          transform.data = [
            ...degRound(transform.data.slice(0, 1), params),
            ...floatRound(transform.data.slice(1), params)
          ];
          break;
        case "skewX":
        case "skewY":
          transform.data = degRound(transform.data, params);
          break;
        case "scale":
          transform.data = transformRound(transform.data, params);
          break;
        case "matrix":
          transform.data = [
            ...transformRound(transform.data.slice(0, 4), params),
            ...floatRound(transform.data.slice(4), params)
          ];
          break;
      }
      return transform;
    };
    var round = (data) => {
      return data.map(Math.round);
    };
    var smartRound = (precision, data) => {
      for (var i = data.length, tolerance = +Math.pow(0.1, precision).toFixed(precision); i--; ) {
        if (Number(data[i].toFixed(precision)) !== data[i]) {
          var rounded = +data[i].toFixed(precision - 1);
          data[i] = +Math.abs(rounded - data[i]).toFixed(precision + 1) >= tolerance ? +data[i].toFixed(precision) : rounded;
        }
      }
      return data;
    };
  }
});

// node_modules/svgo/plugins/removeEmptyAttrs.js
var require_removeEmptyAttrs = __commonJS({
  "node_modules/svgo/plugins/removeEmptyAttrs.js"(exports2) {
    "use strict";
    var { attrsGroups } = require_collections();
    exports2.type = "visitor";
    exports2.name = "removeEmptyAttrs";
    exports2.active = true;
    exports2.description = "removes empty attributes";
    exports2.fn = () => {
      return {
        element: {
          enter: (node) => {
            for (const [name, value] of Object.entries(node.attributes)) {
              if (value === "" && // empty conditional processing attributes prevents elements from rendering
              attrsGroups.conditionalProcessing.includes(name) === false) {
                delete node.attributes[name];
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeEmptyContainers.js
var require_removeEmptyContainers = __commonJS({
  "node_modules/svgo/plugins/removeEmptyContainers.js"(exports2) {
    "use strict";
    var { detachNodeFromParent } = require_xast();
    var { elemsGroups } = require_collections();
    exports2.type = "visitor";
    exports2.name = "removeEmptyContainers";
    exports2.active = true;
    exports2.description = "removes empty container elements";
    exports2.fn = () => {
      return {
        element: {
          exit: (node, parentNode) => {
            if (node.name === "svg" || elemsGroups.container.includes(node.name) === false || node.children.length !== 0) {
              return;
            }
            if (node.name === "pattern" && Object.keys(node.attributes).length !== 0) {
              return;
            }
            if (node.name === "g" && node.attributes.filter != null) {
              return;
            }
            if (node.name === "mask" && node.attributes.id != null) {
              return;
            }
            detachNodeFromParent(node, parentNode);
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/mergePaths.js
var require_mergePaths = __commonJS({
  "node_modules/svgo/plugins/mergePaths.js"(exports2) {
    "use strict";
    var { detachNodeFromParent } = require_xast();
    var { collectStylesheet, computeStyle } = require_style();
    var { path2js, js2path, intersects } = require_path2();
    exports2.type = "visitor";
    exports2.name = "mergePaths";
    exports2.active = true;
    exports2.description = "merges multiple paths in one if possible";
    exports2.fn = (root, params) => {
      const {
        force = false,
        floatPrecision,
        noSpaceAfterFlags = false
        // a20 60 45 0 1 30 20 → a20 60 45 0130 20
      } = params;
      const stylesheet = collectStylesheet(root);
      return {
        element: {
          enter: (node) => {
            let prevChild = null;
            for (const child of node.children) {
              if (prevChild == null || prevChild.type !== "element" || prevChild.name !== "path" || prevChild.children.length !== 0 || prevChild.attributes.d == null) {
                prevChild = child;
                continue;
              }
              if (child.type !== "element" || child.name !== "path" || child.children.length !== 0 || child.attributes.d == null) {
                prevChild = child;
                continue;
              }
              const computedStyle = computeStyle(stylesheet, child);
              if (computedStyle["marker-start"] || computedStyle["marker-mid"] || computedStyle["marker-end"]) {
                prevChild = child;
                continue;
              }
              const prevChildAttrs = Object.keys(prevChild.attributes);
              const childAttrs = Object.keys(child.attributes);
              let attributesAreEqual = prevChildAttrs.length === childAttrs.length;
              for (const name of childAttrs) {
                if (name !== "d") {
                  if (prevChild.attributes[name] == null || prevChild.attributes[name] !== child.attributes[name]) {
                    attributesAreEqual = false;
                  }
                }
              }
              const prevPathJS = path2js(prevChild);
              const curPathJS = path2js(child);
              if (attributesAreEqual && (force || !intersects(prevPathJS, curPathJS))) {
                js2path(prevChild, prevPathJS.concat(curPathJS), {
                  floatPrecision,
                  noSpaceAfterFlags
                });
                detachNodeFromParent(child, node);
                continue;
              }
              prevChild = child;
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeUnusedNS.js
var require_removeUnusedNS = __commonJS({
  "node_modules/svgo/plugins/removeUnusedNS.js"(exports2) {
    "use strict";
    exports2.type = "visitor";
    exports2.name = "removeUnusedNS";
    exports2.active = true;
    exports2.description = "removes unused namespaces declaration";
    exports2.fn = () => {
      const unusedNamespaces = /* @__PURE__ */ new Set();
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name === "svg" && parentNode.type === "root") {
              for (const name of Object.keys(node.attributes)) {
                if (name.startsWith("xmlns:")) {
                  const local = name.slice("xmlns:".length);
                  unusedNamespaces.add(local);
                }
              }
            }
            if (unusedNamespaces.size !== 0) {
              if (node.name.includes(":")) {
                const [ns] = node.name.split(":");
                if (unusedNamespaces.has(ns)) {
                  unusedNamespaces.delete(ns);
                }
              }
              for (const name of Object.keys(node.attributes)) {
                if (name.includes(":")) {
                  const [ns] = name.split(":");
                  unusedNamespaces.delete(ns);
                }
              }
            }
          },
          exit: (node, parentNode) => {
            if (node.name === "svg" && parentNode.type === "root") {
              for (const name of unusedNamespaces) {
                delete node.attributes[`xmlns:${name}`];
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/sortDefsChildren.js
var require_sortDefsChildren = __commonJS({
  "node_modules/svgo/plugins/sortDefsChildren.js"(exports2) {
    "use strict";
    exports2.type = "visitor";
    exports2.name = "sortDefsChildren";
    exports2.active = true;
    exports2.description = "Sorts children of <defs> to improve compression";
    exports2.fn = () => {
      return {
        element: {
          enter: (node) => {
            if (node.name === "defs") {
              const frequencies = /* @__PURE__ */ new Map();
              for (const child of node.children) {
                if (child.type === "element") {
                  const frequency = frequencies.get(child.name);
                  if (frequency == null) {
                    frequencies.set(child.name, 1);
                  } else {
                    frequencies.set(child.name, frequency + 1);
                  }
                }
              }
              node.children.sort((a, b) => {
                if (a.type !== "element" || b.type !== "element") {
                  return 0;
                }
                const aFrequency = frequencies.get(a.name);
                const bFrequency = frequencies.get(b.name);
                if (aFrequency != null && bFrequency != null) {
                  const frequencyComparison = bFrequency - aFrequency;
                  if (frequencyComparison !== 0) {
                    return frequencyComparison;
                  }
                }
                const lengthComparison = b.name.length - a.name.length;
                if (lengthComparison !== 0) {
                  return lengthComparison;
                }
                if (a.name !== b.name) {
                  return a.name > b.name ? -1 : 1;
                }
                return 0;
              });
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeTitle.js
var require_removeTitle = __commonJS({
  "node_modules/svgo/plugins/removeTitle.js"(exports2) {
    "use strict";
    var { detachNodeFromParent } = require_xast();
    exports2.name = "removeTitle";
    exports2.type = "visitor";
    exports2.active = true;
    exports2.description = "removes <title>";
    exports2.fn = () => {
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name === "title") {
              detachNodeFromParent(node, parentNode);
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeDesc.js
var require_removeDesc = __commonJS({
  "node_modules/svgo/plugins/removeDesc.js"(exports2) {
    "use strict";
    var { detachNodeFromParent } = require_xast();
    exports2.name = "removeDesc";
    exports2.type = "visitor";
    exports2.active = true;
    exports2.description = "removes <desc>";
    var standardDescs = /^(Created with|Created using)/;
    exports2.fn = (root, params) => {
      const { removeAny = true } = params;
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name === "desc") {
              if (removeAny || node.children.length === 0 || node.children[0].type === "text" && standardDescs.test(node.children[0].value)) {
                detachNodeFromParent(node, parentNode);
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/preset-default.js
var require_preset_default = __commonJS({
  "node_modules/svgo/plugins/preset-default.js"(exports2, module2) {
    "use strict";
    var { createPreset } = require_plugins();
    var removeDoctype = require_removeDoctype();
    var removeXMLProcInst = require_removeXMLProcInst();
    var removeComments = require_removeComments();
    var removeMetadata = require_removeMetadata();
    var removeEditorsNSData = require_removeEditorsNSData();
    var cleanupAttrs = require_cleanupAttrs();
    var mergeStyles = require_mergeStyles();
    var inlineStyles = require_inlineStyles();
    var minifyStyles = require_minifyStyles();
    var cleanupIDs = require_cleanupIDs();
    var removeUselessDefs = require_removeUselessDefs();
    var cleanupNumericValues = require_cleanupNumericValues();
    var convertColors = require_convertColors();
    var removeUnknownsAndDefaults = require_removeUnknownsAndDefaults();
    var removeNonInheritableGroupAttrs = require_removeNonInheritableGroupAttrs();
    var removeUselessStrokeAndFill = require_removeUselessStrokeAndFill();
    var removeViewBox = require_removeViewBox();
    var cleanupEnableBackground = require_cleanupEnableBackground();
    var removeHiddenElems = require_removeHiddenElems();
    var removeEmptyText = require_removeEmptyText();
    var convertShapeToPath = require_convertShapeToPath();
    var convertEllipseToCircle = require_convertEllipseToCircle();
    var moveElemsAttrsToGroup = require_moveElemsAttrsToGroup();
    var moveGroupAttrsToElems = require_moveGroupAttrsToElems();
    var collapseGroups = require_collapseGroups();
    var convertPathData = require_convertPathData();
    var convertTransform = require_convertTransform();
    var removeEmptyAttrs = require_removeEmptyAttrs();
    var removeEmptyContainers = require_removeEmptyContainers();
    var mergePaths = require_mergePaths();
    var removeUnusedNS = require_removeUnusedNS();
    var sortDefsChildren = require_sortDefsChildren();
    var removeTitle = require_removeTitle();
    var removeDesc = require_removeDesc();
    var presetDefault = createPreset({
      name: "presetDefault",
      plugins: [
        removeDoctype,
        removeXMLProcInst,
        removeComments,
        removeMetadata,
        removeEditorsNSData,
        cleanupAttrs,
        mergeStyles,
        inlineStyles,
        minifyStyles,
        cleanupIDs,
        removeUselessDefs,
        cleanupNumericValues,
        convertColors,
        removeUnknownsAndDefaults,
        removeNonInheritableGroupAttrs,
        removeUselessStrokeAndFill,
        removeViewBox,
        cleanupEnableBackground,
        removeHiddenElems,
        removeEmptyText,
        convertShapeToPath,
        convertEllipseToCircle,
        moveElemsAttrsToGroup,
        moveGroupAttrsToElems,
        collapseGroups,
        convertPathData,
        convertTransform,
        removeEmptyAttrs,
        removeEmptyContainers,
        mergePaths,
        removeUnusedNS,
        sortDefsChildren,
        removeTitle,
        removeDesc
      ]
    });
    module2.exports = presetDefault;
  }
});

// node_modules/svgo/plugins/addAttributesToSVGElement.js
var require_addAttributesToSVGElement = __commonJS({
  "node_modules/svgo/plugins/addAttributesToSVGElement.js"(exports2) {
    "use strict";
    exports2.name = "addAttributesToSVGElement";
    exports2.type = "visitor";
    exports2.active = false;
    exports2.description = "adds attributes to an outer <svg> element";
    var ENOCLS = `Error in plugin "addAttributesToSVGElement": absent parameters.
It should have a list of "attributes" or one "attribute".
Config example:

plugins: [
  {
    name: 'addAttributesToSVGElement',
    params: {
      attribute: "mySvg"
    }
  }
]

plugins: [
  {
    name: 'addAttributesToSVGElement',
    params: {
      attributes: ["mySvg", "size-big"]
    }
  }
]

plugins: [
  {
    name: 'addAttributesToSVGElement',
    params: {
      attributes: [
        {
          focusable: false
        },
        {
          'data-image': icon
        }
      ]
    }
  }
]
`;
    exports2.fn = (root, params) => {
      if (!Array.isArray(params.attributes) && !params.attribute) {
        console.error(ENOCLS);
        return null;
      }
      const attributes = params.attributes || [params.attribute];
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name === "svg" && parentNode.type === "root") {
              for (const attribute of attributes) {
                if (typeof attribute === "string") {
                  if (node.attributes[attribute] == null) {
                    node.attributes[attribute] = void 0;
                  }
                }
                if (typeof attribute === "object") {
                  for (const key of Object.keys(attribute)) {
                    if (node.attributes[key] == null) {
                      node.attributes[key] = attribute[key];
                    }
                  }
                }
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/addClassesToSVGElement.js
var require_addClassesToSVGElement = __commonJS({
  "node_modules/svgo/plugins/addClassesToSVGElement.js"(exports2) {
    "use strict";
    exports2.name = "addClassesToSVGElement";
    exports2.type = "visitor";
    exports2.active = false;
    exports2.description = "adds classnames to an outer <svg> element";
    var ENOCLS = `Error in plugin "addClassesToSVGElement": absent parameters.
It should have a list of classes in "classNames" or one "className".
Config example:

plugins: [
  {
    name: "addClassesToSVGElement",
    params: {
      className: "mySvg"
    }
  }
]

plugins: [
  {
    name: "addClassesToSVGElement",
    params: {
      classNames: ["mySvg", "size-big"]
    }
  }
]
`;
    exports2.fn = (root, params) => {
      if (!(Array.isArray(params.classNames) && params.classNames.some(String)) && !params.className) {
        console.error(ENOCLS);
        return null;
      }
      const classNames = params.classNames || [params.className];
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name === "svg" && parentNode.type === "root") {
              const classList = new Set(
                node.attributes.class == null ? null : node.attributes.class.split(" ")
              );
              for (const className of classNames) {
                if (className != null) {
                  classList.add(className);
                }
              }
              node.attributes.class = Array.from(classList).join(" ");
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/cleanupListOfValues.js
var require_cleanupListOfValues = __commonJS({
  "node_modules/svgo/plugins/cleanupListOfValues.js"(exports2) {
    "use strict";
    var { removeLeadingZero } = require_tools();
    exports2.name = "cleanupListOfValues";
    exports2.type = "visitor";
    exports2.active = false;
    exports2.description = "rounds list of values to the fixed precision";
    var regNumericValues = /^([-+]?\d*\.?\d+([eE][-+]?\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/;
    var regSeparator = /\s+,?\s*|,\s*/;
    var absoluteLengths = {
      // relative to px
      cm: 96 / 2.54,
      mm: 96 / 25.4,
      in: 96,
      pt: 4 / 3,
      pc: 16,
      px: 1
    };
    exports2.fn = (_root, params) => {
      const {
        floatPrecision = 3,
        leadingZero = true,
        defaultPx = true,
        convertToPx = true
      } = params;
      const roundValues = (lists) => {
        const roundedList = [];
        for (const elem of lists.split(regSeparator)) {
          const match = elem.match(regNumericValues);
          const matchNew = elem.match(/new/);
          if (match) {
            let num = Number(Number(match[1]).toFixed(floatPrecision));
            let matchedUnit = match[3] || "";
            let units = matchedUnit;
            if (convertToPx && units && units in absoluteLengths) {
              const pxNum = Number(
                (absoluteLengths[units] * Number(match[1])).toFixed(floatPrecision)
              );
              if (pxNum.toString().length < match[0].length) {
                num = pxNum;
                units = "px";
              }
            }
            let str;
            if (leadingZero) {
              str = removeLeadingZero(num);
            } else {
              str = num.toString();
            }
            if (defaultPx && units === "px") {
              units = "";
            }
            roundedList.push(str + units);
          } else if (matchNew) {
            roundedList.push("new");
          } else if (elem) {
            roundedList.push(elem);
          }
        }
        return roundedList.join(" ");
      };
      return {
        element: {
          enter: (node) => {
            if (node.attributes.points != null) {
              node.attributes.points = roundValues(node.attributes.points);
            }
            if (node.attributes["enable-background"] != null) {
              node.attributes["enable-background"] = roundValues(
                node.attributes["enable-background"]
              );
            }
            if (node.attributes.viewBox != null) {
              node.attributes.viewBox = roundValues(node.attributes.viewBox);
            }
            if (node.attributes["stroke-dasharray"] != null) {
              node.attributes["stroke-dasharray"] = roundValues(
                node.attributes["stroke-dasharray"]
              );
            }
            if (node.attributes.dx != null) {
              node.attributes.dx = roundValues(node.attributes.dx);
            }
            if (node.attributes.dy != null) {
              node.attributes.dy = roundValues(node.attributes.dy);
            }
            if (node.attributes.x != null) {
              node.attributes.x = roundValues(node.attributes.x);
            }
            if (node.attributes.y != null) {
              node.attributes.y = roundValues(node.attributes.y);
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/convertStyleToAttrs.js
var require_convertStyleToAttrs = __commonJS({
  "node_modules/svgo/plugins/convertStyleToAttrs.js"(exports2) {
    "use strict";
    exports2.name = "convertStyleToAttrs";
    exports2.type = "perItem";
    exports2.active = false;
    exports2.description = "converts style to attributes";
    exports2.params = {
      keepImportant: false
    };
    var stylingProps = require_collections().attrsGroups.presentation;
    var rEscape = "\\\\(?:[0-9a-f]{1,6}\\s?|\\r\\n|.)";
    var rAttr = "\\s*(" + g("[^:;\\\\]", rEscape) + "*?)\\s*";
    var rSingleQuotes = "'(?:[^'\\n\\r\\\\]|" + rEscape + ")*?(?:'|$)";
    var rQuotes = '"(?:[^"\\n\\r\\\\]|' + rEscape + ')*?(?:"|$)';
    var rQuotedString = new RegExp("^" + g(rSingleQuotes, rQuotes) + "$");
    var rParenthesis = "\\(" + g(`[^'"()\\\\]+`, rEscape, rSingleQuotes, rQuotes) + "*?\\)";
    var rValue = "\\s*(" + g(
      `[^!'"();\\\\]+?`,
      rEscape,
      rSingleQuotes,
      rQuotes,
      rParenthesis,
      "[^;]*?"
    ) + "*?)";
    var rDeclEnd = "\\s*(?:;\\s*|$)";
    var rImportant = "(\\s*!important(?![-(\\w]))?";
    var regDeclarationBlock = new RegExp(
      rAttr + ":" + rValue + rImportant + rDeclEnd,
      "ig"
    );
    var regStripComments = new RegExp(
      g(rEscape, rSingleQuotes, rQuotes, "/\\*[^]*?\\*/"),
      "ig"
    );
    exports2.fn = function(item, params) {
      if (item.type === "element" && item.attributes.style != null) {
        let styles = [];
        const newAttributes = {};
        const styleValue = item.attributes.style.replace(
          regStripComments,
          (match) => {
            return match[0] == "/" ? "" : match[0] == "\\" && /[-g-z]/i.test(match[1]) ? match[1] : match;
          }
        );
        regDeclarationBlock.lastIndex = 0;
        for (var rule; rule = regDeclarationBlock.exec(styleValue); ) {
          if (!params.keepImportant || !rule[3]) {
            styles.push([rule[1], rule[2]]);
          }
        }
        if (styles.length) {
          styles = styles.filter(function(style) {
            if (style[0]) {
              var prop = style[0].toLowerCase(), val = style[1];
              if (rQuotedString.test(val)) {
                val = val.slice(1, -1);
              }
              if (stylingProps.includes(prop)) {
                newAttributes[prop] = val;
                return false;
              }
            }
            return true;
          });
          Object.assign(item.attributes, newAttributes);
          if (styles.length) {
            item.attributes.style = styles.map((declaration) => declaration.join(":")).join(";");
          } else {
            delete item.attributes.style;
          }
        }
      }
    };
    function g() {
      return "(?:" + Array.prototype.join.call(arguments, "|") + ")";
    }
  }
});

// node_modules/svgo/plugins/prefixIds.js
var require_prefixIds = __commonJS({
  "node_modules/svgo/plugins/prefixIds.js"(exports2) {
    "use strict";
    var csstree = require_lib8();
    var { referencesProps } = require_collections();
    exports2.type = "visitor";
    exports2.name = "prefixIds";
    exports2.active = false;
    exports2.description = "prefix IDs";
    var getBasename = (path3) => {
      const matched = path3.match(/[/\\]?([^/\\]+)$/);
      if (matched) {
        return matched[1];
      }
      return "";
    };
    var escapeIdentifierName = (str) => {
      return str.replace(/[. ]/g, "_");
    };
    var unquote = (string) => {
      if (string.startsWith('"') && string.endsWith('"') || string.startsWith("'") && string.endsWith("'")) {
        return string.slice(1, -1);
      }
      return string;
    };
    var prefixId = (prefix, value) => {
      if (value.startsWith(prefix)) {
        return value;
      }
      return prefix + value;
    };
    var prefixReference = (prefix, value) => {
      if (value.startsWith("#")) {
        return "#" + prefixId(prefix, value.slice(1));
      }
      return null;
    };
    exports2.fn = (_root, params, info) => {
      const { delim = "__", prefixIds = true, prefixClassNames = true } = params;
      return {
        element: {
          enter: (node) => {
            let prefix = "prefix" + delim;
            if (typeof params.prefix === "function") {
              prefix = params.prefix(node, info) + delim;
            } else if (typeof params.prefix === "string") {
              prefix = params.prefix + delim;
            } else if (params.prefix === false) {
              prefix = "";
            } else if (info.path != null && info.path.length > 0) {
              prefix = escapeIdentifierName(getBasename(info.path)) + delim;
            }
            if (node.name === "style") {
              if (node.children.length === 0) {
                return;
              }
              let cssText = "";
              if (node.children[0].type === "text" || node.children[0].type === "cdata") {
                cssText = node.children[0].value;
              }
              let cssAst = null;
              try {
                cssAst = csstree.parse(cssText, {
                  parseValue: true,
                  parseCustomProperty: false
                });
              } catch {
                return;
              }
              csstree.walk(cssAst, (node2) => {
                if (prefixIds && node2.type === "IdSelector" || prefixClassNames && node2.type === "ClassSelector") {
                  node2.name = prefixId(prefix, node2.name);
                  return;
                }
                if (node2.type === "Url" && node2.value.value && node2.value.value.length > 0) {
                  const prefixed = prefixReference(
                    prefix,
                    unquote(node2.value.value)
                  );
                  if (prefixed != null) {
                    node2.value.value = prefixed;
                  }
                }
              });
              if (node.children[0].type === "text" || node.children[0].type === "cdata") {
                node.children[0].value = csstree.generate(cssAst);
              }
              return;
            }
            if (prefixIds && node.attributes.id != null && node.attributes.id.length !== 0) {
              node.attributes.id = prefixId(prefix, node.attributes.id);
            }
            if (prefixClassNames && node.attributes.class != null && node.attributes.class.length !== 0) {
              node.attributes.class = node.attributes.class.split(/\s+/).map((name) => prefixId(prefix, name)).join(" ");
            }
            for (const name of ["href", "xlink:href"]) {
              if (node.attributes[name] != null && node.attributes[name].length !== 0) {
                const prefixed = prefixReference(prefix, node.attributes[name]);
                if (prefixed != null) {
                  node.attributes[name] = prefixed;
                }
              }
            }
            for (const name of referencesProps) {
              if (node.attributes[name] != null && node.attributes[name].length !== 0) {
                node.attributes[name] = node.attributes[name].replace(
                  /url\((.*?)\)/gi,
                  (match, url) => {
                    const prefixed = prefixReference(prefix, url);
                    if (prefixed == null) {
                      return match;
                    }
                    return `url(${prefixed})`;
                  }
                );
              }
            }
            for (const name of ["begin", "end"]) {
              if (node.attributes[name] != null && node.attributes[name].length !== 0) {
                const parts = node.attributes[name].split(/\s*;\s+/).map((val) => {
                  if (val.endsWith(".end") || val.endsWith(".start")) {
                    const [id, postfix] = val.split(".");
                    return `${prefixId(prefix, id)}.${postfix}`;
                  }
                  return val;
                });
                node.attributes[name] = parts.join("; ");
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeAttributesBySelector.js
var require_removeAttributesBySelector = __commonJS({
  "node_modules/svgo/plugins/removeAttributesBySelector.js"(exports2) {
    "use strict";
    var { querySelectorAll } = require_xast();
    exports2.name = "removeAttributesBySelector";
    exports2.type = "visitor";
    exports2.active = false;
    exports2.description = "removes attributes of elements that match a css selector";
    exports2.fn = (root, params) => {
      const selectors = Array.isArray(params.selectors) ? params.selectors : [params];
      for (const { selector, attributes } of selectors) {
        const nodes = querySelectorAll(root, selector);
        for (const node of nodes) {
          if (node.type === "element") {
            if (Array.isArray(attributes)) {
              for (const name of attributes) {
                delete node.attributes[name];
              }
            } else {
              delete node.attributes[attributes];
            }
          }
        }
      }
      return {};
    };
  }
});

// node_modules/svgo/plugins/removeAttrs.js
var require_removeAttrs = __commonJS({
  "node_modules/svgo/plugins/removeAttrs.js"(exports2) {
    "use strict";
    exports2.name = "removeAttrs";
    exports2.type = "visitor";
    exports2.active = false;
    exports2.description = "removes specified attributes";
    var DEFAULT_SEPARATOR = ":";
    var ENOATTRS = `Warning: The plugin "removeAttrs" requires the "attrs" parameter.
It should have a pattern to remove, otherwise the plugin is a noop.
Config example:

plugins: [
  {
    name: "removeAttrs",
    params: {
      attrs: "(fill|stroke)"
    }
  }
]
`;
    exports2.fn = (root, params) => {
      if (typeof params.attrs == "undefined") {
        console.warn(ENOATTRS);
        return null;
      }
      const elemSeparator = typeof params.elemSeparator == "string" ? params.elemSeparator : DEFAULT_SEPARATOR;
      const preserveCurrentColor = typeof params.preserveCurrentColor == "boolean" ? params.preserveCurrentColor : false;
      const attrs = Array.isArray(params.attrs) ? params.attrs : [params.attrs];
      return {
        element: {
          enter: (node) => {
            for (let pattern of attrs) {
              if (pattern.includes(elemSeparator) === false) {
                pattern = [".*", elemSeparator, pattern, elemSeparator, ".*"].join(
                  ""
                );
              } else if (pattern.split(elemSeparator).length < 3) {
                pattern = [pattern, elemSeparator, ".*"].join("");
              }
              const list = pattern.split(elemSeparator).map((value) => {
                if (value === "*") {
                  value = ".*";
                }
                return new RegExp(["^", value, "$"].join(""), "i");
              });
              if (list[0].test(node.name)) {
                for (const [name, value] of Object.entries(node.attributes)) {
                  const isFillCurrentColor = preserveCurrentColor && name == "fill" && value == "currentColor";
                  const isStrokeCurrentColor = preserveCurrentColor && name == "stroke" && value == "currentColor";
                  if (!isFillCurrentColor && !isStrokeCurrentColor && // matches attribute name
                  list[1].test(name) && // matches attribute value
                  list[2].test(value)) {
                    delete node.attributes[name];
                  }
                }
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeDimensions.js
var require_removeDimensions = __commonJS({
  "node_modules/svgo/plugins/removeDimensions.js"(exports2) {
    "use strict";
    exports2.name = "removeDimensions";
    exports2.type = "perItem";
    exports2.active = false;
    exports2.description = "removes width and height in presence of viewBox (opposite to removeViewBox, disable it first)";
    exports2.fn = function(item) {
      if (item.type === "element" && item.name === "svg") {
        if (item.attributes.viewBox != null) {
          delete item.attributes.width;
          delete item.attributes.height;
        } else if (item.attributes.width != null && item.attributes.height != null && Number.isNaN(Number(item.attributes.width)) === false && Number.isNaN(Number(item.attributes.height)) === false) {
          const width = Number(item.attributes.width);
          const height = Number(item.attributes.height);
          item.attributes.viewBox = `0 0 ${width} ${height}`;
          delete item.attributes.width;
          delete item.attributes.height;
        }
      }
    };
  }
});

// node_modules/svgo/plugins/removeElementsByAttr.js
var require_removeElementsByAttr = __commonJS({
  "node_modules/svgo/plugins/removeElementsByAttr.js"(exports2) {
    "use strict";
    var { detachNodeFromParent } = require_xast();
    exports2.name = "removeElementsByAttr";
    exports2.type = "visitor";
    exports2.active = false;
    exports2.description = "removes arbitrary elements by ID or className (disabled by default)";
    exports2.fn = (root, params) => {
      const ids = params.id == null ? [] : Array.isArray(params.id) ? params.id : [params.id];
      const classes = params.class == null ? [] : Array.isArray(params.class) ? params.class : [params.class];
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.attributes.id != null && ids.length !== 0) {
              if (ids.includes(node.attributes.id)) {
                detachNodeFromParent(node, parentNode);
              }
            }
            if (node.attributes.class && classes.length !== 0) {
              const classList = node.attributes.class.split(" ");
              for (const item of classes) {
                if (classList.includes(item)) {
                  detachNodeFromParent(node, parentNode);
                  break;
                }
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeOffCanvasPaths.js
var require_removeOffCanvasPaths = __commonJS({
  "node_modules/svgo/plugins/removeOffCanvasPaths.js"(exports2) {
    "use strict";
    var { visitSkip, detachNodeFromParent } = require_xast();
    var { parsePathData } = require_path();
    var { intersects } = require_path2();
    exports2.type = "visitor";
    exports2.name = "removeOffCanvasPaths";
    exports2.active = false;
    exports2.description = "removes elements that are drawn outside of the viewbox (disabled by default)";
    exports2.fn = () => {
      let viewBoxData = null;
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name === "svg" && parentNode.type === "root") {
              let viewBox = "";
              if (node.attributes.viewBox != null) {
                viewBox = node.attributes.viewBox;
              } else if (node.attributes.height != null && node.attributes.width != null) {
                viewBox = `0 0 ${node.attributes.width} ${node.attributes.height}`;
              }
              viewBox = viewBox.replace(/[,+]|px/g, " ").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
              const m = /^(-?\d*\.?\d+) (-?\d*\.?\d+) (\d*\.?\d+) (\d*\.?\d+)$/.exec(
                viewBox
              );
              if (m == null) {
                return;
              }
              const left = Number.parseFloat(m[1]);
              const top = Number.parseFloat(m[2]);
              const width = Number.parseFloat(m[3]);
              const height = Number.parseFloat(m[4]);
              viewBoxData = {
                left,
                top,
                right: left + width,
                bottom: top + height,
                width,
                height
              };
            }
            if (node.attributes.transform != null) {
              return visitSkip;
            }
            if (node.name === "path" && node.attributes.d != null && viewBoxData != null) {
              const pathData = parsePathData(node.attributes.d);
              let visible = false;
              for (const pathDataItem of pathData) {
                if (pathDataItem.command === "M") {
                  const [x, y] = pathDataItem.args;
                  if (x >= viewBoxData.left && x <= viewBoxData.right && y >= viewBoxData.top && y <= viewBoxData.bottom) {
                    visible = true;
                  }
                }
              }
              if (visible) {
                return;
              }
              if (pathData.length === 2) {
                pathData.push({ command: "z", args: [] });
              }
              const { left, top, width, height } = viewBoxData;
              const viewBoxPathData = [
                { command: "M", args: [left, top] },
                { command: "h", args: [width] },
                { command: "v", args: [height] },
                { command: "H", args: [left] },
                { command: "z", args: [] }
              ];
              if (intersects(viewBoxPathData, pathData) === false) {
                detachNodeFromParent(node, parentNode);
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeRasterImages.js
var require_removeRasterImages = __commonJS({
  "node_modules/svgo/plugins/removeRasterImages.js"(exports2) {
    "use strict";
    var { detachNodeFromParent } = require_xast();
    exports2.name = "removeRasterImages";
    exports2.type = "visitor";
    exports2.active = false;
    exports2.description = "removes raster images (disabled by default)";
    exports2.fn = () => {
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name === "image" && node.attributes["xlink:href"] != null && /(\.|image\/)(jpg|png|gif)/.test(node.attributes["xlink:href"])) {
              detachNodeFromParent(node, parentNode);
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeScriptElement.js
var require_removeScriptElement = __commonJS({
  "node_modules/svgo/plugins/removeScriptElement.js"(exports2) {
    "use strict";
    var { detachNodeFromParent } = require_xast();
    exports2.name = "removeScriptElement";
    exports2.type = "visitor";
    exports2.active = false;
    exports2.description = "removes <script> elements (disabled by default)";
    exports2.fn = () => {
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name === "script") {
              detachNodeFromParent(node, parentNode);
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeStyleElement.js
var require_removeStyleElement = __commonJS({
  "node_modules/svgo/plugins/removeStyleElement.js"(exports2) {
    "use strict";
    var { detachNodeFromParent } = require_xast();
    exports2.name = "removeStyleElement";
    exports2.type = "visitor";
    exports2.active = false;
    exports2.description = "removes <style> element (disabled by default)";
    exports2.fn = () => {
      return {
        element: {
          enter: (node, parentNode) => {
            if (node.name === "style") {
              detachNodeFromParent(node, parentNode);
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/removeXMLNS.js
var require_removeXMLNS = __commonJS({
  "node_modules/svgo/plugins/removeXMLNS.js"(exports2) {
    "use strict";
    exports2.name = "removeXMLNS";
    exports2.type = "perItem";
    exports2.active = false;
    exports2.description = "removes xmlns attribute (for inline svg, disabled by default)";
    exports2.fn = function(item) {
      if (item.type === "element" && item.name === "svg") {
        delete item.attributes.xmlns;
        delete item.attributes["xmlns:xlink"];
      }
    };
  }
});

// node_modules/svgo/plugins/reusePaths.js
var require_reusePaths = __commonJS({
  "node_modules/svgo/plugins/reusePaths.js"(exports2) {
    "use strict";
    var JSAPI = require_jsAPI();
    exports2.type = "visitor";
    exports2.name = "reusePaths";
    exports2.active = false;
    exports2.description = "Finds <path> elements with the same d, fill, and stroke, and converts them to <use> elements referencing a single <path> def.";
    exports2.fn = () => {
      const paths = /* @__PURE__ */ new Map();
      return {
        element: {
          enter: (node) => {
            if (node.name === "path" && node.attributes.d != null) {
              const d = node.attributes.d;
              const fill = node.attributes.fill || "";
              const stroke = node.attributes.stroke || "";
              const key = d + ";s:" + stroke + ";f:" + fill;
              let list = paths.get(key);
              if (list == null) {
                list = [];
                paths.set(key, list);
              }
              list.push(node);
            }
          },
          exit: (node, parentNode) => {
            if (node.name === "svg" && parentNode.type === "root") {
              const rawDefs = {
                type: "element",
                name: "defs",
                attributes: {},
                children: []
              };
              const defsTag = new JSAPI(rawDefs, node);
              let index = 0;
              for (const list of paths.values()) {
                if (list.length > 1) {
                  const rawPath = {
                    type: "element",
                    name: "path",
                    attributes: { ...list[0].attributes },
                    children: []
                  };
                  delete rawPath.attributes.transform;
                  let id;
                  if (rawPath.attributes.id == null) {
                    id = "reuse-" + index;
                    index += 1;
                    rawPath.attributes.id = id;
                  } else {
                    id = rawPath.attributes.id;
                    delete list[0].attributes.id;
                  }
                  const reusablePath = new JSAPI(rawPath, defsTag);
                  defsTag.children.push(reusablePath);
                  for (const pathNode of list) {
                    pathNode.name = "use";
                    pathNode.attributes["xlink:href"] = "#" + id;
                    delete pathNode.attributes.d;
                    delete pathNode.attributes.stroke;
                    delete pathNode.attributes.fill;
                  }
                }
              }
              if (defsTag.children.length !== 0) {
                if (node.attributes["xmlns:xlink"] == null) {
                  node.attributes["xmlns:xlink"] = "http://www.w3.org/1999/xlink";
                }
                node.children.unshift(defsTag);
              }
            }
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/sortAttrs.js
var require_sortAttrs = __commonJS({
  "node_modules/svgo/plugins/sortAttrs.js"(exports2) {
    "use strict";
    exports2.type = "visitor";
    exports2.name = "sortAttrs";
    exports2.active = false;
    exports2.description = "Sort element attributes for better compression";
    exports2.fn = (_root, params) => {
      const {
        order = [
          "id",
          "width",
          "height",
          "x",
          "x1",
          "x2",
          "y",
          "y1",
          "y2",
          "cx",
          "cy",
          "r",
          "fill",
          "stroke",
          "marker",
          "d",
          "points"
        ],
        xmlnsOrder = "front"
      } = params;
      const getNsPriority = (name) => {
        if (xmlnsOrder === "front") {
          if (name === "xmlns") {
            return 3;
          }
          if (name.startsWith("xmlns:")) {
            return 2;
          }
        }
        if (name.includes(":")) {
          return 1;
        }
        return 0;
      };
      const compareAttrs = ([aName], [bName]) => {
        const aPriority = getNsPriority(aName);
        const bPriority = getNsPriority(bName);
        const priorityNs = bPriority - aPriority;
        if (priorityNs !== 0) {
          return priorityNs;
        }
        const [aPart] = aName.split("-");
        const [bPart] = bName.split("-");
        if (aPart !== bPart) {
          const aInOrderFlag = order.includes(aPart) ? 1 : 0;
          const bInOrderFlag = order.includes(bPart) ? 1 : 0;
          if (aInOrderFlag === 1 && bInOrderFlag === 1) {
            return order.indexOf(aPart) - order.indexOf(bPart);
          }
          const priorityOrder = bInOrderFlag - aInOrderFlag;
          if (priorityOrder !== 0) {
            return priorityOrder;
          }
        }
        return aName < bName ? -1 : 1;
      };
      return {
        element: {
          enter: (node) => {
            const attrs = Object.entries(node.attributes);
            attrs.sort(compareAttrs);
            const sortedAttributes = {};
            for (const [name, value] of attrs) {
              sortedAttributes[name] = value;
            }
            node.attributes = sortedAttributes;
          }
        }
      };
    };
  }
});

// node_modules/svgo/plugins/plugins.js
var require_plugins2 = __commonJS({
  "node_modules/svgo/plugins/plugins.js"(exports2) {
    "use strict";
    exports2["preset-default"] = require_preset_default();
    exports2.addAttributesToSVGElement = require_addAttributesToSVGElement();
    exports2.addClassesToSVGElement = require_addClassesToSVGElement();
    exports2.cleanupAttrs = require_cleanupAttrs();
    exports2.cleanupEnableBackground = require_cleanupEnableBackground();
    exports2.cleanupIDs = require_cleanupIDs();
    exports2.cleanupListOfValues = require_cleanupListOfValues();
    exports2.cleanupNumericValues = require_cleanupNumericValues();
    exports2.collapseGroups = require_collapseGroups();
    exports2.convertColors = require_convertColors();
    exports2.convertEllipseToCircle = require_convertEllipseToCircle();
    exports2.convertPathData = require_convertPathData();
    exports2.convertShapeToPath = require_convertShapeToPath();
    exports2.convertStyleToAttrs = require_convertStyleToAttrs();
    exports2.convertTransform = require_convertTransform();
    exports2.mergeStyles = require_mergeStyles();
    exports2.inlineStyles = require_inlineStyles();
    exports2.mergePaths = require_mergePaths();
    exports2.minifyStyles = require_minifyStyles();
    exports2.moveElemsAttrsToGroup = require_moveElemsAttrsToGroup();
    exports2.moveGroupAttrsToElems = require_moveGroupAttrsToElems();
    exports2.prefixIds = require_prefixIds();
    exports2.removeAttributesBySelector = require_removeAttributesBySelector();
    exports2.removeAttrs = require_removeAttrs();
    exports2.removeComments = require_removeComments();
    exports2.removeDesc = require_removeDesc();
    exports2.removeDimensions = require_removeDimensions();
    exports2.removeDoctype = require_removeDoctype();
    exports2.removeEditorsNSData = require_removeEditorsNSData();
    exports2.removeElementsByAttr = require_removeElementsByAttr();
    exports2.removeEmptyAttrs = require_removeEmptyAttrs();
    exports2.removeEmptyContainers = require_removeEmptyContainers();
    exports2.removeEmptyText = require_removeEmptyText();
    exports2.removeHiddenElems = require_removeHiddenElems();
    exports2.removeMetadata = require_removeMetadata();
    exports2.removeNonInheritableGroupAttrs = require_removeNonInheritableGroupAttrs();
    exports2.removeOffCanvasPaths = require_removeOffCanvasPaths();
    exports2.removeRasterImages = require_removeRasterImages();
    exports2.removeScriptElement = require_removeScriptElement();
    exports2.removeStyleElement = require_removeStyleElement();
    exports2.removeTitle = require_removeTitle();
    exports2.removeUnknownsAndDefaults = require_removeUnknownsAndDefaults();
    exports2.removeUnusedNS = require_removeUnusedNS();
    exports2.removeUselessDefs = require_removeUselessDefs();
    exports2.removeUselessStrokeAndFill = require_removeUselessStrokeAndFill();
    exports2.removeViewBox = require_removeViewBox();
    exports2.removeXMLNS = require_removeXMLNS();
    exports2.removeXMLProcInst = require_removeXMLProcInst();
    exports2.reusePaths = require_reusePaths();
    exports2.sortAttrs = require_sortAttrs();
    exports2.sortDefsChildren = require_sortDefsChildren();
  }
});

// node_modules/svgo/lib/svgo/config.js
var require_config = __commonJS({
  "node_modules/svgo/lib/svgo/config.js"(exports2) {
    "use strict";
    var pluginsMap = require_plugins2();
    var pluginsOrder = [
      "removeDoctype",
      "removeXMLProcInst",
      "removeComments",
      "removeMetadata",
      "removeXMLNS",
      "removeEditorsNSData",
      "cleanupAttrs",
      "mergeStyles",
      "inlineStyles",
      "minifyStyles",
      "convertStyleToAttrs",
      "cleanupIDs",
      "prefixIds",
      "removeRasterImages",
      "removeUselessDefs",
      "cleanupNumericValues",
      "cleanupListOfValues",
      "convertColors",
      "removeUnknownsAndDefaults",
      "removeNonInheritableGroupAttrs",
      "removeUselessStrokeAndFill",
      "removeViewBox",
      "cleanupEnableBackground",
      "removeHiddenElems",
      "removeEmptyText",
      "convertShapeToPath",
      "convertEllipseToCircle",
      "moveElemsAttrsToGroup",
      "moveGroupAttrsToElems",
      "collapseGroups",
      "convertPathData",
      "convertTransform",
      "removeEmptyAttrs",
      "removeEmptyContainers",
      "mergePaths",
      "removeUnusedNS",
      "sortAttrs",
      "sortDefsChildren",
      "removeTitle",
      "removeDesc",
      "removeDimensions",
      "removeAttrs",
      "removeAttributesBySelector",
      "removeElementsByAttr",
      "addClassesToSVGElement",
      "removeStyleElement",
      "removeScriptElement",
      "addAttributesToSVGElement",
      "removeOffCanvasPaths",
      "reusePaths"
    ];
    var defaultPlugins = pluginsOrder.filter((name) => pluginsMap[name].active);
    exports2.defaultPlugins = defaultPlugins;
    var extendDefaultPlugins = (plugins) => {
      console.warn(
        `
"extendDefaultPlugins" utility is deprecated.
Use "preset-default" plugin with overrides instead.
For example:
{
  name: 'preset-default',
  params: {
    overrides: {
      // customize plugin options
      convertShapeToPath: {
        convertArcs: true
      },
      // disable plugins
      convertPathData: false
    }
  }
}
`
      );
      const extendedPlugins = pluginsOrder.map((name) => ({
        name,
        active: pluginsMap[name].active
      }));
      for (const plugin of plugins) {
        const resolvedPlugin = resolvePluginConfig(plugin);
        const index = pluginsOrder.indexOf(resolvedPlugin.name);
        if (index === -1) {
          extendedPlugins.push(plugin);
        } else {
          extendedPlugins[index] = plugin;
        }
      }
      return extendedPlugins;
    };
    exports2.extendDefaultPlugins = extendDefaultPlugins;
    var resolvePluginConfig = (plugin) => {
      let configParams = {};
      if (typeof plugin === "string") {
        const pluginConfig = pluginsMap[plugin];
        if (pluginConfig == null) {
          throw Error(`Unknown builtin plugin "${plugin}" specified.`);
        }
        return {
          ...pluginConfig,
          name: plugin,
          active: true,
          params: { ...pluginConfig.params, ...configParams }
        };
      }
      if (typeof plugin === "object" && plugin != null) {
        if (plugin.name == null) {
          throw Error(`Plugin name should be specified`);
        }
        if (plugin.fn) {
          return {
            active: true,
            ...plugin,
            params: { ...configParams, ...plugin.params }
          };
        } else {
          const pluginConfig = pluginsMap[plugin.name];
          if (pluginConfig == null) {
            throw Error(`Unknown builtin plugin "${plugin.name}" specified.`);
          }
          return {
            ...pluginConfig,
            active: true,
            ...plugin,
            params: { ...pluginConfig.params, ...configParams, ...plugin.params }
          };
        }
      }
      return null;
    };
    exports2.resolvePluginConfig = resolvePluginConfig;
  }
});

// node_modules/@trysound/sax/lib/sax.js
var require_sax = __commonJS({
  "node_modules/@trysound/sax/lib/sax.js"(exports2) {
    (function(sax) {
      sax.parser = function(strict, opt) {
        return new SAXParser(strict, opt);
      };
      sax.SAXParser = SAXParser;
      sax.MAX_BUFFER_LENGTH = 64 * 1024;
      var buffers = [
        "comment",
        "sgmlDecl",
        "textNode",
        "tagName",
        "doctype",
        "procInstName",
        "procInstBody",
        "entity",
        "attribName",
        "attribValue",
        "cdata",
        "script"
      ];
      sax.EVENTS = [
        "text",
        "processinginstruction",
        "sgmldeclaration",
        "doctype",
        "comment",
        "opentagstart",
        "attribute",
        "opentag",
        "closetag",
        "opencdata",
        "cdata",
        "closecdata",
        "error",
        "end",
        "ready",
        "script",
        "opennamespace",
        "closenamespace"
      ];
      function SAXParser(strict, opt) {
        if (!(this instanceof SAXParser)) {
          return new SAXParser(strict, opt);
        }
        var parser = this;
        clearBuffers(parser);
        parser.q = parser.c = "";
        parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
        parser.opt = opt || {};
        parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
        parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase";
        parser.tags = [];
        parser.closed = parser.closedRoot = parser.sawRoot = false;
        parser.tag = parser.error = null;
        parser.strict = !!strict;
        parser.noscript = !!(strict || parser.opt.noscript);
        parser.state = S.BEGIN;
        parser.strictEntities = parser.opt.strictEntities;
        parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
        parser.attribList = [];
        if (parser.opt.xmlns) {
          parser.ns = Object.create(rootNS);
        }
        parser.trackPosition = parser.opt.position !== false;
        if (parser.trackPosition) {
          parser.position = parser.line = parser.column = 0;
        }
        emit(parser, "onready");
      }
      if (!Object.create) {
        Object.create = function(o) {
          function F() {
          }
          F.prototype = o;
          var newf = new F();
          return newf;
        };
      }
      if (!Object.keys) {
        Object.keys = function(o) {
          var a = [];
          for (var i in o)
            if (o.hasOwnProperty(i))
              a.push(i);
          return a;
        };
      }
      function checkBufferLength(parser) {
        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
        var maxActual = 0;
        for (var i = 0, l = buffers.length; i < l; i++) {
          var len = parser[buffers[i]].length;
          if (len > maxAllowed) {
            switch (buffers[i]) {
              case "textNode":
                closeText(parser);
                break;
              case "cdata":
                emitNode(parser, "oncdata", parser.cdata);
                parser.cdata = "";
                break;
              case "script":
                emitNode(parser, "onscript", parser.script);
                parser.script = "";
                break;
              default:
                error(parser, "Max buffer length exceeded: " + buffers[i]);
            }
          }
          maxActual = Math.max(maxActual, len);
        }
        var m = sax.MAX_BUFFER_LENGTH - maxActual;
        parser.bufferCheckPosition = m + parser.position;
      }
      function clearBuffers(parser) {
        for (var i = 0, l = buffers.length; i < l; i++) {
          parser[buffers[i]] = "";
        }
      }
      function flushBuffers(parser) {
        closeText(parser);
        if (parser.cdata !== "") {
          emitNode(parser, "oncdata", parser.cdata);
          parser.cdata = "";
        }
        if (parser.script !== "") {
          emitNode(parser, "onscript", parser.script);
          parser.script = "";
        }
      }
      SAXParser.prototype = {
        end: function() {
          end(this);
        },
        write,
        resume: function() {
          this.error = null;
          return this;
        },
        close: function() {
          return this.write(null);
        },
        flush: function() {
          flushBuffers(this);
        }
      };
      var CDATA = "[CDATA[";
      var DOCTYPE = "DOCTYPE";
      var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
      var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
      var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };
      var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
      var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
      var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
      var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
      function isWhitespace(c) {
        return c === " " || c === "\n" || c === "\r" || c === "	";
      }
      function isQuote(c) {
        return c === '"' || c === "'";
      }
      function isAttribEnd(c) {
        return c === ">" || isWhitespace(c);
      }
      function isMatch(regex, c) {
        return regex.test(c);
      }
      function notMatch(regex, c) {
        return !isMatch(regex, c);
      }
      var S = 0;
      sax.STATE = {
        BEGIN: S++,
        // leading byte order mark or whitespace
        BEGIN_WHITESPACE: S++,
        // leading whitespace
        TEXT: S++,
        // general stuff
        TEXT_ENTITY: S++,
        // &amp and such.
        OPEN_WAKA: S++,
        // <
        SGML_DECL: S++,
        // <!BLARG
        SGML_DECL_QUOTED: S++,
        // <!BLARG foo "bar
        DOCTYPE: S++,
        // <!DOCTYPE
        DOCTYPE_QUOTED: S++,
        // <!DOCTYPE "//blah
        DOCTYPE_DTD: S++,
        // <!DOCTYPE "//blah" [ ...
        DOCTYPE_DTD_QUOTED: S++,
        // <!DOCTYPE "//blah" [ "foo
        COMMENT_STARTING: S++,
        // <!-
        COMMENT: S++,
        // <!--
        COMMENT_ENDING: S++,
        // <!-- blah -
        COMMENT_ENDED: S++,
        // <!-- blah --
        CDATA: S++,
        // <![CDATA[ something
        CDATA_ENDING: S++,
        // ]
        CDATA_ENDING_2: S++,
        // ]]
        PROC_INST: S++,
        // <?hi
        PROC_INST_BODY: S++,
        // <?hi there
        PROC_INST_ENDING: S++,
        // <?hi "there" ?
        OPEN_TAG: S++,
        // <strong
        OPEN_TAG_SLASH: S++,
        // <strong /
        ATTRIB: S++,
        // <a
        ATTRIB_NAME: S++,
        // <a foo
        ATTRIB_NAME_SAW_WHITE: S++,
        // <a foo _
        ATTRIB_VALUE: S++,
        // <a foo=
        ATTRIB_VALUE_QUOTED: S++,
        // <a foo="bar
        ATTRIB_VALUE_CLOSED: S++,
        // <a foo="bar"
        ATTRIB_VALUE_UNQUOTED: S++,
        // <a foo=bar
        ATTRIB_VALUE_ENTITY_Q: S++,
        // <foo bar="&quot;"
        ATTRIB_VALUE_ENTITY_U: S++,
        // <foo bar=&quot
        CLOSE_TAG: S++,
        // </a
        CLOSE_TAG_SAW_WHITE: S++,
        // </a   >
        SCRIPT: S++,
        // <script> ...
        SCRIPT_ENDING: S++
        // <script> ... <
      };
      sax.XML_ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'"
      };
      sax.ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'",
        "AElig": 198,
        "Aacute": 193,
        "Acirc": 194,
        "Agrave": 192,
        "Aring": 197,
        "Atilde": 195,
        "Auml": 196,
        "Ccedil": 199,
        "ETH": 208,
        "Eacute": 201,
        "Ecirc": 202,
        "Egrave": 200,
        "Euml": 203,
        "Iacute": 205,
        "Icirc": 206,
        "Igrave": 204,
        "Iuml": 207,
        "Ntilde": 209,
        "Oacute": 211,
        "Ocirc": 212,
        "Ograve": 210,
        "Oslash": 216,
        "Otilde": 213,
        "Ouml": 214,
        "THORN": 222,
        "Uacute": 218,
        "Ucirc": 219,
        "Ugrave": 217,
        "Uuml": 220,
        "Yacute": 221,
        "aacute": 225,
        "acirc": 226,
        "aelig": 230,
        "agrave": 224,
        "aring": 229,
        "atilde": 227,
        "auml": 228,
        "ccedil": 231,
        "eacute": 233,
        "ecirc": 234,
        "egrave": 232,
        "eth": 240,
        "euml": 235,
        "iacute": 237,
        "icirc": 238,
        "igrave": 236,
        "iuml": 239,
        "ntilde": 241,
        "oacute": 243,
        "ocirc": 244,
        "ograve": 242,
        "oslash": 248,
        "otilde": 245,
        "ouml": 246,
        "szlig": 223,
        "thorn": 254,
        "uacute": 250,
        "ucirc": 251,
        "ugrave": 249,
        "uuml": 252,
        "yacute": 253,
        "yuml": 255,
        "copy": 169,
        "reg": 174,
        "nbsp": 160,
        "iexcl": 161,
        "cent": 162,
        "pound": 163,
        "curren": 164,
        "yen": 165,
        "brvbar": 166,
        "sect": 167,
        "uml": 168,
        "ordf": 170,
        "laquo": 171,
        "not": 172,
        "shy": 173,
        "macr": 175,
        "deg": 176,
        "plusmn": 177,
        "sup1": 185,
        "sup2": 178,
        "sup3": 179,
        "acute": 180,
        "micro": 181,
        "para": 182,
        "middot": 183,
        "cedil": 184,
        "ordm": 186,
        "raquo": 187,
        "frac14": 188,
        "frac12": 189,
        "frac34": 190,
        "iquest": 191,
        "times": 215,
        "divide": 247,
        "OElig": 338,
        "oelig": 339,
        "Scaron": 352,
        "scaron": 353,
        "Yuml": 376,
        "fnof": 402,
        "circ": 710,
        "tilde": 732,
        "Alpha": 913,
        "Beta": 914,
        "Gamma": 915,
        "Delta": 916,
        "Epsilon": 917,
        "Zeta": 918,
        "Eta": 919,
        "Theta": 920,
        "Iota": 921,
        "Kappa": 922,
        "Lambda": 923,
        "Mu": 924,
        "Nu": 925,
        "Xi": 926,
        "Omicron": 927,
        "Pi": 928,
        "Rho": 929,
        "Sigma": 931,
        "Tau": 932,
        "Upsilon": 933,
        "Phi": 934,
        "Chi": 935,
        "Psi": 936,
        "Omega": 937,
        "alpha": 945,
        "beta": 946,
        "gamma": 947,
        "delta": 948,
        "epsilon": 949,
        "zeta": 950,
        "eta": 951,
        "theta": 952,
        "iota": 953,
        "kappa": 954,
        "lambda": 955,
        "mu": 956,
        "nu": 957,
        "xi": 958,
        "omicron": 959,
        "pi": 960,
        "rho": 961,
        "sigmaf": 962,
        "sigma": 963,
        "tau": 964,
        "upsilon": 965,
        "phi": 966,
        "chi": 967,
        "psi": 968,
        "omega": 969,
        "thetasym": 977,
        "upsih": 978,
        "piv": 982,
        "ensp": 8194,
        "emsp": 8195,
        "thinsp": 8201,
        "zwnj": 8204,
        "zwj": 8205,
        "lrm": 8206,
        "rlm": 8207,
        "ndash": 8211,
        "mdash": 8212,
        "lsquo": 8216,
        "rsquo": 8217,
        "sbquo": 8218,
        "ldquo": 8220,
        "rdquo": 8221,
        "bdquo": 8222,
        "dagger": 8224,
        "Dagger": 8225,
        "bull": 8226,
        "hellip": 8230,
        "permil": 8240,
        "prime": 8242,
        "Prime": 8243,
        "lsaquo": 8249,
        "rsaquo": 8250,
        "oline": 8254,
        "frasl": 8260,
        "euro": 8364,
        "image": 8465,
        "weierp": 8472,
        "real": 8476,
        "trade": 8482,
        "alefsym": 8501,
        "larr": 8592,
        "uarr": 8593,
        "rarr": 8594,
        "darr": 8595,
        "harr": 8596,
        "crarr": 8629,
        "lArr": 8656,
        "uArr": 8657,
        "rArr": 8658,
        "dArr": 8659,
        "hArr": 8660,
        "forall": 8704,
        "part": 8706,
        "exist": 8707,
        "empty": 8709,
        "nabla": 8711,
        "isin": 8712,
        "notin": 8713,
        "ni": 8715,
        "prod": 8719,
        "sum": 8721,
        "minus": 8722,
        "lowast": 8727,
        "radic": 8730,
        "prop": 8733,
        "infin": 8734,
        "ang": 8736,
        "and": 8743,
        "or": 8744,
        "cap": 8745,
        "cup": 8746,
        "int": 8747,
        "there4": 8756,
        "sim": 8764,
        "cong": 8773,
        "asymp": 8776,
        "ne": 8800,
        "equiv": 8801,
        "le": 8804,
        "ge": 8805,
        "sub": 8834,
        "sup": 8835,
        "nsub": 8836,
        "sube": 8838,
        "supe": 8839,
        "oplus": 8853,
        "otimes": 8855,
        "perp": 8869,
        "sdot": 8901,
        "lceil": 8968,
        "rceil": 8969,
        "lfloor": 8970,
        "rfloor": 8971,
        "lang": 9001,
        "rang": 9002,
        "loz": 9674,
        "spades": 9824,
        "clubs": 9827,
        "hearts": 9829,
        "diams": 9830
      };
      Object.keys(sax.ENTITIES).forEach(function(key) {
        var e = sax.ENTITIES[key];
        var s2 = typeof e === "number" ? String.fromCharCode(e) : e;
        sax.ENTITIES[key] = s2;
      });
      for (var s in sax.STATE) {
        sax.STATE[sax.STATE[s]] = s;
      }
      S = sax.STATE;
      function emit(parser, event, data) {
        parser[event] && parser[event](data);
      }
      function emitNode(parser, nodeType, data) {
        if (parser.textNode)
          closeText(parser);
        emit(parser, nodeType, data);
      }
      function closeText(parser) {
        parser.textNode = textopts(parser.opt, parser.textNode);
        if (parser.textNode)
          emit(parser, "ontext", parser.textNode);
        parser.textNode = "";
      }
      function textopts(opt, text) {
        if (opt.trim)
          text = text.trim();
        if (opt.normalize)
          text = text.replace(/\s+/g, " ");
        return text;
      }
      function error(parser, reason) {
        closeText(parser);
        const message = reason + "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c;
        const error2 = new Error(message);
        error2.reason = reason;
        error2.line = parser.line;
        error2.column = parser.column;
        parser.error = error2;
        emit(parser, "onerror", error2);
        return parser;
      }
      function end(parser) {
        if (parser.sawRoot && !parser.closedRoot)
          strictFail(parser, "Unclosed root tag");
        if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {
          error(parser, "Unexpected end");
        }
        closeText(parser);
        parser.c = "";
        parser.closed = true;
        emit(parser, "onend");
        SAXParser.call(parser, parser.strict, parser.opt);
        return parser;
      }
      function strictFail(parser, message) {
        if (typeof parser !== "object" || !(parser instanceof SAXParser)) {
          throw new Error("bad call to strictFail");
        }
        if (parser.strict) {
          error(parser, message);
        }
      }
      function newTag(parser) {
        if (!parser.strict)
          parser.tagName = parser.tagName[parser.looseCase]();
        var parent = parser.tags[parser.tags.length - 1] || parser;
        var tag = parser.tag = { name: parser.tagName, attributes: {} };
        if (parser.opt.xmlns) {
          tag.ns = parent.ns;
        }
        parser.attribList.length = 0;
        emitNode(parser, "onopentagstart", tag);
      }
      function qname(name, attribute) {
        var i = name.indexOf(":");
        var qualName = i < 0 ? ["", name] : name.split(":");
        var prefix = qualName[0];
        var local = qualName[1];
        if (attribute && name === "xmlns") {
          prefix = "xmlns";
          local = "";
        }
        return { prefix, local };
      }
      function attrib(parser) {
        if (!parser.strict) {
          parser.attribName = parser.attribName[parser.looseCase]();
        }
        if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
          parser.attribName = parser.attribValue = "";
          return;
        }
        if (parser.opt.xmlns) {
          var qn = qname(parser.attribName, true);
          var prefix = qn.prefix;
          var local = qn.local;
          if (prefix === "xmlns") {
            if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
              strictFail(
                parser,
                "xml: prefix must be bound to " + XML_NAMESPACE + "\nActual: " + parser.attribValue
              );
            } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
              strictFail(
                parser,
                "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\nActual: " + parser.attribValue
              );
            } else {
              var tag = parser.tag;
              var parent = parser.tags[parser.tags.length - 1] || parser;
              if (tag.ns === parent.ns) {
                tag.ns = Object.create(parent.ns);
              }
              tag.ns[local] = parser.attribValue;
            }
          }
          parser.attribList.push([parser.attribName, parser.attribValue]);
        } else {
          parser.tag.attributes[parser.attribName] = parser.attribValue;
          emitNode(parser, "onattribute", {
            name: parser.attribName,
            value: parser.attribValue
          });
        }
        parser.attribName = parser.attribValue = "";
      }
      function openTag(parser, selfClosing) {
        if (parser.opt.xmlns) {
          var tag = parser.tag;
          var qn = qname(parser.tagName);
          tag.prefix = qn.prefix;
          tag.local = qn.local;
          tag.uri = tag.ns[qn.prefix] || "";
          if (tag.prefix && !tag.uri) {
            strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(parser.tagName));
            tag.uri = qn.prefix;
          }
          var parent = parser.tags[parser.tags.length - 1] || parser;
          if (tag.ns && parent.ns !== tag.ns) {
            Object.keys(tag.ns).forEach(function(p) {
              emitNode(parser, "onopennamespace", {
                prefix: p,
                uri: tag.ns[p]
              });
            });
          }
          for (var i = 0, l = parser.attribList.length; i < l; i++) {
            var nv = parser.attribList[i];
            var name = nv[0];
            var value = nv[1];
            var qualName = qname(name, true);
            var prefix = qualName.prefix;
            var local = qualName.local;
            var uri = prefix === "" ? "" : tag.ns[prefix] || "";
            var a = {
              name,
              value,
              prefix,
              local,
              uri
            };
            if (prefix && prefix !== "xmlns" && !uri) {
              strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(prefix));
              a.uri = prefix;
            }
            parser.tag.attributes[name] = a;
            emitNode(parser, "onattribute", a);
          }
          parser.attribList.length = 0;
        }
        parser.tag.isSelfClosing = !!selfClosing;
        parser.sawRoot = true;
        parser.tags.push(parser.tag);
        emitNode(parser, "onopentag", parser.tag);
        if (!selfClosing) {
          if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
            parser.state = S.SCRIPT;
          } else {
            parser.state = S.TEXT;
          }
          parser.tag = null;
          parser.tagName = "";
        }
        parser.attribName = parser.attribValue = "";
        parser.attribList.length = 0;
      }
      function closeTag(parser) {
        if (!parser.tagName) {
          strictFail(parser, "Weird empty close tag.");
          parser.textNode += "</>";
          parser.state = S.TEXT;
          return;
        }
        if (parser.script) {
          if (parser.tagName !== "script") {
            parser.script += "</" + parser.tagName + ">";
            parser.tagName = "";
            parser.state = S.SCRIPT;
            return;
          }
          emitNode(parser, "onscript", parser.script);
          parser.script = "";
        }
        var t = parser.tags.length;
        var tagName = parser.tagName;
        if (!parser.strict) {
          tagName = tagName[parser.looseCase]();
        }
        var closeTo = tagName;
        while (t--) {
          var close = parser.tags[t];
          if (close.name !== closeTo) {
            strictFail(parser, "Unexpected close tag");
          } else {
            break;
          }
        }
        if (t < 0) {
          strictFail(parser, "Unmatched closing tag: " + parser.tagName);
          parser.textNode += "</" + parser.tagName + ">";
          parser.state = S.TEXT;
          return;
        }
        parser.tagName = tagName;
        var s2 = parser.tags.length;
        while (s2-- > t) {
          var tag = parser.tag = parser.tags.pop();
          parser.tagName = parser.tag.name;
          emitNode(parser, "onclosetag", parser.tagName);
          var x = {};
          for (var i in tag.ns) {
            x[i] = tag.ns[i];
          }
          var parent = parser.tags[parser.tags.length - 1] || parser;
          if (parser.opt.xmlns && tag.ns !== parent.ns) {
            Object.keys(tag.ns).forEach(function(p) {
              var n = tag.ns[p];
              emitNode(parser, "onclosenamespace", { prefix: p, uri: n });
            });
          }
        }
        if (t === 0)
          parser.closedRoot = true;
        parser.tagName = parser.attribValue = parser.attribName = "";
        parser.attribList.length = 0;
        parser.state = S.TEXT;
      }
      function parseEntity(parser) {
        var entity = parser.entity;
        var entityLC = entity.toLowerCase();
        var num;
        var numStr = "";
        if (parser.ENTITIES[entity]) {
          return parser.ENTITIES[entity];
        }
        if (parser.ENTITIES[entityLC]) {
          return parser.ENTITIES[entityLC];
        }
        entity = entityLC;
        if (entity.charAt(0) === "#") {
          if (entity.charAt(1) === "x") {
            entity = entity.slice(2);
            num = parseInt(entity, 16);
            numStr = num.toString(16);
          } else {
            entity = entity.slice(1);
            num = parseInt(entity, 10);
            numStr = num.toString(10);
          }
        }
        entity = entity.replace(/^0+/, "");
        if (isNaN(num) || numStr.toLowerCase() !== entity) {
          strictFail(parser, "Invalid character entity");
          return "&" + parser.entity + ";";
        }
        return String.fromCodePoint(num);
      }
      function beginWhiteSpace(parser, c) {
        if (c === "<") {
          parser.state = S.OPEN_WAKA;
          parser.startTagPosition = parser.position;
        } else if (!isWhitespace(c)) {
          strictFail(parser, "Non-whitespace before first tag.");
          parser.textNode = c;
          parser.state = S.TEXT;
        }
      }
      function charAt(chunk, i) {
        var result = "";
        if (i < chunk.length) {
          result = chunk.charAt(i);
        }
        return result;
      }
      function write(chunk) {
        var parser = this;
        if (this.error) {
          throw this.error;
        }
        if (parser.closed) {
          return error(
            parser,
            "Cannot write after close. Assign an onready handler."
          );
        }
        if (chunk === null) {
          return end(parser);
        }
        if (typeof chunk === "object") {
          chunk = chunk.toString();
        }
        var i = 0;
        var c = "";
        while (true) {
          c = charAt(chunk, i++);
          parser.c = c;
          if (!c) {
            break;
          }
          if (parser.trackPosition) {
            parser.position++;
            if (c === "\n") {
              parser.line++;
              parser.column = 0;
            } else {
              parser.column++;
            }
          }
          switch (parser.state) {
            case S.BEGIN:
              parser.state = S.BEGIN_WHITESPACE;
              if (c === "\uFEFF") {
                continue;
              }
              beginWhiteSpace(parser, c);
              continue;
            case S.BEGIN_WHITESPACE:
              beginWhiteSpace(parser, c);
              continue;
            case S.TEXT:
              if (parser.sawRoot && !parser.closedRoot) {
                var starti = i - 1;
                while (c && c !== "<" && c !== "&") {
                  c = charAt(chunk, i++);
                  if (c && parser.trackPosition) {
                    parser.position++;
                    if (c === "\n") {
                      parser.line++;
                      parser.column = 0;
                    } else {
                      parser.column++;
                    }
                  }
                }
                parser.textNode += chunk.substring(starti, i - 1);
              }
              if (c === "<" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                parser.state = S.OPEN_WAKA;
                parser.startTagPosition = parser.position;
              } else {
                if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {
                  strictFail(parser, "Text data outside of root node.");
                }
                if (c === "&") {
                  parser.state = S.TEXT_ENTITY;
                } else {
                  parser.textNode += c;
                }
              }
              continue;
            case S.SCRIPT:
              if (c === "<") {
                parser.state = S.SCRIPT_ENDING;
              } else {
                parser.script += c;
              }
              continue;
            case S.SCRIPT_ENDING:
              if (c === "/") {
                parser.state = S.CLOSE_TAG;
              } else {
                parser.script += "<" + c;
                parser.state = S.SCRIPT;
              }
              continue;
            case S.OPEN_WAKA:
              if (c === "!") {
                parser.state = S.SGML_DECL;
                parser.sgmlDecl = "";
              } else if (isWhitespace(c)) {
              } else if (isMatch(nameStart, c)) {
                parser.state = S.OPEN_TAG;
                parser.tagName = c;
              } else if (c === "/") {
                parser.state = S.CLOSE_TAG;
                parser.tagName = "";
              } else if (c === "?") {
                parser.state = S.PROC_INST;
                parser.procInstName = parser.procInstBody = "";
              } else {
                strictFail(parser, "Unencoded <");
                if (parser.startTagPosition + 1 < parser.position) {
                  var pad = parser.position - parser.startTagPosition;
                  c = new Array(pad).join(" ") + c;
                }
                parser.textNode += "<" + c;
                parser.state = S.TEXT;
              }
              continue;
            case S.SGML_DECL:
              if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
                emitNode(parser, "onopencdata");
                parser.state = S.CDATA;
                parser.sgmlDecl = "";
                parser.cdata = "";
              } else if (parser.sgmlDecl + c === "--") {
                parser.state = S.COMMENT;
                parser.comment = "";
                parser.sgmlDecl = "";
              } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
                parser.state = S.DOCTYPE;
                if (parser.doctype || parser.sawRoot) {
                  strictFail(
                    parser,
                    "Inappropriately located doctype declaration"
                  );
                }
                parser.doctype = "";
                parser.sgmlDecl = "";
              } else if (c === ">") {
                emitNode(parser, "onsgmldeclaration", parser.sgmlDecl);
                parser.sgmlDecl = "";
                parser.state = S.TEXT;
              } else if (isQuote(c)) {
                parser.state = S.SGML_DECL_QUOTED;
                parser.sgmlDecl += c;
              } else {
                parser.sgmlDecl += c;
              }
              continue;
            case S.SGML_DECL_QUOTED:
              if (c === parser.q) {
                parser.state = S.SGML_DECL;
                parser.q = "";
              }
              parser.sgmlDecl += c;
              continue;
            case S.DOCTYPE:
              if (c === ">") {
                parser.state = S.TEXT;
                emitNode(parser, "ondoctype", parser.doctype);
                parser.doctype = true;
              } else {
                parser.doctype += c;
                if (c === "[") {
                  parser.state = S.DOCTYPE_DTD;
                } else if (isQuote(c)) {
                  parser.state = S.DOCTYPE_QUOTED;
                  parser.q = c;
                }
              }
              continue;
            case S.DOCTYPE_QUOTED:
              parser.doctype += c;
              if (c === parser.q) {
                parser.q = "";
                parser.state = S.DOCTYPE;
              }
              continue;
            case S.DOCTYPE_DTD:
              parser.doctype += c;
              if (c === "]") {
                parser.state = S.DOCTYPE;
              } else if (isQuote(c)) {
                parser.state = S.DOCTYPE_DTD_QUOTED;
                parser.q = c;
              }
              continue;
            case S.DOCTYPE_DTD_QUOTED:
              parser.doctype += c;
              if (c === parser.q) {
                parser.state = S.DOCTYPE_DTD;
                parser.q = "";
              }
              continue;
            case S.COMMENT:
              if (c === "-") {
                parser.state = S.COMMENT_ENDING;
              } else {
                parser.comment += c;
              }
              continue;
            case S.COMMENT_ENDING:
              if (c === "-") {
                parser.state = S.COMMENT_ENDED;
                parser.comment = textopts(parser.opt, parser.comment);
                if (parser.comment) {
                  emitNode(parser, "oncomment", parser.comment);
                }
                parser.comment = "";
              } else {
                parser.comment += "-" + c;
                parser.state = S.COMMENT;
              }
              continue;
            case S.COMMENT_ENDED:
              if (c !== ">") {
                strictFail(parser, "Malformed comment");
                parser.comment += "--" + c;
                parser.state = S.COMMENT;
              } else {
                parser.state = S.TEXT;
              }
              continue;
            case S.CDATA:
              if (c === "]") {
                parser.state = S.CDATA_ENDING;
              } else {
                parser.cdata += c;
              }
              continue;
            case S.CDATA_ENDING:
              if (c === "]") {
                parser.state = S.CDATA_ENDING_2;
              } else {
                parser.cdata += "]" + c;
                parser.state = S.CDATA;
              }
              continue;
            case S.CDATA_ENDING_2:
              if (c === ">") {
                if (parser.cdata) {
                  emitNode(parser, "oncdata", parser.cdata);
                }
                emitNode(parser, "onclosecdata");
                parser.cdata = "";
                parser.state = S.TEXT;
              } else if (c === "]") {
                parser.cdata += "]";
              } else {
                parser.cdata += "]]" + c;
                parser.state = S.CDATA;
              }
              continue;
            case S.PROC_INST:
              if (c === "?") {
                parser.state = S.PROC_INST_ENDING;
              } else if (isWhitespace(c)) {
                parser.state = S.PROC_INST_BODY;
              } else {
                parser.procInstName += c;
              }
              continue;
            case S.PROC_INST_BODY:
              if (!parser.procInstBody && isWhitespace(c)) {
                continue;
              } else if (c === "?") {
                parser.state = S.PROC_INST_ENDING;
              } else {
                parser.procInstBody += c;
              }
              continue;
            case S.PROC_INST_ENDING:
              if (c === ">") {
                emitNode(parser, "onprocessinginstruction", {
                  name: parser.procInstName,
                  body: parser.procInstBody
                });
                parser.procInstName = parser.procInstBody = "";
                parser.state = S.TEXT;
              } else {
                parser.procInstBody += "?" + c;
                parser.state = S.PROC_INST_BODY;
              }
              continue;
            case S.OPEN_TAG:
              if (isMatch(nameBody, c)) {
                parser.tagName += c;
              } else {
                newTag(parser);
                if (c === ">") {
                  openTag(parser);
                } else if (c === "/") {
                  parser.state = S.OPEN_TAG_SLASH;
                } else {
                  if (!isWhitespace(c)) {
                    strictFail(parser, "Invalid character in tag name");
                  }
                  parser.state = S.ATTRIB;
                }
              }
              continue;
            case S.OPEN_TAG_SLASH:
              if (c === ">") {
                openTag(parser, true);
                closeTag(parser);
              } else {
                strictFail(parser, "Forward-slash in opening tag not followed by >");
                parser.state = S.ATTRIB;
              }
              continue;
            case S.ATTRIB:
              if (isWhitespace(c)) {
                continue;
              } else if (c === ">") {
                openTag(parser);
              } else if (c === "/") {
                parser.state = S.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c)) {
                parser.attribName = c;
                parser.attribValue = "";
                parser.state = S.ATTRIB_NAME;
              } else {
                strictFail(parser, "Invalid attribute name");
              }
              continue;
            case S.ATTRIB_NAME:
              if (c === "=") {
                parser.state = S.ATTRIB_VALUE;
              } else if (c === ">") {
                strictFail(parser, "Attribute without value");
                parser.attribValue = parser.attribName;
                attrib(parser);
                openTag(parser);
              } else if (isWhitespace(c)) {
                parser.state = S.ATTRIB_NAME_SAW_WHITE;
              } else if (isMatch(nameBody, c)) {
                parser.attribName += c;
              } else {
                strictFail(parser, "Invalid attribute name");
              }
              continue;
            case S.ATTRIB_NAME_SAW_WHITE:
              if (c === "=") {
                parser.state = S.ATTRIB_VALUE;
              } else if (isWhitespace(c)) {
                continue;
              } else {
                strictFail(parser, "Attribute without value");
                parser.tag.attributes[parser.attribName] = "";
                parser.attribValue = "";
                emitNode(parser, "onattribute", {
                  name: parser.attribName,
                  value: ""
                });
                parser.attribName = "";
                if (c === ">") {
                  openTag(parser);
                } else if (isMatch(nameStart, c)) {
                  parser.attribName = c;
                  parser.state = S.ATTRIB_NAME;
                } else {
                  strictFail(parser, "Invalid attribute name");
                  parser.state = S.ATTRIB;
                }
              }
              continue;
            case S.ATTRIB_VALUE:
              if (isWhitespace(c)) {
                continue;
              } else if (isQuote(c)) {
                parser.q = c;
                parser.state = S.ATTRIB_VALUE_QUOTED;
              } else {
                strictFail(parser, "Unquoted attribute value");
                parser.state = S.ATTRIB_VALUE_UNQUOTED;
                parser.attribValue = c;
              }
              continue;
            case S.ATTRIB_VALUE_QUOTED:
              if (c !== parser.q) {
                if (c === "&") {
                  parser.state = S.ATTRIB_VALUE_ENTITY_Q;
                } else {
                  parser.attribValue += c;
                }
                continue;
              }
              attrib(parser);
              parser.q = "";
              parser.state = S.ATTRIB_VALUE_CLOSED;
              continue;
            case S.ATTRIB_VALUE_CLOSED:
              if (isWhitespace(c)) {
                parser.state = S.ATTRIB;
              } else if (c === ">") {
                openTag(parser);
              } else if (c === "/") {
                parser.state = S.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c)) {
                strictFail(parser, "No whitespace between attributes");
                parser.attribName = c;
                parser.attribValue = "";
                parser.state = S.ATTRIB_NAME;
              } else {
                strictFail(parser, "Invalid attribute name");
              }
              continue;
            case S.ATTRIB_VALUE_UNQUOTED:
              if (!isAttribEnd(c)) {
                if (c === "&") {
                  parser.state = S.ATTRIB_VALUE_ENTITY_U;
                } else {
                  parser.attribValue += c;
                }
                continue;
              }
              attrib(parser);
              if (c === ">") {
                openTag(parser);
              } else {
                parser.state = S.ATTRIB;
              }
              continue;
            case S.CLOSE_TAG:
              if (!parser.tagName) {
                if (isWhitespace(c)) {
                  continue;
                } else if (notMatch(nameStart, c)) {
                  if (parser.script) {
                    parser.script += "</" + c;
                    parser.state = S.SCRIPT;
                  } else {
                    strictFail(parser, "Invalid tagname in closing tag.");
                  }
                } else {
                  parser.tagName = c;
                }
              } else if (c === ">") {
                closeTag(parser);
              } else if (isMatch(nameBody, c)) {
                parser.tagName += c;
              } else if (parser.script) {
                parser.script += "</" + parser.tagName;
                parser.tagName = "";
                parser.state = S.SCRIPT;
              } else {
                if (!isWhitespace(c)) {
                  strictFail(parser, "Invalid tagname in closing tag");
                }
                parser.state = S.CLOSE_TAG_SAW_WHITE;
              }
              continue;
            case S.CLOSE_TAG_SAW_WHITE:
              if (isWhitespace(c)) {
                continue;
              }
              if (c === ">") {
                closeTag(parser);
              } else {
                strictFail(parser, "Invalid characters in closing tag");
              }
              continue;
            case S.TEXT_ENTITY:
            case S.ATTRIB_VALUE_ENTITY_Q:
            case S.ATTRIB_VALUE_ENTITY_U:
              var returnState;
              var buffer;
              switch (parser.state) {
                case S.TEXT_ENTITY:
                  returnState = S.TEXT;
                  buffer = "textNode";
                  break;
                case S.ATTRIB_VALUE_ENTITY_Q:
                  returnState = S.ATTRIB_VALUE_QUOTED;
                  buffer = "attribValue";
                  break;
                case S.ATTRIB_VALUE_ENTITY_U:
                  returnState = S.ATTRIB_VALUE_UNQUOTED;
                  buffer = "attribValue";
                  break;
              }
              if (c === ";") {
                var parsedEntity = parseEntity(parser);
                if (parser.state === S.TEXT_ENTITY && !sax.ENTITIES[parser.entity] && parsedEntity !== "&" + parser.entity + ";") {
                  chunk = chunk.slice(0, i) + parsedEntity + chunk.slice(i);
                } else {
                  parser[buffer] += parsedEntity;
                }
                parser.entity = "";
                parser.state = returnState;
              } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {
                parser.entity += c;
              } else {
                strictFail(parser, "Invalid character in entity name");
                parser[buffer] += "&" + parser.entity + c;
                parser.entity = "";
                parser.state = returnState;
              }
              continue;
            default:
              throw new Error(parser, "Unknown state: " + parser.state);
          }
        }
        if (parser.position >= parser.bufferCheckPosition) {
          checkBufferLength(parser);
        }
        return parser;
      }
    })(typeof exports2 === "undefined" ? exports2.sax = {} : exports2);
  }
});

// node_modules/svgo/lib/parser.js
var require_parser2 = __commonJS({
  "node_modules/svgo/lib/parser.js"(exports2) {
    "use strict";
    var SAX = require_sax();
    var JSAPI = require_jsAPI();
    var { textElems } = require_collections();
    var SvgoParserError = class _SvgoParserError extends Error {
      /**
       * @param message {string}
       * @param line {number}
       * @param column {number}
       * @param source {string}
       * @param file {void | string}
       */
      constructor(message, line, column, source, file) {
        super(message);
        this.name = "SvgoParserError";
        this.message = `${file || "<input>"}:${line}:${column}: ${message}`;
        this.reason = message;
        this.line = line;
        this.column = column;
        this.source = source;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, _SvgoParserError);
        }
      }
      toString() {
        const lines = this.source.split(/\r?\n/);
        const startLine = Math.max(this.line - 3, 0);
        const endLine = Math.min(this.line + 2, lines.length);
        const lineNumberWidth = String(endLine).length;
        const startColumn = Math.max(this.column - 54, 0);
        const endColumn = Math.max(this.column + 20, 80);
        const code = lines.slice(startLine, endLine).map((line, index) => {
          const lineSlice = line.slice(startColumn, endColumn);
          let ellipsisPrefix = "";
          let ellipsisSuffix = "";
          if (startColumn !== 0) {
            ellipsisPrefix = startColumn > line.length - 1 ? " " : "\u2026";
          }
          if (endColumn < line.length - 1) {
            ellipsisSuffix = "\u2026";
          }
          const number = startLine + 1 + index;
          const gutter = ` ${number.toString().padStart(lineNumberWidth)} | `;
          if (number === this.line) {
            const gutterSpacing = gutter.replace(/[^|]/g, " ");
            const lineSpacing = (ellipsisPrefix + line.slice(startColumn, this.column - 1)).replace(/[^\t]/g, " ");
            const spacing = gutterSpacing + lineSpacing;
            return `>${gutter}${ellipsisPrefix}${lineSlice}${ellipsisSuffix}
 ${spacing}^`;
          }
          return ` ${gutter}${ellipsisPrefix}${lineSlice}${ellipsisSuffix}`;
        }).join("\n");
        return `${this.name}: ${this.message}

${code}
`;
      }
    };
    var entityDeclaration = /<!ENTITY\s+(\S+)\s+(?:'([^']+)'|"([^"]+)")\s*>/g;
    var config = {
      strict: true,
      trim: false,
      normalize: false,
      lowercase: true,
      xmlns: true,
      position: true
    };
    var parseSvg = (data, from) => {
      const sax = SAX.parser(config.strict, config);
      const root = new JSAPI({ type: "root", children: [] });
      let current = root;
      const stack = [root];
      const pushToContent = (node) => {
        const wrapped = new JSAPI(node, current);
        current.children.push(wrapped);
        return wrapped;
      };
      sax.ondoctype = (doctype) => {
        const node = {
          type: "doctype",
          // TODO parse doctype for name, public and system to match xast
          name: "svg",
          data: {
            doctype
          }
        };
        pushToContent(node);
        const subsetStart = doctype.indexOf("[");
        if (subsetStart >= 0) {
          entityDeclaration.lastIndex = subsetStart;
          let entityMatch = entityDeclaration.exec(data);
          while (entityMatch != null) {
            sax.ENTITIES[entityMatch[1]] = entityMatch[2] || entityMatch[3];
            entityMatch = entityDeclaration.exec(data);
          }
        }
      };
      sax.onprocessinginstruction = (data2) => {
        const node = {
          type: "instruction",
          name: data2.name,
          value: data2.body
        };
        pushToContent(node);
      };
      sax.oncomment = (comment) => {
        const node = {
          type: "comment",
          value: comment.trim()
        };
        pushToContent(node);
      };
      sax.oncdata = (cdata) => {
        const node = {
          type: "cdata",
          value: cdata
        };
        pushToContent(node);
      };
      sax.onopentag = (data2) => {
        let element = {
          type: "element",
          name: data2.name,
          attributes: {},
          children: []
        };
        for (const [name, attr] of Object.entries(data2.attributes)) {
          element.attributes[name] = attr.value;
        }
        element = pushToContent(element);
        current = element;
        stack.push(element);
      };
      sax.ontext = (text) => {
        if (current.type === "element") {
          if (textElems.includes(current.name)) {
            const node = {
              type: "text",
              value: text
            };
            pushToContent(node);
          } else if (/\S/.test(text)) {
            const node = {
              type: "text",
              value: text.trim()
            };
            pushToContent(node);
          }
        }
      };
      sax.onclosetag = () => {
        stack.pop();
        current = stack[stack.length - 1];
      };
      sax.onerror = (e) => {
        const error = new SvgoParserError(
          e.reason,
          e.line + 1,
          e.column,
          data,
          from
        );
        if (e.message.indexOf("Unexpected end") === -1) {
          throw error;
        }
      };
      sax.write(data).close();
      return root;
    };
    exports2.parseSvg = parseSvg;
  }
});

// node_modules/svgo/lib/stringifier.js
var require_stringifier = __commonJS({
  "node_modules/svgo/lib/stringifier.js"(exports2) {
    "use strict";
    var { textElems } = require_collections();
    var encodeEntity = (char) => {
      return entities[char];
    };
    var defaults = {
      doctypeStart: "<!DOCTYPE",
      doctypeEnd: ">",
      procInstStart: "<?",
      procInstEnd: "?>",
      tagOpenStart: "<",
      tagOpenEnd: ">",
      tagCloseStart: "</",
      tagCloseEnd: ">",
      tagShortStart: "<",
      tagShortEnd: "/>",
      attrStart: '="',
      attrEnd: '"',
      commentStart: "<!--",
      commentEnd: "-->",
      cdataStart: "<![CDATA[",
      cdataEnd: "]]>",
      textStart: "",
      textEnd: "",
      indent: 4,
      regEntities: /[&'"<>]/g,
      regValEntities: /[&"<>]/g,
      encodeEntity,
      pretty: false,
      useShortTags: true,
      eol: "lf",
      finalNewline: false
    };
    var entities = {
      "&": "&amp;",
      "'": "&apos;",
      '"': "&quot;",
      ">": "&gt;",
      "<": "&lt;"
    };
    var stringifySvg = (data, userOptions = {}) => {
      const config = { ...defaults, ...userOptions };
      const indent = config.indent;
      let newIndent = "    ";
      if (typeof indent === "number" && Number.isNaN(indent) === false) {
        newIndent = indent < 0 ? "	" : " ".repeat(indent);
      } else if (typeof indent === "string") {
        newIndent = indent;
      }
      const state = {
        // TODO remove width and height in v3
        width: void 0,
        height: void 0,
        indent: newIndent,
        textContext: null,
        indentLevel: 0
      };
      const eol = config.eol === "crlf" ? "\r\n" : "\n";
      if (config.pretty) {
        config.doctypeEnd += eol;
        config.procInstEnd += eol;
        config.commentEnd += eol;
        config.cdataEnd += eol;
        config.tagShortEnd += eol;
        config.tagOpenEnd += eol;
        config.tagCloseEnd += eol;
        config.textEnd += eol;
      }
      let svg = stringifyNode(data, config, state);
      if (config.finalNewline && svg.length > 0 && svg[svg.length - 1] !== "\n") {
        svg += eol;
      }
      return {
        data: svg,
        info: {
          width: state.width,
          height: state.height
        }
      };
    };
    exports2.stringifySvg = stringifySvg;
    var stringifyNode = (data, config, state) => {
      let svg = "";
      state.indentLevel += 1;
      for (const item of data.children) {
        if (item.type === "element") {
          svg += stringifyElement(item, config, state);
        }
        if (item.type === "text") {
          svg += stringifyText(item, config, state);
        }
        if (item.type === "doctype") {
          svg += stringifyDoctype(item, config);
        }
        if (item.type === "instruction") {
          svg += stringifyInstruction(item, config);
        }
        if (item.type === "comment") {
          svg += stringifyComment(item, config);
        }
        if (item.type === "cdata") {
          svg += stringifyCdata(item, config, state);
        }
      }
      state.indentLevel -= 1;
      return svg;
    };
    var createIndent = (config, state) => {
      let indent = "";
      if (config.pretty && state.textContext == null) {
        indent = state.indent.repeat(state.indentLevel - 1);
      }
      return indent;
    };
    var stringifyDoctype = (node, config) => {
      return config.doctypeStart + node.data.doctype + config.doctypeEnd;
    };
    var stringifyInstruction = (node, config) => {
      return config.procInstStart + node.name + " " + node.value + config.procInstEnd;
    };
    var stringifyComment = (node, config) => {
      return config.commentStart + node.value + config.commentEnd;
    };
    var stringifyCdata = (node, config, state) => {
      return createIndent(config, state) + config.cdataStart + node.value + config.cdataEnd;
    };
    var stringifyElement = (node, config, state) => {
      if (node.name === "svg" && node.attributes.width != null && node.attributes.height != null) {
        state.width = node.attributes.width;
        state.height = node.attributes.height;
      }
      if (node.children.length === 0) {
        if (config.useShortTags) {
          return createIndent(config, state) + config.tagShortStart + node.name + stringifyAttributes(node, config) + config.tagShortEnd;
        } else {
          return createIndent(config, state) + config.tagShortStart + node.name + stringifyAttributes(node, config) + config.tagOpenEnd + config.tagCloseStart + node.name + config.tagCloseEnd;
        }
      } else {
        let tagOpenStart = config.tagOpenStart;
        let tagOpenEnd = config.tagOpenEnd;
        let tagCloseStart = config.tagCloseStart;
        let tagCloseEnd = config.tagCloseEnd;
        let openIndent = createIndent(config, state);
        let closeIndent = createIndent(config, state);
        if (state.textContext) {
          tagOpenStart = defaults.tagOpenStart;
          tagOpenEnd = defaults.tagOpenEnd;
          tagCloseStart = defaults.tagCloseStart;
          tagCloseEnd = defaults.tagCloseEnd;
          openIndent = "";
        } else if (textElems.includes(node.name)) {
          tagOpenEnd = defaults.tagOpenEnd;
          tagCloseStart = defaults.tagCloseStart;
          closeIndent = "";
          state.textContext = node;
        }
        const children = stringifyNode(node, config, state);
        if (state.textContext === node) {
          state.textContext = null;
        }
        return openIndent + tagOpenStart + node.name + stringifyAttributes(node, config) + tagOpenEnd + children + closeIndent + tagCloseStart + node.name + tagCloseEnd;
      }
    };
    var stringifyAttributes = (node, config) => {
      let attrs = "";
      for (const [name, value] of Object.entries(node.attributes)) {
        if (value !== void 0) {
          const encodedValue = value.toString().replace(config.regValEntities, config.encodeEntity);
          attrs += " " + name + config.attrStart + encodedValue + config.attrEnd;
        } else {
          attrs += " " + name;
        }
      }
      return attrs;
    };
    var stringifyText = (node, config, state) => {
      return createIndent(config, state) + config.textStart + node.value.replace(config.regEntities, config.encodeEntity) + (state.textContext ? "" : config.textEnd);
    };
  }
});

// node_modules/svgo/lib/svgo.js
var require_svgo = __commonJS({
  "node_modules/svgo/lib/svgo.js"(exports2) {
    "use strict";
    var {
      defaultPlugins,
      resolvePluginConfig,
      extendDefaultPlugins
    } = require_config();
    var { parseSvg } = require_parser2();
    var { stringifySvg } = require_stringifier();
    var { invokePlugins } = require_plugins();
    var JSAPI = require_jsAPI();
    var { encodeSVGDatauri } = require_tools();
    exports2.extendDefaultPlugins = extendDefaultPlugins;
    var optimize = (input, config) => {
      if (config == null) {
        config = {};
      }
      if (typeof config !== "object") {
        throw Error("Config should be an object");
      }
      const maxPassCount = config.multipass ? 10 : 1;
      let prevResultSize = Number.POSITIVE_INFINITY;
      let svgjs = null;
      const info = {};
      if (config.path != null) {
        info.path = config.path;
      }
      for (let i = 0; i < maxPassCount; i += 1) {
        info.multipassCount = i;
        try {
          svgjs = parseSvg(input, config.path);
        } catch (error) {
          return { error: error.toString(), modernError: error };
        }
        if (svgjs.error != null) {
          if (config.path != null) {
            svgjs.path = config.path;
          }
          return svgjs;
        }
        const plugins = config.plugins || defaultPlugins;
        if (Array.isArray(plugins) === false) {
          throw Error(
            "Invalid plugins list. Provided 'plugins' in config should be an array."
          );
        }
        const resolvedPlugins = plugins.map(resolvePluginConfig);
        const globalOverrides = {};
        if (config.floatPrecision != null) {
          globalOverrides.floatPrecision = config.floatPrecision;
        }
        svgjs = invokePlugins(svgjs, info, resolvedPlugins, null, globalOverrides);
        svgjs = stringifySvg(svgjs, config.js2svg);
        if (svgjs.data.length < prevResultSize) {
          input = svgjs.data;
          prevResultSize = svgjs.data.length;
        } else {
          if (config.datauri) {
            svgjs.data = encodeSVGDatauri(svgjs.data, config.datauri);
          }
          if (config.path != null) {
            svgjs.path = config.path;
          }
          return svgjs;
        }
      }
      return svgjs;
    };
    exports2.optimize = optimize;
    var createContentItem = (data) => {
      return new JSAPI(data);
    };
    exports2.createContentItem = createContentItem;
  }
});

// node_modules/svgo/lib/svgo-node.js
var require_svgo_node = __commonJS({
  "node_modules/svgo/lib/svgo-node.js"(exports2) {
    "use strict";
    var os = require("os");
    var fs2 = require("fs");
    var { pathToFileURL } = require("url");
    var path3 = require("path");
    var {
      extendDefaultPlugins,
      optimize: optimizeAgnostic,
      createContentItem
    } = require_svgo();
    exports2.extendDefaultPlugins = extendDefaultPlugins;
    exports2.createContentItem = createContentItem;
    var importConfig = async (configFile) => {
      let config;
      if (configFile.endsWith(".cjs")) {
        config = require(configFile);
      } else {
        try {
          const { default: imported } = await import(pathToFileURL(configFile));
          config = imported;
        } catch (importError) {
          try {
            config = require(configFile);
          } catch (requireError) {
            if (requireError.code === "ERR_REQUIRE_ESM") {
              throw importError;
            } else {
              throw requireError;
            }
          }
        }
      }
      if (config == null || typeof config !== "object" || Array.isArray(config)) {
        throw Error(`Invalid config file "${configFile}"`);
      }
      return config;
    };
    var isFile = async (file) => {
      try {
        const stats = await fs2.promises.stat(file);
        return stats.isFile();
      } catch {
        return false;
      }
    };
    var loadConfig = async (configFile, cwd = process.cwd()) => {
      if (configFile != null) {
        if (path3.isAbsolute(configFile)) {
          return await importConfig(configFile);
        } else {
          return await importConfig(path3.join(cwd, configFile));
        }
      }
      let dir2 = cwd;
      while (true) {
        const js = path3.join(dir2, "svgo.config.js");
        if (await isFile(js)) {
          return await importConfig(js);
        }
        const mjs = path3.join(dir2, "svgo.config.mjs");
        if (await isFile(mjs)) {
          return await importConfig(mjs);
        }
        const cjs = path3.join(dir2, "svgo.config.cjs");
        if (await isFile(cjs)) {
          return await importConfig(cjs);
        }
        const parent = path3.dirname(dir2);
        if (dir2 === parent) {
          return null;
        }
        dir2 = parent;
      }
    };
    exports2.loadConfig = loadConfig;
    var optimize = (input, config) => {
      if (config == null) {
        config = {};
      }
      if (typeof config !== "object") {
        throw Error("Config should be an object");
      }
      return optimizeAgnostic(input, {
        ...config,
        js2svg: {
          // platform specific default for end of line
          eol: os.EOL === "\r\n" ? "crlf" : "lf",
          ...config.js2svg
        }
      });
    };
    exports2.optimize = optimize;
  }
});

// node_modules/mathjax/es5/node-main.js
var require_node_main = __commonJS({
  "node_modules/mathjax/es5/node-main.js"(exports, module) {
    (function() {
      "use strict";
      var __webpack_modules__ = { 444: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.HTMLAdaptor = void 0;
        var a = function(t2) {
          function e2(e3) {
            var r2 = t2.call(this, e3.document) || this;
            return r2.window = e3, r2.parser = new e3.DOMParser(), r2;
          }
          return o(e2, t2), e2.prototype.parse = function(t3, e3) {
            return void 0 === e3 && (e3 = "text/html"), this.parser.parseFromString(t3, e3);
          }, e2.prototype.create = function(t3, e3) {
            return e3 ? this.document.createElementNS(e3, t3) : this.document.createElement(t3);
          }, e2.prototype.text = function(t3) {
            return this.document.createTextNode(t3);
          }, e2.prototype.head = function(t3) {
            return t3.head || t3;
          }, e2.prototype.body = function(t3) {
            return t3.body || t3;
          }, e2.prototype.root = function(t3) {
            return t3.documentElement || t3;
          }, e2.prototype.doctype = function(t3) {
            return t3.doctype ? "<!DOCTYPE ".concat(t3.doctype.name, ">") : "";
          }, e2.prototype.tags = function(t3, e3, r2) {
            void 0 === r2 && (r2 = null);
            var n2 = r2 ? t3.getElementsByTagNameNS(r2, e3) : t3.getElementsByTagName(e3);
            return Array.from(n2);
          }, e2.prototype.getElements = function(t3, e3) {
            var r2, n2, o2 = [];
            try {
              for (var a2 = i(t3), s = a2.next(); !s.done; s = a2.next()) {
                var l = s.value;
                "string" == typeof l ? o2 = o2.concat(Array.from(this.document.querySelectorAll(l))) : Array.isArray(l) || l instanceof this.window.NodeList || l instanceof this.window.HTMLCollection ? o2 = o2.concat(Array.from(l)) : o2.push(l);
              }
            } catch (t4) {
              r2 = { error: t4 };
            } finally {
              try {
                s && !s.done && (n2 = a2.return) && n2.call(a2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e2.prototype.contains = function(t3, e3) {
            return t3.contains(e3);
          }, e2.prototype.parent = function(t3) {
            return t3.parentNode;
          }, e2.prototype.append = function(t3, e3) {
            return t3.appendChild(e3);
          }, e2.prototype.insert = function(t3, e3) {
            return this.parent(e3).insertBefore(t3, e3);
          }, e2.prototype.remove = function(t3) {
            return this.parent(t3).removeChild(t3);
          }, e2.prototype.replace = function(t3, e3) {
            return this.parent(e3).replaceChild(t3, e3);
          }, e2.prototype.clone = function(t3) {
            return t3.cloneNode(true);
          }, e2.prototype.split = function(t3, e3) {
            return t3.splitText(e3);
          }, e2.prototype.next = function(t3) {
            return t3.nextSibling;
          }, e2.prototype.previous = function(t3) {
            return t3.previousSibling;
          }, e2.prototype.firstChild = function(t3) {
            return t3.firstChild;
          }, e2.prototype.lastChild = function(t3) {
            return t3.lastChild;
          }, e2.prototype.childNodes = function(t3) {
            return Array.from(t3.childNodes);
          }, e2.prototype.childNode = function(t3, e3) {
            return t3.childNodes[e3];
          }, e2.prototype.kind = function(t3) {
            var e3 = t3.nodeType;
            return 1 === e3 || 3 === e3 || 8 === e3 ? t3.nodeName.toLowerCase() : "";
          }, e2.prototype.value = function(t3) {
            return t3.nodeValue || "";
          }, e2.prototype.textContent = function(t3) {
            return t3.textContent;
          }, e2.prototype.innerHTML = function(t3) {
            return t3.innerHTML;
          }, e2.prototype.outerHTML = function(t3) {
            return t3.outerHTML;
          }, e2.prototype.serializeXML = function(t3) {
            return new this.window.XMLSerializer().serializeToString(t3);
          }, e2.prototype.setAttribute = function(t3, e3, r2, n2) {
            return void 0 === n2 && (n2 = null), n2 ? (e3 = n2.replace(/.*\//, "") + ":" + e3.replace(/^.*:/, ""), t3.setAttributeNS(n2, e3, r2)) : t3.setAttribute(e3, r2);
          }, e2.prototype.getAttribute = function(t3, e3) {
            return t3.getAttribute(e3);
          }, e2.prototype.removeAttribute = function(t3, e3) {
            return t3.removeAttribute(e3);
          }, e2.prototype.hasAttribute = function(t3, e3) {
            return t3.hasAttribute(e3);
          }, e2.prototype.allAttributes = function(t3) {
            return Array.from(t3.attributes).map(function(t4) {
              return { name: t4.name, value: t4.value };
            });
          }, e2.prototype.addClass = function(t3, e3) {
            t3.classList ? t3.classList.add(e3) : t3.className = (t3.className + " " + e3).trim();
          }, e2.prototype.removeClass = function(t3, e3) {
            t3.classList ? t3.classList.remove(e3) : t3.className = t3.className.split(/ /).filter(function(t4) {
              return t4 !== e3;
            }).join(" ");
          }, e2.prototype.hasClass = function(t3, e3) {
            return t3.classList ? t3.classList.contains(e3) : t3.className.split(/ /).indexOf(e3) >= 0;
          }, e2.prototype.setStyle = function(t3, e3, r2) {
            t3.style[e3] = r2;
          }, e2.prototype.getStyle = function(t3, e3) {
            return t3.style[e3];
          }, e2.prototype.allStyles = function(t3) {
            return t3.style.cssText;
          }, e2.prototype.insertRules = function(t3, e3) {
            var r2, n2;
            try {
              for (var o2 = i(e3.reverse()), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s = a2.value;
                try {
                  t3.sheet.insertRule(s, 0);
                } catch (t4) {
                  console.warn("MathJax: can't insert css rule '".concat(s, "': ").concat(t4.message));
                }
              }
            } catch (t4) {
              r2 = { error: t4 };
            } finally {
              try {
                a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e2.prototype.fontSize = function(t3) {
            var e3 = this.window.getComputedStyle(t3);
            return parseFloat(e3.fontSize);
          }, e2.prototype.fontFamily = function(t3) {
            return this.window.getComputedStyle(t3).fontFamily || "";
          }, e2.prototype.nodeSize = function(t3, e3, r2) {
            if (void 0 === e3 && (e3 = 1), void 0 === r2 && (r2 = false), r2 && t3.getBBox) {
              var n2 = t3.getBBox();
              return [n2.width / e3, n2.height / e3];
            }
            return [t3.offsetWidth / e3, t3.offsetHeight / e3];
          }, e2.prototype.nodeBBox = function(t3) {
            var e3 = t3.getBoundingClientRect();
            return { left: e3.left, right: e3.right, top: e3.top, bottom: e3.bottom };
          }, e2;
        }(r(5009).AbstractDOMAdaptor);
        e.HTMLAdaptor = a;
      }, 1131: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.NodeMixin = e.NodeMixinOptions = void 0;
        var a = r(7233);
        e.NodeMixinOptions = { badCSS: true, badSizes: true }, e.NodeMixin = function(t2, r2) {
          var n2;
          return void 0 === r2 && (r2 = {}), r2 = (0, a.userOptions)((0, a.defaultOptions)({}, e.NodeMixinOptions), r2), n2 = function(t3) {
            function e2() {
              for (var e3 = [], r3 = 0; r3 < arguments.length; r3++)
                e3[r3] = arguments[r3];
              var n3 = t3.call(this, e3[0]) || this, o2 = n3.constructor;
              return n3.options = (0, a.userOptions)((0, a.defaultOptions)({}, o2.OPTIONS), e3[1]), n3;
            }
            return o(e2, t3), e2.prototype.fontSize = function(e3) {
              return r2.badCSS ? this.options.fontSize : t3.prototype.fontSize.call(this, e3);
            }, e2.prototype.fontFamily = function(e3) {
              return r2.badCSS ? this.options.fontFamily : t3.prototype.fontFamily.call(this, e3);
            }, e2.prototype.nodeSize = function(n3, o2, i2) {
              if (void 0 === o2 && (o2 = 1), void 0 === i2 && (i2 = null), !r2.badSizes)
                return t3.prototype.nodeSize.call(this, n3, o2, i2);
              var a2 = this.textContent(n3), s = Array.from(a2.replace(e2.cjkPattern, "")).length;
              return [(Array.from(a2).length - s) * this.options.cjkCharWidth + s * this.options.unknownCharWidth, this.options.unknownCharHeight];
            }, e2.prototype.nodeBBox = function(e3) {
              return r2.badSizes ? { left: 0, right: 0, top: 0, bottom: 0 } : t3.prototype.nodeBBox.call(this, e3);
            }, e2;
          }(t2), n2.OPTIONS = i(i({}, r2.badCSS ? { fontSize: 16, fontFamily: "Times" } : {}), r2.badSizes ? { cjkCharWidth: 1, unknownCharWidth: 0.6, unknownCharHeight: 0.8 } : {}), n2.cjkPattern = new RegExp(["[", "\u1100-\u115F", "\u2329\u232A", "\u2E80-\u303E", "\u3040-\u3247", "\u3250-\u4DBF", "\u4E00-\uA4C6", "\uA960-\uA97C", "\uAC00-\uD7A3", "\uF900-\uFAFF", "\uFE10-\uFE19", "\uFE30-\uFE6B", "\uFF01-\uFF60\uFFE0-\uFFE6", "\u{1B000}-\u{1B001}", "\u{1F200}-\u{1F251}", "\u{20000}-\u{3FFFD}", "]"].join(""), "gu"), n2;
        };
      }, 6191: function(t, e, r) {
        Object.defineProperty(e, "__esModule", { value: true }), e.browserAdaptor = void 0;
        var n = r(444);
        e.browserAdaptor = function() {
          return new n.HTMLAdaptor(window);
        };
      }, 7062: function(t, e, r) {
        Object.defineProperty(e, "__esModule", { value: true }), e.LiteDocument = void 0;
        var n = r(1168), o = function() {
          function t2() {
            this.root = new n.LiteElement("html", {}, [this.head = new n.LiteElement("head"), this.body = new n.LiteElement("body")]), this.type = "";
          }
          return Object.defineProperty(t2.prototype, "kind", { get: function() {
            return "#document";
          }, enumerable: false, configurable: true }), t2;
        }();
        e.LiteDocument = o;
      }, 1168: function(t, e) {
        var r = this && this.__assign || function() {
          return r = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, r.apply(this, arguments);
        }, n = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        }, o = this && this.__spreadArray || function(t2, e2, r2) {
          if (r2 || 2 === arguments.length)
            for (var n2, o2 = 0, i2 = e2.length; o2 < i2; o2++)
              !n2 && o2 in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, o2)), n2[o2] = e2[o2]);
          return t2.concat(n2 || Array.prototype.slice.call(e2));
        }, i = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.LiteElement = void 0;
        var a = function(t2, e2, a2) {
          var s, l;
          void 0 === e2 && (e2 = {}), void 0 === a2 && (a2 = []), this.kind = t2, this.attributes = r({}, e2), this.children = o([], n(a2), false);
          try {
            for (var c = i(this.children), u = c.next(); !u.done; u = c.next())
              u.value.parent = this;
          } catch (t3) {
            s = { error: t3 };
          } finally {
            try {
              u && !u.done && (l = c.return) && l.call(c);
            } finally {
              if (s)
                throw s.error;
            }
          }
          this.styles = null;
        };
        e.LiteElement = a;
      }, 315: function(t, e) {
        var r = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i = r2.call(t2), a = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i.next()).done; )
              a.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i.return) && r2.call(i);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a;
        }, n = this && this.__spreadArray || function(t2, e2, r2) {
          if (r2 || 2 === arguments.length)
            for (var n2, o2 = 0, i = e2.length; o2 < i; o2++)
              !n2 && o2 in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, o2)), n2[o2] = e2[o2]);
          return t2.concat(n2 || Array.prototype.slice.call(e2));
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.LiteList = void 0;
        var o = function() {
          function t2(t3) {
            this.nodes = [], this.nodes = n([], r(t3), false);
          }
          return t2.prototype.append = function(t3) {
            this.nodes.push(t3);
          }, t2.prototype[Symbol.iterator] = function() {
            var t3 = 0;
            return { next: function() {
              return t3 === this.nodes.length ? { value: null, done: true } : { value: this.nodes[t3++], done: false };
            } };
          }, t2;
        }();
        e.LiteList = o;
      }, 5020: function(t, e, r) {
        var n = this && this.__createBinding || (Object.create ? function(t2, e2, r2, n2) {
          void 0 === n2 && (n2 = r2);
          var o2 = Object.getOwnPropertyDescriptor(e2, r2);
          o2 && !("get" in o2 ? !e2.__esModule : o2.writable || o2.configurable) || (o2 = { enumerable: true, get: function() {
            return e2[r2];
          } }), Object.defineProperty(t2, n2, o2);
        } : function(t2, e2, r2, n2) {
          void 0 === n2 && (n2 = r2), t2[n2] = e2[r2];
        }), o = this && this.__setModuleDefault || (Object.create ? function(t2, e2) {
          Object.defineProperty(t2, "default", { enumerable: true, value: e2 });
        } : function(t2, e2) {
          t2.default = e2;
        }), i = this && this.__importStar || function(t2) {
          if (t2 && t2.__esModule)
            return t2;
          var e2 = {};
          if (null != t2)
            for (var r2 in t2)
              "default" !== r2 && Object.prototype.hasOwnProperty.call(t2, r2) && n(e2, t2, r2);
          return o(e2, t2), e2;
        }, a = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        }, s = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.LiteParser = e.PATTERNS = void 0;
        var l, c = i(r(5368)), u = r(1168), p = r(2560);
        !function(t2) {
          t2.TAGNAME = "[a-z][^\\s\\n>]*", t2.ATTNAME = "[a-z][^\\s\\n>=]*", t2.VALUE = `(?:'[^']*'|"[^"]*"|[^\\s\\n]+)`, t2.VALUESPLIT = `(?:'([^']*)'|"([^"]*)"|([^\\s\\n]+))`, t2.SPACE = "(?:\\s|\\n)+", t2.OPTIONALSPACE = "(?:\\s|\\n)*", t2.ATTRIBUTE = t2.ATTNAME + "(?:" + t2.OPTIONALSPACE + "=" + t2.OPTIONALSPACE + t2.VALUE + ")?", t2.ATTRIBUTESPLIT = "(" + t2.ATTNAME + ")(?:" + t2.OPTIONALSPACE + "=" + t2.OPTIONALSPACE + t2.VALUESPLIT + ")?", t2.TAG = "(<(?:" + t2.TAGNAME + "(?:" + t2.SPACE + t2.ATTRIBUTE + ")*" + t2.OPTIONALSPACE + "/?|/" + t2.TAGNAME + "|!--[^]*?--|![^]*?)(?:>|$))", t2.tag = new RegExp(t2.TAG, "i"), t2.attr = new RegExp(t2.ATTRIBUTE, "i"), t2.attrsplit = new RegExp(t2.ATTRIBUTESPLIT, "i");
        }(l = e.PATTERNS || (e.PATTERNS = {}));
        var f = function() {
          function t2() {
          }
          return t2.prototype.parseFromString = function(t3, e2, r2) {
            void 0 === e2 && (e2 = "text/html"), void 0 === r2 && (r2 = null);
            for (var n2 = r2.createDocument(), o2 = r2.body(n2), i2 = t3.replace(/<\?.*?\?>/g, "").split(l.tag); i2.length; ) {
              var a2 = i2.shift(), s2 = i2.shift();
              a2 && this.addText(r2, o2, a2), s2 && ">" === s2.charAt(s2.length - 1) && ("!" === s2.charAt(1) ? this.addComment(r2, o2, s2) : o2 = "/" === s2.charAt(1) ? this.closeTag(r2, o2, s2) : this.openTag(r2, o2, s2, i2));
            }
            return this.checkDocument(r2, n2), n2;
          }, t2.prototype.addText = function(t3, e2, r2) {
            return r2 = c.translate(r2), t3.append(e2, t3.text(r2));
          }, t2.prototype.addComment = function(t3, e2, r2) {
            return t3.append(e2, new p.LiteComment(r2));
          }, t2.prototype.closeTag = function(t3, e2, r2) {
            for (var n2 = r2.slice(2, r2.length - 1).toLowerCase(); t3.parent(e2) && t3.kind(e2) !== n2; )
              e2 = t3.parent(e2);
            return t3.parent(e2);
          }, t2.prototype.openTag = function(t3, e2, r2, n2) {
            var o2 = this.constructor.PCDATA, i2 = this.constructor.SELF_CLOSING, a2 = r2.match(/<(.*?)[\s\n>\/]/)[1].toLowerCase(), s2 = t3.node(a2), c2 = r2.replace(/^<.*?[\s\n>]/, "").split(l.attrsplit);
            return (c2.pop().match(/>$/) || c2.length < 5) && (this.addAttributes(t3, s2, c2), t3.append(e2, s2), i2[a2] || r2.match(/\/>$/) || (o2[a2] ? this.handlePCDATA(t3, s2, a2, n2) : e2 = s2)), e2;
          }, t2.prototype.addAttributes = function(t3, e2, r2) {
            for (var n2 = this.constructor.CDATA_ATTR; r2.length; ) {
              var o2 = a(r2.splice(0, 5), 5), i2 = o2[1], s2 = o2[2], l2 = o2[3], u2 = o2[4], p2 = s2 || l2 || u2 || "";
              n2[i2] || (p2 = c.translate(p2)), t3.setAttribute(e2, i2, p2);
            }
          }, t2.prototype.handlePCDATA = function(t3, e2, r2, n2) {
            for (var o2 = [], i2 = "</" + r2 + ">", a2 = ""; n2.length && a2 !== i2; )
              o2.push(a2), o2.push(n2.shift()), a2 = n2.shift();
            t3.append(e2, t3.text(o2.join("")));
          }, t2.prototype.checkDocument = function(t3, e2) {
            var r2, n2, o2, i2, a2 = this.getOnlyChild(t3, t3.body(e2));
            if (a2) {
              try {
                for (var l2 = s(t3.childNodes(t3.body(e2))), c2 = l2.next(); !c2.done; c2 = l2.next()) {
                  if ((h = c2.value) === a2)
                    break;
                  h instanceof p.LiteComment && h.value.match(/^<!DOCTYPE/) && (e2.type = h.value);
                }
              } catch (t4) {
                r2 = { error: t4 };
              } finally {
                try {
                  c2 && !c2.done && (n2 = l2.return) && n2.call(l2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              switch (t3.kind(a2)) {
                case "html":
                  try {
                    for (var u2 = s(a2.children), f2 = u2.next(); !f2.done; f2 = u2.next()) {
                      var h = f2.value;
                      switch (t3.kind(h)) {
                        case "head":
                          e2.head = h;
                          break;
                        case "body":
                          e2.body = h;
                      }
                    }
                  } catch (t4) {
                    o2 = { error: t4 };
                  } finally {
                    try {
                      f2 && !f2.done && (i2 = u2.return) && i2.call(u2);
                    } finally {
                      if (o2)
                        throw o2.error;
                    }
                  }
                  e2.root = a2, t3.remove(a2), t3.parent(e2.body) !== a2 && t3.append(a2, e2.body), t3.parent(e2.head) !== a2 && t3.insert(e2.head, e2.body);
                  break;
                case "head":
                  e2.head = t3.replace(a2, e2.head);
                  break;
                case "body":
                  e2.body = t3.replace(a2, e2.body);
              }
            }
          }, t2.prototype.getOnlyChild = function(t3, e2) {
            var r2, n2, o2 = null;
            try {
              for (var i2 = s(t3.childNodes(e2)), a2 = i2.next(); !a2.done; a2 = i2.next()) {
                var l2 = a2.value;
                if (l2 instanceof u.LiteElement) {
                  if (o2)
                    return null;
                  o2 = l2;
                }
              }
            } catch (t4) {
              r2 = { error: t4 };
            } finally {
              try {
                a2 && !a2.done && (n2 = i2.return) && n2.call(i2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, t2.prototype.serialize = function(t3, e2, r2) {
            var n2 = this;
            void 0 === r2 && (r2 = false);
            var o2 = this.constructor.SELF_CLOSING, i2 = this.constructor.CDATA_ATTR, a2 = t3.kind(e2), s2 = t3.allAttributes(e2).map(function(t4) {
              return t4.name + '="' + (i2[t4.name] ? t4.value : n2.protectAttribute(t4.value)) + '"';
            }).join(" "), l2 = this.serializeInner(t3, e2, r2);
            return "<" + a2 + (s2 ? " " + s2 : "") + (r2 && !l2 || o2[a2] ? r2 ? "/>" : ">" : ">".concat(l2, "</").concat(a2, ">"));
          }, t2.prototype.serializeInner = function(t3, e2, r2) {
            var n2 = this;
            return void 0 === r2 && (r2 = false), this.constructor.PCDATA.hasOwnProperty(e2.kind) ? t3.childNodes(e2).map(function(e3) {
              return t3.value(e3);
            }).join("") : t3.childNodes(e2).map(function(e3) {
              var o2 = t3.kind(e3);
              return "#text" === o2 ? n2.protectHTML(t3.value(e3)) : "#comment" === o2 ? e3.value : n2.serialize(t3, e3, r2);
            }).join("");
          }, t2.prototype.protectAttribute = function(t3) {
            return "string" != typeof t3 && (t3 = String(t3)), t3.replace(/"/g, "&quot;");
          }, t2.prototype.protectHTML = function(t3) {
            return t3.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
          }, t2.SELF_CLOSING = { area: true, base: true, br: true, col: true, command: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, menuitem: true, meta: true, param: true, source: true, track: true, wbr: true }, t2.PCDATA = { option: true, textarea: true, fieldset: true, title: true, style: true, script: true }, t2.CDATA_ATTR = { style: true, datafld: true, datasrc: true, href: true, src: true, longdesc: true, usemap: true, cite: true, datetime: true, action: true, axis: true, profile: true, content: true, scheme: true }, t2;
        }();
        e.LiteParser = f;
      }, 2560: function(t, e) {
        var r, n = this && this.__extends || (r = function(t2, e2) {
          return r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, r(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function n2() {
            this.constructor = t2;
          }
          r(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
        });
        Object.defineProperty(e, "__esModule", { value: true }), e.LiteComment = e.LiteText = void 0;
        var o = function() {
          function t2(t3) {
            void 0 === t3 && (t3 = ""), this.value = t3;
          }
          return Object.defineProperty(t2.prototype, "kind", { get: function() {
            return "#text";
          }, enumerable: false, configurable: true }), t2;
        }();
        e.LiteText = o;
        var i = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return n(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "#comment";
          }, enumerable: false, configurable: true }), e2;
        }(o);
        e.LiteComment = i;
      }, 1248: function(t, e, r) {
        Object.defineProperty(e, "__esModule", { value: true }), e.LiteWindow = void 0;
        var n = r(1168), o = r(7062), i = r(315), a = r(5020), s = function() {
          this.DOMParser = a.LiteParser, this.NodeList = i.LiteList, this.HTMLCollection = i.LiteList, this.HTMLElement = n.LiteElement, this.DocumentFragment = i.LiteList, this.Document = o.LiteDocument, this.document = new o.LiteDocument();
        };
        e.LiteWindow = s;
      }, 4907: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        }, a = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, s = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        }, l = this && this.__spreadArray || function(t2, e2, r2) {
          if (r2 || 2 === arguments.length)
            for (var n2, o2 = 0, i2 = e2.length; o2 < i2; o2++)
              !n2 && o2 in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, o2)), n2[o2] = e2[o2]);
          return t2.concat(n2 || Array.prototype.slice.call(e2));
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.liteAdaptor = e.LiteAdaptor = e.LiteBase = void 0;
        var c = r(5009), u = r(1131), p = r(7062), f = r(1168), h = r(2560), d = r(1248), y = r(5020), O = r(8054), m = function(t2) {
          function e2() {
            var e3 = t2.call(this) || this;
            return e3.parser = new y.LiteParser(), e3.window = new d.LiteWindow(), e3;
          }
          return o(e2, t2), e2.prototype.parse = function(t3, e3) {
            return this.parser.parseFromString(t3, e3, this);
          }, e2.prototype.create = function(t3, e3) {
            return void 0 === e3 && (e3 = null), new f.LiteElement(t3);
          }, e2.prototype.text = function(t3) {
            return new h.LiteText(t3);
          }, e2.prototype.comment = function(t3) {
            return new h.LiteComment(t3);
          }, e2.prototype.createDocument = function() {
            return new p.LiteDocument();
          }, e2.prototype.head = function(t3) {
            return t3.head;
          }, e2.prototype.body = function(t3) {
            return t3.body;
          }, e2.prototype.root = function(t3) {
            return t3.root;
          }, e2.prototype.doctype = function(t3) {
            return t3.type;
          }, e2.prototype.tags = function(t3, e3, r2) {
            void 0 === r2 && (r2 = null);
            var n2 = [], o2 = [];
            if (r2)
              return o2;
            for (var i2 = t3; i2; ) {
              var a2 = i2.kind;
              "#text" !== a2 && "#comment" !== a2 && (i2 = i2, a2 === e3 && o2.push(i2), i2.children.length && (n2 = i2.children.concat(n2))), i2 = n2.shift();
            }
            return o2;
          }, e2.prototype.elementById = function(t3, e3) {
            for (var r2 = [], n2 = t3; n2; ) {
              if ("#text" !== n2.kind && "#comment" !== n2.kind) {
                if ((n2 = n2).attributes.id === e3)
                  return n2;
                n2.children.length && (r2 = n2.children.concat(r2));
              }
              n2 = r2.shift();
            }
            return null;
          }, e2.prototype.elementsByClass = function(t3, e3) {
            for (var r2 = [], n2 = [], o2 = t3; o2; ) {
              if ("#text" !== o2.kind && "#comment" !== o2.kind)
                ((o2 = o2).attributes.class || "").trim().split(/ +/).includes(e3) && n2.push(o2), o2.children.length && (r2 = o2.children.concat(r2));
              o2 = r2.shift();
            }
            return n2;
          }, e2.prototype.getElements = function(t3, e3) {
            var r2, n2, o2 = [], i2 = this.body(e3);
            try {
              for (var s2 = a(t3), l2 = s2.next(); !l2.done; l2 = s2.next()) {
                var c2 = l2.value;
                if ("string" == typeof c2)
                  if ("#" === c2.charAt(0)) {
                    var u2 = this.elementById(i2, c2.slice(1));
                    u2 && o2.push(u2);
                  } else
                    "." === c2.charAt(0) ? o2 = o2.concat(this.elementsByClass(i2, c2.slice(1))) : c2.match(/^[-a-z][-a-z0-9]*$/i) && (o2 = o2.concat(this.tags(i2, c2)));
                else
                  Array.isArray(c2) ? o2 = o2.concat(c2) : c2 instanceof this.window.NodeList || c2 instanceof this.window.HTMLCollection ? o2 = o2.concat(c2.nodes) : o2.push(c2);
              }
            } catch (t4) {
              r2 = { error: t4 };
            } finally {
              try {
                l2 && !l2.done && (n2 = s2.return) && n2.call(s2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return o2;
          }, e2.prototype.contains = function(t3, e3) {
            for (; e3 && e3 !== t3; )
              e3 = this.parent(e3);
            return !!e3;
          }, e2.prototype.parent = function(t3) {
            return t3.parent;
          }, e2.prototype.childIndex = function(t3) {
            return t3.parent ? t3.parent.children.findIndex(function(e3) {
              return e3 === t3;
            }) : -1;
          }, e2.prototype.append = function(t3, e3) {
            return e3.parent && this.remove(e3), t3.children.push(e3), e3.parent = t3, e3;
          }, e2.prototype.insert = function(t3, e3) {
            if (t3.parent && this.remove(t3), e3 && e3.parent) {
              var r2 = this.childIndex(e3);
              e3.parent.children.splice(r2, 0, t3), t3.parent = e3.parent;
            }
          }, e2.prototype.remove = function(t3) {
            var e3 = this.childIndex(t3);
            return e3 >= 0 && t3.parent.children.splice(e3, 1), t3.parent = null, t3;
          }, e2.prototype.replace = function(t3, e3) {
            var r2 = this.childIndex(e3);
            return r2 >= 0 && (e3.parent.children[r2] = t3, t3.parent = e3.parent, e3.parent = null), e3;
          }, e2.prototype.clone = function(t3) {
            var e3 = this, r2 = new f.LiteElement(t3.kind);
            return r2.attributes = i({}, t3.attributes), r2.children = t3.children.map(function(t4) {
              if ("#text" === t4.kind)
                return new h.LiteText(t4.value);
              if ("#comment" === t4.kind)
                return new h.LiteComment(t4.value);
              var n2 = e3.clone(t4);
              return n2.parent = r2, n2;
            }), r2;
          }, e2.prototype.split = function(t3, e3) {
            var r2 = new h.LiteText(t3.value.slice(e3));
            return t3.value = t3.value.slice(0, e3), t3.parent.children.splice(this.childIndex(t3) + 1, 0, r2), r2.parent = t3.parent, r2;
          }, e2.prototype.next = function(t3) {
            var e3 = t3.parent;
            if (!e3)
              return null;
            var r2 = this.childIndex(t3) + 1;
            return r2 >= 0 && r2 < e3.children.length ? e3.children[r2] : null;
          }, e2.prototype.previous = function(t3) {
            var e3 = t3.parent;
            if (!e3)
              return null;
            var r2 = this.childIndex(t3) - 1;
            return r2 >= 0 ? e3.children[r2] : null;
          }, e2.prototype.firstChild = function(t3) {
            return t3.children[0];
          }, e2.prototype.lastChild = function(t3) {
            return t3.children[t3.children.length - 1];
          }, e2.prototype.childNodes = function(t3) {
            return l([], s(t3.children), false);
          }, e2.prototype.childNode = function(t3, e3) {
            return t3.children[e3];
          }, e2.prototype.kind = function(t3) {
            return t3.kind;
          }, e2.prototype.value = function(t3) {
            return "#text" === t3.kind ? t3.value : "#comment" === t3.kind ? t3.value.replace(/^<!(--)?((?:.|\n)*)\1>$/, "$2") : "";
          }, e2.prototype.textContent = function(t3) {
            var e3 = this;
            return t3.children.reduce(function(t4, r2) {
              return t4 + ("#text" === r2.kind ? r2.value : "#comment" === r2.kind ? "" : e3.textContent(r2));
            }, "");
          }, e2.prototype.innerHTML = function(t3) {
            return this.parser.serializeInner(this, t3);
          }, e2.prototype.outerHTML = function(t3) {
            return this.parser.serialize(this, t3);
          }, e2.prototype.serializeXML = function(t3) {
            return this.parser.serialize(this, t3, true);
          }, e2.prototype.setAttribute = function(t3, e3, r2, n2) {
            void 0 === n2 && (n2 = null), "string" != typeof r2 && (r2 = String(r2)), n2 && (e3 = n2.replace(/.*\//, "") + ":" + e3.replace(/^.*:/, "")), t3.attributes[e3] = r2, "style" === e3 && (t3.styles = null);
          }, e2.prototype.getAttribute = function(t3, e3) {
            return t3.attributes[e3];
          }, e2.prototype.removeAttribute = function(t3, e3) {
            delete t3.attributes[e3];
          }, e2.prototype.hasAttribute = function(t3, e3) {
            return t3.attributes.hasOwnProperty(e3);
          }, e2.prototype.allAttributes = function(t3) {
            var e3, r2, n2 = t3.attributes, o2 = [];
            try {
              for (var i2 = a(Object.keys(n2)), s2 = i2.next(); !s2.done; s2 = i2.next()) {
                var l2 = s2.value;
                o2.push({ name: l2, value: n2[l2] });
              }
            } catch (t4) {
              e3 = { error: t4 };
            } finally {
              try {
                s2 && !s2.done && (r2 = i2.return) && r2.call(i2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return o2;
          }, e2.prototype.addClass = function(t3, e3) {
            var r2 = (t3.attributes.class || "").split(/ /);
            r2.find(function(t4) {
              return t4 === e3;
            }) || (r2.push(e3), t3.attributes.class = r2.join(" "));
          }, e2.prototype.removeClass = function(t3, e3) {
            var r2 = (t3.attributes.class || "").split(/ /), n2 = r2.findIndex(function(t4) {
              return t4 === e3;
            });
            n2 >= 0 && (r2.splice(n2, 1), t3.attributes.class = r2.join(" "));
          }, e2.prototype.hasClass = function(t3, e3) {
            return !!(t3.attributes.class || "").split(/ /).find(function(t4) {
              return t4 === e3;
            });
          }, e2.prototype.setStyle = function(t3, e3, r2) {
            t3.styles || (t3.styles = new O.Styles(this.getAttribute(t3, "style"))), t3.styles.set(e3, r2), t3.attributes.style = t3.styles.cssText;
          }, e2.prototype.getStyle = function(t3, e3) {
            if (!t3.styles) {
              var r2 = this.getAttribute(t3, "style");
              if (!r2)
                return "";
              t3.styles = new O.Styles(r2);
            }
            return t3.styles.get(e3);
          }, e2.prototype.allStyles = function(t3) {
            return this.getAttribute(t3, "style");
          }, e2.prototype.insertRules = function(t3, e3) {
            t3.children = [this.text(e3.join("\n\n") + "\n\n" + this.textContent(t3))];
          }, e2.prototype.fontSize = function(t3) {
            return 0;
          }, e2.prototype.fontFamily = function(t3) {
            return "";
          }, e2.prototype.nodeSize = function(t3, e3, r2) {
            return void 0 === e3 && (e3 = 1), void 0 === r2 && (r2 = null), [0, 0];
          }, e2.prototype.nodeBBox = function(t3) {
            return { left: 0, right: 0, top: 0, bottom: 0 };
          }, e2;
        }(c.AbstractDOMAdaptor);
        e.LiteBase = m;
        var v = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), e2;
        }((0, u.NodeMixin)(m));
        e.LiteAdaptor = v, e.liteAdaptor = function(t2) {
          return void 0 === t2 && (t2 = null), new v(null, t2);
        };
      }, 9515: function(t, e, r) {
        var n = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MathJax = e.combineWithMathJax = e.combineDefaults = e.combineConfig = e.isObject = void 0;
        var o = r(3282);
        function i(t2) {
          return "object" == typeof t2 && null !== t2;
        }
        function a(t2, e2) {
          var r2, o2;
          try {
            for (var s = n(Object.keys(e2)), l = s.next(); !l.done; l = s.next()) {
              var c = l.value;
              "__esModule" !== c && (!i(t2[c]) || !i(e2[c]) || e2[c] instanceof Promise ? null !== e2[c] && void 0 !== e2[c] && (t2[c] = e2[c]) : a(t2[c], e2[c]));
            }
          } catch (t3) {
            r2 = { error: t3 };
          } finally {
            try {
              l && !l.done && (o2 = s.return) && o2.call(s);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return t2;
        }
        e.isObject = i, e.combineConfig = a, e.combineDefaults = function t2(e2, r2, o2) {
          var a2, s;
          e2[r2] || (e2[r2] = {}), e2 = e2[r2];
          try {
            for (var l = n(Object.keys(o2)), c = l.next(); !c.done; c = l.next()) {
              var u = c.value;
              i(e2[u]) && i(o2[u]) ? t2(e2, u, o2[u]) : null == e2[u] && null != o2[u] && (e2[u] = o2[u]);
            }
          } catch (t3) {
            a2 = { error: t3 };
          } finally {
            try {
              c && !c.done && (s = l.return) && s.call(l);
            } finally {
              if (a2)
                throw a2.error;
            }
          }
          return e2;
        }, e.combineWithMathJax = function(t2) {
          return a(e.MathJax, t2);
        }, void 0 === r.g.MathJax && (r.g.MathJax = {}), r.g.MathJax.version || (r.g.MathJax = { version: o.VERSION, _: {}, config: r.g.MathJax }), e.MathJax = r.g.MathJax;
      }, 235: function(t, e, r) {
        var n, o, i = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.CONFIG = e.MathJax = e.Loader = e.PathFilters = e.PackageError = e.Package = void 0;
        var a = r(9515), s = r(265), l = r(265);
        Object.defineProperty(e, "Package", { enumerable: true, get: function() {
          return l.Package;
        } }), Object.defineProperty(e, "PackageError", { enumerable: true, get: function() {
          return l.PackageError;
        } });
        var c, u = r(7525);
        if (e.PathFilters = { source: function(t2) {
          return e.CONFIG.source.hasOwnProperty(t2.name) && (t2.name = e.CONFIG.source[t2.name]), true;
        }, normalize: function(t2) {
          var e2 = t2.name;
          return e2.match(/^(?:[a-z]+:\/)?\/|[a-z]:\\|\[/i) || (t2.name = "[mathjax]/" + e2.replace(/^\.\//, "")), t2.addExtension && !e2.match(/\.[^\/]+$/) && (t2.name += ".js"), true;
        }, prefix: function(t2) {
          for (var r2; (r2 = t2.name.match(/^\[([^\]]*)\]/)) && e.CONFIG.paths.hasOwnProperty(r2[1]); )
            t2.name = e.CONFIG.paths[r2[1]] + t2.name.substr(r2[0].length);
          return true;
        } }, function(t2) {
          var r2 = a.MathJax.version;
          t2.versions = /* @__PURE__ */ new Map(), t2.ready = function() {
            for (var t3, e2, r3 = [], n2 = 0; n2 < arguments.length; n2++)
              r3[n2] = arguments[n2];
            0 === r3.length && (r3 = Array.from(s.Package.packages.keys()));
            var o2 = [];
            try {
              for (var a2 = i(r3), l2 = a2.next(); !l2.done; l2 = a2.next()) {
                var c2 = l2.value, u2 = s.Package.packages.get(c2) || new s.Package(c2, true);
                o2.push(u2.promise);
              }
            } catch (e3) {
              t3 = { error: e3 };
            } finally {
              try {
                l2 && !l2.done && (e2 = a2.return) && e2.call(a2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return Promise.all(o2);
          }, t2.load = function() {
            for (var r3, n2, o2 = [], a2 = 0; a2 < arguments.length; a2++)
              o2[a2] = arguments[a2];
            if (0 === o2.length)
              return Promise.resolve();
            var l2 = [], c2 = function(r4) {
              var n3 = s.Package.packages.get(r4);
              n3 || (n3 = new s.Package(r4)).provides(e.CONFIG.provides[r4]), n3.checkNoLoad(), l2.push(n3.promise.then(function() {
                e.CONFIG.versionWarnings && n3.isLoaded && !t2.versions.has(s.Package.resolvePath(r4)) && console.warn("No version information available for component ".concat(r4));
              }));
            };
            try {
              for (var u2 = i(o2), p2 = u2.next(); !p2.done; p2 = u2.next()) {
                var f2 = p2.value;
                c2(f2);
              }
            } catch (t3) {
              r3 = { error: t3 };
            } finally {
              try {
                p2 && !p2.done && (n2 = u2.return) && n2.call(u2);
              } finally {
                if (r3)
                  throw r3.error;
              }
            }
            return s.Package.loadAll(), Promise.all(l2);
          }, t2.preLoad = function() {
            for (var t3, r3, n2 = [], o2 = 0; o2 < arguments.length; o2++)
              n2[o2] = arguments[o2];
            try {
              for (var a2 = i(n2), l2 = a2.next(); !l2.done; l2 = a2.next()) {
                var c2 = l2.value, u2 = s.Package.packages.get(c2);
                u2 || (u2 = new s.Package(c2, true)).provides(e.CONFIG.provides[c2]), u2.loaded();
              }
            } catch (e2) {
              t3 = { error: e2 };
            } finally {
              try {
                l2 && !l2.done && (r3 = a2.return) && r3.call(a2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
          }, t2.defaultReady = function() {
            void 0 !== e.MathJax.startup && e.MathJax.config.startup.ready();
          }, t2.getRoot = function() {
            var t3 = "//../../es5";
            if ("undefined" != typeof document) {
              var e2 = document.currentScript || document.getElementById("MathJax-script");
              e2 && (t3 = e2.src.replace(/\/[^\/]*$/, ""));
            }
            return t3;
          }, t2.checkVersion = function(n2, o2, i2) {
            return t2.versions.set(s.Package.resolvePath(n2), r2), !(!e.CONFIG.versionWarnings || o2 === r2) && (console.warn("Component ".concat(n2, " uses ").concat(o2, " of MathJax; version in use is ").concat(r2)), true);
          }, t2.pathFilters = new u.FunctionList(), t2.pathFilters.add(e.PathFilters.source, 0), t2.pathFilters.add(e.PathFilters.normalize, 10), t2.pathFilters.add(e.PathFilters.prefix, 20);
        }(c = e.Loader || (e.Loader = {})), e.MathJax = a.MathJax, void 0 === e.MathJax.loader) {
          (0, a.combineDefaults)(e.MathJax.config, "loader", { paths: { mathjax: c.getRoot() }, source: {}, dependencies: {}, provides: {}, load: [], ready: c.defaultReady.bind(c), failed: function(t2) {
            return console.log("MathJax(".concat(t2.package || "?", "): ").concat(t2.message));
          }, require: null, pathFilters: [], versionWarnings: true }), (0, a.combineWithMathJax)({ loader: c });
          try {
            for (var p = i(e.MathJax.config.loader.pathFilters), f = p.next(); !f.done; f = p.next()) {
              var h = f.value;
              Array.isArray(h) ? c.pathFilters.add(h[0], h[1]) : c.pathFilters.add(h);
            }
          } catch (t2) {
            n = { error: t2 };
          } finally {
            try {
              f && !f.done && (o = p.return) && o.call(p);
            } finally {
              if (n)
                throw n.error;
            }
          }
        }
        e.CONFIG = e.MathJax.config.loader;
      }, 265: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        }, s = this && this.__spreadArray || function(t2, e2, r2) {
          if (r2 || 2 === arguments.length)
            for (var n2, o2 = 0, i2 = e2.length; o2 < i2; o2++)
              !n2 && o2 in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, o2)), n2[o2] = e2[o2]);
          return t2.concat(n2 || Array.prototype.slice.call(e2));
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.Package = e.PackageError = void 0;
        var l = r(235), c = function(t2) {
          function e2(e3, r2) {
            var n2 = t2.call(this, e3) || this;
            return n2.package = r2, n2;
          }
          return o(e2, t2), e2;
        }(Error);
        e.PackageError = c;
        var u = function() {
          function t2(e2, r2) {
            void 0 === r2 && (r2 = false), this.isLoaded = false, this.isLoading = false, this.hasFailed = false, this.dependents = [], this.dependencies = [], this.dependencyCount = 0, this.provided = [], this.name = e2, this.noLoad = r2, t2.packages.set(e2, this), this.promise = this.makePromise(this.makeDependencies());
          }
          return Object.defineProperty(t2.prototype, "canLoad", { get: function() {
            return 0 === this.dependencyCount && !this.noLoad && !this.isLoading && !this.hasFailed;
          }, enumerable: false, configurable: true }), t2.resolvePath = function(t3, e2) {
            void 0 === e2 && (e2 = true);
            var r2 = { name: t3, original: t3, addExtension: e2 };
            return l.Loader.pathFilters.execute(r2), r2.name;
          }, t2.loadAll = function() {
            var t3, e2;
            try {
              for (var r2 = i(this.packages.values()), n2 = r2.next(); !n2.done; n2 = r2.next()) {
                var o2 = n2.value;
                o2.canLoad && o2.load();
              }
            } catch (e3) {
              t3 = { error: e3 };
            } finally {
              try {
                n2 && !n2.done && (e2 = r2.return) && e2.call(r2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
          }, t2.prototype.makeDependencies = function() {
            var e2, r2, n2 = [], o2 = t2.packages, c2 = this.noLoad, u2 = this.name, p = [];
            l.CONFIG.dependencies.hasOwnProperty(u2) ? p.push.apply(p, s([], a(l.CONFIG.dependencies[u2]), false)) : "core" !== u2 && p.push("core");
            try {
              for (var f = i(p), h = f.next(); !h.done; h = f.next()) {
                var d = h.value, y = o2.get(d) || new t2(d, c2);
                this.dependencies.indexOf(y) < 0 && (y.addDependent(this, c2), this.dependencies.push(y), y.isLoaded || (this.dependencyCount++, n2.push(y.promise)));
              }
            } catch (t3) {
              e2 = { error: t3 };
            } finally {
              try {
                h && !h.done && (r2 = f.return) && r2.call(f);
              } finally {
                if (e2)
                  throw e2.error;
              }
            }
            return n2;
          }, t2.prototype.makePromise = function(t3) {
            var e2 = this, r2 = new Promise(function(t4, r3) {
              e2.resolve = t4, e2.reject = r3;
            }), n2 = l.CONFIG[this.name] || {};
            return n2.ready && (r2 = r2.then(function(t4) {
              return n2.ready(e2.name);
            })), t3.length && (t3.push(r2), r2 = Promise.all(t3).then(function(t4) {
              return t4.join(", ");
            })), n2.failed && r2.catch(function(t4) {
              return n2.failed(new c(t4, e2.name));
            }), r2;
          }, t2.prototype.load = function() {
            if (!this.isLoaded && !this.isLoading && !this.noLoad) {
              this.isLoading = true;
              var e2 = t2.resolvePath(this.name);
              l.CONFIG.require ? this.loadCustom(e2) : this.loadScript(e2);
            }
          }, t2.prototype.loadCustom = function(t3) {
            var e2 = this;
            try {
              var r2 = l.CONFIG.require(t3);
              r2 instanceof Promise ? r2.then(function() {
                return e2.checkLoad();
              }).catch(function(r3) {
                return e2.failed(`Can't load "` + t3 + '"\n' + r3.message.trim());
              }) : this.checkLoad();
            } catch (t4) {
              this.failed(t4.message);
            }
          }, t2.prototype.loadScript = function(t3) {
            var e2 = this, r2 = document.createElement("script");
            r2.src = t3, r2.charset = "UTF-8", r2.onload = function(t4) {
              return e2.checkLoad();
            }, r2.onerror = function(r3) {
              return e2.failed(`Can't load "` + t3 + '"');
            }, document.head.appendChild(r2);
          }, t2.prototype.loaded = function() {
            var t3, e2, r2, n2;
            this.isLoaded = true, this.isLoading = false;
            try {
              for (var o2 = i(this.dependents), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                a2.value.requirementSatisfied();
              }
            } catch (e3) {
              t3 = { error: e3 };
            } finally {
              try {
                a2 && !a2.done && (e2 = o2.return) && e2.call(o2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            try {
              for (var s2 = i(this.provided), l2 = s2.next(); !l2.done; l2 = s2.next()) {
                l2.value.loaded();
              }
            } catch (t4) {
              r2 = { error: t4 };
            } finally {
              try {
                l2 && !l2.done && (n2 = s2.return) && n2.call(s2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            this.resolve(this.name);
          }, t2.prototype.failed = function(t3) {
            this.hasFailed = true, this.isLoading = false, this.reject(new c(t3, this.name));
          }, t2.prototype.checkLoad = function() {
            var t3 = this;
            ((l.CONFIG[this.name] || {}).checkReady || function() {
              return Promise.resolve();
            })().then(function() {
              return t3.loaded();
            }).catch(function(e2) {
              return t3.failed(e2);
            });
          }, t2.prototype.requirementSatisfied = function() {
            this.dependencyCount && (this.dependencyCount--, this.canLoad && this.load());
          }, t2.prototype.provides = function(e2) {
            var r2, n2;
            void 0 === e2 && (e2 = []);
            try {
              for (var o2 = i(e2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value, c2 = t2.packages.get(s2);
                c2 || (l.CONFIG.dependencies[s2] || (l.CONFIG.dependencies[s2] = []), l.CONFIG.dependencies[s2].push(s2), (c2 = new t2(s2, true)).isLoading = true), this.provided.push(c2);
              }
            } catch (t3) {
              r2 = { error: t3 };
            } finally {
              try {
                a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, t2.prototype.addDependent = function(t3, e2) {
            this.dependents.push(t3), e2 || this.checkNoLoad();
          }, t2.prototype.checkNoLoad = function() {
            var t3, e2;
            if (this.noLoad) {
              this.noLoad = false;
              try {
                for (var r2 = i(this.dependencies), n2 = r2.next(); !n2.done; n2 = r2.next()) {
                  n2.value.checkNoLoad();
                }
              } catch (e3) {
                t3 = { error: e3 };
              } finally {
                try {
                  n2 && !n2.done && (e2 = r2.return) && e2.call(r2);
                } finally {
                  if (t3)
                    throw t3.error;
                }
              }
            }
          }, t2.packages = /* @__PURE__ */ new Map(), t2;
        }();
        e.Package = u;
      }, 2388: function(t, e, r) {
        var n = this && this.__assign || function() {
          return n = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, n.apply(this, arguments);
        }, o = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        }, a = this && this.__spreadArray || function(t2, e2, r2) {
          if (r2 || 2 === arguments.length)
            for (var n2, o2 = 0, i2 = e2.length; o2 < i2; o2++)
              !n2 && o2 in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, o2)), n2[o2] = e2[o2]);
          return t2.concat(n2 || Array.prototype.slice.call(e2));
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.CONFIG = e.MathJax = e.Startup = void 0;
        var s, l = r(9515), c = r(8666), u = r(7233);
        !function(t2) {
          var s2, l2, u2 = new c.PrioritizedList();
          function f(e2) {
            return s2.visitTree(e2, t2.document);
          }
          function h() {
            s2 = new e.MathJax._.core.MmlTree.SerializedMmlVisitor.SerializedMmlVisitor(), l2 = e.MathJax._.mathjax.mathjax, t2.input = M(), t2.output = b(), t2.adaptor = E(), t2.handler && l2.handlers.unregister(t2.handler), t2.handler = g(), t2.handler && (l2.handlers.register(t2.handler), t2.document = L());
          }
          function d() {
            var e2, r2;
            t2.input && t2.output && y();
            var n2 = t2.output ? t2.output.name.toLowerCase() : "";
            try {
              for (var i2 = o(t2.input), a2 = i2.next(); !a2.done; a2 = i2.next()) {
                var s3 = a2.value, l3 = s3.name.toLowerCase();
                m(l3, s3), v(l3, s3), t2.output && O(l3, n2, s3);
              }
            } catch (t3) {
              e2 = { error: t3 };
            } finally {
              try {
                a2 && !a2.done && (r2 = i2.return) && r2.call(i2);
              } finally {
                if (e2)
                  throw e2.error;
              }
            }
          }
          function y() {
            e.MathJax.typeset = function(e2) {
              void 0 === e2 && (e2 = null), t2.document.options.elements = e2, t2.document.reset(), t2.document.render();
            }, e.MathJax.typesetPromise = function(e2) {
              return void 0 === e2 && (e2 = null), t2.document.options.elements = e2, t2.document.reset(), l2.handleRetriesFor(function() {
                t2.document.render();
              });
            }, e.MathJax.typesetClear = function(e2) {
              void 0 === e2 && (e2 = null), e2 ? t2.document.clearMathItemsWithin(e2) : t2.document.clear();
            };
          }
          function O(r2, n2, o2) {
            var i2 = r2 + "2" + n2;
            e.MathJax[i2] = function(e2, r3) {
              return void 0 === r3 && (r3 = {}), r3.format = o2.name, t2.document.convert(e2, r3);
            }, e.MathJax[i2 + "Promise"] = function(e2, r3) {
              return void 0 === r3 && (r3 = {}), r3.format = o2.name, l2.handleRetriesFor(function() {
                return t2.document.convert(e2, r3);
              });
            }, e.MathJax[n2 + "Stylesheet"] = function() {
              return t2.output.styleSheet(t2.document);
            }, "getMetricsFor" in t2.output && (e.MathJax.getMetricsFor = function(e2, r3) {
              return t2.output.getMetricsFor(e2, r3);
            });
          }
          function m(r2, n2) {
            var o2 = e.MathJax._.core.MathItem.STATE;
            e.MathJax[r2 + "2mml"] = function(e2, r3) {
              return void 0 === r3 && (r3 = {}), r3.end = o2.CONVERT, r3.format = n2.name, f(t2.document.convert(e2, r3));
            }, e.MathJax[r2 + "2mmlPromise"] = function(e2, r3) {
              return void 0 === r3 && (r3 = {}), r3.end = o2.CONVERT, r3.format = n2.name, l2.handleRetriesFor(function() {
                return f(t2.document.convert(e2, r3));
              });
            };
          }
          function v(t3, r2) {
            e.MathJax[t3 + "Reset"] = function() {
              for (var t4 = [], e2 = 0; e2 < arguments.length; e2++)
                t4[e2] = arguments[e2];
              return r2.reset.apply(r2, a([], i(t4), false));
            };
          }
          function M() {
            var r2, n2, i2 = [];
            try {
              for (var a2 = o(e.CONFIG.input), s3 = a2.next(); !s3.done; s3 = a2.next()) {
                var l3 = s3.value, c2 = t2.constructors[l3];
                if (!c2)
                  throw Error('Input Jax "' + l3 + '" is not defined (has it been loaded?)');
                i2.push(new c2(e.MathJax.config[l3]));
              }
            } catch (t3) {
              r2 = { error: t3 };
            } finally {
              try {
                s3 && !s3.done && (n2 = a2.return) && n2.call(a2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return i2;
          }
          function b() {
            var r2 = e.CONFIG.output;
            if (!r2)
              return null;
            var n2 = t2.constructors[r2];
            if (!n2)
              throw Error('Output Jax "' + r2 + '" is not defined (has it been loaded?)');
            return new n2(e.MathJax.config[r2]);
          }
          function E() {
            var r2 = e.CONFIG.adaptor;
            if (!r2 || "none" === r2)
              return null;
            var n2 = t2.constructors[r2];
            if (!n2)
              throw Error('DOMAdaptor "' + r2 + '" is not defined (has it been loaded?)');
            return n2(e.MathJax.config[r2]);
          }
          function g() {
            var r2, n2, i2 = e.CONFIG.handler;
            if (!i2 || "none" === i2 || !t2.adaptor)
              return null;
            var a2 = t2.constructors[i2];
            if (!a2)
              throw Error('Handler "' + i2 + '" is not defined (has it been loaded?)');
            var s3 = new a2(t2.adaptor, 5);
            try {
              for (var l3 = o(u2), c2 = l3.next(); !c2.done; c2 = l3.next()) {
                s3 = c2.value.item(s3);
              }
            } catch (t3) {
              r2 = { error: t3 };
            } finally {
              try {
                c2 && !c2.done && (n2 = l3.return) && n2.call(l3);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return s3;
          }
          function L(r2) {
            return void 0 === r2 && (r2 = null), l2.document(r2 || e.CONFIG.document, n(n({}, e.MathJax.config.options), { InputJax: t2.input, OutputJax: t2.output }));
          }
          t2.constructors = {}, t2.input = [], t2.output = null, t2.handler = null, t2.adaptor = null, t2.elements = null, t2.document = null, t2.promise = new Promise(function(e2, r2) {
            t2.promiseResolve = e2, t2.promiseReject = r2;
          }), t2.pagePromise = new Promise(function(t3, e2) {
            var n2 = r.g.document;
            if (n2 && n2.readyState && "complete" !== n2.readyState && "interactive" !== n2.readyState) {
              var o2 = function() {
                return t3();
              };
              n2.defaultView.addEventListener("load", o2, true), n2.defaultView.addEventListener("DOMContentLoaded", o2, true);
            } else
              t3();
          }), t2.toMML = f, t2.registerConstructor = function(e2, r2) {
            t2.constructors[e2] = r2;
          }, t2.useHandler = function(t3, r2) {
            void 0 === r2 && (r2 = false), e.CONFIG.handler && !r2 || (e.CONFIG.handler = t3);
          }, t2.useAdaptor = function(t3, r2) {
            void 0 === r2 && (r2 = false), e.CONFIG.adaptor && !r2 || (e.CONFIG.adaptor = t3);
          }, t2.useInput = function(t3, r2) {
            void 0 === r2 && (r2 = false), p && !r2 || e.CONFIG.input.push(t3);
          }, t2.useOutput = function(t3, r2) {
            void 0 === r2 && (r2 = false), e.CONFIG.output && !r2 || (e.CONFIG.output = t3);
          }, t2.extendHandler = function(t3, e2) {
            void 0 === e2 && (e2 = 10), u2.add(t3, e2);
          }, t2.defaultReady = function() {
            h(), d(), t2.pagePromise.then(function() {
              return e.CONFIG.pageReady();
            }).then(function() {
              return t2.promiseResolve();
            }).catch(function(e2) {
              return t2.promiseReject(e2);
            });
          }, t2.defaultPageReady = function() {
            return e.CONFIG.typeset && e.MathJax.typesetPromise ? e.MathJax.typesetPromise(e.CONFIG.elements) : Promise.resolve();
          }, t2.getComponents = h, t2.makeMethods = d, t2.makeTypesetMethods = y, t2.makeOutputMethods = O, t2.makeMmlMethods = m, t2.makeResetMethod = v, t2.getInputJax = M, t2.getOutputJax = b, t2.getAdaptor = E, t2.getHandler = g, t2.getDocument = L;
        }(s = e.Startup || (e.Startup = {})), e.MathJax = l.MathJax, void 0 === e.MathJax._.startup && ((0, l.combineDefaults)(e.MathJax.config, "startup", { input: [], output: "", handler: null, adaptor: null, document: "undefined" == typeof document ? "" : document, elements: null, typeset: true, ready: s.defaultReady.bind(s), pageReady: s.defaultPageReady.bind(s) }), (0, l.combineWithMathJax)({ startup: s, options: {} }), e.MathJax.config.startup.invalidOption && (u.OPTIONS.invalidOption = e.MathJax.config.startup.invalidOption), e.MathJax.config.startup.optionError && (u.OPTIONS.optionError = e.MathJax.config.startup.optionError)), e.CONFIG = e.MathJax.config.startup;
        var p = 0 !== e.CONFIG.input.length;
      }, 3282: function(t, e) {
        Object.defineProperty(e, "__esModule", { value: true }), e.VERSION = void 0, e.VERSION = "3.2.2";
      }, 5009: function(t, e) {
        var r = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.AbstractDOMAdaptor = void 0;
        var n = function() {
          function t2(t3) {
            void 0 === t3 && (t3 = null), this.document = t3;
          }
          return t2.prototype.node = function(t3, e2, n2, o) {
            var i, a;
            void 0 === e2 && (e2 = {}), void 0 === n2 && (n2 = []);
            var s = this.create(t3, o);
            this.setAttributes(s, e2);
            try {
              for (var l = r(n2), c = l.next(); !c.done; c = l.next()) {
                var u = c.value;
                this.append(s, u);
              }
            } catch (t4) {
              i = { error: t4 };
            } finally {
              try {
                c && !c.done && (a = l.return) && a.call(l);
              } finally {
                if (i)
                  throw i.error;
              }
            }
            return s;
          }, t2.prototype.setAttributes = function(t3, e2) {
            var n2, o, i, a, s, l;
            if (e2.style && "string" != typeof e2.style)
              try {
                for (var c = r(Object.keys(e2.style)), u = c.next(); !u.done; u = c.next()) {
                  var p = u.value;
                  this.setStyle(t3, p.replace(/-([a-z])/g, function(t4, e3) {
                    return e3.toUpperCase();
                  }), e2.style[p]);
                }
              } catch (t4) {
                n2 = { error: t4 };
              } finally {
                try {
                  u && !u.done && (o = c.return) && o.call(c);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
            if (e2.properties)
              try {
                for (var f = r(Object.keys(e2.properties)), h = f.next(); !h.done; h = f.next()) {
                  t3[p = h.value] = e2.properties[p];
                }
              } catch (t4) {
                i = { error: t4 };
              } finally {
                try {
                  h && !h.done && (a = f.return) && a.call(f);
                } finally {
                  if (i)
                    throw i.error;
                }
              }
            try {
              for (var d = r(Object.keys(e2)), y = d.next(); !y.done; y = d.next()) {
                "style" === (p = y.value) && "string" != typeof e2.style || "properties" === p || this.setAttribute(t3, p, e2[p]);
              }
            } catch (t4) {
              s = { error: t4 };
            } finally {
              try {
                y && !y.done && (l = d.return) && l.call(d);
              } finally {
                if (s)
                  throw s.error;
              }
            }
          }, t2.prototype.replace = function(t3, e2) {
            return this.insert(t3, e2), this.remove(e2), e2;
          }, t2.prototype.childNode = function(t3, e2) {
            return this.childNodes(t3)[e2];
          }, t2.prototype.allClasses = function(t3) {
            var e2 = this.getAttribute(t3, "class");
            return e2 ? e2.replace(/  +/g, " ").replace(/^ /, "").replace(/ $/, "").split(/ /) : [];
          }, t2;
        }();
        e.AbstractDOMAdaptor = n;
      }, 3494: function(t, e, r) {
        Object.defineProperty(e, "__esModule", { value: true }), e.AbstractFindMath = void 0;
        var n = r(7233), o = function() {
          function t2(t3) {
            var e2 = this.constructor;
            this.options = (0, n.userOptions)((0, n.defaultOptions)({}, e2.OPTIONS), t3);
          }
          return t2.OPTIONS = {}, t2;
        }();
        e.AbstractFindMath = o;
      }, 3670: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        });
        Object.defineProperty(e, "__esModule", { value: true }), e.AbstractHandler = void 0;
        var i = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), e2;
        }(r(5722).AbstractMathDocument), a = function() {
          function t2(t3, e2) {
            void 0 === e2 && (e2 = 5), this.documentClass = i, this.adaptor = t3, this.priority = e2;
          }
          return Object.defineProperty(t2.prototype, "name", { get: function() {
            return this.constructor.NAME;
          }, enumerable: false, configurable: true }), t2.prototype.handlesDocument = function(t3) {
            return false;
          }, t2.prototype.create = function(t3, e2) {
            return new this.documentClass(t3, this.adaptor, e2);
          }, t2.NAME = "generic", t2;
        }();
        e.AbstractHandler = a;
      }, 805: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.HandlerList = void 0;
        var a = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), e2.prototype.register = function(t3) {
            return this.add(t3, t3.priority);
          }, e2.prototype.unregister = function(t3) {
            this.remove(t3);
          }, e2.prototype.handlesDocument = function(t3) {
            var e3, r2;
            try {
              for (var n2 = i(this), o2 = n2.next(); !o2.done; o2 = n2.next()) {
                var a2 = o2.value.item;
                if (a2.handlesDocument(t3))
                  return a2;
              }
            } catch (t4) {
              e3 = { error: t4 };
            } finally {
              try {
                o2 && !o2.done && (r2 = n2.return) && r2.call(n2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            throw new Error("Can't find handler for document");
          }, e2.prototype.document = function(t3, e3) {
            return void 0 === e3 && (e3 = null), this.handlesDocument(t3).create(t3, e3);
          }, e2;
        }(r(8666).PrioritizedList);
        e.HandlerList = a;
      }, 9206: function(t, e, r) {
        Object.defineProperty(e, "__esModule", { value: true }), e.AbstractInputJax = void 0;
        var n = r(7233), o = r(7525), i = function() {
          function t2(t3) {
            void 0 === t3 && (t3 = {}), this.adaptor = null, this.mmlFactory = null;
            var e2 = this.constructor;
            this.options = (0, n.userOptions)((0, n.defaultOptions)({}, e2.OPTIONS), t3), this.preFilters = new o.FunctionList(), this.postFilters = new o.FunctionList();
          }
          return Object.defineProperty(t2.prototype, "name", { get: function() {
            return this.constructor.NAME;
          }, enumerable: false, configurable: true }), t2.prototype.setAdaptor = function(t3) {
            this.adaptor = t3;
          }, t2.prototype.setMmlFactory = function(t3) {
            this.mmlFactory = t3;
          }, t2.prototype.initialize = function() {
          }, t2.prototype.reset = function() {
            for (var t3 = [], e2 = 0; e2 < arguments.length; e2++)
              t3[e2] = arguments[e2];
          }, Object.defineProperty(t2.prototype, "processStrings", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), t2.prototype.findMath = function(t3, e2) {
            return [];
          }, t2.prototype.executeFilters = function(t3, e2, r2, n2) {
            var o2 = { math: e2, document: r2, data: n2 };
            return t3.execute(o2), o2.data;
          }, t2.NAME = "generic", t2.OPTIONS = {}, t2;
        }();
        e.AbstractInputJax = i;
      }, 5722: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        }, s = this && this.__spreadArray || function(t2, e2, r2) {
          if (r2 || 2 === arguments.length)
            for (var n2, o2 = 0, i2 = e2.length; o2 < i2; o2++)
              !n2 && o2 in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, o2)), n2[o2] = e2[o2]);
          return t2.concat(n2 || Array.prototype.slice.call(e2));
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.AbstractMathDocument = e.resetAllOptions = e.resetOptions = e.RenderList = void 0;
        var l = r(7233), c = r(9206), u = r(2975), p = r(9e3), f = r(4474), h = r(3909), d = r(6751), y = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), e2.create = function(t3) {
            var e3, r2, n2 = new this();
            try {
              for (var o2 = i(Object.keys(t3)), s2 = o2.next(); !s2.done; s2 = o2.next()) {
                var l2 = s2.value, c2 = a(this.action(l2, t3[l2]), 2), u2 = c2[0], p2 = c2[1];
                p2 && n2.add(u2, p2);
              }
            } catch (t4) {
              e3 = { error: t4 };
            } finally {
              try {
                s2 && !s2.done && (r2 = o2.return) && r2.call(o2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return n2;
          }, e2.action = function(t3, e3) {
            var r2, n2, o2, i2, s2, l2, c2 = true, u2 = e3[0];
            if (1 === e3.length || "boolean" == typeof e3[1])
              2 === e3.length && (c2 = e3[1]), s2 = (r2 = a(this.methodActions(t3), 2))[0], l2 = r2[1];
            else if ("string" == typeof e3[1])
              if ("string" == typeof e3[2]) {
                4 === e3.length && (c2 = e3[3]);
                var p2 = a(e3.slice(1), 2), f2 = p2[0], h2 = p2[1];
                s2 = (n2 = a(this.methodActions(f2, h2), 2))[0], l2 = n2[1];
              } else
                3 === e3.length && (c2 = e3[2]), s2 = (o2 = a(this.methodActions(e3[1]), 2))[0], l2 = o2[1];
            else
              4 === e3.length && (c2 = e3[3]), s2 = (i2 = a(e3.slice(1), 2))[0], l2 = i2[1];
            return [{ id: t3, renderDoc: s2, renderMath: l2, convert: c2 }, u2];
          }, e2.methodActions = function(t3, e3) {
            return void 0 === e3 && (e3 = t3), [function(e4) {
              return t3 && e4[t3](), false;
            }, function(t4, r2) {
              return e3 && t4[e3](r2), false;
            }];
          }, e2.prototype.renderDoc = function(t3, e3) {
            var r2, n2;
            void 0 === e3 && (e3 = f.STATE.UNPROCESSED);
            try {
              for (var o2 = i(this.items), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value;
                if (s2.priority >= e3 && s2.item.renderDoc(t3))
                  return;
              }
            } catch (t4) {
              r2 = { error: t4 };
            } finally {
              try {
                a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e2.prototype.renderMath = function(t3, e3, r2) {
            var n2, o2;
            void 0 === r2 && (r2 = f.STATE.UNPROCESSED);
            try {
              for (var a2 = i(this.items), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var l2 = s2.value;
                if (l2.priority >= r2 && l2.item.renderMath(t3, e3))
                  return;
              }
            } catch (t4) {
              n2 = { error: t4 };
            } finally {
              try {
                s2 && !s2.done && (o2 = a2.return) && o2.call(a2);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
          }, e2.prototype.renderConvert = function(t3, e3, r2) {
            var n2, o2;
            void 0 === r2 && (r2 = f.STATE.LAST);
            try {
              for (var a2 = i(this.items), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var l2 = s2.value;
                if (l2.priority > r2)
                  return;
                if (l2.item.convert && l2.item.renderMath(t3, e3))
                  return;
              }
            } catch (t4) {
              n2 = { error: t4 };
            } finally {
              try {
                s2 && !s2.done && (o2 = a2.return) && o2.call(a2);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
          }, e2.prototype.findID = function(t3) {
            var e3, r2;
            try {
              for (var n2 = i(this.items), o2 = n2.next(); !o2.done; o2 = n2.next()) {
                var a2 = o2.value;
                if (a2.item.id === t3)
                  return a2.item;
              }
            } catch (t4) {
              e3 = { error: t4 };
            } finally {
              try {
                o2 && !o2.done && (r2 = n2.return) && r2.call(n2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return null;
          }, e2;
        }(r(8666).PrioritizedList);
        e.RenderList = y, e.resetOptions = { all: false, processed: false, inputJax: null, outputJax: null }, e.resetAllOptions = { all: true, processed: true, inputJax: [], outputJax: [] };
        var O = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), e2.prototype.compile = function(t3) {
            return null;
          }, e2;
        }(c.AbstractInputJax), m = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), e2.prototype.typeset = function(t3, e3) {
            return void 0 === e3 && (e3 = null), null;
          }, e2.prototype.escaped = function(t3, e3) {
            return null;
          }, e2;
        }(u.AbstractOutputJax), v = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), e2;
        }(p.AbstractMathList), M = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), e2;
        }(f.AbstractMathItem), b = function() {
          function t2(e2, r2, n2) {
            var o2 = this, i2 = this.constructor;
            this.document = e2, this.options = (0, l.userOptions)((0, l.defaultOptions)({}, i2.OPTIONS), n2), this.math = new (this.options.MathList || v)(), this.renderActions = y.create(this.options.renderActions), this.processed = new t2.ProcessBits(), this.outputJax = this.options.OutputJax || new m();
            var a2 = this.options.InputJax || [new O()];
            Array.isArray(a2) || (a2 = [a2]), this.inputJax = a2, this.adaptor = r2, this.outputJax.setAdaptor(r2), this.inputJax.map(function(t3) {
              return t3.setAdaptor(r2);
            }), this.mmlFactory = this.options.MmlFactory || new h.MmlFactory(), this.inputJax.map(function(t3) {
              return t3.setMmlFactory(o2.mmlFactory);
            }), this.outputJax.initialize(), this.inputJax.map(function(t3) {
              return t3.initialize();
            });
          }
          return Object.defineProperty(t2.prototype, "kind", { get: function() {
            return this.constructor.KIND;
          }, enumerable: false, configurable: true }), t2.prototype.addRenderAction = function(t3) {
            for (var e2 = [], r2 = 1; r2 < arguments.length; r2++)
              e2[r2 - 1] = arguments[r2];
            var n2 = a(y.action(t3, e2), 2), o2 = n2[0], i2 = n2[1];
            this.renderActions.add(o2, i2);
          }, t2.prototype.removeRenderAction = function(t3) {
            var e2 = this.renderActions.findID(t3);
            e2 && this.renderActions.remove(e2);
          }, t2.prototype.render = function() {
            return this.renderActions.renderDoc(this), this;
          }, t2.prototype.rerender = function(t3) {
            return void 0 === t3 && (t3 = f.STATE.RERENDER), this.state(t3 - 1), this.render(), this;
          }, t2.prototype.convert = function(t3, e2) {
            void 0 === e2 && (e2 = {});
            var r2 = (0, l.userOptions)({ format: this.inputJax[0].name, display: true, end: f.STATE.LAST, em: 16, ex: 8, containerWidth: null, lineWidth: 1e6, scale: 1, family: "" }, e2), n2 = r2.format, o2 = r2.display, i2 = r2.end, a2 = r2.ex, s2 = r2.em, c2 = r2.containerWidth, u2 = r2.lineWidth, p2 = r2.scale, h2 = r2.family;
            null === c2 && (c2 = 80 * a2);
            var d2 = this.inputJax.reduce(function(t4, e3) {
              return e3.name === n2 ? e3 : t4;
            }, null), y2 = new this.options.MathItem(t3, d2, o2);
            return y2.start.node = this.adaptor.body(this.document), y2.setMetrics(s2, a2, c2, u2, p2), this.outputJax.options.mtextInheritFont && (y2.outputData.mtextFamily = h2), this.outputJax.options.merrorInheritFont && (y2.outputData.merrorFamily = h2), y2.convert(this, i2), y2.typesetRoot || y2.root;
          }, t2.prototype.findMath = function(t3) {
            return void 0 === t3 && (t3 = null), this.processed.set("findMath"), this;
          }, t2.prototype.compile = function() {
            var t3, e2, r2, n2;
            if (!this.processed.isSet("compile")) {
              var o2 = [];
              try {
                for (var a2 = i(this.math), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                  var l2 = s2.value;
                  this.compileMath(l2), void 0 !== l2.inputData.recompile && o2.push(l2);
                }
              } catch (e3) {
                t3 = { error: e3 };
              } finally {
                try {
                  s2 && !s2.done && (e2 = a2.return) && e2.call(a2);
                } finally {
                  if (t3)
                    throw t3.error;
                }
              }
              try {
                for (var c2 = i(o2), u2 = c2.next(); !u2.done; u2 = c2.next()) {
                  var p2 = (l2 = u2.value).inputData.recompile;
                  l2.state(p2.state), l2.inputData.recompile = p2, this.compileMath(l2);
                }
              } catch (t4) {
                r2 = { error: t4 };
              } finally {
                try {
                  u2 && !u2.done && (n2 = c2.return) && n2.call(c2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              this.processed.set("compile");
            }
            return this;
          }, t2.prototype.compileMath = function(t3) {
            try {
              t3.compile(this);
            } catch (e2) {
              if (e2.retry || e2.restart)
                throw e2;
              this.options.compileError(this, t3, e2), t3.inputData.error = e2;
            }
          }, t2.prototype.compileError = function(t3, e2) {
            t3.root = this.mmlFactory.create("math", null, [this.mmlFactory.create("merror", { "data-mjx-error": e2.message, title: e2.message }, [this.mmlFactory.create("mtext", null, [this.mmlFactory.create("text").setText("Math input error")])])]), t3.display && t3.root.attributes.set("display", "block"), t3.inputData.error = e2.message;
          }, t2.prototype.typeset = function() {
            var t3, e2;
            if (!this.processed.isSet("typeset")) {
              try {
                for (var r2 = i(this.math), n2 = r2.next(); !n2.done; n2 = r2.next()) {
                  var o2 = n2.value;
                  try {
                    o2.typeset(this);
                  } catch (t4) {
                    if (t4.retry || t4.restart)
                      throw t4;
                    this.options.typesetError(this, o2, t4), o2.outputData.error = t4;
                  }
                }
              } catch (e3) {
                t3 = { error: e3 };
              } finally {
                try {
                  n2 && !n2.done && (e2 = r2.return) && e2.call(r2);
                } finally {
                  if (t3)
                    throw t3.error;
                }
              }
              this.processed.set("typeset");
            }
            return this;
          }, t2.prototype.typesetError = function(t3, e2) {
            t3.typesetRoot = this.adaptor.node("mjx-container", { class: "MathJax mjx-output-error", jax: this.outputJax.name }, [this.adaptor.node("span", { "data-mjx-error": e2.message, title: e2.message, style: { color: "red", "background-color": "yellow", "line-height": "normal" } }, [this.adaptor.text("Math output error")])]), t3.display && this.adaptor.setAttributes(t3.typesetRoot, { style: { display: "block", margin: "1em 0", "text-align": "center" } }), t3.outputData.error = e2.message;
          }, t2.prototype.getMetrics = function() {
            return this.processed.isSet("getMetrics") || (this.outputJax.getMetrics(this), this.processed.set("getMetrics")), this;
          }, t2.prototype.updateDocument = function() {
            var t3, e2;
            if (!this.processed.isSet("updateDocument")) {
              try {
                for (var r2 = i(this.math.reversed()), n2 = r2.next(); !n2.done; n2 = r2.next()) {
                  n2.value.updateDocument(this);
                }
              } catch (e3) {
                t3 = { error: e3 };
              } finally {
                try {
                  n2 && !n2.done && (e2 = r2.return) && e2.call(r2);
                } finally {
                  if (t3)
                    throw t3.error;
                }
              }
              this.processed.set("updateDocument");
            }
            return this;
          }, t2.prototype.removeFromDocument = function(t3) {
            return void 0 === t3 && (t3 = false), this;
          }, t2.prototype.state = function(t3, e2) {
            var r2, n2;
            void 0 === e2 && (e2 = false);
            try {
              for (var o2 = i(this.math), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                a2.value.state(t3, e2);
              }
            } catch (t4) {
              r2 = { error: t4 };
            } finally {
              try {
                a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return t3 < f.STATE.INSERTED && this.processed.clear("updateDocument"), t3 < f.STATE.TYPESET && (this.processed.clear("typeset"), this.processed.clear("getMetrics")), t3 < f.STATE.COMPILED && this.processed.clear("compile"), this;
          }, t2.prototype.reset = function(t3) {
            var r2;
            return void 0 === t3 && (t3 = { processed: true }), (t3 = (0, l.userOptions)(Object.assign({}, e.resetOptions), t3)).all && Object.assign(t3, e.resetAllOptions), t3.processed && this.processed.reset(), t3.inputJax && this.inputJax.forEach(function(e2) {
              return e2.reset.apply(e2, s([], a(t3.inputJax), false));
            }), t3.outputJax && (r2 = this.outputJax).reset.apply(r2, s([], a(t3.outputJax), false)), this;
          }, t2.prototype.clear = function() {
            return this.reset(), this.math.clear(), this;
          }, t2.prototype.concat = function(t3) {
            return this.math.merge(t3), this;
          }, t2.prototype.clearMathItemsWithin = function(t3) {
            var e2, r2 = this.getMathItemsWithin(t3);
            return (e2 = this.math).remove.apply(e2, s([], a(r2), false)), r2;
          }, t2.prototype.getMathItemsWithin = function(t3) {
            var e2, r2, n2, o2;
            Array.isArray(t3) || (t3 = [t3]);
            var a2 = this.adaptor, s2 = [], l2 = a2.getElements(t3, this.document);
            try {
              t:
                for (var c2 = i(this.math), u2 = c2.next(); !u2.done; u2 = c2.next()) {
                  var p2 = u2.value;
                  try {
                    for (var f2 = (n2 = void 0, i(l2)), h2 = f2.next(); !h2.done; h2 = f2.next()) {
                      var d2 = h2.value;
                      if (p2.start.node && a2.contains(d2, p2.start.node)) {
                        s2.push(p2);
                        continue t;
                      }
                    }
                  } catch (t4) {
                    n2 = { error: t4 };
                  } finally {
                    try {
                      h2 && !h2.done && (o2 = f2.return) && o2.call(f2);
                    } finally {
                      if (n2)
                        throw n2.error;
                    }
                  }
                }
            } catch (t4) {
              e2 = { error: t4 };
            } finally {
              try {
                u2 && !u2.done && (r2 = c2.return) && r2.call(c2);
              } finally {
                if (e2)
                  throw e2.error;
              }
            }
            return s2;
          }, t2.KIND = "MathDocument", t2.OPTIONS = { OutputJax: null, InputJax: null, MmlFactory: null, MathList: v, MathItem: M, compileError: function(t3, e2, r2) {
            t3.compileError(e2, r2);
          }, typesetError: function(t3, e2, r2) {
            t3.typesetError(e2, r2);
          }, renderActions: (0, l.expandable)({ find: [f.STATE.FINDMATH, "findMath", "", false], compile: [f.STATE.COMPILED], metrics: [f.STATE.METRICS, "getMetrics", "", false], typeset: [f.STATE.TYPESET], update: [f.STATE.INSERTED, "updateDocument", false] }) }, t2.ProcessBits = (0, d.BitFieldClass)("findMath", "compile", "getMetrics", "typeset", "updateDocument"), t2;
        }();
        e.AbstractMathDocument = b;
      }, 4474: function(t, e) {
        Object.defineProperty(e, "__esModule", { value: true }), e.newState = e.STATE = e.AbstractMathItem = e.protoItem = void 0, e.protoItem = function(t2, e2, r2, n, o, i, a) {
          return void 0 === a && (a = null), { open: t2, math: e2, close: r2, n, start: { n: o }, end: { n: i }, display: a };
        };
        var r = function() {
          function t2(t3, r2, n, o, i) {
            void 0 === n && (n = true), void 0 === o && (o = { i: 0, n: 0, delim: "" }), void 0 === i && (i = { i: 0, n: 0, delim: "" }), this.root = null, this.typesetRoot = null, this.metrics = {}, this.inputData = {}, this.outputData = {}, this._state = e.STATE.UNPROCESSED, this.math = t3, this.inputJax = r2, this.display = n, this.start = o, this.end = i, this.root = null, this.typesetRoot = null, this.metrics = {}, this.inputData = {}, this.outputData = {};
          }
          return Object.defineProperty(t2.prototype, "isEscaped", { get: function() {
            return null === this.display;
          }, enumerable: false, configurable: true }), t2.prototype.render = function(t3) {
            t3.renderActions.renderMath(this, t3);
          }, t2.prototype.rerender = function(t3, r2) {
            void 0 === r2 && (r2 = e.STATE.RERENDER), this.state() >= r2 && this.state(r2 - 1), t3.renderActions.renderMath(this, t3, r2);
          }, t2.prototype.convert = function(t3, r2) {
            void 0 === r2 && (r2 = e.STATE.LAST), t3.renderActions.renderConvert(this, t3, r2);
          }, t2.prototype.compile = function(t3) {
            this.state() < e.STATE.COMPILED && (this.root = this.inputJax.compile(this, t3), this.state(e.STATE.COMPILED));
          }, t2.prototype.typeset = function(t3) {
            this.state() < e.STATE.TYPESET && (this.typesetRoot = t3.outputJax[this.isEscaped ? "escaped" : "typeset"](this, t3), this.state(e.STATE.TYPESET));
          }, t2.prototype.updateDocument = function(t3) {
          }, t2.prototype.removeFromDocument = function(t3) {
            void 0 === t3 && (t3 = false);
          }, t2.prototype.setMetrics = function(t3, e2, r2, n, o) {
            this.metrics = { em: t3, ex: e2, containerWidth: r2, lineWidth: n, scale: o };
          }, t2.prototype.state = function(t3, r2) {
            return void 0 === t3 && (t3 = null), void 0 === r2 && (r2 = false), null != t3 && (t3 < e.STATE.INSERTED && this._state >= e.STATE.INSERTED && this.removeFromDocument(r2), t3 < e.STATE.TYPESET && this._state >= e.STATE.TYPESET && (this.outputData = {}), t3 < e.STATE.COMPILED && this._state >= e.STATE.COMPILED && (this.inputData = {}), this._state = t3), this._state;
          }, t2.prototype.reset = function(t3) {
            void 0 === t3 && (t3 = false), this.state(e.STATE.UNPROCESSED, t3);
          }, t2;
        }();
        e.AbstractMathItem = r, e.STATE = { UNPROCESSED: 0, FINDMATH: 10, COMPILED: 20, CONVERT: 100, METRICS: 110, RERENDER: 125, TYPESET: 150, INSERTED: 200, LAST: 1e4 }, e.newState = function(t2, r2) {
          if (t2 in e.STATE)
            throw Error("State " + t2 + " already exists");
          e.STATE[t2] = r2;
        };
      }, 9e3: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        });
        Object.defineProperty(e, "__esModule", { value: true }), e.AbstractMathList = void 0;
        var i = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), e2.prototype.isBefore = function(t3, e3) {
            return t3.start.i < e3.start.i || t3.start.i === e3.start.i && t3.start.n < e3.start.n;
          }, e2;
        }(r(103).LinkedList);
        e.AbstractMathList = i;
      }, 91: function(t, e) {
        var r = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.Attributes = e.INHERIT = void 0, e.INHERIT = "_inherit_";
        var n = function() {
          function t2(t3, e2) {
            this.global = e2, this.defaults = Object.create(e2), this.inherited = Object.create(this.defaults), this.attributes = Object.create(this.inherited), Object.assign(this.defaults, t3);
          }
          return t2.prototype.set = function(t3, e2) {
            this.attributes[t3] = e2;
          }, t2.prototype.setList = function(t3) {
            Object.assign(this.attributes, t3);
          }, t2.prototype.get = function(t3) {
            var r2 = this.attributes[t3];
            return r2 === e.INHERIT && (r2 = this.global[t3]), r2;
          }, t2.prototype.getExplicit = function(t3) {
            if (this.attributes.hasOwnProperty(t3))
              return this.attributes[t3];
          }, t2.prototype.getList = function() {
            for (var t3, e2, n2 = [], o = 0; o < arguments.length; o++)
              n2[o] = arguments[o];
            var i = {};
            try {
              for (var a = r(n2), s = a.next(); !s.done; s = a.next()) {
                var l = s.value;
                i[l] = this.get(l);
              }
            } catch (e3) {
              t3 = { error: e3 };
            } finally {
              try {
                s && !s.done && (e2 = a.return) && e2.call(a);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return i;
          }, t2.prototype.setInherited = function(t3, e2) {
            this.inherited[t3] = e2;
          }, t2.prototype.getInherited = function(t3) {
            return this.inherited[t3];
          }, t2.prototype.getDefault = function(t3) {
            return this.defaults[t3];
          }, t2.prototype.isSet = function(t3) {
            return this.attributes.hasOwnProperty(t3) || this.inherited.hasOwnProperty(t3);
          }, t2.prototype.hasDefault = function(t3) {
            return t3 in this.defaults;
          }, t2.prototype.getExplicitNames = function() {
            return Object.keys(this.attributes);
          }, t2.prototype.getInheritedNames = function() {
            return Object.keys(this.inherited);
          }, t2.prototype.getDefaultNames = function() {
            return Object.keys(this.defaults);
          }, t2.prototype.getGlobalNames = function() {
            return Object.keys(this.global);
          }, t2.prototype.getAllAttributes = function() {
            return this.attributes;
          }, t2.prototype.getAllInherited = function() {
            return this.inherited;
          }, t2.prototype.getAllDefaults = function() {
            return this.defaults;
          }, t2.prototype.getAllGlobals = function() {
            return this.global;
          }, t2;
        }();
        e.Attributes = n;
      }, 6336: function(t, e, r) {
        var n;
        Object.defineProperty(e, "__esModule", { value: true }), e.MML = void 0;
        var o = r(9007), i = r(3233), a = r(450), s = r(3050), l = r(2756), c = r(4770), u = r(6030), p = r(7265), f = r(9878), h = r(6850), d = r(7131), y = r(6145), O = r(1314), m = r(1581), v = r(7238), M = r(5741), b = r(5410), E = r(6661), g = r(9145), L = r(4461), x = r(5184), N = r(6405), _ = r(1349), T = r(5022), R = r(4359), A = r(142), S = r(7590), C = r(3985), w = r(9102), I = r(3948), P = r(1334);
        e.MML = ((n = {})[i.MmlMath.prototype.kind] = i.MmlMath, n[a.MmlMi.prototype.kind] = a.MmlMi, n[s.MmlMn.prototype.kind] = s.MmlMn, n[l.MmlMo.prototype.kind] = l.MmlMo, n[c.MmlMtext.prototype.kind] = c.MmlMtext, n[u.MmlMspace.prototype.kind] = u.MmlMspace, n[p.MmlMs.prototype.kind] = p.MmlMs, n[f.MmlMrow.prototype.kind] = f.MmlMrow, n[f.MmlInferredMrow.prototype.kind] = f.MmlInferredMrow, n[h.MmlMfrac.prototype.kind] = h.MmlMfrac, n[d.MmlMsqrt.prototype.kind] = d.MmlMsqrt, n[y.MmlMroot.prototype.kind] = y.MmlMroot, n[O.MmlMstyle.prototype.kind] = O.MmlMstyle, n[m.MmlMerror.prototype.kind] = m.MmlMerror, n[v.MmlMpadded.prototype.kind] = v.MmlMpadded, n[M.MmlMphantom.prototype.kind] = M.MmlMphantom, n[b.MmlMfenced.prototype.kind] = b.MmlMfenced, n[E.MmlMenclose.prototype.kind] = E.MmlMenclose, n[g.MmlMaction.prototype.kind] = g.MmlMaction, n[L.MmlMsub.prototype.kind] = L.MmlMsub, n[L.MmlMsup.prototype.kind] = L.MmlMsup, n[L.MmlMsubsup.prototype.kind] = L.MmlMsubsup, n[x.MmlMunder.prototype.kind] = x.MmlMunder, n[x.MmlMover.prototype.kind] = x.MmlMover, n[x.MmlMunderover.prototype.kind] = x.MmlMunderover, n[N.MmlMmultiscripts.prototype.kind] = N.MmlMmultiscripts, n[N.MmlMprescripts.prototype.kind] = N.MmlMprescripts, n[N.MmlNone.prototype.kind] = N.MmlNone, n[_.MmlMtable.prototype.kind] = _.MmlMtable, n[T.MmlMlabeledtr.prototype.kind] = T.MmlMlabeledtr, n[T.MmlMtr.prototype.kind] = T.MmlMtr, n[R.MmlMtd.prototype.kind] = R.MmlMtd, n[A.MmlMaligngroup.prototype.kind] = A.MmlMaligngroup, n[S.MmlMalignmark.prototype.kind] = S.MmlMalignmark, n[C.MmlMglyph.prototype.kind] = C.MmlMglyph, n[w.MmlSemantics.prototype.kind] = w.MmlSemantics, n[w.MmlAnnotation.prototype.kind] = w.MmlAnnotation, n[w.MmlAnnotationXML.prototype.kind] = w.MmlAnnotationXML, n[I.TeXAtom.prototype.kind] = I.TeXAtom, n[P.MathChoice.prototype.kind] = P.MathChoice, n[o.TextNode.prototype.kind] = o.TextNode, n[o.XMLNode.prototype.kind] = o.XMLNode, n);
      }, 1759: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MathMLVisitor = void 0;
        var a = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.document = null, e3;
          }
          return o(e2, t2), e2.prototype.visitTree = function(t3, e3) {
            this.document = e3;
            var r2 = e3.createElement("top");
            return this.visitNode(t3, r2), this.document = null, r2.firstChild;
          }, e2.prototype.visitTextNode = function(t3, e3) {
            e3.appendChild(this.document.createTextNode(t3.getText()));
          }, e2.prototype.visitXMLNode = function(t3, e3) {
            e3.appendChild(t3.getXML().cloneNode(true));
          }, e2.prototype.visitInferredMrowNode = function(t3, e3) {
            var r2, n2;
            try {
              for (var o2 = i(t3.childNodes), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s = a2.value;
                this.visitNode(s, e3);
              }
            } catch (t4) {
              r2 = { error: t4 };
            } finally {
              try {
                a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e2.prototype.visitDefault = function(t3, e3) {
            var r2, n2, o2 = this.document.createElement(t3.kind);
            this.addAttributes(t3, o2);
            try {
              for (var a2 = i(t3.childNodes), s = a2.next(); !s.done; s = a2.next()) {
                var l = s.value;
                this.visitNode(l, o2);
              }
            } catch (t4) {
              r2 = { error: t4 };
            } finally {
              try {
                s && !s.done && (n2 = a2.return) && n2.call(a2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            e3.appendChild(o2);
          }, e2.prototype.addAttributes = function(t3, e3) {
            var r2, n2, o2 = t3.attributes, a2 = o2.getExplicitNames();
            try {
              for (var s = i(a2), l = s.next(); !l.done; l = s.next()) {
                var c = l.value;
                e3.setAttribute(c, o2.getExplicit(c).toString());
              }
            } catch (t4) {
              r2 = { error: t4 };
            } finally {
              try {
                l && !l.done && (n2 = s.return) && n2.call(s);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }, e2;
        }(r(6325).MmlVisitor);
        e.MathMLVisitor = a;
      }, 3909: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        });
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlFactory = void 0;
        var i = r(7860), a = r(6336), s = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "MML", { get: function() {
            return this.node;
          }, enumerable: false, configurable: true }), e2.defaultNodes = a.MML, e2;
        }(i.AbstractNodeFactory);
        e.MmlFactory = s;
      }, 9007: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        }, a = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, s = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.XMLNode = e.TextNode = e.AbstractMmlEmptyNode = e.AbstractMmlBaseNode = e.AbstractMmlLayoutNode = e.AbstractMmlTokenNode = e.AbstractMmlNode = e.indentAttributes = e.TEXCLASSNAMES = e.TEXCLASS = void 0;
        var l = r(91), c = r(4596);
        e.TEXCLASS = { ORD: 0, OP: 1, BIN: 2, REL: 3, OPEN: 4, CLOSE: 5, PUNCT: 6, INNER: 7, VCENTER: 8, NONE: -1 }, e.TEXCLASSNAMES = ["ORD", "OP", "BIN", "REL", "OPEN", "CLOSE", "PUNCT", "INNER", "VCENTER"];
        var u = ["", "thinmathspace", "mediummathspace", "thickmathspace"], p = [[0, -1, 2, 3, 0, 0, 0, 1], [-1, -1, 0, 3, 0, 0, 0, 1], [2, 2, 0, 0, 2, 0, 0, 2], [3, 3, 0, 0, 3, 0, 0, 3], [0, 0, 0, 0, 0, 0, 0, 0], [0, -1, 2, 3, 0, 0, 0, 1], [1, 1, 0, 1, 1, 1, 1, 1], [1, -1, 2, 3, 1, 0, 1, 1]];
        e.indentAttributes = ["indentalign", "indentalignfirst", "indentshift", "indentshiftfirst"];
        var f = function(t2) {
          function r2(e2, r3, n2) {
            void 0 === r3 && (r3 = {}), void 0 === n2 && (n2 = []);
            var o2 = t2.call(this, e2) || this;
            return o2.prevClass = null, o2.prevLevel = null, o2.texclass = null, o2.arity < 0 && (o2.childNodes = [e2.create("inferredMrow")], o2.childNodes[0].parent = o2), o2.setChildren(n2), o2.attributes = new l.Attributes(e2.getNodeClass(o2.kind).defaults, e2.getNodeClass("math").defaults), o2.attributes.setList(r3), o2;
          }
          return o(r2, t2), r2.prototype.copy = function(t3) {
            var e2, r3, n2, o2;
            void 0 === t3 && (t3 = false);
            var s2 = this.factory.create(this.kind);
            if (s2.properties = i({}, this.properties), this.attributes) {
              var l2 = this.attributes.getAllAttributes();
              try {
                for (var c2 = a(Object.keys(l2)), u2 = c2.next(); !u2.done; u2 = c2.next()) {
                  var p2 = u2.value;
                  ("id" !== p2 || t3) && s2.attributes.set(p2, l2[p2]);
                }
              } catch (t4) {
                e2 = { error: t4 };
              } finally {
                try {
                  u2 && !u2.done && (r3 = c2.return) && r3.call(c2);
                } finally {
                  if (e2)
                    throw e2.error;
                }
              }
            }
            if (this.childNodes && this.childNodes.length) {
              var f2 = this.childNodes;
              1 === f2.length && f2[0].isInferred && (f2 = f2[0].childNodes);
              try {
                for (var h2 = a(f2), d2 = h2.next(); !d2.done; d2 = h2.next()) {
                  var y2 = d2.value;
                  y2 ? s2.appendChild(y2.copy()) : s2.childNodes.push(null);
                }
              } catch (t4) {
                n2 = { error: t4 };
              } finally {
                try {
                  d2 && !d2.done && (o2 = h2.return) && o2.call(h2);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
            }
            return s2;
          }, Object.defineProperty(r2.prototype, "texClass", { get: function() {
            return this.texclass;
          }, set: function(t3) {
            this.texclass = t3;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "isToken", { get: function() {
            return false;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "isEmbellished", { get: function() {
            return false;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "isSpacelike", { get: function() {
            return false;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "linebreakContainer", { get: function() {
            return false;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "hasNewLine", { get: function() {
            return false;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "arity", { get: function() {
            return 1 / 0;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "isInferred", { get: function() {
            return false;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "Parent", { get: function() {
            for (var t3 = this.parent; t3 && t3.notParent; )
              t3 = t3.Parent;
            return t3;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "notParent", { get: function() {
            return false;
          }, enumerable: false, configurable: true }), r2.prototype.setChildren = function(e2) {
            return this.arity < 0 ? this.childNodes[0].setChildren(e2) : t2.prototype.setChildren.call(this, e2);
          }, r2.prototype.appendChild = function(e2) {
            var r3, n2, o2 = this;
            if (this.arity < 0)
              return this.childNodes[0].appendChild(e2), e2;
            if (e2.isInferred) {
              if (this.arity === 1 / 0)
                return e2.childNodes.forEach(function(e3) {
                  return t2.prototype.appendChild.call(o2, e3);
                }), e2;
              var i2 = e2;
              (e2 = this.factory.create("mrow")).setChildren(i2.childNodes), e2.attributes = i2.attributes;
              try {
                for (var s2 = a(i2.getPropertyNames()), l2 = s2.next(); !l2.done; l2 = s2.next()) {
                  var c2 = l2.value;
                  e2.setProperty(c2, i2.getProperty(c2));
                }
              } catch (t3) {
                r3 = { error: t3 };
              } finally {
                try {
                  l2 && !l2.done && (n2 = s2.return) && n2.call(s2);
                } finally {
                  if (r3)
                    throw r3.error;
                }
              }
            }
            return t2.prototype.appendChild.call(this, e2);
          }, r2.prototype.replaceChild = function(e2, r3) {
            return this.arity < 0 ? (this.childNodes[0].replaceChild(e2, r3), e2) : t2.prototype.replaceChild.call(this, e2, r3);
          }, r2.prototype.core = function() {
            return this;
          }, r2.prototype.coreMO = function() {
            return this;
          }, r2.prototype.coreIndex = function() {
            return 0;
          }, r2.prototype.childPosition = function() {
            for (var t3, e2, r3 = this, n2 = r3.parent; n2 && n2.notParent; )
              r3 = n2, n2 = n2.parent;
            if (n2) {
              var o2 = 0;
              try {
                for (var i2 = a(n2.childNodes), s2 = i2.next(); !s2.done; s2 = i2.next()) {
                  if (s2.value === r3)
                    return o2;
                  o2++;
                }
              } catch (e3) {
                t3 = { error: e3 };
              } finally {
                try {
                  s2 && !s2.done && (e2 = i2.return) && e2.call(i2);
                } finally {
                  if (t3)
                    throw t3.error;
                }
              }
            }
            return null;
          }, r2.prototype.setTeXclass = function(t3) {
            return this.getPrevClass(t3), null != this.texClass ? this : t3;
          }, r2.prototype.updateTeXclass = function(t3) {
            t3 && (this.prevClass = t3.prevClass, this.prevLevel = t3.prevLevel, t3.prevClass = t3.prevLevel = null, this.texClass = t3.texClass);
          }, r2.prototype.getPrevClass = function(t3) {
            t3 && (this.prevClass = t3.texClass, this.prevLevel = t3.attributes.get("scriptlevel"));
          }, r2.prototype.texSpacing = function() {
            var t3 = null != this.prevClass ? this.prevClass : e.TEXCLASS.NONE, r3 = this.texClass || e.TEXCLASS.ORD;
            if (t3 === e.TEXCLASS.NONE || r3 === e.TEXCLASS.NONE)
              return "";
            t3 === e.TEXCLASS.VCENTER && (t3 = e.TEXCLASS.ORD), r3 === e.TEXCLASS.VCENTER && (r3 = e.TEXCLASS.ORD);
            var n2 = p[t3][r3];
            return (this.prevLevel > 0 || this.attributes.get("scriptlevel") > 0) && n2 >= 0 ? "" : u[Math.abs(n2)];
          }, r2.prototype.hasSpacingAttributes = function() {
            return this.isEmbellished && this.coreMO().hasSpacingAttributes();
          }, r2.prototype.setInheritedAttributes = function(t3, e2, n2, o2) {
            var i2, l2;
            void 0 === t3 && (t3 = {}), void 0 === e2 && (e2 = false), void 0 === n2 && (n2 = 0), void 0 === o2 && (o2 = false);
            var c2 = this.attributes.getAllDefaults();
            try {
              for (var u2 = a(Object.keys(t3)), p2 = u2.next(); !p2.done; p2 = u2.next()) {
                var f2 = p2.value;
                if (c2.hasOwnProperty(f2) || r2.alwaysInherit.hasOwnProperty(f2)) {
                  var h2 = s(t3[f2], 2), d2 = h2[0], y2 = h2[1];
                  ((r2.noInherit[d2] || {})[this.kind] || {})[f2] || this.attributes.setInherited(f2, y2);
                }
              }
            } catch (t4) {
              i2 = { error: t4 };
            } finally {
              try {
                p2 && !p2.done && (l2 = u2.return) && l2.call(u2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            void 0 === this.attributes.getExplicit("displaystyle") && this.attributes.setInherited("displaystyle", e2), void 0 === this.attributes.getExplicit("scriptlevel") && this.attributes.setInherited("scriptlevel", n2), o2 && this.setProperty("texprimestyle", o2);
            var O2 = this.arity;
            if (O2 >= 0 && O2 !== 1 / 0 && (1 === O2 && 0 === this.childNodes.length || 1 !== O2 && this.childNodes.length !== O2))
              if (O2 < this.childNodes.length)
                this.childNodes = this.childNodes.slice(0, O2);
              else
                for (; this.childNodes.length < O2; )
                  this.appendChild(this.factory.create("mrow"));
            this.setChildInheritedAttributes(t3, e2, n2, o2);
          }, r2.prototype.setChildInheritedAttributes = function(t3, e2, r3, n2) {
            var o2, i2;
            try {
              for (var s2 = a(this.childNodes), l2 = s2.next(); !l2.done; l2 = s2.next()) {
                l2.value.setInheritedAttributes(t3, e2, r3, n2);
              }
            } catch (t4) {
              o2 = { error: t4 };
            } finally {
              try {
                l2 && !l2.done && (i2 = s2.return) && i2.call(s2);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
          }, r2.prototype.addInheritedAttributes = function(t3, e2) {
            var r3, n2, o2 = i({}, t3);
            try {
              for (var s2 = a(Object.keys(e2)), l2 = s2.next(); !l2.done; l2 = s2.next()) {
                var c2 = l2.value;
                "displaystyle" !== c2 && "scriptlevel" !== c2 && "style" !== c2 && (o2[c2] = [this.kind, e2[c2]]);
              }
            } catch (t4) {
              r3 = { error: t4 };
            } finally {
              try {
                l2 && !l2.done && (n2 = s2.return) && n2.call(s2);
              } finally {
                if (r3)
                  throw r3.error;
              }
            }
            return o2;
          }, r2.prototype.inheritAttributesFrom = function(t3) {
            var e2 = t3.attributes, r3 = e2.get("displaystyle"), n2 = e2.get("scriptlevel"), o2 = e2.isSet("mathsize") ? { mathsize: ["math", e2.get("mathsize")] } : {}, i2 = t3.getProperty("texprimestyle") || false;
            this.setInheritedAttributes(o2, r3, n2, i2);
          }, r2.prototype.verifyTree = function(t3) {
            if (void 0 === t3 && (t3 = null), null !== t3) {
              this.verifyAttributes(t3);
              var e2 = this.arity;
              t3.checkArity && e2 >= 0 && e2 !== 1 / 0 && (1 === e2 && 0 === this.childNodes.length || 1 !== e2 && this.childNodes.length !== e2) && this.mError('Wrong number of children for "' + this.kind + '" node', t3, true), this.verifyChildren(t3);
            }
          }, r2.prototype.verifyAttributes = function(t3) {
            var e2, r3;
            if (t3.checkAttributes) {
              var n2 = this.attributes, o2 = [];
              try {
                for (var i2 = a(n2.getExplicitNames()), s2 = i2.next(); !s2.done; s2 = i2.next()) {
                  var l2 = s2.value;
                  "data-" === l2.substr(0, 5) || void 0 !== n2.getDefault(l2) || l2.match(/^(?:class|style|id|(?:xlink:)?href)$/) || o2.push(l2);
                }
              } catch (t4) {
                e2 = { error: t4 };
              } finally {
                try {
                  s2 && !s2.done && (r3 = i2.return) && r3.call(i2);
                } finally {
                  if (e2)
                    throw e2.error;
                }
              }
              o2.length && this.mError("Unknown attributes for " + this.kind + " node: " + o2.join(", "), t3);
            }
          }, r2.prototype.verifyChildren = function(t3) {
            var e2, r3;
            try {
              for (var n2 = a(this.childNodes), o2 = n2.next(); !o2.done; o2 = n2.next()) {
                o2.value.verifyTree(t3);
              }
            } catch (t4) {
              e2 = { error: t4 };
            } finally {
              try {
                o2 && !o2.done && (r3 = n2.return) && r3.call(n2);
              } finally {
                if (e2)
                  throw e2.error;
              }
            }
          }, r2.prototype.mError = function(t3, e2, r3) {
            if (void 0 === r3 && (r3 = false), this.parent && this.parent.isKind("merror"))
              return null;
            var n2 = this.factory.create("merror");
            if (n2.attributes.set("data-mjx-message", t3), e2.fullErrors || r3) {
              var o2 = this.factory.create("mtext"), i2 = this.factory.create("text");
              i2.setText(e2.fullErrors ? t3 : this.kind), o2.appendChild(i2), n2.appendChild(o2), this.parent.replaceChild(n2, this);
            } else
              this.parent.replaceChild(n2, this), n2.appendChild(this);
            return n2;
          }, r2.defaults = { mathbackground: l.INHERIT, mathcolor: l.INHERIT, mathsize: l.INHERIT, dir: l.INHERIT }, r2.noInherit = { mstyle: { mpadded: { width: true, height: true, depth: true, lspace: true, voffset: true }, mtable: { width: true, height: true, depth: true, align: true } }, maligngroup: { mrow: { groupalign: true }, mtable: { groupalign: true } } }, r2.alwaysInherit = { scriptminsize: true, scriptsizemultiplier: true }, r2.verifyDefaults = { checkArity: true, checkAttributes: false, fullErrors: false, fixMmultiscripts: true, fixMtables: true }, r2;
        }(c.AbstractNode);
        e.AbstractMmlNode = f;
        var h = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "isToken", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.prototype.getText = function() {
            var t3, e3, r2 = "";
            try {
              for (var n2 = a(this.childNodes), o2 = n2.next(); !o2.done; o2 = n2.next()) {
                var i2 = o2.value;
                i2 instanceof m && (r2 += i2.getText());
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                o2 && !o2.done && (e3 = n2.return) && e3.call(n2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return r2;
          }, e2.prototype.setChildInheritedAttributes = function(t3, e3, r2, n2) {
            var o2, i2;
            try {
              for (var s2 = a(this.childNodes), l2 = s2.next(); !l2.done; l2 = s2.next()) {
                var c2 = l2.value;
                c2 instanceof f && c2.setInheritedAttributes(t3, e3, r2, n2);
              }
            } catch (t4) {
              o2 = { error: t4 };
            } finally {
              try {
                l2 && !l2.done && (i2 = s2.return) && i2.call(s2);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
          }, e2.prototype.walkTree = function(t3, e3) {
            var r2, n2;
            t3(this, e3);
            try {
              for (var o2 = a(this.childNodes), i2 = o2.next(); !i2.done; i2 = o2.next()) {
                var s2 = i2.value;
                s2 instanceof f && s2.walkTree(t3, e3);
              }
            } catch (t4) {
              r2 = { error: t4 };
            } finally {
              try {
                i2 && !i2.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return e3;
          }, e2.defaults = i(i({}, f.defaults), { mathvariant: "normal", mathsize: l.INHERIT }), e2;
        }(f);
        e.AbstractMmlTokenNode = h;
        var d = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "isSpacelike", { get: function() {
            return this.childNodes[0].isSpacelike;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "isEmbellished", { get: function() {
            return this.childNodes[0].isEmbellished;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return -1;
          }, enumerable: false, configurable: true }), e2.prototype.core = function() {
            return this.childNodes[0];
          }, e2.prototype.coreMO = function() {
            return this.childNodes[0].coreMO();
          }, e2.prototype.setTeXclass = function(t3) {
            return t3 = this.childNodes[0].setTeXclass(t3), this.updateTeXclass(this.childNodes[0]), t3;
          }, e2.defaults = f.defaults, e2;
        }(f);
        e.AbstractMmlLayoutNode = d;
        var y = function(t2) {
          function r2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(r2, t2), Object.defineProperty(r2.prototype, "isEmbellished", { get: function() {
            return this.childNodes[0].isEmbellished;
          }, enumerable: false, configurable: true }), r2.prototype.core = function() {
            return this.childNodes[0];
          }, r2.prototype.coreMO = function() {
            return this.childNodes[0].coreMO();
          }, r2.prototype.setTeXclass = function(t3) {
            var r3, n2;
            this.getPrevClass(t3), this.texClass = e.TEXCLASS.ORD;
            var o2 = this.childNodes[0];
            o2 ? this.isEmbellished || o2.isKind("mi") ? (t3 = o2.setTeXclass(t3), this.updateTeXclass(this.core())) : (o2.setTeXclass(null), t3 = this) : t3 = this;
            try {
              for (var i2 = a(this.childNodes.slice(1)), s2 = i2.next(); !s2.done; s2 = i2.next()) {
                var l2 = s2.value;
                l2 && l2.setTeXclass(null);
              }
            } catch (t4) {
              r3 = { error: t4 };
            } finally {
              try {
                s2 && !s2.done && (n2 = i2.return) && n2.call(i2);
              } finally {
                if (r3)
                  throw r3.error;
              }
            }
            return t3;
          }, r2.defaults = f.defaults, r2;
        }(f);
        e.AbstractMmlBaseNode = y;
        var O = function(t2) {
          function r2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(r2, t2), Object.defineProperty(r2.prototype, "isToken", { get: function() {
            return false;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "isEmbellished", { get: function() {
            return false;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "isSpacelike", { get: function() {
            return false;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "linebreakContainer", { get: function() {
            return false;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "hasNewLine", { get: function() {
            return false;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "arity", { get: function() {
            return 0;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "isInferred", { get: function() {
            return false;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "notParent", { get: function() {
            return false;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "Parent", { get: function() {
            return this.parent;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "texClass", { get: function() {
            return e.TEXCLASS.NONE;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "prevClass", { get: function() {
            return e.TEXCLASS.NONE;
          }, enumerable: false, configurable: true }), Object.defineProperty(r2.prototype, "prevLevel", { get: function() {
            return 0;
          }, enumerable: false, configurable: true }), r2.prototype.hasSpacingAttributes = function() {
            return false;
          }, Object.defineProperty(r2.prototype, "attributes", { get: function() {
            return null;
          }, enumerable: false, configurable: true }), r2.prototype.core = function() {
            return this;
          }, r2.prototype.coreMO = function() {
            return this;
          }, r2.prototype.coreIndex = function() {
            return 0;
          }, r2.prototype.childPosition = function() {
            return 0;
          }, r2.prototype.setTeXclass = function(t3) {
            return t3;
          }, r2.prototype.texSpacing = function() {
            return "";
          }, r2.prototype.setInheritedAttributes = function(t3, e2, r3, n2) {
          }, r2.prototype.inheritAttributesFrom = function(t3) {
          }, r2.prototype.verifyTree = function(t3) {
          }, r2.prototype.mError = function(t3, e2, r3) {
            return void 0 === r3 && (r3 = false), null;
          }, r2;
        }(c.AbstractEmptyNode);
        e.AbstractMmlEmptyNode = O;
        var m = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.text = "", e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "text";
          }, enumerable: false, configurable: true }), e2.prototype.getText = function() {
            return this.text;
          }, e2.prototype.setText = function(t3) {
            return this.text = t3, this;
          }, e2.prototype.copy = function() {
            return this.factory.create(this.kind).setText(this.getText());
          }, e2.prototype.toString = function() {
            return this.text;
          }, e2;
        }(O);
        e.TextNode = m;
        var v = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.xml = null, e3.adaptor = null, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "XML";
          }, enumerable: false, configurable: true }), e2.prototype.getXML = function() {
            return this.xml;
          }, e2.prototype.setXML = function(t3, e3) {
            return void 0 === e3 && (e3 = null), this.xml = t3, this.adaptor = e3, this;
          }, e2.prototype.getSerializedXML = function() {
            return this.adaptor.serializeXML(this.xml);
          }, e2.prototype.copy = function() {
            return this.factory.create(this.kind).setXML(this.adaptor.clone(this.xml));
          }, e2.prototype.toString = function() {
            return "XML data";
          }, e2;
        }(O);
        e.XMLNode = v;
      }, 3948: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.TeXAtom = void 0;
        var a = r(9007), s = r(2756), l = function(t2) {
          function e2(e3, r2, n2) {
            var o2 = t2.call(this, e3, r2, n2) || this;
            return o2.texclass = a.TEXCLASS.ORD, o2.setProperty("texClass", o2.texClass), o2;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "TeXAtom";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return -1;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "notParent", { get: function() {
            return this.childNodes[0] && 1 === this.childNodes[0].childNodes.length;
          }, enumerable: false, configurable: true }), e2.prototype.setTeXclass = function(t3) {
            return this.childNodes[0].setTeXclass(null), this.adjustTeXclass(t3);
          }, e2.prototype.adjustTeXclass = function(t3) {
            return t3;
          }, e2.defaults = i({}, a.AbstractMmlBaseNode.defaults), e2;
        }(a.AbstractMmlBaseNode);
        e.TeXAtom = l, l.prototype.adjustTeXclass = s.MmlMo.prototype.adjustTeXclass;
      }, 9145: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMaction = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "maction";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 1;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "selected", { get: function() {
            var t3 = this.attributes.get("selection"), e3 = Math.max(1, Math.min(this.childNodes.length, t3)) - 1;
            return this.childNodes[e3] || this.factory.create("mrow");
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "isEmbellished", { get: function() {
            return this.selected.isEmbellished;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "isSpacelike", { get: function() {
            return this.selected.isSpacelike;
          }, enumerable: false, configurable: true }), e2.prototype.core = function() {
            return this.selected.core();
          }, e2.prototype.coreMO = function() {
            return this.selected.coreMO();
          }, e2.prototype.verifyAttributes = function(e3) {
            (t2.prototype.verifyAttributes.call(this, e3), "toggle" !== this.attributes.get("actiontype") && void 0 !== this.attributes.getExplicit("selection")) && delete this.attributes.getAllAttributes().selection;
          }, e2.prototype.setTeXclass = function(t3) {
            "tooltip" === this.attributes.get("actiontype") && this.childNodes[1] && this.childNodes[1].setTeXclass(null);
            var e3 = this.selected;
            return t3 = e3.setTeXclass(t3), this.updateTeXclass(e3), t3;
          }, e2.prototype.nextToggleSelection = function() {
            var t3 = Math.max(1, this.attributes.get("selection") + 1);
            t3 > this.childNodes.length && (t3 = 1), this.attributes.set("selection", t3);
          }, e2.defaults = i(i({}, a.AbstractMmlNode.defaults), { actiontype: "toggle", selection: 1 }), e2;
        }(a.AbstractMmlNode);
        e.MmlMaction = s;
      }, 142: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMaligngroup = void 0;
        var a = r(9007), s = r(91), l = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "maligngroup";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "isSpacelike", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.prototype.setChildInheritedAttributes = function(e3, r2, n2, o2) {
            e3 = this.addInheritedAttributes(e3, this.attributes.getAllAttributes()), t2.prototype.setChildInheritedAttributes.call(this, e3, r2, n2, o2);
          }, e2.defaults = i(i({}, a.AbstractMmlLayoutNode.defaults), { groupalign: s.INHERIT }), e2;
        }(a.AbstractMmlLayoutNode);
        e.MmlMaligngroup = l;
      }, 7590: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMalignmark = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "malignmark";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 0;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "isSpacelike", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.defaults = i(i({}, a.AbstractMmlNode.defaults), { edge: "left" }), e2;
        }(a.AbstractMmlNode);
        e.MmlMalignmark = s;
      }, 3233: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMath = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "math";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "linebreakContainer", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.prototype.setChildInheritedAttributes = function(e3, r2, n2, o2) {
            "display" === this.attributes.get("mode") && this.attributes.setInherited("display", "block"), e3 = this.addInheritedAttributes(e3, this.attributes.getAllAttributes()), r2 = !!this.attributes.get("displaystyle") || !this.attributes.get("displaystyle") && "block" === this.attributes.get("display"), this.attributes.setInherited("displaystyle", r2), n2 = this.attributes.get("scriptlevel") || this.constructor.defaults.scriptlevel, t2.prototype.setChildInheritedAttributes.call(this, e3, r2, n2, o2);
          }, e2.defaults = i(i({}, a.AbstractMmlLayoutNode.defaults), { mathvariant: "normal", mathsize: "normal", mathcolor: "", mathbackground: "transparent", dir: "ltr", scriptlevel: 0, displaystyle: false, display: "inline", maxwidth: "", overflow: "linebreak", altimg: "", "altimg-width": "", "altimg-height": "", "altimg-valign": "", alttext: "", cdgroup: "", scriptsizemultiplier: 1 / Math.sqrt(2), scriptminsize: "8px", infixlinebreakstyle: "before", lineleading: "1ex", linebreakmultchar: "\u2062", indentshift: "auto", indentalign: "auto", indenttarget: "", indentalignfirst: "indentalign", indentshiftfirst: "indentshift", indentalignlast: "indentalign", indentshiftlast: "indentshift" }), e2;
        }(a.AbstractMmlLayoutNode);
        e.MmlMath = s;
      }, 1334: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MathChoice = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "MathChoice";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 4;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "notParent", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.prototype.setInheritedAttributes = function(t3, e3, r2, n2) {
            var o2 = e3 ? 0 : Math.max(0, Math.min(r2, 2)) + 1, i2 = this.childNodes[o2] || this.factory.create("mrow");
            this.parent.replaceChild(i2, this), i2.setInheritedAttributes(t3, e3, r2, n2);
          }, e2.defaults = i({}, a.AbstractMmlBaseNode.defaults), e2;
        }(a.AbstractMmlBaseNode);
        e.MathChoice = s;
      }, 6661: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMenclose = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.texclass = a.TEXCLASS.ORD, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "menclose";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return -1;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "linebreakContininer", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.prototype.setTeXclass = function(t3) {
            return t3 = this.childNodes[0].setTeXclass(t3), this.updateTeXclass(this.childNodes[0]), t3;
          }, e2.defaults = i(i({}, a.AbstractMmlNode.defaults), { notation: "longdiv" }), e2;
        }(a.AbstractMmlNode);
        e.MmlMenclose = s;
      }, 1581: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMerror = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.texclass = a.TEXCLASS.ORD, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "merror";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return -1;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "linebreakContainer", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.defaults = i({}, a.AbstractMmlNode.defaults), e2;
        }(a.AbstractMmlNode);
        e.MmlMerror = s;
      }, 5410: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        }, a = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMfenced = void 0;
        var s = r(9007), l = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.texclass = s.TEXCLASS.INNER, e3.separators = [], e3.open = null, e3.close = null, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mfenced";
          }, enumerable: false, configurable: true }), e2.prototype.setTeXclass = function(t3) {
            this.getPrevClass(t3), this.open && (t3 = this.open.setTeXclass(t3)), this.childNodes[0] && (t3 = this.childNodes[0].setTeXclass(t3));
            for (var e3 = 1, r2 = this.childNodes.length; e3 < r2; e3++)
              this.separators[e3 - 1] && (t3 = this.separators[e3 - 1].setTeXclass(t3)), this.childNodes[e3] && (t3 = this.childNodes[e3].setTeXclass(t3));
            return this.close && (t3 = this.close.setTeXclass(t3)), this.updateTeXclass(this.open), t3;
          }, e2.prototype.setChildInheritedAttributes = function(e3, r2, n2, o2) {
            var i2, s2;
            this.addFakeNodes();
            try {
              for (var l2 = a([this.open, this.close].concat(this.separators)), c = l2.next(); !c.done; c = l2.next()) {
                var u = c.value;
                u && u.setInheritedAttributes(e3, r2, n2, o2);
              }
            } catch (t3) {
              i2 = { error: t3 };
            } finally {
              try {
                c && !c.done && (s2 = l2.return) && s2.call(l2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            t2.prototype.setChildInheritedAttributes.call(this, e3, r2, n2, o2);
          }, e2.prototype.addFakeNodes = function() {
            var t3, e3, r2 = this.attributes.getList("open", "close", "separators"), n2 = r2.open, o2 = r2.close, i2 = r2.separators;
            if (n2 = n2.replace(/[ \t\n\r]/g, ""), o2 = o2.replace(/[ \t\n\r]/g, ""), i2 = i2.replace(/[ \t\n\r]/g, ""), n2 && (this.open = this.fakeNode(n2, { fence: true, form: "prefix" }, s.TEXCLASS.OPEN)), i2) {
              for (; i2.length < this.childNodes.length - 1; )
                i2 += i2.charAt(i2.length - 1);
              var l2 = 0;
              try {
                for (var c = a(this.childNodes.slice(1)), u = c.next(); !u.done; u = c.next()) {
                  u.value && this.separators.push(this.fakeNode(i2.charAt(l2++)));
                }
              } catch (e4) {
                t3 = { error: e4 };
              } finally {
                try {
                  u && !u.done && (e3 = c.return) && e3.call(c);
                } finally {
                  if (t3)
                    throw t3.error;
                }
              }
            }
            o2 && (this.close = this.fakeNode(o2, { fence: true, form: "postfix" }, s.TEXCLASS.CLOSE));
          }, e2.prototype.fakeNode = function(t3, e3, r2) {
            void 0 === e3 && (e3 = {}), void 0 === r2 && (r2 = null);
            var n2 = this.factory.create("text").setText(t3), o2 = this.factory.create("mo", e3, [n2]);
            return o2.texClass = r2, o2.parent = this, o2;
          }, e2.defaults = i(i({}, s.AbstractMmlNode.defaults), { open: "(", close: ")", separators: "," }), e2;
        }(s.AbstractMmlNode);
        e.MmlMfenced = l;
      }, 6850: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        }, a = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMfrac = void 0;
        var s = r(9007), l = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mfrac";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 2;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "linebreakContainer", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.prototype.setTeXclass = function(t3) {
            var e3, r2;
            this.getPrevClass(t3);
            try {
              for (var n2 = a(this.childNodes), o2 = n2.next(); !o2.done; o2 = n2.next()) {
                o2.value.setTeXclass(null);
              }
            } catch (t4) {
              e3 = { error: t4 };
            } finally {
              try {
                o2 && !o2.done && (r2 = n2.return) && r2.call(n2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return this;
          }, e2.prototype.setChildInheritedAttributes = function(t3, e3, r2, n2) {
            (!e3 || r2 > 0) && r2++, this.childNodes[0].setInheritedAttributes(t3, false, r2, n2), this.childNodes[1].setInheritedAttributes(t3, false, r2, true);
          }, e2.defaults = i(i({}, s.AbstractMmlBaseNode.defaults), { linethickness: "medium", numalign: "center", denomalign: "center", bevelled: false }), e2;
        }(s.AbstractMmlBaseNode);
        e.MmlMfrac = l;
      }, 3985: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMglyph = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.texclass = a.TEXCLASS.ORD, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mglyph";
          }, enumerable: false, configurable: true }), e2.prototype.verifyAttributes = function(e3) {
            var r2 = this.attributes.getList("src", "fontfamily", "index"), n2 = r2.src, o2 = r2.fontfamily, i2 = r2.index;
            "" !== n2 || "" !== o2 && "" !== i2 ? t2.prototype.verifyAttributes.call(this, e3) : this.mError("mglyph must have either src or fontfamily and index attributes", e3, true);
          }, e2.defaults = i(i({}, a.AbstractMmlTokenNode.defaults), { alt: "", src: "", index: "", width: "auto", height: "auto", valign: "0em" }), e2;
        }(a.AbstractMmlTokenNode);
        e.MmlMglyph = s;
      }, 450: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMi = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.texclass = a.TEXCLASS.ORD, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mi";
          }, enumerable: false, configurable: true }), e2.prototype.setInheritedAttributes = function(r2, n2, o2, i2) {
            void 0 === r2 && (r2 = {}), void 0 === n2 && (n2 = false), void 0 === o2 && (o2 = 0), void 0 === i2 && (i2 = false), t2.prototype.setInheritedAttributes.call(this, r2, n2, o2, i2), this.getText().match(e2.singleCharacter) && !r2.mathvariant && this.attributes.setInherited("mathvariant", "italic");
          }, e2.prototype.setTeXclass = function(t3) {
            this.getPrevClass(t3);
            var r2 = this.getText();
            return r2.length > 1 && r2.match(e2.operatorName) && "normal" === this.attributes.get("mathvariant") && void 0 === this.getProperty("autoOP") && void 0 === this.getProperty("texClass") && (this.texClass = a.TEXCLASS.OP, this.setProperty("autoOP", true)), this;
          }, e2.defaults = i({}, a.AbstractMmlTokenNode.defaults), e2.operatorName = /^[a-z][a-z0-9]*$/i, e2.singleCharacter = /^[\uD800-\uDBFF]?.[\u0300-\u036F\u1AB0-\u1ABE\u1DC0-\u1DFF\u20D0-\u20EF]*$/, e2;
        }(a.AbstractMmlTokenNode);
        e.MmlMi = s;
      }, 6405: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlNone = e.MmlMprescripts = e.MmlMmultiscripts = void 0;
        var a = r(9007), s = r(4461), l = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mmultiscripts";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 1;
          }, enumerable: false, configurable: true }), e2.prototype.setChildInheritedAttributes = function(t3, e3, r2, n2) {
            this.childNodes[0].setInheritedAttributes(t3, e3, r2, n2);
            for (var o2 = false, i2 = 1, a2 = 0; i2 < this.childNodes.length; i2++) {
              var s2 = this.childNodes[i2];
              if (s2.isKind("mprescripts")) {
                if (!o2 && (o2 = true, i2 % 2 == 0)) {
                  var l2 = this.factory.create("mrow");
                  this.childNodes.splice(i2, 0, l2), l2.parent = this, i2++;
                }
              } else {
                var c2 = n2 || a2 % 2 == 0;
                s2.setInheritedAttributes(t3, false, r2 + 1, c2), a2++;
              }
            }
            this.childNodes.length % 2 == (o2 ? 1 : 0) && (this.appendChild(this.factory.create("mrow")), this.childNodes[this.childNodes.length - 1].setInheritedAttributes(t3, false, r2 + 1, n2));
          }, e2.prototype.verifyChildren = function(e3) {
            for (var r2 = false, n2 = e3.fixMmultiscripts, o2 = 0; o2 < this.childNodes.length; o2++) {
              var i2 = this.childNodes[o2];
              i2.isKind("mprescripts") && (r2 ? i2.mError(i2.kind + " can only appear once in " + this.kind, e3, true) : (r2 = true, o2 % 2 != 0 || n2 || this.mError("There must be an equal number of prescripts of each type", e3)));
            }
            this.childNodes.length % 2 != (r2 ? 1 : 0) || n2 || this.mError("There must be an equal number of scripts of each type", e3), t2.prototype.verifyChildren.call(this, e3);
          }, e2.defaults = i({}, s.MmlMsubsup.defaults), e2;
        }(s.MmlMsubsup);
        e.MmlMmultiscripts = l;
        var c = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mprescripts";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 0;
          }, enumerable: false, configurable: true }), e2.prototype.verifyTree = function(e3) {
            t2.prototype.verifyTree.call(this, e3), this.parent && !this.parent.isKind("mmultiscripts") && this.mError(this.kind + " must be a child of mmultiscripts", e3, true);
          }, e2.defaults = i({}, a.AbstractMmlNode.defaults), e2;
        }(a.AbstractMmlNode);
        e.MmlMprescripts = c;
        var u = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "none";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 0;
          }, enumerable: false, configurable: true }), e2.prototype.verifyTree = function(e3) {
            t2.prototype.verifyTree.call(this, e3), this.parent && !this.parent.isKind("mmultiscripts") && this.mError(this.kind + " must be a child of mmultiscripts", e3, true);
          }, e2.defaults = i({}, a.AbstractMmlNode.defaults), e2;
        }(a.AbstractMmlNode);
        e.MmlNone = u;
      }, 3050: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMn = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.texclass = a.TEXCLASS.ORD, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mn";
          }, enumerable: false, configurable: true }), e2.defaults = i({}, a.AbstractMmlTokenNode.defaults), e2;
        }(a.AbstractMmlTokenNode);
        e.MmlMn = s;
      }, 2756: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        }, a = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        }, s = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMo = void 0;
        var l = r(9007), c = r(4082), u = r(505), p = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3._texClass = null, e3.lspace = 5 / 18, e3.rspace = 5 / 18, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "texClass", { get: function() {
            if (null === this._texClass) {
              var t3 = this.getText(), e3 = a(this.handleExplicitForm(this.getForms()), 3), r2 = e3[0], n2 = e3[1], o2 = e3[2], i2 = this.constructor.OPTABLE, s2 = i2[r2][t3] || i2[n2][t3] || i2[o2][t3];
              return s2 ? s2[2] : l.TEXCLASS.REL;
            }
            return this._texClass;
          }, set: function(t3) {
            this._texClass = t3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mo";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "isEmbellished", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "hasNewLine", { get: function() {
            return "newline" === this.attributes.get("linebreak");
          }, enumerable: false, configurable: true }), e2.prototype.coreParent = function() {
            for (var t3 = this, e3 = this, r2 = this.factory.getNodeClass("math"); e3 && e3.isEmbellished && e3.coreMO() === this && !(e3 instanceof r2); )
              t3 = e3, e3 = e3.parent;
            return t3;
          }, e2.prototype.coreText = function(t3) {
            if (!t3)
              return "";
            if (t3.isEmbellished)
              return t3.coreMO().getText();
            for (; ((t3.isKind("mrow") || t3.isKind("TeXAtom") && t3.texClass !== l.TEXCLASS.VCENTER || t3.isKind("mstyle") || t3.isKind("mphantom")) && 1 === t3.childNodes.length || t3.isKind("munderover")) && t3.childNodes[0]; )
              t3 = t3.childNodes[0];
            return t3.isToken ? t3.getText() : "";
          }, e2.prototype.hasSpacingAttributes = function() {
            return this.attributes.isSet("lspace") || this.attributes.isSet("rspace");
          }, Object.defineProperty(e2.prototype, "isAccent", { get: function() {
            var t3 = false, e3 = this.coreParent().parent;
            if (e3) {
              var r2 = e3.isKind("mover") ? e3.childNodes[e3.over].coreMO() ? "accent" : "" : e3.isKind("munder") ? e3.childNodes[e3.under].coreMO() ? "accentunder" : "" : e3.isKind("munderover") ? this === e3.childNodes[e3.over].coreMO() ? "accent" : this === e3.childNodes[e3.under].coreMO() ? "accentunder" : "" : "";
              if (r2)
                t3 = void 0 !== e3.attributes.getExplicit(r2) ? t3 : this.attributes.get("accent");
            }
            return t3;
          }, enumerable: false, configurable: true }), e2.prototype.setTeXclass = function(t3) {
            var e3 = this.attributes.getList("form", "fence"), r2 = e3.form, n2 = e3.fence;
            return void 0 === this.getProperty("texClass") && (this.attributes.isSet("lspace") || this.attributes.isSet("rspace")) ? null : (n2 && this.texClass === l.TEXCLASS.REL && ("prefix" === r2 && (this.texClass = l.TEXCLASS.OPEN), "postfix" === r2 && (this.texClass = l.TEXCLASS.CLOSE)), this.adjustTeXclass(t3));
          }, e2.prototype.adjustTeXclass = function(t3) {
            var e3 = this.texClass, r2 = this.prevClass;
            if (e3 === l.TEXCLASS.NONE)
              return t3;
            if (t3 ? (!t3.getProperty("autoOP") || e3 !== l.TEXCLASS.BIN && e3 !== l.TEXCLASS.REL || (r2 = t3.texClass = l.TEXCLASS.ORD), r2 = this.prevClass = t3.texClass || l.TEXCLASS.ORD, this.prevLevel = this.attributes.getInherited("scriptlevel")) : r2 = this.prevClass = l.TEXCLASS.NONE, e3 !== l.TEXCLASS.BIN || r2 !== l.TEXCLASS.NONE && r2 !== l.TEXCLASS.BIN && r2 !== l.TEXCLASS.OP && r2 !== l.TEXCLASS.REL && r2 !== l.TEXCLASS.OPEN && r2 !== l.TEXCLASS.PUNCT)
              if (r2 !== l.TEXCLASS.BIN || e3 !== l.TEXCLASS.REL && e3 !== l.TEXCLASS.CLOSE && e3 !== l.TEXCLASS.PUNCT) {
                if (e3 === l.TEXCLASS.BIN) {
                  for (var n2 = this, o2 = this.parent; o2 && o2.parent && o2.isEmbellished && (1 === o2.childNodes.length || !o2.isKind("mrow") && o2.core() === n2); )
                    n2 = o2, o2 = o2.parent;
                  o2.childNodes[o2.childNodes.length - 1] === n2 && (this.texClass = l.TEXCLASS.ORD);
                }
              } else
                t3.texClass = this.prevClass = l.TEXCLASS.ORD;
            else
              this.texClass = l.TEXCLASS.ORD;
            return this;
          }, e2.prototype.setInheritedAttributes = function(e3, r2, n2, o2) {
            void 0 === e3 && (e3 = {}), void 0 === r2 && (r2 = false), void 0 === n2 && (n2 = 0), void 0 === o2 && (o2 = false), t2.prototype.setInheritedAttributes.call(this, e3, r2, n2, o2);
            var i2 = this.getText();
            this.checkOperatorTable(i2), this.checkPseudoScripts(i2), this.checkPrimes(i2), this.checkMathAccent(i2);
          }, e2.prototype.checkOperatorTable = function(t3) {
            var e3, r2, n2 = a(this.handleExplicitForm(this.getForms()), 3), o2 = n2[0], i2 = n2[1], l2 = n2[2];
            this.attributes.setInherited("form", o2);
            var u2 = this.constructor.OPTABLE, p2 = u2[o2][t3] || u2[i2][t3] || u2[l2][t3];
            if (p2) {
              void 0 === this.getProperty("texClass") && (this.texClass = p2[2]);
              try {
                for (var f = s(Object.keys(p2[3] || {})), h = f.next(); !h.done; h = f.next()) {
                  var d = h.value;
                  this.attributes.setInherited(d, p2[3][d]);
                }
              } catch (t4) {
                e3 = { error: t4 };
              } finally {
                try {
                  h && !h.done && (r2 = f.return) && r2.call(f);
                } finally {
                  if (e3)
                    throw e3.error;
                }
              }
              this.lspace = (p2[0] + 1) / 18, this.rspace = (p2[1] + 1) / 18;
            } else {
              var y = (0, c.getRange)(t3);
              if (y) {
                void 0 === this.getProperty("texClass") && (this.texClass = y[2]);
                var O = this.constructor.MMLSPACING[y[2]];
                this.lspace = (O[0] + 1) / 18, this.rspace = (O[1] + 1) / 18;
              }
            }
          }, e2.prototype.getForms = function() {
            for (var t3 = this, e3 = this.parent, r2 = this.Parent; r2 && r2.isEmbellished; )
              t3 = e3, e3 = r2.parent, r2 = r2.Parent;
            if (e3 && e3.isKind("mrow") && 1 !== e3.nonSpaceLength()) {
              if (e3.firstNonSpace() === t3)
                return ["prefix", "infix", "postfix"];
              if (e3.lastNonSpace() === t3)
                return ["postfix", "infix", "prefix"];
            }
            return ["infix", "prefix", "postfix"];
          }, e2.prototype.handleExplicitForm = function(t3) {
            if (this.attributes.isSet("form")) {
              var e3 = this.attributes.get("form");
              t3 = [e3].concat(t3.filter(function(t4) {
                return t4 !== e3;
              }));
            }
            return t3;
          }, e2.prototype.checkPseudoScripts = function(t3) {
            var e3 = this.constructor.pseudoScripts;
            if (t3.match(e3)) {
              var r2 = this.coreParent().Parent, n2 = !r2 || !(r2.isKind("msubsup") && !r2.isKind("msub"));
              this.setProperty("pseudoscript", n2), n2 && (this.attributes.setInherited("lspace", 0), this.attributes.setInherited("rspace", 0));
            }
          }, e2.prototype.checkPrimes = function(t3) {
            var e3 = this.constructor.primes;
            if (t3.match(e3)) {
              var r2 = this.constructor.remapPrimes, n2 = (0, u.unicodeString)((0, u.unicodeChars)(t3).map(function(t4) {
                return r2[t4];
              }));
              this.setProperty("primes", n2);
            }
          }, e2.prototype.checkMathAccent = function(t3) {
            var e3 = this.Parent;
            if (void 0 === this.getProperty("mathaccent") && e3 && e3.isKind("munderover")) {
              var r2 = e3.childNodes[0];
              if (!r2.isEmbellished || r2.coreMO() !== this) {
                var n2 = this.constructor.mathaccents;
                t3.match(n2) && this.setProperty("mathaccent", true);
              }
            }
          }, e2.defaults = i(i({}, l.AbstractMmlTokenNode.defaults), { form: "infix", fence: false, separator: false, lspace: "thickmathspace", rspace: "thickmathspace", stretchy: false, symmetric: false, maxsize: "infinity", minsize: "0em", largeop: false, movablelimits: false, accent: false, linebreak: "auto", lineleading: "1ex", linebreakstyle: "before", indentalign: "auto", indentshift: "0", indenttarget: "", indentalignfirst: "indentalign", indentshiftfirst: "indentshift", indentalignlast: "indentalign", indentshiftlast: "indentshift" }), e2.MMLSPACING = c.MMLSPACING, e2.OPTABLE = c.OPTABLE, e2.pseudoScripts = new RegExp(["^[\"'*`", "\xAA", "\xB0", "\xB2-\xB4", "\xB9", "\xBA", "\u2018-\u201F", "\u2032-\u2037\u2057", "\u2070\u2071", "\u2074-\u207F", "\u2080-\u208E", "]+$"].join("")), e2.primes = new RegExp(["^[\"'`", "\u2018-\u201F", "]+$"].join("")), e2.remapPrimes = { 34: 8243, 39: 8242, 96: 8245, 8216: 8245, 8217: 8242, 8218: 8242, 8219: 8245, 8220: 8246, 8221: 8243, 8222: 8243, 8223: 8246 }, e2.mathaccents = new RegExp(["^[", "\xB4\u0301\u02CA", "`\u0300\u02CB", "\xA8\u0308", "~\u0303\u02DC", "\xAF\u0304\u02C9", "\u02D8\u0306", "\u02C7\u030C", "^\u0302\u02C6", "\u2192\u20D7", "\u02D9\u0307", "\u02DA\u030A", "\u20DB", "\u20DC", "]$"].join("")), e2;
        }(l.AbstractMmlTokenNode);
        e.MmlMo = p;
      }, 7238: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMpadded = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mpadded";
          }, enumerable: false, configurable: true }), e2.defaults = i(i({}, a.AbstractMmlLayoutNode.defaults), { width: "", height: "", depth: "", lspace: 0, voffset: 0 }), e2;
        }(a.AbstractMmlLayoutNode);
        e.MmlMpadded = s;
      }, 5741: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMphantom = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.texclass = a.TEXCLASS.ORD, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mphantom";
          }, enumerable: false, configurable: true }), e2.defaults = i({}, a.AbstractMmlLayoutNode.defaults), e2;
        }(a.AbstractMmlLayoutNode);
        e.MmlMphantom = s;
      }, 6145: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMroot = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.texclass = a.TEXCLASS.ORD, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mroot";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 2;
          }, enumerable: false, configurable: true }), e2.prototype.setTeXclass = function(t3) {
            return this.getPrevClass(t3), this.childNodes[0].setTeXclass(null), this.childNodes[1].setTeXclass(null), this;
          }, e2.prototype.setChildInheritedAttributes = function(t3, e3, r2, n2) {
            this.childNodes[0].setInheritedAttributes(t3, e3, r2, true), this.childNodes[1].setInheritedAttributes(t3, false, r2 + 2, n2);
          }, e2.defaults = i({}, a.AbstractMmlNode.defaults), e2;
        }(a.AbstractMmlNode);
        e.MmlMroot = s;
      }, 9878: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        }, a = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlInferredMrow = e.MmlMrow = void 0;
        var s = r(9007), l = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3._core = null, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mrow";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "isSpacelike", { get: function() {
            var t3, e3;
            try {
              for (var r2 = a(this.childNodes), n2 = r2.next(); !n2.done; n2 = r2.next()) {
                if (!n2.value.isSpacelike)
                  return false;
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                n2 && !n2.done && (e3 = r2.return) && e3.call(r2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return true;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "isEmbellished", { get: function() {
            var t3, e3, r2 = false, n2 = 0;
            try {
              for (var o2 = a(this.childNodes), i2 = o2.next(); !i2.done; i2 = o2.next()) {
                var s2 = i2.value;
                if (s2) {
                  if (s2.isEmbellished) {
                    if (r2)
                      return false;
                    r2 = true, this._core = n2;
                  } else if (!s2.isSpacelike)
                    return false;
                }
                n2++;
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                i2 && !i2.done && (e3 = o2.return) && e3.call(o2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return r2;
          }, enumerable: false, configurable: true }), e2.prototype.core = function() {
            return this.isEmbellished && null != this._core ? this.childNodes[this._core] : this;
          }, e2.prototype.coreMO = function() {
            return this.isEmbellished && null != this._core ? this.childNodes[this._core].coreMO() : this;
          }, e2.prototype.nonSpaceLength = function() {
            var t3, e3, r2 = 0;
            try {
              for (var n2 = a(this.childNodes), o2 = n2.next(); !o2.done; o2 = n2.next()) {
                var i2 = o2.value;
                i2 && !i2.isSpacelike && r2++;
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                o2 && !o2.done && (e3 = n2.return) && e3.call(n2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return r2;
          }, e2.prototype.firstNonSpace = function() {
            var t3, e3;
            try {
              for (var r2 = a(this.childNodes), n2 = r2.next(); !n2.done; n2 = r2.next()) {
                var o2 = n2.value;
                if (o2 && !o2.isSpacelike)
                  return o2;
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                n2 && !n2.done && (e3 = r2.return) && e3.call(r2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return null;
          }, e2.prototype.lastNonSpace = function() {
            for (var t3 = this.childNodes.length; --t3 >= 0; ) {
              var e3 = this.childNodes[t3];
              if (e3 && !e3.isSpacelike)
                return e3;
            }
            return null;
          }, e2.prototype.setTeXclass = function(t3) {
            var e3, r2, n2, o2;
            if (null != this.getProperty("open") || null != this.getProperty("close")) {
              this.getPrevClass(t3), t3 = null;
              try {
                for (var i2 = a(this.childNodes), l2 = i2.next(); !l2.done; l2 = i2.next()) {
                  t3 = l2.value.setTeXclass(t3);
                }
              } catch (t4) {
                e3 = { error: t4 };
              } finally {
                try {
                  l2 && !l2.done && (r2 = i2.return) && r2.call(i2);
                } finally {
                  if (e3)
                    throw e3.error;
                }
              }
              null == this.texClass && (this.texClass = s.TEXCLASS.INNER);
            } else {
              try {
                for (var c2 = a(this.childNodes), u = c2.next(); !u.done; u = c2.next()) {
                  t3 = u.value.setTeXclass(t3);
                }
              } catch (t4) {
                n2 = { error: t4 };
              } finally {
                try {
                  u && !u.done && (o2 = c2.return) && o2.call(c2);
                } finally {
                  if (n2)
                    throw n2.error;
                }
              }
              this.childNodes[0] && this.updateTeXclass(this.childNodes[0]);
            }
            return t3;
          }, e2.defaults = i({}, s.AbstractMmlNode.defaults), e2;
        }(s.AbstractMmlNode);
        e.MmlMrow = l;
        var c = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "inferredMrow";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "isInferred", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "notParent", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.prototype.toString = function() {
            return "[" + this.childNodes.join(",") + "]";
          }, e2.defaults = l.defaults, e2;
        }(l);
        e.MmlInferredMrow = c;
      }, 7265: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMs = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.texclass = a.TEXCLASS.ORD, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "ms";
          }, enumerable: false, configurable: true }), e2.defaults = i(i({}, a.AbstractMmlTokenNode.defaults), { lquote: '"', rquote: '"' }), e2;
        }(a.AbstractMmlTokenNode);
        e.MmlMs = s;
      }, 6030: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMspace = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.texclass = a.TEXCLASS.NONE, e3;
          }
          return o(e2, t2), e2.prototype.setTeXclass = function(t3) {
            return t3;
          }, Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mspace";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 0;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "isSpacelike", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "hasNewline", { get: function() {
            var t3 = this.attributes;
            return null == t3.getExplicit("width") && null == t3.getExplicit("height") && null == t3.getExplicit("depth") && "newline" === t3.get("linebreak");
          }, enumerable: false, configurable: true }), e2.defaults = i(i({}, a.AbstractMmlTokenNode.defaults), { width: "0em", height: "0ex", depth: "0ex", linebreak: "auto" }), e2;
        }(a.AbstractMmlTokenNode);
        e.MmlMspace = s;
      }, 7131: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMsqrt = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.texclass = a.TEXCLASS.ORD, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "msqrt";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return -1;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "linebreakContainer", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.prototype.setTeXclass = function(t3) {
            return this.getPrevClass(t3), this.childNodes[0].setTeXclass(null), this;
          }, e2.prototype.setChildInheritedAttributes = function(t3, e3, r2, n2) {
            this.childNodes[0].setInheritedAttributes(t3, e3, r2, true);
          }, e2.defaults = i({}, a.AbstractMmlNode.defaults), e2;
        }(a.AbstractMmlNode);
        e.MmlMsqrt = s;
      }, 1314: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMstyle = void 0;
        var a = r(9007), s = r(91), l = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mstyle";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "notParent", { get: function() {
            return this.childNodes[0] && 1 === this.childNodes[0].childNodes.length;
          }, enumerable: false, configurable: true }), e2.prototype.setChildInheritedAttributes = function(t3, e3, r2, n2) {
            var o2 = this.attributes.getExplicit("scriptlevel");
            null != o2 && ((o2 = o2.toString()).match(/^\s*[-+]/) ? r2 += parseInt(o2) : r2 = parseInt(o2), n2 = false);
            var i2 = this.attributes.getExplicit("displaystyle");
            null != i2 && (e3 = true === i2, n2 = false);
            var a2 = this.attributes.getExplicit("data-cramped");
            null != a2 && (n2 = a2), t3 = this.addInheritedAttributes(t3, this.attributes.getAllAttributes()), this.childNodes[0].setInheritedAttributes(t3, e3, r2, n2);
          }, e2.defaults = i(i({}, a.AbstractMmlLayoutNode.defaults), { scriptlevel: s.INHERIT, displaystyle: s.INHERIT, scriptsizemultiplier: 1 / Math.sqrt(2), scriptminsize: "8px", mathbackground: s.INHERIT, mathcolor: s.INHERIT, dir: s.INHERIT, infixlinebreakstyle: "before" }), e2;
        }(a.AbstractMmlLayoutNode);
        e.MmlMstyle = l;
      }, 4461: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMsup = e.MmlMsub = e.MmlMsubsup = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "msubsup";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "base", { get: function() {
            return 0;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "sub", { get: function() {
            return 1;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "sup", { get: function() {
            return 2;
          }, enumerable: false, configurable: true }), e2.prototype.setChildInheritedAttributes = function(t3, e3, r2, n2) {
            var o2 = this.childNodes;
            o2[0].setInheritedAttributes(t3, e3, r2, n2), o2[1].setInheritedAttributes(t3, false, r2 + 1, n2 || 1 === this.sub), o2[2] && o2[2].setInheritedAttributes(t3, false, r2 + 1, n2 || 2 === this.sub);
          }, e2.defaults = i(i({}, a.AbstractMmlBaseNode.defaults), { subscriptshift: "", superscriptshift: "" }), e2;
        }(a.AbstractMmlBaseNode);
        e.MmlMsubsup = s;
        var l = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "msub";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 2;
          }, enumerable: false, configurable: true }), e2.defaults = i({}, s.defaults), e2;
        }(s);
        e.MmlMsub = l;
        var c = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "msup";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 2;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "sup", { get: function() {
            return 1;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "sub", { get: function() {
            return 2;
          }, enumerable: false, configurable: true }), e2.defaults = i({}, s.defaults), e2;
        }(s);
        e.MmlMsup = c;
      }, 1349: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        }, a = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMtable = void 0;
        var s = r(9007), l = r(505), c = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.properties = { useHeight: true }, e3.texclass = s.TEXCLASS.ORD, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mtable";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "linebreakContainer", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.prototype.setInheritedAttributes = function(e3, r2, n2, o2) {
            var i2, l2;
            try {
              for (var c2 = a(s.indentAttributes), u = c2.next(); !u.done; u = c2.next()) {
                var p = u.value;
                e3[p] && this.attributes.setInherited(p, e3[p][1]), void 0 !== this.attributes.getExplicit(p) && delete this.attributes.getAllAttributes()[p];
              }
            } catch (t3) {
              i2 = { error: t3 };
            } finally {
              try {
                u && !u.done && (l2 = c2.return) && l2.call(c2);
              } finally {
                if (i2)
                  throw i2.error;
              }
            }
            t2.prototype.setInheritedAttributes.call(this, e3, r2, n2, o2);
          }, e2.prototype.setChildInheritedAttributes = function(t3, e3, r2, n2) {
            var o2, i2, s2, c2;
            try {
              for (var u = a(this.childNodes), p = u.next(); !p.done; p = u.next()) {
                (O = p.value).isKind("mtr") || this.replaceChild(this.factory.create("mtr"), O).appendChild(O);
              }
            } catch (t4) {
              o2 = { error: t4 };
            } finally {
              try {
                p && !p.done && (i2 = u.return) && i2.call(u);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
            r2 = this.getProperty("scriptlevel") || r2, e3 = !(!this.attributes.getExplicit("displaystyle") && !this.attributes.getDefault("displaystyle")), t3 = this.addInheritedAttributes(t3, { columnalign: this.attributes.get("columnalign"), rowalign: "center" });
            var f = this.attributes.getExplicit("data-cramped"), h = (0, l.split)(this.attributes.get("rowalign"));
            try {
              for (var d = a(this.childNodes), y = d.next(); !y.done; y = d.next()) {
                var O = y.value;
                t3.rowalign[1] = h.shift() || t3.rowalign[1], O.setInheritedAttributes(t3, e3, r2, !!f);
              }
            } catch (t4) {
              s2 = { error: t4 };
            } finally {
              try {
                y && !y.done && (c2 = d.return) && c2.call(d);
              } finally {
                if (s2)
                  throw s2.error;
              }
            }
          }, e2.prototype.verifyChildren = function(e3) {
            for (var r2 = null, n2 = this.factory, o2 = 0; o2 < this.childNodes.length; o2++) {
              var i2 = this.childNodes[o2];
              if (i2.isKind("mtr"))
                r2 = null;
              else {
                var a2 = i2.isKind("mtd");
                if (r2 ? (this.removeChild(i2), o2--) : r2 = this.replaceChild(n2.create("mtr"), i2), r2.appendChild(a2 ? i2 : n2.create("mtd", {}, [i2])), !e3.fixMtables) {
                  i2.parent.removeChild(i2), i2.parent = this, a2 && r2.appendChild(n2.create("mtd"));
                  var s2 = i2.mError("Children of " + this.kind + " must be mtr or mlabeledtr", e3, a2);
                  r2.childNodes[r2.childNodes.length - 1].appendChild(s2);
                }
              }
            }
            t2.prototype.verifyChildren.call(this, e3);
          }, e2.prototype.setTeXclass = function(t3) {
            var e3, r2;
            this.getPrevClass(t3);
            try {
              for (var n2 = a(this.childNodes), o2 = n2.next(); !o2.done; o2 = n2.next()) {
                o2.value.setTeXclass(null);
              }
            } catch (t4) {
              e3 = { error: t4 };
            } finally {
              try {
                o2 && !o2.done && (r2 = n2.return) && r2.call(n2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return this;
          }, e2.defaults = i(i({}, s.AbstractMmlNode.defaults), { align: "axis", rowalign: "baseline", columnalign: "center", groupalign: "{left}", alignmentscope: true, columnwidth: "auto", width: "auto", rowspacing: "1ex", columnspacing: ".8em", rowlines: "none", columnlines: "none", frame: "none", framespacing: "0.4em 0.5ex", equalrows: false, equalcolumns: false, displaystyle: false, side: "right", minlabelspacing: "0.8em" }), e2;
        }(s.AbstractMmlNode);
        e.MmlMtable = c;
      }, 4359: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMtd = void 0;
        var a = r(9007), s = r(91), l = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mtd";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return -1;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "linebreakContainer", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.prototype.verifyChildren = function(e3) {
            !this.parent || this.parent.isKind("mtr") ? t2.prototype.verifyChildren.call(this, e3) : this.mError(this.kind + " can only be a child of an mtr or mlabeledtr", e3, true);
          }, e2.prototype.setTeXclass = function(t3) {
            return this.getPrevClass(t3), this.childNodes[0].setTeXclass(null), this;
          }, e2.defaults = i(i({}, a.AbstractMmlBaseNode.defaults), { rowspan: 1, columnspan: 1, rowalign: s.INHERIT, columnalign: s.INHERIT, groupalign: s.INHERIT }), e2;
        }(a.AbstractMmlBaseNode);
        e.MmlMtd = l;
      }, 4770: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMtext = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.texclass = a.TEXCLASS.ORD, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mtext";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "isSpacelike", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.defaults = i({}, a.AbstractMmlTokenNode.defaults), e2;
        }(a.AbstractMmlTokenNode);
        e.MmlMtext = s;
      }, 5022: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        }, a = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMlabeledtr = e.MmlMtr = void 0;
        var s = r(9007), l = r(91), c = r(505), u = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mtr";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "linebreakContainer", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.prototype.setChildInheritedAttributes = function(t3, e3, r2, n2) {
            var o2, i2, s2, l2;
            try {
              for (var u2 = a(this.childNodes), p2 = u2.next(); !p2.done; p2 = u2.next()) {
                (y = p2.value).isKind("mtd") || this.replaceChild(this.factory.create("mtd"), y).appendChild(y);
              }
            } catch (t4) {
              o2 = { error: t4 };
            } finally {
              try {
                p2 && !p2.done && (i2 = u2.return) && i2.call(u2);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
            var f = (0, c.split)(this.attributes.get("columnalign"));
            1 === this.arity && f.unshift(this.parent.attributes.get("side")), t3 = this.addInheritedAttributes(t3, { rowalign: this.attributes.get("rowalign"), columnalign: "center" });
            try {
              for (var h = a(this.childNodes), d = h.next(); !d.done; d = h.next()) {
                var y = d.value;
                t3.columnalign[1] = f.shift() || t3.columnalign[1], y.setInheritedAttributes(t3, e3, r2, n2);
              }
            } catch (t4) {
              s2 = { error: t4 };
            } finally {
              try {
                d && !d.done && (l2 = h.return) && l2.call(h);
              } finally {
                if (s2)
                  throw s2.error;
              }
            }
          }, e2.prototype.verifyChildren = function(e3) {
            var r2, n2;
            if (!this.parent || this.parent.isKind("mtable")) {
              try {
                for (var o2 = a(this.childNodes), i2 = o2.next(); !i2.done; i2 = o2.next()) {
                  var s2 = i2.value;
                  if (!s2.isKind("mtd"))
                    this.replaceChild(this.factory.create("mtd"), s2).appendChild(s2), e3.fixMtables || s2.mError("Children of " + this.kind + " must be mtd", e3);
                }
              } catch (t3) {
                r2 = { error: t3 };
              } finally {
                try {
                  i2 && !i2.done && (n2 = o2.return) && n2.call(o2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
              t2.prototype.verifyChildren.call(this, e3);
            } else
              this.mError(this.kind + " can only be a child of an mtable", e3, true);
          }, e2.prototype.setTeXclass = function(t3) {
            var e3, r2;
            this.getPrevClass(t3);
            try {
              for (var n2 = a(this.childNodes), o2 = n2.next(); !o2.done; o2 = n2.next()) {
                o2.value.setTeXclass(null);
              }
            } catch (t4) {
              e3 = { error: t4 };
            } finally {
              try {
                o2 && !o2.done && (r2 = n2.return) && r2.call(n2);
              } finally {
                if (e3)
                  throw e3.error;
              }
            }
            return this;
          }, e2.defaults = i(i({}, s.AbstractMmlNode.defaults), { rowalign: l.INHERIT, columnalign: l.INHERIT, groupalign: l.INHERIT }), e2;
        }(s.AbstractMmlNode);
        e.MmlMtr = u;
        var p = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mlabeledtr";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 1;
          }, enumerable: false, configurable: true }), e2;
        }(u);
        e.MmlMlabeledtr = p;
      }, 5184: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlMover = e.MmlMunder = e.MmlMunderover = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "munderover";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 3;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "base", { get: function() {
            return 0;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "under", { get: function() {
            return 1;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "over", { get: function() {
            return 2;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "linebreakContainer", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.prototype.setChildInheritedAttributes = function(t3, e3, r2, n2) {
            var o2 = this.childNodes;
            o2[0].setInheritedAttributes(t3, e3, r2, n2 || !!o2[this.over]);
            var i2 = !(e3 || !o2[0].coreMO().attributes.get("movablelimits")), a2 = this.constructor.ACCENTS;
            o2[1].setInheritedAttributes(t3, false, this.getScriptlevel(a2[1], i2, r2), n2 || 1 === this.under), this.setInheritedAccent(1, a2[1], e3, r2, n2, i2), o2[2] && (o2[2].setInheritedAttributes(t3, false, this.getScriptlevel(a2[2], i2, r2), n2 || 2 === this.under), this.setInheritedAccent(2, a2[2], e3, r2, n2, i2));
          }, e2.prototype.getScriptlevel = function(t3, e3, r2) {
            return !e3 && this.attributes.get(t3) || r2++, r2;
          }, e2.prototype.setInheritedAccent = function(t3, e3, r2, n2, o2, i2) {
            var a2 = this.childNodes[t3];
            if (null == this.attributes.getExplicit(e3) && a2.isEmbellished) {
              var s2 = a2.coreMO().attributes.get("accent");
              this.attributes.setInherited(e3, s2), s2 !== this.attributes.getDefault(e3) && a2.setInheritedAttributes({}, r2, this.getScriptlevel(e3, i2, n2), o2);
            }
          }, e2.defaults = i(i({}, a.AbstractMmlBaseNode.defaults), { accent: false, accentunder: false, align: "center" }), e2.ACCENTS = ["", "accentunder", "accent"], e2;
        }(a.AbstractMmlBaseNode);
        e.MmlMunderover = s;
        var l = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "munder";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 2;
          }, enumerable: false, configurable: true }), e2.defaults = i({}, s.defaults), e2;
        }(s);
        e.MmlMunder = l;
        var c = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "mover";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 2;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "over", { get: function() {
            return 1;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "under", { get: function() {
            return 2;
          }, enumerable: false, configurable: true }), e2.defaults = i({}, s.defaults), e2.ACCENTS = ["", "accent", "accentunder"], e2;
        }(s);
        e.MmlMover = c;
      }, 9102: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlAnnotation = e.MmlAnnotationXML = e.MmlSemantics = void 0;
        var a = r(9007), s = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "semantics";
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "arity", { get: function() {
            return 1;
          }, enumerable: false, configurable: true }), Object.defineProperty(e2.prototype, "notParent", { get: function() {
            return true;
          }, enumerable: false, configurable: true }), e2.defaults = i(i({}, a.AbstractMmlBaseNode.defaults), { definitionUrl: null, encoding: null }), e2;
        }(a.AbstractMmlBaseNode);
        e.MmlSemantics = s;
        var l = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "annotation-xml";
          }, enumerable: false, configurable: true }), e2.prototype.setChildInheritedAttributes = function() {
          }, e2.defaults = i(i({}, a.AbstractMmlNode.defaults), { definitionUrl: null, encoding: null, cd: "mathmlkeys", name: "", src: null }), e2;
        }(a.AbstractMmlNode);
        e.MmlAnnotationXML = l;
        var c = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.properties = { isChars: true }, e3;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "kind", { get: function() {
            return "annotation";
          }, enumerable: false, configurable: true }), e2.defaults = i({}, l.defaults), e2;
        }(l);
        e.MmlAnnotation = c;
      }, 6325: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        });
        Object.defineProperty(e, "__esModule", { value: true }), e.MmlVisitor = void 0;
        var i = r(3909), a = function(t2) {
          function e2(e3) {
            return void 0 === e3 && (e3 = null), e3 || (e3 = new i.MmlFactory()), t2.call(this, e3) || this;
          }
          return o(e2, t2), e2.prototype.visitTextNode = function(t3) {
            for (var e3 = [], r2 = 1; r2 < arguments.length; r2++)
              e3[r2 - 1] = arguments[r2];
          }, e2.prototype.visitXMLNode = function(t3) {
            for (var e3 = [], r2 = 1; r2 < arguments.length; r2++)
              e3[r2 - 1] = arguments[r2];
          }, e2;
        }(r(8823).AbstractVisitor);
        e.MmlVisitor = a;
      }, 4082: function(t, e, r) {
        var n = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.OPTABLE = e.MMLSPACING = e.getRange = e.RANGES = e.MO = e.OPDEF = void 0;
        var o = r(9007);
        function i(t2, e2, r2, n2) {
          return void 0 === r2 && (r2 = o.TEXCLASS.BIN), void 0 === n2 && (n2 = null), [t2, e2, r2, n2];
        }
        e.OPDEF = i, e.MO = { ORD: i(0, 0, o.TEXCLASS.ORD), ORD11: i(1, 1, o.TEXCLASS.ORD), ORD21: i(2, 1, o.TEXCLASS.ORD), ORD02: i(0, 2, o.TEXCLASS.ORD), ORD55: i(5, 5, o.TEXCLASS.ORD), NONE: i(0, 0, o.TEXCLASS.NONE), OP: i(1, 2, o.TEXCLASS.OP, { largeop: true, movablelimits: true, symmetric: true }), OPFIXED: i(1, 2, o.TEXCLASS.OP, { largeop: true, movablelimits: true }), INTEGRAL: i(0, 1, o.TEXCLASS.OP, { largeop: true, symmetric: true }), INTEGRAL2: i(1, 2, o.TEXCLASS.OP, { largeop: true, symmetric: true }), BIN3: i(3, 3, o.TEXCLASS.BIN), BIN4: i(4, 4, o.TEXCLASS.BIN), BIN01: i(0, 1, o.TEXCLASS.BIN), BIN5: i(5, 5, o.TEXCLASS.BIN), TALLBIN: i(4, 4, o.TEXCLASS.BIN, { stretchy: true }), BINOP: i(4, 4, o.TEXCLASS.BIN, { largeop: true, movablelimits: true }), REL: i(5, 5, o.TEXCLASS.REL), REL1: i(1, 1, o.TEXCLASS.REL, { stretchy: true }), REL4: i(4, 4, o.TEXCLASS.REL), RELSTRETCH: i(5, 5, o.TEXCLASS.REL, { stretchy: true }), RELACCENT: i(5, 5, o.TEXCLASS.REL, { accent: true }), WIDEREL: i(5, 5, o.TEXCLASS.REL, { accent: true, stretchy: true }), OPEN: i(0, 0, o.TEXCLASS.OPEN, { fence: true, stretchy: true, symmetric: true }), CLOSE: i(0, 0, o.TEXCLASS.CLOSE, { fence: true, stretchy: true, symmetric: true }), INNER: i(0, 0, o.TEXCLASS.INNER), PUNCT: i(0, 3, o.TEXCLASS.PUNCT), ACCENT: i(0, 0, o.TEXCLASS.ORD, { accent: true }), WIDEACCENT: i(0, 0, o.TEXCLASS.ORD, { accent: true, stretchy: true }) }, e.RANGES = [[32, 127, o.TEXCLASS.REL, "mo"], [160, 191, o.TEXCLASS.ORD, "mo"], [192, 591, o.TEXCLASS.ORD, "mi"], [688, 879, o.TEXCLASS.ORD, "mo"], [880, 6688, o.TEXCLASS.ORD, "mi"], [6832, 6911, o.TEXCLASS.ORD, "mo"], [6912, 7615, o.TEXCLASS.ORD, "mi"], [7616, 7679, o.TEXCLASS.ORD, "mo"], [7680, 8191, o.TEXCLASS.ORD, "mi"], [8192, 8303, o.TEXCLASS.ORD, "mo"], [8304, 8351, o.TEXCLASS.ORD, "mo"], [8448, 8527, o.TEXCLASS.ORD, "mi"], [8528, 8591, o.TEXCLASS.ORD, "mn"], [8592, 8703, o.TEXCLASS.REL, "mo"], [8704, 8959, o.TEXCLASS.BIN, "mo"], [8960, 9215, o.TEXCLASS.ORD, "mo"], [9312, 9471, o.TEXCLASS.ORD, "mn"], [9472, 10223, o.TEXCLASS.ORD, "mo"], [10224, 10239, o.TEXCLASS.REL, "mo"], [10240, 10495, o.TEXCLASS.ORD, "mtext"], [10496, 10623, o.TEXCLASS.REL, "mo"], [10624, 10751, o.TEXCLASS.ORD, "mo"], [10752, 11007, o.TEXCLASS.BIN, "mo"], [11008, 11055, o.TEXCLASS.ORD, "mo"], [11056, 11087, o.TEXCLASS.REL, "mo"], [11088, 11263, o.TEXCLASS.ORD, "mo"], [11264, 11744, o.TEXCLASS.ORD, "mi"], [11776, 11903, o.TEXCLASS.ORD, "mo"], [11904, 12255, o.TEXCLASS.ORD, "mi", "normal"], [12272, 12351, o.TEXCLASS.ORD, "mo"], [12352, 42143, o.TEXCLASS.ORD, "mi", "normal"], [42192, 43055, o.TEXCLASS.ORD, "mi"], [43056, 43071, o.TEXCLASS.ORD, "mn"], [43072, 55295, o.TEXCLASS.ORD, "mi"], [63744, 64255, o.TEXCLASS.ORD, "mi", "normal"], [64256, 65023, o.TEXCLASS.ORD, "mi"], [65024, 65135, o.TEXCLASS.ORD, "mo"], [65136, 65791, o.TEXCLASS.ORD, "mi"], [65792, 65935, o.TEXCLASS.ORD, "mn"], [65936, 74751, o.TEXCLASS.ORD, "mi", "normal"], [74752, 74879, o.TEXCLASS.ORD, "mn"], [74880, 113823, o.TEXCLASS.ORD, "mi", "normal"], [113824, 119391, o.TEXCLASS.ORD, "mo"], [119648, 119679, o.TEXCLASS.ORD, "mn"], [119808, 120781, o.TEXCLASS.ORD, "mi"], [120782, 120831, o.TEXCLASS.ORD, "mn"], [122624, 129023, o.TEXCLASS.ORD, "mo"], [129024, 129279, o.TEXCLASS.REL, "mo"], [129280, 129535, o.TEXCLASS.ORD, "mo"], [131072, 195103, o.TEXCLASS.ORD, "mi", "normnal"]], e.getRange = function(t2) {
          var r2, o2, i2 = t2.codePointAt(0);
          try {
            for (var a = n(e.RANGES), s = a.next(); !s.done; s = a.next()) {
              var l = s.value;
              if (i2 <= l[1]) {
                if (i2 >= l[0])
                  return l;
                break;
              }
            }
          } catch (t3) {
            r2 = { error: t3 };
          } finally {
            try {
              s && !s.done && (o2 = a.return) && o2.call(a);
            } finally {
              if (r2)
                throw r2.error;
            }
          }
          return null;
        }, e.MMLSPACING = [[0, 0], [1, 2], [3, 3], [4, 4], [0, 0], [0, 0], [0, 3]], e.OPTABLE = { prefix: { "(": e.MO.OPEN, "+": e.MO.BIN01, "-": e.MO.BIN01, "[": e.MO.OPEN, "{": e.MO.OPEN, "|": e.MO.OPEN, "||": [0, 0, o.TEXCLASS.BIN, { fence: true, stretchy: true, symmetric: true }], "|||": [0, 0, o.TEXCLASS.ORD, { fence: true, stretchy: true, symmetric: true }], "\xAC": e.MO.ORD21, "\xB1": e.MO.BIN01, "\u2016": [0, 0, o.TEXCLASS.ORD, { fence: true, stretchy: true }], "\u2018": [0, 0, o.TEXCLASS.OPEN, { fence: true }], "\u201C": [0, 0, o.TEXCLASS.OPEN, { fence: true }], "\u2145": e.MO.ORD21, "\u2146": i(2, 0, o.TEXCLASS.ORD), "\u2200": e.MO.ORD21, "\u2202": e.MO.ORD21, "\u2203": e.MO.ORD21, "\u2204": e.MO.ORD21, "\u2207": e.MO.ORD21, "\u220F": e.MO.OP, "\u2210": e.MO.OP, "\u2211": e.MO.OP, "\u2212": e.MO.BIN01, "\u2213": e.MO.BIN01, "\u221A": [1, 1, o.TEXCLASS.ORD, { stretchy: true }], "\u221B": e.MO.ORD11, "\u221C": e.MO.ORD11, "\u2220": e.MO.ORD, "\u2221": e.MO.ORD, "\u2222": e.MO.ORD, "\u222B": e.MO.INTEGRAL, "\u222C": e.MO.INTEGRAL, "\u222D": e.MO.INTEGRAL, "\u222E": e.MO.INTEGRAL, "\u222F": e.MO.INTEGRAL, "\u2230": e.MO.INTEGRAL, "\u2231": e.MO.INTEGRAL, "\u2232": e.MO.INTEGRAL, "\u2233": e.MO.INTEGRAL, "\u22C0": e.MO.OP, "\u22C1": e.MO.OP, "\u22C2": e.MO.OP, "\u22C3": e.MO.OP, "\u2308": e.MO.OPEN, "\u230A": e.MO.OPEN, "\u2329": e.MO.OPEN, "\u2772": e.MO.OPEN, "\u27E6": e.MO.OPEN, "\u27E8": e.MO.OPEN, "\u27EA": e.MO.OPEN, "\u27EC": e.MO.OPEN, "\u27EE": e.MO.OPEN, "\u2980": [0, 0, o.TEXCLASS.ORD, { fence: true, stretchy: true }], "\u2983": e.MO.OPEN, "\u2985": e.MO.OPEN, "\u2987": e.MO.OPEN, "\u2989": e.MO.OPEN, "\u298B": e.MO.OPEN, "\u298D": e.MO.OPEN, "\u298F": e.MO.OPEN, "\u2991": e.MO.OPEN, "\u2993": e.MO.OPEN, "\u2995": e.MO.OPEN, "\u2997": e.MO.OPEN, "\u29FC": e.MO.OPEN, "\u2A00": e.MO.OP, "\u2A01": e.MO.OP, "\u2A02": e.MO.OP, "\u2A03": e.MO.OP, "\u2A04": e.MO.OP, "\u2A05": e.MO.OP, "\u2A06": e.MO.OP, "\u2A07": e.MO.OP, "\u2A08": e.MO.OP, "\u2A09": e.MO.OP, "\u2A0A": e.MO.OP, "\u2A0B": e.MO.INTEGRAL2, "\u2A0C": e.MO.INTEGRAL, "\u2A0D": e.MO.INTEGRAL2, "\u2A0E": e.MO.INTEGRAL2, "\u2A0F": e.MO.INTEGRAL2, "\u2A10": e.MO.OP, "\u2A11": e.MO.OP, "\u2A12": e.MO.OP, "\u2A13": e.MO.OP, "\u2A14": e.MO.OP, "\u2A15": e.MO.INTEGRAL2, "\u2A16": e.MO.INTEGRAL2, "\u2A17": e.MO.INTEGRAL2, "\u2A18": e.MO.INTEGRAL2, "\u2A19": e.MO.INTEGRAL2, "\u2A1A": e.MO.INTEGRAL2, "\u2A1B": e.MO.INTEGRAL2, "\u2A1C": e.MO.INTEGRAL2, "\u2AFC": e.MO.OP, "\u2AFF": e.MO.OP }, postfix: { "!!": i(1, 0), "!": [1, 0, o.TEXCLASS.CLOSE, null], '"': e.MO.ACCENT, "&": e.MO.ORD, ")": e.MO.CLOSE, "++": i(0, 0), "--": i(0, 0), "..": i(0, 0), "...": e.MO.ORD, "'": e.MO.ACCENT, "]": e.MO.CLOSE, "^": e.MO.WIDEACCENT, _: e.MO.WIDEACCENT, "`": e.MO.ACCENT, "|": e.MO.CLOSE, "}": e.MO.CLOSE, "~": e.MO.WIDEACCENT, "||": [0, 0, o.TEXCLASS.BIN, { fence: true, stretchy: true, symmetric: true }], "|||": [0, 0, o.TEXCLASS.ORD, { fence: true, stretchy: true, symmetric: true }], "\xA8": e.MO.ACCENT, "\xAA": e.MO.ACCENT, "\xAF": e.MO.WIDEACCENT, "\xB0": e.MO.ORD, "\xB2": e.MO.ACCENT, "\xB3": e.MO.ACCENT, "\xB4": e.MO.ACCENT, "\xB8": e.MO.ACCENT, "\xB9": e.MO.ACCENT, "\xBA": e.MO.ACCENT, "\u02C6": e.MO.WIDEACCENT, "\u02C7": e.MO.WIDEACCENT, "\u02C9": e.MO.WIDEACCENT, "\u02CA": e.MO.ACCENT, "\u02CB": e.MO.ACCENT, "\u02CD": e.MO.WIDEACCENT, "\u02D8": e.MO.ACCENT, "\u02D9": e.MO.ACCENT, "\u02DA": e.MO.ACCENT, "\u02DC": e.MO.WIDEACCENT, "\u02DD": e.MO.ACCENT, "\u02F7": e.MO.WIDEACCENT, "\u0302": e.MO.WIDEACCENT, "\u0311": e.MO.ACCENT, "\u03F6": e.MO.REL, "\u2016": [0, 0, o.TEXCLASS.ORD, { fence: true, stretchy: true }], "\u2019": [0, 0, o.TEXCLASS.CLOSE, { fence: true }], "\u201A": e.MO.ACCENT, "\u201B": e.MO.ACCENT, "\u201D": [0, 0, o.TEXCLASS.CLOSE, { fence: true }], "\u201E": e.MO.ACCENT, "\u201F": e.MO.ACCENT, "\u2032": e.MO.ORD, "\u2033": e.MO.ACCENT, "\u2034": e.MO.ACCENT, "\u2035": e.MO.ACCENT, "\u2036": e.MO.ACCENT, "\u2037": e.MO.ACCENT, "\u203E": e.MO.WIDEACCENT, "\u2057": e.MO.ACCENT, "\u20DB": e.MO.ACCENT, "\u20DC": e.MO.ACCENT, "\u2309": e.MO.CLOSE, "\u230B": e.MO.CLOSE, "\u232A": e.MO.CLOSE, "\u23B4": e.MO.WIDEACCENT, "\u23B5": e.MO.WIDEACCENT, "\u23DC": e.MO.WIDEACCENT, "\u23DD": e.MO.WIDEACCENT, "\u23DE": e.MO.WIDEACCENT, "\u23DF": e.MO.WIDEACCENT, "\u23E0": e.MO.WIDEACCENT, "\u23E1": e.MO.WIDEACCENT, "\u25A0": e.MO.BIN3, "\u25A1": e.MO.BIN3, "\u25AA": e.MO.BIN3, "\u25AB": e.MO.BIN3, "\u25AD": e.MO.BIN3, "\u25AE": e.MO.BIN3, "\u25AF": e.MO.BIN3, "\u25B0": e.MO.BIN3, "\u25B1": e.MO.BIN3, "\u25B2": e.MO.BIN4, "\u25B4": e.MO.BIN4, "\u25B6": e.MO.BIN4, "\u25B7": e.MO.BIN4, "\u25B8": e.MO.BIN4, "\u25BC": e.MO.BIN4, "\u25BE": e.MO.BIN4, "\u25C0": e.MO.BIN4, "\u25C1": e.MO.BIN4, "\u25C2": e.MO.BIN4, "\u25C4": e.MO.BIN4, "\u25C5": e.MO.BIN4, "\u25C6": e.MO.BIN4, "\u25C7": e.MO.BIN4, "\u25C8": e.MO.BIN4, "\u25C9": e.MO.BIN4, "\u25CC": e.MO.BIN4, "\u25CD": e.MO.BIN4, "\u25CE": e.MO.BIN4, "\u25CF": e.MO.BIN4, "\u25D6": e.MO.BIN4, "\u25D7": e.MO.BIN4, "\u25E6": e.MO.BIN4, "\u266D": e.MO.ORD02, "\u266E": e.MO.ORD02, "\u266F": e.MO.ORD02, "\u2773": e.MO.CLOSE, "\u27E7": e.MO.CLOSE, "\u27E9": e.MO.CLOSE, "\u27EB": e.MO.CLOSE, "\u27ED": e.MO.CLOSE, "\u27EF": e.MO.CLOSE, "\u2980": [0, 0, o.TEXCLASS.ORD, { fence: true, stretchy: true }], "\u2984": e.MO.CLOSE, "\u2986": e.MO.CLOSE, "\u2988": e.MO.CLOSE, "\u298A": e.MO.CLOSE, "\u298C": e.MO.CLOSE, "\u298E": e.MO.CLOSE, "\u2990": e.MO.CLOSE, "\u2992": e.MO.CLOSE, "\u2994": e.MO.CLOSE, "\u2996": e.MO.CLOSE, "\u2998": e.MO.CLOSE, "\u29FD": e.MO.CLOSE }, infix: { "!=": e.MO.BIN4, "#": e.MO.ORD, $: e.MO.ORD, "%": [3, 3, o.TEXCLASS.ORD, null], "&&": e.MO.BIN4, "": e.MO.ORD, "*": e.MO.BIN3, "**": i(1, 1), "*=": e.MO.BIN4, "+": e.MO.BIN4, "+=": e.MO.BIN4, ",": [0, 3, o.TEXCLASS.PUNCT, { linebreakstyle: "after", separator: true }], "-": e.MO.BIN4, "-=": e.MO.BIN4, "->": e.MO.BIN5, ".": [0, 3, o.TEXCLASS.PUNCT, { separator: true }], "/": e.MO.ORD11, "//": i(1, 1), "/=": e.MO.BIN4, ":": [1, 2, o.TEXCLASS.REL, null], ":=": e.MO.BIN4, ";": [0, 3, o.TEXCLASS.PUNCT, { linebreakstyle: "after", separator: true }], "<": e.MO.REL, "<=": e.MO.BIN5, "<>": i(1, 1), "=": e.MO.REL, "==": e.MO.BIN4, ">": e.MO.REL, ">=": e.MO.BIN5, "?": [1, 1, o.TEXCLASS.CLOSE, null], "@": e.MO.ORD11, "\\": e.MO.ORD, "^": e.MO.ORD11, _: e.MO.ORD11, "|": [2, 2, o.TEXCLASS.ORD, { fence: true, stretchy: true, symmetric: true }], "||": [2, 2, o.TEXCLASS.BIN, { fence: true, stretchy: true, symmetric: true }], "|||": [2, 2, o.TEXCLASS.ORD, { fence: true, stretchy: true, symmetric: true }], "\xB1": e.MO.BIN4, "\xB7": e.MO.BIN4, "\xD7": e.MO.BIN4, "\xF7": e.MO.BIN4, "\u02B9": e.MO.ORD, "\u0300": e.MO.ACCENT, "\u0301": e.MO.ACCENT, "\u0303": e.MO.WIDEACCENT, "\u0304": e.MO.ACCENT, "\u0306": e.MO.ACCENT, "\u0307": e.MO.ACCENT, "\u0308": e.MO.ACCENT, "\u030C": e.MO.ACCENT, "\u0332": e.MO.WIDEACCENT, "\u0338": e.MO.REL4, "\u2015": [0, 0, o.TEXCLASS.ORD, { stretchy: true }], "\u2017": [0, 0, o.TEXCLASS.ORD, { stretchy: true }], "\u2020": e.MO.BIN3, "\u2021": e.MO.BIN3, "\u2022": e.MO.BIN4, "\u2026": e.MO.INNER, "\u2043": e.MO.BIN4, "\u2044": e.MO.TALLBIN, "\u2061": e.MO.NONE, "\u2062": e.MO.NONE, "\u2063": [0, 0, o.TEXCLASS.NONE, { linebreakstyle: "after", separator: true }], "\u2064": e.MO.NONE, "\u20D7": e.MO.ACCENT, "\u2111": e.MO.ORD, "\u2113": e.MO.ORD, "\u2118": e.MO.ORD, "\u211C": e.MO.ORD, "\u2190": e.MO.WIDEREL, "\u2191": e.MO.RELSTRETCH, "\u2192": e.MO.WIDEREL, "\u2193": e.MO.RELSTRETCH, "\u2194": e.MO.WIDEREL, "\u2195": e.MO.RELSTRETCH, "\u2196": e.MO.RELSTRETCH, "\u2197": e.MO.RELSTRETCH, "\u2198": e.MO.RELSTRETCH, "\u2199": e.MO.RELSTRETCH, "\u219A": e.MO.RELACCENT, "\u219B": e.MO.RELACCENT, "\u219C": e.MO.WIDEREL, "\u219D": e.MO.WIDEREL, "\u219E": e.MO.WIDEREL, "\u219F": e.MO.WIDEREL, "\u21A0": e.MO.WIDEREL, "\u21A1": e.MO.RELSTRETCH, "\u21A2": e.MO.WIDEREL, "\u21A3": e.MO.WIDEREL, "\u21A4": e.MO.WIDEREL, "\u21A5": e.MO.RELSTRETCH, "\u21A6": e.MO.WIDEREL, "\u21A7": e.MO.RELSTRETCH, "\u21A8": e.MO.RELSTRETCH, "\u21A9": e.MO.WIDEREL, "\u21AA": e.MO.WIDEREL, "\u21AB": e.MO.WIDEREL, "\u21AC": e.MO.WIDEREL, "\u21AD": e.MO.WIDEREL, "\u21AE": e.MO.RELACCENT, "\u21AF": e.MO.RELSTRETCH, "\u21B0": e.MO.RELSTRETCH, "\u21B1": e.MO.RELSTRETCH, "\u21B2": e.MO.RELSTRETCH, "\u21B3": e.MO.RELSTRETCH, "\u21B4": e.MO.RELSTRETCH, "\u21B5": e.MO.RELSTRETCH, "\u21B6": e.MO.RELACCENT, "\u21B7": e.MO.RELACCENT, "\u21B8": e.MO.REL, "\u21B9": e.MO.WIDEREL, "\u21BA": e.MO.REL, "\u21BB": e.MO.REL, "\u21BC": e.MO.WIDEREL, "\u21BD": e.MO.WIDEREL, "\u21BE": e.MO.RELSTRETCH, "\u21BF": e.MO.RELSTRETCH, "\u21C0": e.MO.WIDEREL, "\u21C1": e.MO.WIDEREL, "\u21C2": e.MO.RELSTRETCH, "\u21C3": e.MO.RELSTRETCH, "\u21C4": e.MO.WIDEREL, "\u21C5": e.MO.RELSTRETCH, "\u21C6": e.MO.WIDEREL, "\u21C7": e.MO.WIDEREL, "\u21C8": e.MO.RELSTRETCH, "\u21C9": e.MO.WIDEREL, "\u21CA": e.MO.RELSTRETCH, "\u21CB": e.MO.WIDEREL, "\u21CC": e.MO.WIDEREL, "\u21CD": e.MO.RELACCENT, "\u21CE": e.MO.RELACCENT, "\u21CF": e.MO.RELACCENT, "\u21D0": e.MO.WIDEREL, "\u21D1": e.MO.RELSTRETCH, "\u21D2": e.MO.WIDEREL, "\u21D3": e.MO.RELSTRETCH, "\u21D4": e.MO.WIDEREL, "\u21D5": e.MO.RELSTRETCH, "\u21D6": e.MO.RELSTRETCH, "\u21D7": e.MO.RELSTRETCH, "\u21D8": e.MO.RELSTRETCH, "\u21D9": e.MO.RELSTRETCH, "\u21DA": e.MO.WIDEREL, "\u21DB": e.MO.WIDEREL, "\u21DC": e.MO.WIDEREL, "\u21DD": e.MO.WIDEREL, "\u21DE": e.MO.REL, "\u21DF": e.MO.REL, "\u21E0": e.MO.WIDEREL, "\u21E1": e.MO.RELSTRETCH, "\u21E2": e.MO.WIDEREL, "\u21E3": e.MO.RELSTRETCH, "\u21E4": e.MO.WIDEREL, "\u21E5": e.MO.WIDEREL, "\u21E6": e.MO.WIDEREL, "\u21E7": e.MO.RELSTRETCH, "\u21E8": e.MO.WIDEREL, "\u21E9": e.MO.RELSTRETCH, "\u21EA": e.MO.RELSTRETCH, "\u21EB": e.MO.RELSTRETCH, "\u21EC": e.MO.RELSTRETCH, "\u21ED": e.MO.RELSTRETCH, "\u21EE": e.MO.RELSTRETCH, "\u21EF": e.MO.RELSTRETCH, "\u21F0": e.MO.WIDEREL, "\u21F1": e.MO.REL, "\u21F2": e.MO.REL, "\u21F3": e.MO.RELSTRETCH, "\u21F4": e.MO.RELACCENT, "\u21F5": e.MO.RELSTRETCH, "\u21F6": e.MO.WIDEREL, "\u21F7": e.MO.RELACCENT, "\u21F8": e.MO.RELACCENT, "\u21F9": e.MO.RELACCENT, "\u21FA": e.MO.RELACCENT, "\u21FB": e.MO.RELACCENT, "\u21FC": e.MO.RELACCENT, "\u21FD": e.MO.WIDEREL, "\u21FE": e.MO.WIDEREL, "\u21FF": e.MO.WIDEREL, "\u2201": i(1, 2, o.TEXCLASS.ORD), "\u2205": e.MO.ORD, "\u2206": e.MO.BIN3, "\u2208": e.MO.REL, "\u2209": e.MO.REL, "\u220A": e.MO.REL, "\u220B": e.MO.REL, "\u220C": e.MO.REL, "\u220D": e.MO.REL, "\u220E": e.MO.BIN3, "\u2212": e.MO.BIN4, "\u2213": e.MO.BIN4, "\u2214": e.MO.BIN4, "\u2215": e.MO.TALLBIN, "\u2216": e.MO.BIN4, "\u2217": e.MO.BIN4, "\u2218": e.MO.BIN4, "\u2219": e.MO.BIN4, "\u221D": e.MO.REL, "\u221E": e.MO.ORD, "\u221F": e.MO.REL, "\u2223": e.MO.REL, "\u2224": e.MO.REL, "\u2225": e.MO.REL, "\u2226": e.MO.REL, "\u2227": e.MO.BIN4, "\u2228": e.MO.BIN4, "\u2229": e.MO.BIN4, "\u222A": e.MO.BIN4, "\u2234": e.MO.REL, "\u2235": e.MO.REL, "\u2236": e.MO.REL, "\u2237": e.MO.REL, "\u2238": e.MO.BIN4, "\u2239": e.MO.REL, "\u223A": e.MO.BIN4, "\u223B": e.MO.REL, "\u223C": e.MO.REL, "\u223D": e.MO.REL, "\u223D\u0331": e.MO.BIN3, "\u223E": e.MO.REL, "\u223F": e.MO.BIN3, "\u2240": e.MO.BIN4, "\u2241": e.MO.REL, "\u2242": e.MO.REL, "\u2242\u0338": e.MO.REL, "\u2243": e.MO.REL, "\u2244": e.MO.REL, "\u2245": e.MO.REL, "\u2246": e.MO.REL, "\u2247": e.MO.REL, "\u2248": e.MO.REL, "\u2249": e.MO.REL, "\u224A": e.MO.REL, "\u224B": e.MO.REL, "\u224C": e.MO.REL, "\u224D": e.MO.REL, "\u224E": e.MO.REL, "\u224E\u0338": e.MO.REL, "\u224F": e.MO.REL, "\u224F\u0338": e.MO.REL, "\u2250": e.MO.REL, "\u2251": e.MO.REL, "\u2252": e.MO.REL, "\u2253": e.MO.REL, "\u2254": e.MO.REL, "\u2255": e.MO.REL, "\u2256": e.MO.REL, "\u2257": e.MO.REL, "\u2258": e.MO.REL, "\u2259": e.MO.REL, "\u225A": e.MO.REL, "\u225B": e.MO.REL, "\u225C": e.MO.REL, "\u225D": e.MO.REL, "\u225E": e.MO.REL, "\u225F": e.MO.REL, "\u2260": e.MO.REL, "\u2261": e.MO.REL, "\u2262": e.MO.REL, "\u2263": e.MO.REL, "\u2264": e.MO.REL, "\u2265": e.MO.REL, "\u2266": e.MO.REL, "\u2266\u0338": e.MO.REL, "\u2267": e.MO.REL, "\u2268": e.MO.REL, "\u2269": e.MO.REL, "\u226A": e.MO.REL, "\u226A\u0338": e.MO.REL, "\u226B": e.MO.REL, "\u226B\u0338": e.MO.REL, "\u226C": e.MO.REL, "\u226D": e.MO.REL, "\u226E": e.MO.REL, "\u226F": e.MO.REL, "\u2270": e.MO.REL, "\u2271": e.MO.REL, "\u2272": e.MO.REL, "\u2273": e.MO.REL, "\u2274": e.MO.REL, "\u2275": e.MO.REL, "\u2276": e.MO.REL, "\u2277": e.MO.REL, "\u2278": e.MO.REL, "\u2279": e.MO.REL, "\u227A": e.MO.REL, "\u227B": e.MO.REL, "\u227C": e.MO.REL, "\u227D": e.MO.REL, "\u227E": e.MO.REL, "\u227F": e.MO.REL, "\u227F\u0338": e.MO.REL, "\u2280": e.MO.REL, "\u2281": e.MO.REL, "\u2282": e.MO.REL, "\u2282\u20D2": e.MO.REL, "\u2283": e.MO.REL, "\u2283\u20D2": e.MO.REL, "\u2284": e.MO.REL, "\u2285": e.MO.REL, "\u2286": e.MO.REL, "\u2287": e.MO.REL, "\u2288": e.MO.REL, "\u2289": e.MO.REL, "\u228A": e.MO.REL, "\u228B": e.MO.REL, "\u228C": e.MO.BIN4, "\u228D": e.MO.BIN4, "\u228E": e.MO.BIN4, "\u228F": e.MO.REL, "\u228F\u0338": e.MO.REL, "\u2290": e.MO.REL, "\u2290\u0338": e.MO.REL, "\u2291": e.MO.REL, "\u2292": e.MO.REL, "\u2293": e.MO.BIN4, "\u2294": e.MO.BIN4, "\u2295": e.MO.BIN4, "\u2296": e.MO.BIN4, "\u2297": e.MO.BIN4, "\u2298": e.MO.BIN4, "\u2299": e.MO.BIN4, "\u229A": e.MO.BIN4, "\u229B": e.MO.BIN4, "\u229C": e.MO.BIN4, "\u229D": e.MO.BIN4, "\u229E": e.MO.BIN4, "\u229F": e.MO.BIN4, "\u22A0": e.MO.BIN4, "\u22A1": e.MO.BIN4, "\u22A2": e.MO.REL, "\u22A3": e.MO.REL, "\u22A4": e.MO.ORD55, "\u22A5": e.MO.REL, "\u22A6": e.MO.REL, "\u22A7": e.MO.REL, "\u22A8": e.MO.REL, "\u22A9": e.MO.REL, "\u22AA": e.MO.REL, "\u22AB": e.MO.REL, "\u22AC": e.MO.REL, "\u22AD": e.MO.REL, "\u22AE": e.MO.REL, "\u22AF": e.MO.REL, "\u22B0": e.MO.REL, "\u22B1": e.MO.REL, "\u22B2": e.MO.REL, "\u22B3": e.MO.REL, "\u22B4": e.MO.REL, "\u22B5": e.MO.REL, "\u22B6": e.MO.REL, "\u22B7": e.MO.REL, "\u22B8": e.MO.REL, "\u22B9": e.MO.REL, "\u22BA": e.MO.BIN4, "\u22BB": e.MO.BIN4, "\u22BC": e.MO.BIN4, "\u22BD": e.MO.BIN4, "\u22BE": e.MO.BIN3, "\u22BF": e.MO.BIN3, "\u22C4": e.MO.BIN4, "\u22C5": e.MO.BIN4, "\u22C6": e.MO.BIN4, "\u22C7": e.MO.BIN4, "\u22C8": e.MO.REL, "\u22C9": e.MO.BIN4, "\u22CA": e.MO.BIN4, "\u22CB": e.MO.BIN4, "\u22CC": e.MO.BIN4, "\u22CD": e.MO.REL, "\u22CE": e.MO.BIN4, "\u22CF": e.MO.BIN4, "\u22D0": e.MO.REL, "\u22D1": e.MO.REL, "\u22D2": e.MO.BIN4, "\u22D3": e.MO.BIN4, "\u22D4": e.MO.REL, "\u22D5": e.MO.REL, "\u22D6": e.MO.REL, "\u22D7": e.MO.REL, "\u22D8": e.MO.REL, "\u22D9": e.MO.REL, "\u22DA": e.MO.REL, "\u22DB": e.MO.REL, "\u22DC": e.MO.REL, "\u22DD": e.MO.REL, "\u22DE": e.MO.REL, "\u22DF": e.MO.REL, "\u22E0": e.MO.REL, "\u22E1": e.MO.REL, "\u22E2": e.MO.REL, "\u22E3": e.MO.REL, "\u22E4": e.MO.REL, "\u22E5": e.MO.REL, "\u22E6": e.MO.REL, "\u22E7": e.MO.REL, "\u22E8": e.MO.REL, "\u22E9": e.MO.REL, "\u22EA": e.MO.REL, "\u22EB": e.MO.REL, "\u22EC": e.MO.REL, "\u22ED": e.MO.REL, "\u22EE": e.MO.ORD55, "\u22EF": e.MO.INNER, "\u22F0": e.MO.REL, "\u22F1": [5, 5, o.TEXCLASS.INNER, null], "\u22F2": e.MO.REL, "\u22F3": e.MO.REL, "\u22F4": e.MO.REL, "\u22F5": e.MO.REL, "\u22F6": e.MO.REL, "\u22F7": e.MO.REL, "\u22F8": e.MO.REL, "\u22F9": e.MO.REL, "\u22FA": e.MO.REL, "\u22FB": e.MO.REL, "\u22FC": e.MO.REL, "\u22FD": e.MO.REL, "\u22FE": e.MO.REL, "\u22FF": e.MO.REL, "\u2305": e.MO.BIN3, "\u2306": e.MO.BIN3, "\u2322": e.MO.REL4, "\u2323": e.MO.REL4, "\u2329": e.MO.OPEN, "\u232A": e.MO.CLOSE, "\u23AA": e.MO.ORD, "\u23AF": [0, 0, o.TEXCLASS.ORD, { stretchy: true }], "\u23B0": e.MO.OPEN, "\u23B1": e.MO.CLOSE, "\u2500": e.MO.ORD, "\u25B3": e.MO.BIN4, "\u25B5": e.MO.BIN4, "\u25B9": e.MO.BIN4, "\u25BD": e.MO.BIN4, "\u25BF": e.MO.BIN4, "\u25C3": e.MO.BIN4, "\u25EF": e.MO.BIN3, "\u2660": e.MO.ORD, "\u2661": e.MO.ORD, "\u2662": e.MO.ORD, "\u2663": e.MO.ORD, "\u2758": e.MO.REL, "\u27F0": e.MO.RELSTRETCH, "\u27F1": e.MO.RELSTRETCH, "\u27F5": e.MO.WIDEREL, "\u27F6": e.MO.WIDEREL, "\u27F7": e.MO.WIDEREL, "\u27F8": e.MO.WIDEREL, "\u27F9": e.MO.WIDEREL, "\u27FA": e.MO.WIDEREL, "\u27FB": e.MO.WIDEREL, "\u27FC": e.MO.WIDEREL, "\u27FD": e.MO.WIDEREL, "\u27FE": e.MO.WIDEREL, "\u27FF": e.MO.WIDEREL, "\u2900": e.MO.RELACCENT, "\u2901": e.MO.RELACCENT, "\u2902": e.MO.RELACCENT, "\u2903": e.MO.RELACCENT, "\u2904": e.MO.RELACCENT, "\u2905": e.MO.RELACCENT, "\u2906": e.MO.RELACCENT, "\u2907": e.MO.RELACCENT, "\u2908": e.MO.REL, "\u2909": e.MO.REL, "\u290A": e.MO.RELSTRETCH, "\u290B": e.MO.RELSTRETCH, "\u290C": e.MO.WIDEREL, "\u290D": e.MO.WIDEREL, "\u290E": e.MO.WIDEREL, "\u290F": e.MO.WIDEREL, "\u2910": e.MO.WIDEREL, "\u2911": e.MO.RELACCENT, "\u2912": e.MO.RELSTRETCH, "\u2913": e.MO.RELSTRETCH, "\u2914": e.MO.RELACCENT, "\u2915": e.MO.RELACCENT, "\u2916": e.MO.RELACCENT, "\u2917": e.MO.RELACCENT, "\u2918": e.MO.RELACCENT, "\u2919": e.MO.RELACCENT, "\u291A": e.MO.RELACCENT, "\u291B": e.MO.RELACCENT, "\u291C": e.MO.RELACCENT, "\u291D": e.MO.RELACCENT, "\u291E": e.MO.RELACCENT, "\u291F": e.MO.RELACCENT, "\u2920": e.MO.RELACCENT, "\u2921": e.MO.RELSTRETCH, "\u2922": e.MO.RELSTRETCH, "\u2923": e.MO.REL, "\u2924": e.MO.REL, "\u2925": e.MO.REL, "\u2926": e.MO.REL, "\u2927": e.MO.REL, "\u2928": e.MO.REL, "\u2929": e.MO.REL, "\u292A": e.MO.REL, "\u292B": e.MO.REL, "\u292C": e.MO.REL, "\u292D": e.MO.REL, "\u292E": e.MO.REL, "\u292F": e.MO.REL, "\u2930": e.MO.REL, "\u2931": e.MO.REL, "\u2932": e.MO.REL, "\u2933": e.MO.RELACCENT, "\u2934": e.MO.REL, "\u2935": e.MO.REL, "\u2936": e.MO.REL, "\u2937": e.MO.REL, "\u2938": e.MO.REL, "\u2939": e.MO.REL, "\u293A": e.MO.RELACCENT, "\u293B": e.MO.RELACCENT, "\u293C": e.MO.RELACCENT, "\u293D": e.MO.RELACCENT, "\u293E": e.MO.REL, "\u293F": e.MO.REL, "\u2940": e.MO.REL, "\u2941": e.MO.REL, "\u2942": e.MO.RELACCENT, "\u2943": e.MO.RELACCENT, "\u2944": e.MO.RELACCENT, "\u2945": e.MO.RELACCENT, "\u2946": e.MO.RELACCENT, "\u2947": e.MO.RELACCENT, "\u2948": e.MO.RELACCENT, "\u2949": e.MO.REL, "\u294A": e.MO.RELACCENT, "\u294B": e.MO.RELACCENT, "\u294C": e.MO.REL, "\u294D": e.MO.REL, "\u294E": e.MO.WIDEREL, "\u294F": e.MO.RELSTRETCH, "\u2950": e.MO.WIDEREL, "\u2951": e.MO.RELSTRETCH, "\u2952": e.MO.WIDEREL, "\u2953": e.MO.WIDEREL, "\u2954": e.MO.RELSTRETCH, "\u2955": e.MO.RELSTRETCH, "\u2956": e.MO.RELSTRETCH, "\u2957": e.MO.RELSTRETCH, "\u2958": e.MO.RELSTRETCH, "\u2959": e.MO.RELSTRETCH, "\u295A": e.MO.WIDEREL, "\u295B": e.MO.WIDEREL, "\u295C": e.MO.RELSTRETCH, "\u295D": e.MO.RELSTRETCH, "\u295E": e.MO.WIDEREL, "\u295F": e.MO.WIDEREL, "\u2960": e.MO.RELSTRETCH, "\u2961": e.MO.RELSTRETCH, "\u2962": e.MO.RELACCENT, "\u2963": e.MO.REL, "\u2964": e.MO.RELACCENT, "\u2965": e.MO.REL, "\u2966": e.MO.RELACCENT, "\u2967": e.MO.RELACCENT, "\u2968": e.MO.RELACCENT, "\u2969": e.MO.RELACCENT, "\u296A": e.MO.RELACCENT, "\u296B": e.MO.RELACCENT, "\u296C": e.MO.RELACCENT, "\u296D": e.MO.RELACCENT, "\u296E": e.MO.RELSTRETCH, "\u296F": e.MO.RELSTRETCH, "\u2970": e.MO.RELACCENT, "\u2971": e.MO.RELACCENT, "\u2972": e.MO.RELACCENT, "\u2973": e.MO.RELACCENT, "\u2974": e.MO.RELACCENT, "\u2975": e.MO.RELACCENT, "\u2976": e.MO.RELACCENT, "\u2977": e.MO.RELACCENT, "\u2978": e.MO.RELACCENT, "\u2979": e.MO.RELACCENT, "\u297A": e.MO.RELACCENT, "\u297B": e.MO.RELACCENT, "\u297C": e.MO.RELACCENT, "\u297D": e.MO.RELACCENT, "\u297E": e.MO.REL, "\u297F": e.MO.REL, "\u2981": e.MO.BIN3, "\u2982": e.MO.BIN3, "\u2999": e.MO.BIN3, "\u299A": e.MO.BIN3, "\u299B": e.MO.BIN3, "\u299C": e.MO.BIN3, "\u299D": e.MO.BIN3, "\u299E": e.MO.BIN3, "\u299F": e.MO.BIN3, "\u29A0": e.MO.BIN3, "\u29A1": e.MO.BIN3, "\u29A2": e.MO.BIN3, "\u29A3": e.MO.BIN3, "\u29A4": e.MO.BIN3, "\u29A5": e.MO.BIN3, "\u29A6": e.MO.BIN3, "\u29A7": e.MO.BIN3, "\u29A8": e.MO.BIN3, "\u29A9": e.MO.BIN3, "\u29AA": e.MO.BIN3, "\u29AB": e.MO.BIN3, "\u29AC": e.MO.BIN3, "\u29AD": e.MO.BIN3, "\u29AE": e.MO.BIN3, "\u29AF": e.MO.BIN3, "\u29B0": e.MO.BIN3, "\u29B1": e.MO.BIN3, "\u29B2": e.MO.BIN3, "\u29B3": e.MO.BIN3, "\u29B4": e.MO.BIN3, "\u29B5": e.MO.BIN3, "\u29B6": e.MO.BIN4, "\u29B7": e.MO.BIN4, "\u29B8": e.MO.BIN4, "\u29B9": e.MO.BIN4, "\u29BA": e.MO.BIN4, "\u29BB": e.MO.BIN4, "\u29BC": e.MO.BIN4, "\u29BD": e.MO.BIN4, "\u29BE": e.MO.BIN4, "\u29BF": e.MO.BIN4, "\u29C0": e.MO.REL, "\u29C1": e.MO.REL, "\u29C2": e.MO.BIN3, "\u29C3": e.MO.BIN3, "\u29C4": e.MO.BIN4, "\u29C5": e.MO.BIN4, "\u29C6": e.MO.BIN4, "\u29C7": e.MO.BIN4, "\u29C8": e.MO.BIN4, "\u29C9": e.MO.BIN3, "\u29CA": e.MO.BIN3, "\u29CB": e.MO.BIN3, "\u29CC": e.MO.BIN3, "\u29CD": e.MO.BIN3, "\u29CE": e.MO.REL, "\u29CF": e.MO.REL, "\u29CF\u0338": e.MO.REL, "\u29D0": e.MO.REL, "\u29D0\u0338": e.MO.REL, "\u29D1": e.MO.REL, "\u29D2": e.MO.REL, "\u29D3": e.MO.REL, "\u29D4": e.MO.REL, "\u29D5": e.MO.REL, "\u29D6": e.MO.BIN4, "\u29D7": e.MO.BIN4, "\u29D8": e.MO.BIN3, "\u29D9": e.MO.BIN3, "\u29DB": e.MO.BIN3, "\u29DC": e.MO.BIN3, "\u29DD": e.MO.BIN3, "\u29DE": e.MO.REL, "\u29DF": e.MO.BIN3, "\u29E0": e.MO.BIN3, "\u29E1": e.MO.REL, "\u29E2": e.MO.BIN4, "\u29E3": e.MO.REL, "\u29E4": e.MO.REL, "\u29E5": e.MO.REL, "\u29E6": e.MO.REL, "\u29E7": e.MO.BIN3, "\u29E8": e.MO.BIN3, "\u29E9": e.MO.BIN3, "\u29EA": e.MO.BIN3, "\u29EB": e.MO.BIN3, "\u29EC": e.MO.BIN3, "\u29ED": e.MO.BIN3, "\u29EE": e.MO.BIN3, "\u29EF": e.MO.BIN3, "\u29F0": e.MO.BIN3, "\u29F1": e.MO.BIN3, "\u29F2": e.MO.BIN3, "\u29F3": e.MO.BIN3, "\u29F4": e.MO.REL, "\u29F5": e.MO.BIN4, "\u29F6": e.MO.BIN4, "\u29F7": e.MO.BIN4, "\u29F8": e.MO.BIN3, "\u29F9": e.MO.BIN3, "\u29FA": e.MO.BIN3, "\u29FB": e.MO.BIN3, "\u29FE": e.MO.BIN4, "\u29FF": e.MO.BIN4, "\u2A1D": e.MO.BIN3, "\u2A1E": e.MO.BIN3, "\u2A1F": e.MO.BIN3, "\u2A20": e.MO.BIN3, "\u2A21": e.MO.BIN3, "\u2A22": e.MO.BIN4, "\u2A23": e.MO.BIN4, "\u2A24": e.MO.BIN4, "\u2A25": e.MO.BIN4, "\u2A26": e.MO.BIN4, "\u2A27": e.MO.BIN4, "\u2A28": e.MO.BIN4, "\u2A29": e.MO.BIN4, "\u2A2A": e.MO.BIN4, "\u2A2B": e.MO.BIN4, "\u2A2C": e.MO.BIN4, "\u2A2D": e.MO.BIN4, "\u2A2E": e.MO.BIN4, "\u2A2F": e.MO.BIN4, "\u2A30": e.MO.BIN4, "\u2A31": e.MO.BIN4, "\u2A32": e.MO.BIN4, "\u2A33": e.MO.BIN4, "\u2A34": e.MO.BIN4, "\u2A35": e.MO.BIN4, "\u2A36": e.MO.BIN4, "\u2A37": e.MO.BIN4, "\u2A38": e.MO.BIN4, "\u2A39": e.MO.BIN4, "\u2A3A": e.MO.BIN4, "\u2A3B": e.MO.BIN4, "\u2A3C": e.MO.BIN4, "\u2A3D": e.MO.BIN4, "\u2A3E": e.MO.BIN4, "\u2A3F": e.MO.BIN4, "\u2A40": e.MO.BIN4, "\u2A41": e.MO.BIN4, "\u2A42": e.MO.BIN4, "\u2A43": e.MO.BIN4, "\u2A44": e.MO.BIN4, "\u2A45": e.MO.BIN4, "\u2A46": e.MO.BIN4, "\u2A47": e.MO.BIN4, "\u2A48": e.MO.BIN4, "\u2A49": e.MO.BIN4, "\u2A4A": e.MO.BIN4, "\u2A4B": e.MO.BIN4, "\u2A4C": e.MO.BIN4, "\u2A4D": e.MO.BIN4, "\u2A4E": e.MO.BIN4, "\u2A4F": e.MO.BIN4, "\u2A50": e.MO.BIN4, "\u2A51": e.MO.BIN4, "\u2A52": e.MO.BIN4, "\u2A53": e.MO.BIN4, "\u2A54": e.MO.BIN4, "\u2A55": e.MO.BIN4, "\u2A56": e.MO.BIN4, "\u2A57": e.MO.BIN4, "\u2A58": e.MO.BIN4, "\u2A59": e.MO.REL, "\u2A5A": e.MO.BIN4, "\u2A5B": e.MO.BIN4, "\u2A5C": e.MO.BIN4, "\u2A5D": e.MO.BIN4, "\u2A5E": e.MO.BIN4, "\u2A5F": e.MO.BIN4, "\u2A60": e.MO.BIN4, "\u2A61": e.MO.BIN4, "\u2A62": e.MO.BIN4, "\u2A63": e.MO.BIN4, "\u2A64": e.MO.BIN4, "\u2A65": e.MO.BIN4, "\u2A66": e.MO.REL, "\u2A67": e.MO.REL, "\u2A68": e.MO.REL, "\u2A69": e.MO.REL, "\u2A6A": e.MO.REL, "\u2A6B": e.MO.REL, "\u2A6C": e.MO.REL, "\u2A6D": e.MO.REL, "\u2A6E": e.MO.REL, "\u2A6F": e.MO.REL, "\u2A70": e.MO.REL, "\u2A71": e.MO.BIN4, "\u2A72": e.MO.BIN4, "\u2A73": e.MO.REL, "\u2A74": e.MO.REL, "\u2A75": e.MO.REL, "\u2A76": e.MO.REL, "\u2A77": e.MO.REL, "\u2A78": e.MO.REL, "\u2A79": e.MO.REL, "\u2A7A": e.MO.REL, "\u2A7B": e.MO.REL, "\u2A7C": e.MO.REL, "\u2A7D": e.MO.REL, "\u2A7D\u0338": e.MO.REL, "\u2A7E": e.MO.REL, "\u2A7E\u0338": e.MO.REL, "\u2A7F": e.MO.REL, "\u2A80": e.MO.REL, "\u2A81": e.MO.REL, "\u2A82": e.MO.REL, "\u2A83": e.MO.REL, "\u2A84": e.MO.REL, "\u2A85": e.MO.REL, "\u2A86": e.MO.REL, "\u2A87": e.MO.REL, "\u2A88": e.MO.REL, "\u2A89": e.MO.REL, "\u2A8A": e.MO.REL, "\u2A8B": e.MO.REL, "\u2A8C": e.MO.REL, "\u2A8D": e.MO.REL, "\u2A8E": e.MO.REL, "\u2A8F": e.MO.REL, "\u2A90": e.MO.REL, "\u2A91": e.MO.REL, "\u2A92": e.MO.REL, "\u2A93": e.MO.REL, "\u2A94": e.MO.REL, "\u2A95": e.MO.REL, "\u2A96": e.MO.REL, "\u2A97": e.MO.REL, "\u2A98": e.MO.REL, "\u2A99": e.MO.REL, "\u2A9A": e.MO.REL, "\u2A9B": e.MO.REL, "\u2A9C": e.MO.REL, "\u2A9D": e.MO.REL, "\u2A9E": e.MO.REL, "\u2A9F": e.MO.REL, "\u2AA0": e.MO.REL, "\u2AA1": e.MO.REL, "\u2AA1\u0338": e.MO.REL, "\u2AA2": e.MO.REL, "\u2AA2\u0338": e.MO.REL, "\u2AA3": e.MO.REL, "\u2AA4": e.MO.REL, "\u2AA5": e.MO.REL, "\u2AA6": e.MO.REL, "\u2AA7": e.MO.REL, "\u2AA8": e.MO.REL, "\u2AA9": e.MO.REL, "\u2AAA": e.MO.REL, "\u2AAB": e.MO.REL, "\u2AAC": e.MO.REL, "\u2AAD": e.MO.REL, "\u2AAE": e.MO.REL, "\u2AAF": e.MO.REL, "\u2AAF\u0338": e.MO.REL, "\u2AB0": e.MO.REL, "\u2AB0\u0338": e.MO.REL, "\u2AB1": e.MO.REL, "\u2AB2": e.MO.REL, "\u2AB3": e.MO.REL, "\u2AB4": e.MO.REL, "\u2AB5": e.MO.REL, "\u2AB6": e.MO.REL, "\u2AB7": e.MO.REL, "\u2AB8": e.MO.REL, "\u2AB9": e.MO.REL, "\u2ABA": e.MO.REL, "\u2ABB": e.MO.REL, "\u2ABC": e.MO.REL, "\u2ABD": e.MO.REL, "\u2ABE": e.MO.REL, "\u2ABF": e.MO.REL, "\u2AC0": e.MO.REL, "\u2AC1": e.MO.REL, "\u2AC2": e.MO.REL, "\u2AC3": e.MO.REL, "\u2AC4": e.MO.REL, "\u2AC5": e.MO.REL, "\u2AC6": e.MO.REL, "\u2AC7": e.MO.REL, "\u2AC8": e.MO.REL, "\u2AC9": e.MO.REL, "\u2ACA": e.MO.REL, "\u2ACB": e.MO.REL, "\u2ACC": e.MO.REL, "\u2ACD": e.MO.REL, "\u2ACE": e.MO.REL, "\u2ACF": e.MO.REL, "\u2AD0": e.MO.REL, "\u2AD1": e.MO.REL, "\u2AD2": e.MO.REL, "\u2AD3": e.MO.REL, "\u2AD4": e.MO.REL, "\u2AD5": e.MO.REL, "\u2AD6": e.MO.REL, "\u2AD7": e.MO.REL, "\u2AD8": e.MO.REL, "\u2AD9": e.MO.REL, "\u2ADA": e.MO.REL, "\u2ADB": e.MO.REL, "\u2ADD": e.MO.REL, "\u2ADD\u0338": e.MO.REL, "\u2ADE": e.MO.REL, "\u2ADF": e.MO.REL, "\u2AE0": e.MO.REL, "\u2AE1": e.MO.REL, "\u2AE2": e.MO.REL, "\u2AE3": e.MO.REL, "\u2AE4": e.MO.REL, "\u2AE5": e.MO.REL, "\u2AE6": e.MO.REL, "\u2AE7": e.MO.REL, "\u2AE8": e.MO.REL, "\u2AE9": e.MO.REL, "\u2AEA": e.MO.REL, "\u2AEB": e.MO.REL, "\u2AEC": e.MO.REL, "\u2AED": e.MO.REL, "\u2AEE": e.MO.REL, "\u2AEF": e.MO.REL, "\u2AF0": e.MO.REL, "\u2AF1": e.MO.REL, "\u2AF2": e.MO.REL, "\u2AF3": e.MO.REL, "\u2AF4": e.MO.BIN4, "\u2AF5": e.MO.BIN4, "\u2AF6": e.MO.BIN4, "\u2AF7": e.MO.REL, "\u2AF8": e.MO.REL, "\u2AF9": e.MO.REL, "\u2AFA": e.MO.REL, "\u2AFB": e.MO.BIN4, "\u2AFD": e.MO.BIN4, "\u2AFE": e.MO.BIN3, "\u2B45": e.MO.RELSTRETCH, "\u2B46": e.MO.RELSTRETCH, "\u3008": e.MO.OPEN, "\u3009": e.MO.CLOSE, "\uFE37": e.MO.WIDEACCENT, "\uFE38": e.MO.WIDEACCENT } }, e.OPTABLE.infix["^"] = e.MO.WIDEREL, e.OPTABLE.infix._ = e.MO.WIDEREL, e.OPTABLE.infix["\u2ADC"] = e.MO.REL;
      }, 9259: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.SerializedMmlVisitor = e.toEntity = e.DATAMJX = void 0;
        var s = r(6325), l = r(9007), c = r(450);
        e.DATAMJX = "data-mjx-";
        e.toEntity = function(t2) {
          return "&#x" + t2.codePointAt(0).toString(16).toUpperCase() + ";";
        };
        var u = function(t2) {
          function r2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(r2, t2), r2.prototype.visitTree = function(t3) {
            return this.visitNode(t3, "");
          }, r2.prototype.visitTextNode = function(t3, e2) {
            return this.quoteHTML(t3.getText());
          }, r2.prototype.visitXMLNode = function(t3, e2) {
            return e2 + t3.getSerializedXML();
          }, r2.prototype.visitInferredMrowNode = function(t3, e2) {
            var r3, n2, o2 = [];
            try {
              for (var a2 = i(t3.childNodes), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var l2 = s2.value;
                o2.push(this.visitNode(l2, e2));
              }
            } catch (t4) {
              r3 = { error: t4 };
            } finally {
              try {
                s2 && !s2.done && (n2 = a2.return) && n2.call(a2);
              } finally {
                if (r3)
                  throw r3.error;
              }
            }
            return o2.join("\n");
          }, r2.prototype.visitTeXAtomNode = function(t3, e2) {
            var r3 = this.childNodeMml(t3, e2 + "  ", "\n");
            return e2 + "<mrow" + this.getAttributes(t3) + ">" + (r3.match(/\S/) ? "\n" + r3 + e2 : "") + "</mrow>";
          }, r2.prototype.visitAnnotationNode = function(t3, e2) {
            return e2 + "<annotation" + this.getAttributes(t3) + ">" + this.childNodeMml(t3, "", "") + "</annotation>";
          }, r2.prototype.visitDefault = function(t3, e2) {
            var r3 = t3.kind, n2 = a(t3.isToken || 0 === t3.childNodes.length ? ["", ""] : ["\n", e2], 2), o2 = n2[0], i2 = n2[1], s2 = this.childNodeMml(t3, e2 + "  ", o2);
            return e2 + "<" + r3 + this.getAttributes(t3) + ">" + (s2.match(/\S/) ? o2 + s2 + i2 : "") + "</" + r3 + ">";
          }, r2.prototype.childNodeMml = function(t3, e2, r3) {
            var n2, o2, a2 = "";
            try {
              for (var s2 = i(t3.childNodes), l2 = s2.next(); !l2.done; l2 = s2.next()) {
                var c2 = l2.value;
                a2 += this.visitNode(c2, e2) + r3;
              }
            } catch (t4) {
              n2 = { error: t4 };
            } finally {
              try {
                l2 && !l2.done && (o2 = s2.return) && o2.call(s2);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
            return a2;
          }, r2.prototype.getAttributes = function(t3) {
            var e2, r3, n2 = [], o2 = this.constructor.defaultAttributes[t3.kind] || {}, a2 = Object.assign({}, o2, this.getDataAttributes(t3), t3.attributes.getAllAttributes()), s2 = this.constructor.variants;
            a2.hasOwnProperty("mathvariant") && s2.hasOwnProperty(a2.mathvariant) && (a2.mathvariant = s2[a2.mathvariant]);
            try {
              for (var l2 = i(Object.keys(a2)), c2 = l2.next(); !c2.done; c2 = l2.next()) {
                var u2 = c2.value, p = String(a2[u2]);
                void 0 !== p && n2.push(u2 + '="' + this.quoteHTML(p) + '"');
              }
            } catch (t4) {
              e2 = { error: t4 };
            } finally {
              try {
                c2 && !c2.done && (r3 = l2.return) && r3.call(l2);
              } finally {
                if (e2)
                  throw e2.error;
              }
            }
            return n2.length ? " " + n2.join(" ") : "";
          }, r2.prototype.getDataAttributes = function(t3) {
            var e2 = {}, r3 = t3.attributes.getExplicit("mathvariant"), n2 = this.constructor.variants;
            r3 && n2.hasOwnProperty(r3) && this.setDataAttribute(e2, "variant", r3), t3.getProperty("variantForm") && this.setDataAttribute(e2, "alternate", "1"), t3.getProperty("pseudoscript") && this.setDataAttribute(e2, "pseudoscript", "true"), false === t3.getProperty("autoOP") && this.setDataAttribute(e2, "auto-op", "false");
            var o2 = t3.getProperty("scriptalign");
            o2 && this.setDataAttribute(e2, "script-align", o2);
            var i2 = t3.getProperty("texClass");
            if (void 0 !== i2) {
              var a2 = true;
              if (i2 === l.TEXCLASS.OP && t3.isKind("mi")) {
                var s2 = t3.getText();
                a2 = !(s2.length > 1 && s2.match(c.MmlMi.operatorName));
              }
              a2 && this.setDataAttribute(e2, "texclass", i2 < 0 ? "NONE" : l.TEXCLASSNAMES[i2]);
            }
            return t3.getProperty("scriptlevel") && false === t3.getProperty("useHeight") && this.setDataAttribute(e2, "smallmatrix", "true"), e2;
          }, r2.prototype.setDataAttribute = function(t3, r3, n2) {
            t3[e.DATAMJX + r3] = n2;
          }, r2.prototype.quoteHTML = function(t3) {
            return t3.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\"/g, "&quot;").replace(/[\uD800-\uDBFF]./g, e.toEntity).replace(/[\u0080-\uD7FF\uE000-\uFFFF]/g, e.toEntity);
          }, r2.variants = { "-tex-calligraphic": "script", "-tex-bold-calligraphic": "bold-script", "-tex-oldstyle": "normal", "-tex-bold-oldstyle": "bold", "-tex-mathit": "italic" }, r2.defaultAttributes = { math: { xmlns: "http://www.w3.org/1998/Math/MathML" } }, r2;
        }(s.MmlVisitor);
        e.SerializedMmlVisitor = u;
      }, 2975: function(t, e, r) {
        Object.defineProperty(e, "__esModule", { value: true }), e.AbstractOutputJax = void 0;
        var n = r(7233), o = r(7525), i = function() {
          function t2(t3) {
            void 0 === t3 && (t3 = {}), this.adaptor = null;
            var e2 = this.constructor;
            this.options = (0, n.userOptions)((0, n.defaultOptions)({}, e2.OPTIONS), t3), this.postFilters = new o.FunctionList();
          }
          return Object.defineProperty(t2.prototype, "name", { get: function() {
            return this.constructor.NAME;
          }, enumerable: false, configurable: true }), t2.prototype.setAdaptor = function(t3) {
            this.adaptor = t3;
          }, t2.prototype.initialize = function() {
          }, t2.prototype.reset = function() {
            for (var t3 = [], e2 = 0; e2 < arguments.length; e2++)
              t3[e2] = arguments[e2];
          }, t2.prototype.getMetrics = function(t3) {
          }, t2.prototype.styleSheet = function(t3) {
            return null;
          }, t2.prototype.pageElements = function(t3) {
            return null;
          }, t2.prototype.executeFilters = function(t3, e2, r2, n2) {
            var o2 = { math: e2, document: r2, data: n2 };
            return t3.execute(o2), o2.data;
          }, t2.NAME = "generic", t2.OPTIONS = {}, t2;
        }();
        e.AbstractOutputJax = i;
      }, 4574: function(t, e) {
        var r = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, n = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a;
        }, o = this && this.__spreadArray || function(t2, e2, r2) {
          if (r2 || 2 === arguments.length)
            for (var n2, o2 = 0, i2 = e2.length; o2 < i2; o2++)
              !n2 && o2 in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, o2)), n2[o2] = e2[o2]);
          return t2.concat(n2 || Array.prototype.slice.call(e2));
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.AbstractFactory = void 0;
        var i = function() {
          function t2(t3) {
            var e2, n2;
            void 0 === t3 && (t3 = null), this.defaultKind = "unknown", this.nodeMap = /* @__PURE__ */ new Map(), this.node = {}, null === t3 && (t3 = this.constructor.defaultNodes);
            try {
              for (var o2 = r(Object.keys(t3)), i2 = o2.next(); !i2.done; i2 = o2.next()) {
                var a = i2.value;
                this.setNodeClass(a, t3[a]);
              }
            } catch (t4) {
              e2 = { error: t4 };
            } finally {
              try {
                i2 && !i2.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (e2)
                  throw e2.error;
              }
            }
          }
          return t2.prototype.create = function(t3) {
            for (var e2 = [], r2 = 1; r2 < arguments.length; r2++)
              e2[r2 - 1] = arguments[r2];
            return (this.node[t3] || this.node[this.defaultKind]).apply(void 0, o([], n(e2), false));
          }, t2.prototype.setNodeClass = function(t3, e2) {
            this.nodeMap.set(t3, e2);
            var r2 = this, i2 = this.nodeMap.get(t3);
            this.node[t3] = function() {
              for (var t4 = [], e3 = 0; e3 < arguments.length; e3++)
                t4[e3] = arguments[e3];
              return new (i2.bind.apply(i2, o([void 0, r2], n(t4), false)))();
            };
          }, t2.prototype.getNodeClass = function(t3) {
            return this.nodeMap.get(t3);
          }, t2.prototype.deleteNodeClass = function(t3) {
            this.nodeMap.delete(t3), delete this.node[t3];
          }, t2.prototype.nodeIsKind = function(t3, e2) {
            return t3 instanceof this.getNodeClass(e2);
          }, t2.prototype.getKinds = function() {
            return Array.from(this.nodeMap.keys());
          }, t2.defaultNodes = {}, t2;
        }();
        e.AbstractFactory = i;
      }, 4596: function(t, e) {
        var r, n = this && this.__extends || (r = function(t2, e2) {
          return r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, r(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function n2() {
            this.constructor = t2;
          }
          r(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
        }), o = this && this.__assign || function() {
          return o = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, o.apply(this, arguments);
        }, i = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.AbstractEmptyNode = e.AbstractNode = void 0;
        var a = function() {
          function t2(t3, e2, r2) {
            var n2, o2;
            void 0 === e2 && (e2 = {}), void 0 === r2 && (r2 = []), this.factory = t3, this.parent = null, this.properties = {}, this.childNodes = [];
            try {
              for (var a2 = i(Object.keys(e2)), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var l = s2.value;
                this.setProperty(l, e2[l]);
              }
            } catch (t4) {
              n2 = { error: t4 };
            } finally {
              try {
                s2 && !s2.done && (o2 = a2.return) && o2.call(a2);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
            r2.length && this.setChildren(r2);
          }
          return Object.defineProperty(t2.prototype, "kind", { get: function() {
            return "unknown";
          }, enumerable: false, configurable: true }), t2.prototype.setProperty = function(t3, e2) {
            this.properties[t3] = e2;
          }, t2.prototype.getProperty = function(t3) {
            return this.properties[t3];
          }, t2.prototype.getPropertyNames = function() {
            return Object.keys(this.properties);
          }, t2.prototype.getAllProperties = function() {
            return this.properties;
          }, t2.prototype.removeProperty = function() {
            for (var t3, e2, r2 = [], n2 = 0; n2 < arguments.length; n2++)
              r2[n2] = arguments[n2];
            try {
              for (var o2 = i(r2), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value;
                delete this.properties[s2];
              }
            } catch (e3) {
              t3 = { error: e3 };
            } finally {
              try {
                a2 && !a2.done && (e2 = o2.return) && e2.call(o2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
          }, t2.prototype.isKind = function(t3) {
            return this.factory.nodeIsKind(this, t3);
          }, t2.prototype.setChildren = function(t3) {
            var e2, r2;
            this.childNodes = [];
            try {
              for (var n2 = i(t3), o2 = n2.next(); !o2.done; o2 = n2.next()) {
                var a2 = o2.value;
                this.appendChild(a2);
              }
            } catch (t4) {
              e2 = { error: t4 };
            } finally {
              try {
                o2 && !o2.done && (r2 = n2.return) && r2.call(n2);
              } finally {
                if (e2)
                  throw e2.error;
              }
            }
          }, t2.prototype.appendChild = function(t3) {
            return this.childNodes.push(t3), t3.parent = this, t3;
          }, t2.prototype.replaceChild = function(t3, e2) {
            var r2 = this.childIndex(e2);
            return null !== r2 && (this.childNodes[r2] = t3, t3.parent = this, e2.parent = null), t3;
          }, t2.prototype.removeChild = function(t3) {
            var e2 = this.childIndex(t3);
            return null !== e2 && (this.childNodes.splice(e2, 1), t3.parent = null), t3;
          }, t2.prototype.childIndex = function(t3) {
            var e2 = this.childNodes.indexOf(t3);
            return -1 === e2 ? null : e2;
          }, t2.prototype.copy = function() {
            var t3, e2, r2 = this.factory.create(this.kind);
            r2.properties = o({}, this.properties);
            try {
              for (var n2 = i(this.childNodes || []), a2 = n2.next(); !a2.done; a2 = n2.next()) {
                var s2 = a2.value;
                s2 && r2.appendChild(s2.copy());
              }
            } catch (e3) {
              t3 = { error: e3 };
            } finally {
              try {
                a2 && !a2.done && (e2 = n2.return) && e2.call(n2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return r2;
          }, t2.prototype.findNodes = function(t3) {
            var e2 = [];
            return this.walkTree(function(r2) {
              r2.isKind(t3) && e2.push(r2);
            }), e2;
          }, t2.prototype.walkTree = function(t3, e2) {
            var r2, n2;
            t3(this, e2);
            try {
              for (var o2 = i(this.childNodes), a2 = o2.next(); !a2.done; a2 = o2.next()) {
                var s2 = a2.value;
                s2 && s2.walkTree(t3, e2);
              }
            } catch (t4) {
              r2 = { error: t4 };
            } finally {
              try {
                a2 && !a2.done && (n2 = o2.return) && n2.call(o2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            return e2;
          }, t2.prototype.toString = function() {
            return this.kind + "(" + this.childNodes.join(",") + ")";
          }, t2;
        }();
        e.AbstractNode = a;
        var s = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return n(e2, t2), e2.prototype.setChildren = function(t3) {
          }, e2.prototype.appendChild = function(t3) {
            return t3;
          }, e2.prototype.replaceChild = function(t3, e3) {
            return e3;
          }, e2.prototype.childIndex = function(t3) {
            return null;
          }, e2.prototype.walkTree = function(t3, e3) {
            return t3(this, e3), e3;
          }, e2.prototype.toString = function() {
            return this.kind;
          }, e2;
        }(a);
        e.AbstractEmptyNode = s;
      }, 7860: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        });
        Object.defineProperty(e, "__esModule", { value: true }), e.AbstractNodeFactory = void 0;
        var i = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), e2.prototype.create = function(t3, e3, r2) {
            return void 0 === e3 && (e3 = {}), void 0 === r2 && (r2 = []), this.node[t3](e3, r2);
          }, e2;
        }(r(4574).AbstractFactory);
        e.AbstractNodeFactory = i;
      }, 8823: function(t, e, r) {
        var n = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, o = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        }, i = this && this.__spreadArray || function(t2, e2, r2) {
          if (r2 || 2 === arguments.length)
            for (var n2, o2 = 0, i2 = e2.length; o2 < i2; o2++)
              !n2 && o2 in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, o2)), n2[o2] = e2[o2]);
          return t2.concat(n2 || Array.prototype.slice.call(e2));
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.AbstractVisitor = void 0;
        var a = r(4596), s = function() {
          function t2(e2) {
            var r2, o2;
            this.nodeHandlers = /* @__PURE__ */ new Map();
            try {
              for (var i2 = n(e2.getKinds()), a2 = i2.next(); !a2.done; a2 = i2.next()) {
                var s2 = a2.value, l = this[t2.methodName(s2)];
                l && this.nodeHandlers.set(s2, l);
              }
            } catch (t3) {
              r2 = { error: t3 };
            } finally {
              try {
                a2 && !a2.done && (o2 = i2.return) && o2.call(i2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
          }
          return t2.methodName = function(t3) {
            return "visit" + (t3.charAt(0).toUpperCase() + t3.substr(1)).replace(/[^a-z0-9_]/gi, "_") + "Node";
          }, t2.prototype.visitTree = function(t3) {
            for (var e2 = [], r2 = 1; r2 < arguments.length; r2++)
              e2[r2 - 1] = arguments[r2];
            return this.visitNode.apply(this, i([t3], o(e2), false));
          }, t2.prototype.visitNode = function(t3) {
            for (var e2 = [], r2 = 1; r2 < arguments.length; r2++)
              e2[r2 - 1] = arguments[r2];
            var n2 = this.nodeHandlers.get(t3.kind) || this.visitDefault;
            return n2.call.apply(n2, i([this, t3], o(e2), false));
          }, t2.prototype.visitDefault = function(t3) {
            for (var e2, r2, s2 = [], l = 1; l < arguments.length; l++)
              s2[l - 1] = arguments[l];
            if (t3 instanceof a.AbstractNode)
              try {
                for (var c = n(t3.childNodes), u = c.next(); !u.done; u = c.next()) {
                  var p = u.value;
                  this.visitNode.apply(this, i([p], o(s2), false));
                }
              } catch (t4) {
                e2 = { error: t4 };
              } finally {
                try {
                  u && !u.done && (r2 = c.return) && r2.call(c);
                } finally {
                  if (e2)
                    throw e2.error;
                }
              }
          }, t2.prototype.setNodeHandler = function(t3, e2) {
            this.nodeHandlers.set(t3, e2);
          }, t2.prototype.removeNodeHandler = function(t3) {
            this.nodeHandlers.delete(t3);
          }, t2;
        }();
        e.AbstractVisitor = s;
      }, 8912: function(t, e) {
        Object.defineProperty(e, "__esModule", { value: true }), e.AbstractWrapper = void 0;
        var r = function() {
          function t2(t3, e2) {
            this.factory = t3, this.node = e2;
          }
          return Object.defineProperty(t2.prototype, "kind", { get: function() {
            return this.node.kind;
          }, enumerable: false, configurable: true }), t2.prototype.wrap = function(t3) {
            return this.factory.wrap(t3);
          }, t2;
        }();
        e.AbstractWrapper = r;
      }, 3811: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        }, a = this && this.__spreadArray || function(t2, e2, r2) {
          if (r2 || 2 === arguments.length)
            for (var n2, o2 = 0, i2 = e2.length; o2 < i2; o2++)
              !n2 && o2 in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, o2)), n2[o2] = e2[o2]);
          return t2.concat(n2 || Array.prototype.slice.call(e2));
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.AbstractWrapperFactory = void 0;
        var s = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), e2.prototype.wrap = function(t3) {
            for (var e3 = [], r2 = 1; r2 < arguments.length; r2++)
              e3[r2 - 1] = arguments[r2];
            return this.create.apply(this, a([t3.kind, t3], i(e3), false));
          }, e2;
        }(r(4574).AbstractFactory);
        e.AbstractWrapperFactory = s;
      }, 6272: function(t, e, r) {
        Object.defineProperty(e, "__esModule", { value: true }), e.RegisterHTMLHandler = void 0;
        var n = r(5713), o = r(3726);
        e.RegisterHTMLHandler = function(t2) {
          var e2 = new o.HTMLHandler(t2);
          return n.mathjax.handlers.register(e2), e2;
        };
      }, 3683: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__assign || function() {
          return i = Object.assign || function(t2) {
            for (var e2, r2 = 1, n2 = arguments.length; r2 < n2; r2++)
              for (var o2 in e2 = arguments[r2])
                Object.prototype.hasOwnProperty.call(e2, o2) && (t2[o2] = e2[o2]);
            return t2;
          }, i.apply(this, arguments);
        }, a = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        }, s = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.HTMLDocument = void 0;
        var l = r(5722), c = r(7233), u = r(3363), p = r(3335), f = r(5138), h = r(4474), d = function(t2) {
          function e2(e3, r2, n2) {
            var o2 = this, i2 = a((0, c.separateOptions)(n2, f.HTMLDomStrings.OPTIONS), 2), s2 = i2[0], l2 = i2[1];
            return (o2 = t2.call(this, e3, r2, s2) || this).domStrings = o2.options.DomStrings || new f.HTMLDomStrings(l2), o2.domStrings.adaptor = r2, o2.styles = [], o2;
          }
          return o(e2, t2), e2.prototype.findPosition = function(t3, e3, r2, n2) {
            var o2, i2, l2 = this.adaptor;
            try {
              for (var c2 = s(n2[t3]), u2 = c2.next(); !u2.done; u2 = c2.next()) {
                var p2 = u2.value, f2 = a(p2, 2), h2 = f2[0], d2 = f2[1];
                if (e3 <= d2 && "#text" === l2.kind(h2))
                  return { node: h2, n: Math.max(e3, 0), delim: r2 };
                e3 -= d2;
              }
            } catch (t4) {
              o2 = { error: t4 };
            } finally {
              try {
                u2 && !u2.done && (i2 = c2.return) && i2.call(c2);
              } finally {
                if (o2)
                  throw o2.error;
              }
            }
            return { node: null, n: 0, delim: r2 };
          }, e2.prototype.mathItem = function(t3, e3, r2) {
            var n2 = t3.math, o2 = this.findPosition(t3.n, t3.start.n, t3.open, r2), i2 = this.findPosition(t3.n, t3.end.n, t3.close, r2);
            return new this.options.MathItem(n2, e3, t3.display, o2, i2);
          }, e2.prototype.findMath = function(t3) {
            var e3, r2, n2, o2, i2, l2, u2, p2, f2;
            if (!this.processed.isSet("findMath")) {
              this.adaptor.document = this.document, t3 = (0, c.userOptions)({ elements: this.options.elements || [this.adaptor.body(this.document)] }, t3);
              try {
                for (var h2 = s(this.adaptor.getElements(t3.elements, this.document)), d2 = h2.next(); !d2.done; d2 = h2.next()) {
                  var y = d2.value, O = a([null, null], 2), m = O[0], v = O[1];
                  try {
                    for (var M = (n2 = void 0, s(this.inputJax)), b = M.next(); !b.done; b = M.next()) {
                      var E = b.value, g = new this.options.MathList();
                      if (E.processStrings) {
                        null === m && (m = (i2 = a(this.domStrings.find(y), 2))[0], v = i2[1]);
                        try {
                          for (var L = (l2 = void 0, s(E.findMath(m))), x = L.next(); !x.done; x = L.next()) {
                            var N = x.value;
                            g.push(this.mathItem(N, E, v));
                          }
                        } catch (t4) {
                          l2 = { error: t4 };
                        } finally {
                          try {
                            x && !x.done && (u2 = L.return) && u2.call(L);
                          } finally {
                            if (l2)
                              throw l2.error;
                          }
                        }
                      } else
                        try {
                          for (var _ = (p2 = void 0, s(E.findMath(y))), T = _.next(); !T.done; T = _.next()) {
                            N = T.value;
                            var R = new this.options.MathItem(N.math, E, N.display, N.start, N.end);
                            g.push(R);
                          }
                        } catch (t4) {
                          p2 = { error: t4 };
                        } finally {
                          try {
                            T && !T.done && (f2 = _.return) && f2.call(_);
                          } finally {
                            if (p2)
                              throw p2.error;
                          }
                        }
                      this.math.merge(g);
                    }
                  } catch (t4) {
                    n2 = { error: t4 };
                  } finally {
                    try {
                      b && !b.done && (o2 = M.return) && o2.call(M);
                    } finally {
                      if (n2)
                        throw n2.error;
                    }
                  }
                }
              } catch (t4) {
                e3 = { error: t4 };
              } finally {
                try {
                  d2 && !d2.done && (r2 = h2.return) && r2.call(h2);
                } finally {
                  if (e3)
                    throw e3.error;
                }
              }
              this.processed.set("findMath");
            }
            return this;
          }, e2.prototype.updateDocument = function() {
            return this.processed.isSet("updateDocument") || (this.addPageElements(), this.addStyleSheet(), t2.prototype.updateDocument.call(this), this.processed.set("updateDocument")), this;
          }, e2.prototype.addPageElements = function() {
            var t3 = this.adaptor.body(this.document), e3 = this.documentPageElements();
            e3 && this.adaptor.append(t3, e3);
          }, e2.prototype.addStyleSheet = function() {
            var t3 = this.documentStyleSheet(), e3 = this.adaptor;
            if (t3 && !e3.parent(t3)) {
              var r2 = e3.head(this.document), n2 = this.findSheet(r2, e3.getAttribute(t3, "id"));
              n2 ? e3.replace(t3, n2) : e3.append(r2, t3);
            }
          }, e2.prototype.findSheet = function(t3, e3) {
            var r2, n2;
            if (e3)
              try {
                for (var o2 = s(this.adaptor.tags(t3, "style")), i2 = o2.next(); !i2.done; i2 = o2.next()) {
                  var a2 = i2.value;
                  if (this.adaptor.getAttribute(a2, "id") === e3)
                    return a2;
                }
              } catch (t4) {
                r2 = { error: t4 };
              } finally {
                try {
                  i2 && !i2.done && (n2 = o2.return) && n2.call(o2);
                } finally {
                  if (r2)
                    throw r2.error;
                }
              }
            return null;
          }, e2.prototype.removeFromDocument = function(t3) {
            var e3, r2;
            if (void 0 === t3 && (t3 = false), this.processed.isSet("updateDocument"))
              try {
                for (var n2 = s(this.math), o2 = n2.next(); !o2.done; o2 = n2.next()) {
                  var i2 = o2.value;
                  i2.state() >= h.STATE.INSERTED && i2.state(h.STATE.TYPESET, t3);
                }
              } catch (t4) {
                e3 = { error: t4 };
              } finally {
                try {
                  o2 && !o2.done && (r2 = n2.return) && r2.call(n2);
                } finally {
                  if (e3)
                    throw e3.error;
                }
              }
            return this.processed.clear("updateDocument"), this;
          }, e2.prototype.documentStyleSheet = function() {
            return this.outputJax.styleSheet(this);
          }, e2.prototype.documentPageElements = function() {
            return this.outputJax.pageElements(this);
          }, e2.prototype.addStyles = function(t3) {
            this.styles.push(t3);
          }, e2.prototype.getStyles = function() {
            return this.styles;
          }, e2.KIND = "HTML", e2.OPTIONS = i(i({}, l.AbstractMathDocument.OPTIONS), { renderActions: (0, c.expandable)(i(i({}, l.AbstractMathDocument.OPTIONS.renderActions), { styles: [h.STATE.INSERTED + 1, "", "updateStyleSheet", false] })), MathList: p.HTMLMathList, MathItem: u.HTMLMathItem, DomStrings: null }), e2;
        }(l.AbstractMathDocument);
        e.HTMLDocument = d;
      }, 5138: function(t, e, r) {
        var n = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a;
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.HTMLDomStrings = void 0;
        var o = r(7233), i = function() {
          function t2(t3) {
            void 0 === t3 && (t3 = null);
            var e2 = this.constructor;
            this.options = (0, o.userOptions)((0, o.defaultOptions)({}, e2.OPTIONS), t3), this.init(), this.getPatterns();
          }
          return t2.prototype.init = function() {
            this.strings = [], this.string = "", this.snodes = [], this.nodes = [], this.stack = [];
          }, t2.prototype.getPatterns = function() {
            var t3 = (0, o.makeArray)(this.options.skipHtmlTags), e2 = (0, o.makeArray)(this.options.ignoreHtmlClass), r2 = (0, o.makeArray)(this.options.processHtmlClass);
            this.skipHtmlTags = new RegExp("^(?:" + t3.join("|") + ")$", "i"), this.ignoreHtmlClass = new RegExp("(?:^| )(?:" + e2.join("|") + ")(?: |$)"), this.processHtmlClass = new RegExp("(?:^| )(?:" + r2 + ")(?: |$)");
          }, t2.prototype.pushString = function() {
            this.string.match(/\S/) && (this.strings.push(this.string), this.nodes.push(this.snodes)), this.string = "", this.snodes = [];
          }, t2.prototype.extendString = function(t3, e2) {
            this.snodes.push([t3, e2.length]), this.string += e2;
          }, t2.prototype.handleText = function(t3, e2) {
            return e2 || this.extendString(t3, this.adaptor.value(t3)), this.adaptor.next(t3);
          }, t2.prototype.handleTag = function(t3, e2) {
            if (!e2) {
              var r2 = this.options.includeHtmlTags[this.adaptor.kind(t3)];
              this.extendString(t3, r2);
            }
            return this.adaptor.next(t3);
          }, t2.prototype.handleContainer = function(t3, e2) {
            this.pushString();
            var r2 = this.adaptor.getAttribute(t3, "class") || "", n2 = this.adaptor.kind(t3) || "", o2 = this.processHtmlClass.exec(r2), i2 = t3;
            return !this.adaptor.firstChild(t3) || this.adaptor.getAttribute(t3, "data-MJX") || !o2 && this.skipHtmlTags.exec(n2) ? i2 = this.adaptor.next(t3) : (this.adaptor.next(t3) && this.stack.push([this.adaptor.next(t3), e2]), i2 = this.adaptor.firstChild(t3), e2 = (e2 || this.ignoreHtmlClass.exec(r2)) && !o2), [i2, e2];
          }, t2.prototype.handleOther = function(t3, e2) {
            return this.pushString(), this.adaptor.next(t3);
          }, t2.prototype.find = function(t3) {
            var e2, r2;
            this.init();
            for (var o2 = this.adaptor.next(t3), i2 = false, a = this.options.includeHtmlTags; t3 && t3 !== o2; ) {
              var s = this.adaptor.kind(t3);
              "#text" === s ? t3 = this.handleText(t3, i2) : a.hasOwnProperty(s) ? t3 = this.handleTag(t3, i2) : s ? (t3 = (e2 = n(this.handleContainer(t3, i2), 2))[0], i2 = e2[1]) : t3 = this.handleOther(t3, i2), !t3 && this.stack.length && (this.pushString(), t3 = (r2 = n(this.stack.pop(), 2))[0], i2 = r2[1]);
            }
            this.pushString();
            var l = [this.strings, this.nodes];
            return this.init(), l;
          }, t2.OPTIONS = { skipHtmlTags: ["script", "noscript", "style", "textarea", "pre", "code", "annotation", "annotation-xml"], includeHtmlTags: { br: "\n", wbr: "", "#comment": "" }, ignoreHtmlClass: "mathjax_ignore", processHtmlClass: "mathjax_process" }, t2;
        }();
        e.HTMLDomStrings = i;
      }, 3726: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        });
        Object.defineProperty(e, "__esModule", { value: true }), e.HTMLHandler = void 0;
        var i = r(3670), a = r(3683), s = function(t2) {
          function e2() {
            var e3 = null !== t2 && t2.apply(this, arguments) || this;
            return e3.documentClass = a.HTMLDocument, e3;
          }
          return o(e2, t2), e2.prototype.handlesDocument = function(t3) {
            var e3 = this.adaptor;
            if ("string" == typeof t3)
              try {
                t3 = e3.parse(t3, "text/html");
              } catch (t4) {
              }
            return t3 instanceof e3.window.Document || t3 instanceof e3.window.HTMLElement || t3 instanceof e3.window.DocumentFragment;
          }, e2.prototype.create = function(e3, r2) {
            var n2 = this.adaptor;
            if ("string" == typeof e3)
              e3 = n2.parse(e3, "text/html");
            else if (e3 instanceof n2.window.HTMLElement || e3 instanceof n2.window.DocumentFragment) {
              var o2 = e3;
              e3 = n2.parse("", "text/html"), n2.append(n2.body(e3), o2);
            }
            return t2.prototype.create.call(this, e3, r2);
          }, e2;
        }(i.AbstractHandler);
        e.HTMLHandler = s;
      }, 3363: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        });
        Object.defineProperty(e, "__esModule", { value: true }), e.HTMLMathItem = void 0;
        var i = r(4474), a = function(t2) {
          function e2(e3, r2, n2, o2, i2) {
            return void 0 === n2 && (n2 = true), void 0 === o2 && (o2 = { node: null, n: 0, delim: "" }), void 0 === i2 && (i2 = { node: null, n: 0, delim: "" }), t2.call(this, e3, r2, n2, o2, i2) || this;
          }
          return o(e2, t2), Object.defineProperty(e2.prototype, "adaptor", { get: function() {
            return this.inputJax.adaptor;
          }, enumerable: false, configurable: true }), e2.prototype.updateDocument = function(t3) {
            if (this.state() < i.STATE.INSERTED) {
              if (this.inputJax.processStrings) {
                var e3 = this.start.node;
                if (e3 === this.end.node)
                  this.end.n && this.end.n < this.adaptor.value(this.end.node).length && this.adaptor.split(this.end.node, this.end.n), this.start.n && (e3 = this.adaptor.split(this.start.node, this.start.n)), this.adaptor.replace(this.typesetRoot, e3);
                else {
                  for (this.start.n && (e3 = this.adaptor.split(e3, this.start.n)); e3 !== this.end.node; ) {
                    var r2 = this.adaptor.next(e3);
                    this.adaptor.remove(e3), e3 = r2;
                  }
                  this.adaptor.insert(this.typesetRoot, e3), this.end.n < this.adaptor.value(e3).length && this.adaptor.split(e3, this.end.n), this.adaptor.remove(e3);
                }
              } else
                this.adaptor.replace(this.typesetRoot, this.start.node);
              this.start.node = this.end.node = this.typesetRoot, this.start.n = this.end.n = 0, this.state(i.STATE.INSERTED);
            }
          }, e2.prototype.updateStyleSheet = function(t3) {
            t3.addStyleSheet();
          }, e2.prototype.removeFromDocument = function(t3) {
            if (void 0 === t3 && (t3 = false), this.state() >= i.STATE.TYPESET) {
              var e3 = this.adaptor, r2 = this.start.node, n2 = e3.text("");
              if (t3) {
                var o2 = this.start.delim + this.math + this.end.delim;
                if (this.inputJax.processStrings)
                  n2 = e3.text(o2);
                else {
                  var a2 = e3.parse(o2, "text/html");
                  n2 = e3.firstChild(e3.body(a2));
                }
              }
              e3.parent(r2) && e3.replace(n2, r2), this.start.node = this.end.node = n2, this.start.n = this.end.n = 0;
            }
          }, e2;
        }(i.AbstractMathItem);
        e.HTMLMathItem = a;
      }, 3335: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        });
        Object.defineProperty(e, "__esModule", { value: true }), e.HTMLMathList = void 0;
        var i = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), e2;
        }(r(9e3).AbstractMathList);
        e.HTMLMathList = i;
      }, 5713: function(t, e, r) {
        Object.defineProperty(e, "__esModule", { value: true }), e.mathjax = void 0;
        var n = r(3282), o = r(805), i = r(4542);
        e.mathjax = { version: n.VERSION, handlers: new o.HandlerList(), document: function(t2, r2) {
          return e.mathjax.handlers.document(t2, r2);
        }, handleRetriesFor: i.handleRetriesFor, retryAfter: i.retryAfter, asyncLoad: null };
      }, 9923: function(t, e, r) {
        Object.defineProperty(e, "__esModule", { value: true }), e.asyncLoad = void 0;
        var n = r(5713);
        e.asyncLoad = function(t2) {
          return n.mathjax.asyncLoad ? new Promise(function(e2, r2) {
            var o = n.mathjax.asyncLoad(t2);
            o instanceof Promise ? o.then(function(t3) {
              return e2(t3);
            }).catch(function(t3) {
              return r2(t3);
            }) : e2(o);
          }) : Promise.reject("Can't load '".concat(t2, "': No asyncLoad method specified"));
        };
      }, 6469: function(t, e, r) {
        Object.defineProperty(e, "__esModule", { value: true }), e.BBox = void 0;
        var n = r(6010), o = function() {
          function t2(t3) {
            void 0 === t3 && (t3 = { w: 0, h: -n.BIGDIMEN, d: -n.BIGDIMEN }), this.w = t3.w || 0, this.h = "h" in t3 ? t3.h : -n.BIGDIMEN, this.d = "d" in t3 ? t3.d : -n.BIGDIMEN, this.L = this.R = this.ic = this.sk = this.dx = 0, this.scale = this.rscale = 1, this.pwidth = "";
          }
          return t2.zero = function() {
            return new t2({ h: 0, d: 0, w: 0 });
          }, t2.empty = function() {
            return new t2();
          }, t2.prototype.empty = function() {
            return this.w = 0, this.h = this.d = -n.BIGDIMEN, this;
          }, t2.prototype.clean = function() {
            this.w === -n.BIGDIMEN && (this.w = 0), this.h === -n.BIGDIMEN && (this.h = 0), this.d === -n.BIGDIMEN && (this.d = 0);
          }, t2.prototype.rescale = function(t3) {
            this.w *= t3, this.h *= t3, this.d *= t3;
          }, t2.prototype.combine = function(t3, e2, r2) {
            void 0 === e2 && (e2 = 0), void 0 === r2 && (r2 = 0);
            var n2 = t3.rscale, o2 = e2 + n2 * (t3.w + t3.L + t3.R), i = r2 + n2 * t3.h, a = n2 * t3.d - r2;
            o2 > this.w && (this.w = o2), i > this.h && (this.h = i), a > this.d && (this.d = a);
          }, t2.prototype.append = function(t3) {
            var e2 = t3.rscale;
            this.w += e2 * (t3.w + t3.L + t3.R), e2 * t3.h > this.h && (this.h = e2 * t3.h), e2 * t3.d > this.d && (this.d = e2 * t3.d);
          }, t2.prototype.updateFrom = function(t3) {
            this.h = t3.h, this.d = t3.d, this.w = t3.w, t3.pwidth && (this.pwidth = t3.pwidth);
          }, t2.fullWidth = "100%", t2.StyleAdjust = [["borderTopWidth", "h"], ["borderRightWidth", "w"], ["borderBottomWidth", "d"], ["borderLeftWidth", "w", 0], ["paddingTop", "h"], ["paddingRight", "w"], ["paddingBottom", "d"], ["paddingLeft", "w", 0]], t2;
        }();
        e.BBox = o;
      }, 6751: function(t, e) {
        var r, n = this && this.__extends || (r = function(t2, e2) {
          return r = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, r(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function n2() {
            this.constructor = t2;
          }
          r(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (n2.prototype = e2.prototype, new n2());
        }), o = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, i = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        }, a = this && this.__spreadArray || function(t2, e2, r2) {
          if (r2 || 2 === arguments.length)
            for (var n2, o2 = 0, i2 = e2.length; o2 < i2; o2++)
              !n2 && o2 in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, o2)), n2[o2] = e2[o2]);
          return t2.concat(n2 || Array.prototype.slice.call(e2));
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.BitFieldClass = e.BitField = void 0;
        var s = function() {
          function t2() {
            this.bits = 0;
          }
          return t2.allocate = function() {
            for (var e2, r2, n2 = [], i2 = 0; i2 < arguments.length; i2++)
              n2[i2] = arguments[i2];
            try {
              for (var a2 = o(n2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var l = s2.value;
                if (this.has(l))
                  throw new Error("Bit already allocated for " + l);
                if (this.next === t2.MAXBIT)
                  throw new Error("Maximum number of bits already allocated");
                this.names.set(l, this.next), this.next <<= 1;
              }
            } catch (t3) {
              e2 = { error: t3 };
            } finally {
              try {
                s2 && !s2.done && (r2 = a2.return) && r2.call(a2);
              } finally {
                if (e2)
                  throw e2.error;
              }
            }
          }, t2.has = function(t3) {
            return this.names.has(t3);
          }, t2.prototype.set = function(t3) {
            this.bits |= this.getBit(t3);
          }, t2.prototype.clear = function(t3) {
            this.bits &= ~this.getBit(t3);
          }, t2.prototype.isSet = function(t3) {
            return !!(this.bits & this.getBit(t3));
          }, t2.prototype.reset = function() {
            this.bits = 0;
          }, t2.prototype.getBit = function(t3) {
            var e2 = this.constructor.names.get(t3);
            if (!e2)
              throw new Error("Unknown bit-field name: " + t3);
            return e2;
          }, t2.MAXBIT = 1 << 31, t2.next = 1, t2.names = /* @__PURE__ */ new Map(), t2;
        }();
        e.BitField = s, e.BitFieldClass = function() {
          for (var t2 = [], e2 = 0; e2 < arguments.length; e2++)
            t2[e2] = arguments[e2];
          var r2 = function(t3) {
            function e3() {
              return null !== t3 && t3.apply(this, arguments) || this;
            }
            return n(e3, t3), e3;
          }(s);
          return r2.allocate.apply(r2, a([], i(t2), false)), r2;
        };
      }, 5368: function(t, e, r) {
        Object.defineProperty(e, "__esModule", { value: true }), e.numeric = e.translate = e.remove = e.add = e.entities = e.options = void 0;
        var n = r(4542), o = r(9923);
        e.options = { loadMissingEntities: true }, e.entities = { ApplyFunction: "\u2061", Backslash: "\u2216", Because: "\u2235", Breve: "\u02D8", Cap: "\u22D2", CenterDot: "\xB7", CircleDot: "\u2299", CircleMinus: "\u2296", CirclePlus: "\u2295", CircleTimes: "\u2297", Congruent: "\u2261", ContourIntegral: "\u222E", Coproduct: "\u2210", Cross: "\u2A2F", Cup: "\u22D3", CupCap: "\u224D", Dagger: "\u2021", Del: "\u2207", Delta: "\u0394", Diamond: "\u22C4", DifferentialD: "\u2146", DotEqual: "\u2250", DoubleDot: "\xA8", DoubleRightTee: "\u22A8", DoubleVerticalBar: "\u2225", DownArrow: "\u2193", DownLeftVector: "\u21BD", DownRightVector: "\u21C1", DownTee: "\u22A4", Downarrow: "\u21D3", Element: "\u2208", EqualTilde: "\u2242", Equilibrium: "\u21CC", Exists: "\u2203", ExponentialE: "\u2147", FilledVerySmallSquare: "\u25AA", ForAll: "\u2200", Gamma: "\u0393", Gg: "\u22D9", GreaterEqual: "\u2265", GreaterEqualLess: "\u22DB", GreaterFullEqual: "\u2267", GreaterLess: "\u2277", GreaterSlantEqual: "\u2A7E", GreaterTilde: "\u2273", Hacek: "\u02C7", Hat: "^", HumpDownHump: "\u224E", HumpEqual: "\u224F", Im: "\u2111", ImaginaryI: "\u2148", Integral: "\u222B", Intersection: "\u22C2", InvisibleComma: "\u2063", InvisibleTimes: "\u2062", Lambda: "\u039B", Larr: "\u219E", LeftAngleBracket: "\u27E8", LeftArrow: "\u2190", LeftArrowRightArrow: "\u21C6", LeftCeiling: "\u2308", LeftDownVector: "\u21C3", LeftFloor: "\u230A", LeftRightArrow: "\u2194", LeftTee: "\u22A3", LeftTriangle: "\u22B2", LeftTriangleEqual: "\u22B4", LeftUpVector: "\u21BF", LeftVector: "\u21BC", Leftarrow: "\u21D0", Leftrightarrow: "\u21D4", LessEqualGreater: "\u22DA", LessFullEqual: "\u2266", LessGreater: "\u2276", LessSlantEqual: "\u2A7D", LessTilde: "\u2272", Ll: "\u22D8", Lleftarrow: "\u21DA", LongLeftArrow: "\u27F5", LongLeftRightArrow: "\u27F7", LongRightArrow: "\u27F6", Longleftarrow: "\u27F8", Longleftrightarrow: "\u27FA", Longrightarrow: "\u27F9", Lsh: "\u21B0", MinusPlus: "\u2213", NestedGreaterGreater: "\u226B", NestedLessLess: "\u226A", NotDoubleVerticalBar: "\u2226", NotElement: "\u2209", NotEqual: "\u2260", NotExists: "\u2204", NotGreater: "\u226F", NotGreaterEqual: "\u2271", NotLeftTriangle: "\u22EA", NotLeftTriangleEqual: "\u22EC", NotLess: "\u226E", NotLessEqual: "\u2270", NotPrecedes: "\u2280", NotPrecedesSlantEqual: "\u22E0", NotRightTriangle: "\u22EB", NotRightTriangleEqual: "\u22ED", NotSubsetEqual: "\u2288", NotSucceeds: "\u2281", NotSucceedsSlantEqual: "\u22E1", NotSupersetEqual: "\u2289", NotTilde: "\u2241", NotVerticalBar: "\u2224", Omega: "\u03A9", OverBar: "\u203E", OverBrace: "\u23DE", PartialD: "\u2202", Phi: "\u03A6", Pi: "\u03A0", PlusMinus: "\xB1", Precedes: "\u227A", PrecedesEqual: "\u2AAF", PrecedesSlantEqual: "\u227C", PrecedesTilde: "\u227E", Product: "\u220F", Proportional: "\u221D", Psi: "\u03A8", Rarr: "\u21A0", Re: "\u211C", ReverseEquilibrium: "\u21CB", RightAngleBracket: "\u27E9", RightArrow: "\u2192", RightArrowLeftArrow: "\u21C4", RightCeiling: "\u2309", RightDownVector: "\u21C2", RightFloor: "\u230B", RightTee: "\u22A2", RightTeeArrow: "\u21A6", RightTriangle: "\u22B3", RightTriangleEqual: "\u22B5", RightUpVector: "\u21BE", RightVector: "\u21C0", Rightarrow: "\u21D2", Rrightarrow: "\u21DB", Rsh: "\u21B1", Sigma: "\u03A3", SmallCircle: "\u2218", Sqrt: "\u221A", Square: "\u25A1", SquareIntersection: "\u2293", SquareSubset: "\u228F", SquareSubsetEqual: "\u2291", SquareSuperset: "\u2290", SquareSupersetEqual: "\u2292", SquareUnion: "\u2294", Star: "\u22C6", Subset: "\u22D0", SubsetEqual: "\u2286", Succeeds: "\u227B", SucceedsEqual: "\u2AB0", SucceedsSlantEqual: "\u227D", SucceedsTilde: "\u227F", SuchThat: "\u220B", Sum: "\u2211", Superset: "\u2283", SupersetEqual: "\u2287", Supset: "\u22D1", Therefore: "\u2234", Theta: "\u0398", Tilde: "\u223C", TildeEqual: "\u2243", TildeFullEqual: "\u2245", TildeTilde: "\u2248", UnderBar: "_", UnderBrace: "\u23DF", Union: "\u22C3", UnionPlus: "\u228E", UpArrow: "\u2191", UpDownArrow: "\u2195", UpTee: "\u22A5", Uparrow: "\u21D1", Updownarrow: "\u21D5", Upsilon: "\u03A5", Vdash: "\u22A9", Vee: "\u22C1", VerticalBar: "\u2223", VerticalTilde: "\u2240", Vvdash: "\u22AA", Wedge: "\u22C0", Xi: "\u039E", amp: "&", acute: "\xB4", aleph: "\u2135", alpha: "\u03B1", amalg: "\u2A3F", and: "\u2227", ang: "\u2220", angmsd: "\u2221", angsph: "\u2222", ape: "\u224A", backprime: "\u2035", backsim: "\u223D", backsimeq: "\u22CD", beta: "\u03B2", beth: "\u2136", between: "\u226C", bigcirc: "\u25EF", bigodot: "\u2A00", bigoplus: "\u2A01", bigotimes: "\u2A02", bigsqcup: "\u2A06", bigstar: "\u2605", bigtriangledown: "\u25BD", bigtriangleup: "\u25B3", biguplus: "\u2A04", blacklozenge: "\u29EB", blacktriangle: "\u25B4", blacktriangledown: "\u25BE", blacktriangleleft: "\u25C2", bowtie: "\u22C8", boxdl: "\u2510", boxdr: "\u250C", boxminus: "\u229F", boxplus: "\u229E", boxtimes: "\u22A0", boxul: "\u2518", boxur: "\u2514", bsol: "\\", bull: "\u2022", cap: "\u2229", check: "\u2713", chi: "\u03C7", circ: "\u02C6", circeq: "\u2257", circlearrowleft: "\u21BA", circlearrowright: "\u21BB", circledR: "\xAE", circledS: "\u24C8", circledast: "\u229B", circledcirc: "\u229A", circleddash: "\u229D", clubs: "\u2663", colon: ":", comp: "\u2201", ctdot: "\u22EF", cuepr: "\u22DE", cuesc: "\u22DF", cularr: "\u21B6", cup: "\u222A", curarr: "\u21B7", curlyvee: "\u22CE", curlywedge: "\u22CF", dagger: "\u2020", daleth: "\u2138", ddarr: "\u21CA", deg: "\xB0", delta: "\u03B4", digamma: "\u03DD", div: "\xF7", divideontimes: "\u22C7", dot: "\u02D9", doteqdot: "\u2251", dotplus: "\u2214", dotsquare: "\u22A1", dtdot: "\u22F1", ecir: "\u2256", efDot: "\u2252", egs: "\u2A96", ell: "\u2113", els: "\u2A95", empty: "\u2205", epsi: "\u03B5", epsiv: "\u03F5", erDot: "\u2253", eta: "\u03B7", eth: "\xF0", flat: "\u266D", fork: "\u22D4", frown: "\u2322", gEl: "\u2A8C", gamma: "\u03B3", gap: "\u2A86", gimel: "\u2137", gnE: "\u2269", gnap: "\u2A8A", gne: "\u2A88", gnsim: "\u22E7", gt: ">", gtdot: "\u22D7", harrw: "\u21AD", hbar: "\u210F", hellip: "\u2026", hookleftarrow: "\u21A9", hookrightarrow: "\u21AA", imath: "\u0131", infin: "\u221E", intcal: "\u22BA", iota: "\u03B9", jmath: "\u0237", kappa: "\u03BA", kappav: "\u03F0", lEg: "\u2A8B", lambda: "\u03BB", lap: "\u2A85", larrlp: "\u21AB", larrtl: "\u21A2", lbrace: "{", lbrack: "[", le: "\u2264", leftleftarrows: "\u21C7", leftthreetimes: "\u22CB", lessdot: "\u22D6", lmoust: "\u23B0", lnE: "\u2268", lnap: "\u2A89", lne: "\u2A87", lnsim: "\u22E6", longmapsto: "\u27FC", looparrowright: "\u21AC", lowast: "\u2217", loz: "\u25CA", lt: "<", ltimes: "\u22C9", ltri: "\u25C3", macr: "\xAF", malt: "\u2720", mho: "\u2127", mu: "\u03BC", multimap: "\u22B8", nLeftarrow: "\u21CD", nLeftrightarrow: "\u21CE", nRightarrow: "\u21CF", nVDash: "\u22AF", nVdash: "\u22AE", natur: "\u266E", nearr: "\u2197", nharr: "\u21AE", nlarr: "\u219A", not: "\xAC", nrarr: "\u219B", nu: "\u03BD", nvDash: "\u22AD", nvdash: "\u22AC", nwarr: "\u2196", omega: "\u03C9", omicron: "\u03BF", or: "\u2228", osol: "\u2298", period: ".", phi: "\u03C6", phiv: "\u03D5", pi: "\u03C0", piv: "\u03D6", prap: "\u2AB7", precnapprox: "\u2AB9", precneqq: "\u2AB5", precnsim: "\u22E8", prime: "\u2032", psi: "\u03C8", quot: '"', rarrtl: "\u21A3", rbrace: "}", rbrack: "]", rho: "\u03C1", rhov: "\u03F1", rightrightarrows: "\u21C9", rightthreetimes: "\u22CC", ring: "\u02DA", rmoust: "\u23B1", rtimes: "\u22CA", rtri: "\u25B9", scap: "\u2AB8", scnE: "\u2AB6", scnap: "\u2ABA", scnsim: "\u22E9", sdot: "\u22C5", searr: "\u2198", sect: "\xA7", sharp: "\u266F", sigma: "\u03C3", sigmav: "\u03C2", simne: "\u2246", smile: "\u2323", spades: "\u2660", sub: "\u2282", subE: "\u2AC5", subnE: "\u2ACB", subne: "\u228A", supE: "\u2AC6", supnE: "\u2ACC", supne: "\u228B", swarr: "\u2199", tau: "\u03C4", theta: "\u03B8", thetav: "\u03D1", tilde: "\u02DC", times: "\xD7", triangle: "\u25B5", triangleq: "\u225C", upsi: "\u03C5", upuparrows: "\u21C8", veebar: "\u22BB", vellip: "\u22EE", weierp: "\u2118", xi: "\u03BE", yen: "\xA5", zeta: "\u03B6", zigrarr: "\u21DD", nbsp: "\xA0", rsquo: "\u2019", lsquo: "\u2018" };
        var i = {};
        function a(t2, r2) {
          if ("#" === r2.charAt(0))
            return s(r2.slice(1));
          if (e.entities[r2])
            return e.entities[r2];
          if (e.options.loadMissingEntities) {
            var a2 = r2.match(/^[a-zA-Z](fr|scr|opf)$/) ? RegExp.$1 : r2.charAt(0).toLowerCase();
            i[a2] || (i[a2] = true, (0, n.retryAfter)((0, o.asyncLoad)("./util/entities/" + a2 + ".js")));
          }
          return t2;
        }
        function s(t2) {
          var e2 = "x" === t2.charAt(0) ? parseInt(t2.slice(1), 16) : parseInt(t2);
          return String.fromCodePoint(e2);
        }
        e.add = function(t2, r2) {
          Object.assign(e.entities, t2), i[r2] = true;
        }, e.remove = function(t2) {
          delete e.entities[t2];
        }, e.translate = function(t2) {
          return t2.replace(/&([a-z][a-z0-9]*|#(?:[0-9]+|x[0-9a-f]+));/gi, a);
        }, e.numeric = s;
      }, 7525: function(t, e, r) {
        var n, o = this && this.__extends || (n = function(t2, e2) {
          return n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(t3, e3) {
            t3.__proto__ = e3;
          } || function(t3, e3) {
            for (var r2 in e3)
              Object.prototype.hasOwnProperty.call(e3, r2) && (t3[r2] = e3[r2]);
          }, n(t2, e2);
        }, function(t2, e2) {
          if ("function" != typeof e2 && null !== e2)
            throw new TypeError("Class extends value " + String(e2) + " is not a constructor or null");
          function r2() {
            this.constructor = t2;
          }
          n(t2, e2), t2.prototype = null === e2 ? Object.create(e2) : (r2.prototype = e2.prototype, new r2());
        }), i = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, a = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        }, s = this && this.__spreadArray || function(t2, e2, r2) {
          if (r2 || 2 === arguments.length)
            for (var n2, o2 = 0, i2 = e2.length; o2 < i2; o2++)
              !n2 && o2 in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, o2)), n2[o2] = e2[o2]);
          return t2.concat(n2 || Array.prototype.slice.call(e2));
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.FunctionList = void 0;
        var l = function(t2) {
          function e2() {
            return null !== t2 && t2.apply(this, arguments) || this;
          }
          return o(e2, t2), e2.prototype.execute = function() {
            for (var t3, e3, r2 = [], n2 = 0; n2 < arguments.length; n2++)
              r2[n2] = arguments[n2];
            try {
              for (var o2 = i(this), l2 = o2.next(); !l2.done; l2 = o2.next()) {
                var c = l2.value, u = c.item.apply(c, s([], a(r2), false));
                if (false === u)
                  return false;
              }
            } catch (e4) {
              t3 = { error: e4 };
            } finally {
              try {
                l2 && !l2.done && (e3 = o2.return) && e3.call(o2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return true;
          }, e2.prototype.asyncExecute = function() {
            for (var t3 = [], e3 = 0; e3 < arguments.length; e3++)
              t3[e3] = arguments[e3];
            var r2 = -1, n2 = this.items;
            return new Promise(function(e4, o2) {
              !function i2() {
                for (var l2; ++r2 < n2.length; ) {
                  var c = (l2 = n2[r2]).item.apply(l2, s([], a(t3), false));
                  if (c instanceof Promise)
                    return void c.then(i2).catch(function(t4) {
                      return o2(t4);
                    });
                  if (false === c)
                    return void e4(false);
                }
                e4(true);
              }();
            });
          }, e2;
        }(r(8666).PrioritizedList);
        e.FunctionList = l;
      }, 103: function(t, e) {
        var r = this && this.__generator || function(t2, e2) {
          var r2, n2, o2, i2, a2 = { label: 0, sent: function() {
            if (1 & o2[0])
              throw o2[1];
            return o2[1];
          }, trys: [], ops: [] };
          return i2 = { next: s2(0), throw: s2(1), return: s2(2) }, "function" == typeof Symbol && (i2[Symbol.iterator] = function() {
            return this;
          }), i2;
          function s2(i3) {
            return function(s3) {
              return function(i4) {
                if (r2)
                  throw new TypeError("Generator is already executing.");
                for (; a2; )
                  try {
                    if (r2 = 1, n2 && (o2 = 2 & i4[0] ? n2.return : i4[0] ? n2.throw || ((o2 = n2.return) && o2.call(n2), 0) : n2.next) && !(o2 = o2.call(n2, i4[1])).done)
                      return o2;
                    switch (n2 = 0, o2 && (i4 = [2 & i4[0], o2.value]), i4[0]) {
                      case 0:
                      case 1:
                        o2 = i4;
                        break;
                      case 4:
                        return a2.label++, { value: i4[1], done: false };
                      case 5:
                        a2.label++, n2 = i4[1], i4 = [0];
                        continue;
                      case 7:
                        i4 = a2.ops.pop(), a2.trys.pop();
                        continue;
                      default:
                        if (!(o2 = a2.trys, (o2 = o2.length > 0 && o2[o2.length - 1]) || 6 !== i4[0] && 2 !== i4[0])) {
                          a2 = 0;
                          continue;
                        }
                        if (3 === i4[0] && (!o2 || i4[1] > o2[0] && i4[1] < o2[3])) {
                          a2.label = i4[1];
                          break;
                        }
                        if (6 === i4[0] && a2.label < o2[1]) {
                          a2.label = o2[1], o2 = i4;
                          break;
                        }
                        if (o2 && a2.label < o2[2]) {
                          a2.label = o2[2], a2.ops.push(i4);
                          break;
                        }
                        o2[2] && a2.ops.pop(), a2.trys.pop();
                        continue;
                    }
                    i4 = e2.call(t2, a2);
                  } catch (t3) {
                    i4 = [6, t3], n2 = 0;
                  } finally {
                    r2 = o2 = 0;
                  }
                if (5 & i4[0])
                  throw i4[1];
                return { value: i4[0] ? i4[1] : void 0, done: true };
              }([i3, s3]);
            };
          }
        }, n = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        }, o = this && this.__spreadArray || function(t2, e2, r2) {
          if (r2 || 2 === arguments.length)
            for (var n2, o2 = 0, i2 = e2.length; o2 < i2; o2++)
              !n2 && o2 in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, o2)), n2[o2] = e2[o2]);
          return t2.concat(n2 || Array.prototype.slice.call(e2));
        }, i = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.LinkedList = e.ListItem = e.END = void 0, e.END = Symbol();
        var a = function(t2) {
          void 0 === t2 && (t2 = null), this.next = null, this.prev = null, this.data = t2;
        };
        e.ListItem = a;
        var s = function() {
          function t2() {
            for (var t3 = [], r2 = 0; r2 < arguments.length; r2++)
              t3[r2] = arguments[r2];
            this.list = new a(e.END), this.list.next = this.list.prev = this.list, this.push.apply(this, o([], n(t3), false));
          }
          return t2.prototype.isBefore = function(t3, e2) {
            return t3 < e2;
          }, t2.prototype.push = function() {
            for (var t3, e2, r2 = [], n2 = 0; n2 < arguments.length; n2++)
              r2[n2] = arguments[n2];
            try {
              for (var o2 = i(r2), s2 = o2.next(); !s2.done; s2 = o2.next()) {
                var l = s2.value, c = new a(l);
                c.next = this.list, c.prev = this.list.prev, this.list.prev = c, c.prev.next = c;
              }
            } catch (e3) {
              t3 = { error: e3 };
            } finally {
              try {
                s2 && !s2.done && (e2 = o2.return) && e2.call(o2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return this;
          }, t2.prototype.pop = function() {
            var t3 = this.list.prev;
            return t3.data === e.END ? null : (this.list.prev = t3.prev, t3.prev.next = this.list, t3.next = t3.prev = null, t3.data);
          }, t2.prototype.unshift = function() {
            for (var t3, e2, r2 = [], n2 = 0; n2 < arguments.length; n2++)
              r2[n2] = arguments[n2];
            try {
              for (var o2 = i(r2.slice(0).reverse()), s2 = o2.next(); !s2.done; s2 = o2.next()) {
                var l = s2.value, c = new a(l);
                c.next = this.list.next, c.prev = this.list, this.list.next = c, c.next.prev = c;
              }
            } catch (e3) {
              t3 = { error: e3 };
            } finally {
              try {
                s2 && !s2.done && (e2 = o2.return) && e2.call(o2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return this;
          }, t2.prototype.shift = function() {
            var t3 = this.list.next;
            return t3.data === e.END ? null : (this.list.next = t3.next, t3.next.prev = this.list, t3.next = t3.prev = null, t3.data);
          }, t2.prototype.remove = function() {
            for (var t3, r2, n2 = [], o2 = 0; o2 < arguments.length; o2++)
              n2[o2] = arguments[o2];
            var a2 = /* @__PURE__ */ new Map();
            try {
              for (var s2 = i(n2), l = s2.next(); !l.done; l = s2.next()) {
                var c = l.value;
                a2.set(c, true);
              }
            } catch (e2) {
              t3 = { error: e2 };
            } finally {
              try {
                l && !l.done && (r2 = s2.return) && r2.call(s2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            for (var u = this.list.next; u.data !== e.END; ) {
              var p = u.next;
              a2.has(u.data) && (u.prev.next = u.next, u.next.prev = u.prev, u.next = u.prev = null), u = p;
            }
          }, t2.prototype.clear = function() {
            return this.list.next.prev = this.list.prev.next = null, this.list.next = this.list.prev = this.list, this;
          }, t2.prototype[Symbol.iterator] = function() {
            var t3;
            return r(this, function(r2) {
              switch (r2.label) {
                case 0:
                  t3 = this.list.next, r2.label = 1;
                case 1:
                  return t3.data === e.END ? [3, 3] : [4, t3.data];
                case 2:
                  return r2.sent(), t3 = t3.next, [3, 1];
                case 3:
                  return [2];
              }
            });
          }, t2.prototype.reversed = function() {
            var t3;
            return r(this, function(r2) {
              switch (r2.label) {
                case 0:
                  t3 = this.list.prev, r2.label = 1;
                case 1:
                  return t3.data === e.END ? [3, 3] : [4, t3.data];
                case 2:
                  return r2.sent(), t3 = t3.prev, [3, 1];
                case 3:
                  return [2];
              }
            });
          }, t2.prototype.insert = function(t3, r2) {
            void 0 === r2 && (r2 = null), null === r2 && (r2 = this.isBefore.bind(this));
            for (var n2 = new a(t3), o2 = this.list.next; o2.data !== e.END && r2(o2.data, n2.data); )
              o2 = o2.next;
            return n2.prev = o2.prev, n2.next = o2, o2.prev.next = o2.prev = n2, this;
          }, t2.prototype.sort = function(e2) {
            var r2, n2;
            void 0 === e2 && (e2 = null), null === e2 && (e2 = this.isBefore.bind(this));
            var o2 = [];
            try {
              for (var a2 = i(this), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var l = s2.value;
                o2.push(new t2(l));
              }
            } catch (t3) {
              r2 = { error: t3 };
            } finally {
              try {
                s2 && !s2.done && (n2 = a2.return) && n2.call(a2);
              } finally {
                if (r2)
                  throw r2.error;
              }
            }
            for (this.list.next = this.list.prev = this.list; o2.length > 1; ) {
              var c = o2.shift(), u = o2.shift();
              c.merge(u, e2), o2.push(c);
            }
            return o2.length && (this.list = o2[0].list), this;
          }, t2.prototype.merge = function(t3, r2) {
            var o2, i2, a2, s2, l;
            void 0 === r2 && (r2 = null), null === r2 && (r2 = this.isBefore.bind(this));
            for (var c = this.list.next, u = t3.list.next; c.data !== e.END && u.data !== e.END; )
              r2(u.data, c.data) ? (o2 = n([c, u], 2), u.prev.next = o2[0], c.prev.next = o2[1], i2 = n([c.prev, u.prev], 2), u.prev = i2[0], c.prev = i2[1], a2 = n([t3.list, this.list], 2), this.list.prev.next = a2[0], t3.list.prev.next = a2[1], s2 = n([t3.list.prev, this.list.prev], 2), this.list.prev = s2[0], t3.list.prev = s2[1], c = (l = n([u.next, c], 2))[0], u = l[1]) : c = c.next;
            return u.data !== e.END && (this.list.prev.next = t3.list.next, t3.list.next.prev = this.list.prev, t3.list.prev.next = this.list, this.list.prev = t3.list.prev, t3.list.next = t3.list.prev = t3.list), this;
          }, t2;
        }();
        e.LinkedList = s;
      }, 7233: function(t, e) {
        var r = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, n = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        }, o = this && this.__spreadArray || function(t2, e2, r2) {
          if (r2 || 2 === arguments.length)
            for (var n2, o2 = 0, i2 = e2.length; o2 < i2; o2++)
              !n2 && o2 in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, o2)), n2[o2] = e2[o2]);
          return t2.concat(n2 || Array.prototype.slice.call(e2));
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.lookup = e.separateOptions = e.selectOptionsFromKeys = e.selectOptions = e.userOptions = e.defaultOptions = e.insert = e.copy = e.keys = e.makeArray = e.expandable = e.Expandable = e.OPTIONS = e.REMOVE = e.APPEND = e.isObject = void 0;
        var i = {}.constructor;
        function a(t2) {
          return "object" == typeof t2 && null !== t2 && (t2.constructor === i || t2.constructor === s);
        }
        e.isObject = a, e.APPEND = "[+]", e.REMOVE = "[-]", e.OPTIONS = { invalidOption: "warn", optionError: function(t2, r2) {
          if ("fatal" === e.OPTIONS.invalidOption)
            throw new Error(t2);
          console.warn("MathJax: " + t2);
        } };
        var s = function() {
        };
        function l(t2) {
          return Object.assign(Object.create(s.prototype), t2);
        }
        function c(t2) {
          return t2 ? Object.keys(t2).concat(Object.getOwnPropertySymbols(t2)) : [];
        }
        function u(t2) {
          var e2, n2, o2 = {};
          try {
            for (var i2 = r(c(t2)), f2 = i2.next(); !f2.done; f2 = i2.next()) {
              var h = f2.value, d = Object.getOwnPropertyDescriptor(t2, h), y = d.value;
              Array.isArray(y) ? d.value = p([], y, false) : a(y) && (d.value = u(y)), d.enumerable && (o2[h] = d);
            }
          } catch (t3) {
            e2 = { error: t3 };
          } finally {
            try {
              f2 && !f2.done && (n2 = i2.return) && n2.call(i2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          return Object.defineProperties(t2.constructor === s ? l({}) : {}, o2);
        }
        function p(t2, i2, l2) {
          var f2, h;
          void 0 === l2 && (l2 = true);
          var d = function(r2) {
            if (l2 && void 0 === t2[r2] && t2.constructor !== s)
              return "symbol" == typeof r2 && (r2 = r2.toString()), e.OPTIONS.optionError('Invalid option "'.concat(r2, '" (no default value).'), r2), "continue";
            var f3 = i2[r2], h2 = t2[r2];
            if (!a(f3) || null === h2 || "object" != typeof h2 && "function" != typeof h2)
              Array.isArray(f3) ? (t2[r2] = [], p(t2[r2], f3, false)) : a(f3) ? t2[r2] = u(f3) : t2[r2] = f3;
            else {
              var d2 = c(f3);
              Array.isArray(h2) && (1 === d2.length && (d2[0] === e.APPEND || d2[0] === e.REMOVE) && Array.isArray(f3[d2[0]]) || 2 === d2.length && d2.sort().join(",") === e.APPEND + "," + e.REMOVE && Array.isArray(f3[e.APPEND]) && Array.isArray(f3[e.REMOVE])) ? (f3[e.REMOVE] && (h2 = t2[r2] = h2.filter(function(t3) {
                return f3[e.REMOVE].indexOf(t3) < 0;
              })), f3[e.APPEND] && (t2[r2] = o(o([], n(h2), false), n(f3[e.APPEND]), false))) : p(h2, f3, l2);
            }
          };
          try {
            for (var y = r(c(i2)), O = y.next(); !O.done; O = y.next()) {
              d(O.value);
            }
          } catch (t3) {
            f2 = { error: t3 };
          } finally {
            try {
              O && !O.done && (h = y.return) && h.call(y);
            } finally {
              if (f2)
                throw f2.error;
            }
          }
          return t2;
        }
        function f(t2) {
          for (var e2, n2, o2 = [], i2 = 1; i2 < arguments.length; i2++)
            o2[i2 - 1] = arguments[i2];
          var a2 = {};
          try {
            for (var s2 = r(o2), l2 = s2.next(); !l2.done; l2 = s2.next()) {
              var c2 = l2.value;
              t2.hasOwnProperty(c2) && (a2[c2] = t2[c2]);
            }
          } catch (t3) {
            e2 = { error: t3 };
          } finally {
            try {
              l2 && !l2.done && (n2 = s2.return) && n2.call(s2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          return a2;
        }
        e.Expandable = s, e.expandable = l, e.makeArray = function(t2) {
          return Array.isArray(t2) ? t2 : [t2];
        }, e.keys = c, e.copy = u, e.insert = p, e.defaultOptions = function(t2) {
          for (var e2 = [], r2 = 1; r2 < arguments.length; r2++)
            e2[r2 - 1] = arguments[r2];
          return e2.forEach(function(e3) {
            return p(t2, e3, false);
          }), t2;
        }, e.userOptions = function(t2) {
          for (var e2 = [], r2 = 1; r2 < arguments.length; r2++)
            e2[r2 - 1] = arguments[r2];
          return e2.forEach(function(e3) {
            return p(t2, e3, true);
          }), t2;
        }, e.selectOptions = f, e.selectOptionsFromKeys = function(t2, e2) {
          return f.apply(void 0, o([t2], n(Object.keys(e2)), false));
        }, e.separateOptions = function(t2) {
          for (var e2, n2, o2, i2, a2 = [], s2 = 1; s2 < arguments.length; s2++)
            a2[s2 - 1] = arguments[s2];
          var l2 = [];
          try {
            for (var c2 = r(a2), u2 = c2.next(); !u2.done; u2 = c2.next()) {
              var p2 = u2.value, f2 = {}, h = {};
              try {
                for (var d = (o2 = void 0, r(Object.keys(t2 || {}))), y = d.next(); !y.done; y = d.next()) {
                  var O = y.value;
                  (void 0 === p2[O] ? h : f2)[O] = t2[O];
                }
              } catch (t3) {
                o2 = { error: t3 };
              } finally {
                try {
                  y && !y.done && (i2 = d.return) && i2.call(d);
                } finally {
                  if (o2)
                    throw o2.error;
                }
              }
              l2.push(f2), t2 = h;
            }
          } catch (t3) {
            e2 = { error: t3 };
          } finally {
            try {
              u2 && !u2.done && (n2 = c2.return) && n2.call(c2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          return l2.unshift(t2), l2;
        }, e.lookup = function(t2, e2, r2) {
          return void 0 === r2 && (r2 = null), e2.hasOwnProperty(t2) ? e2[t2] : r2;
        };
      }, 8666: function(t, e) {
        Object.defineProperty(e, "__esModule", { value: true }), e.PrioritizedList = void 0;
        var r = function() {
          function t2() {
            this.items = [], this.items = [];
          }
          return t2.prototype[Symbol.iterator] = function() {
            var t3 = 0, e2 = this.items;
            return { next: function() {
              return { value: e2[t3++], done: t3 > e2.length };
            } };
          }, t2.prototype.add = function(e2, r2) {
            void 0 === r2 && (r2 = t2.DEFAULTPRIORITY);
            var n = this.items.length;
            do {
              n--;
            } while (n >= 0 && r2 < this.items[n].priority);
            return this.items.splice(n + 1, 0, { item: e2, priority: r2 }), e2;
          }, t2.prototype.remove = function(t3) {
            var e2 = this.items.length;
            do {
              e2--;
            } while (e2 >= 0 && this.items[e2].item !== t3);
            e2 >= 0 && this.items.splice(e2, 1);
          }, t2.DEFAULTPRIORITY = 5, t2;
        }();
        e.PrioritizedList = r;
      }, 4542: function(t, e) {
        Object.defineProperty(e, "__esModule", { value: true }), e.retryAfter = e.handleRetriesFor = void 0, e.handleRetriesFor = function(t2) {
          return new Promise(function e2(r, n) {
            try {
              r(t2());
            } catch (t3) {
              t3.retry && t3.retry instanceof Promise ? t3.retry.then(function() {
                return e2(r, n);
              }).catch(function(t4) {
                return n(t4);
              }) : t3.restart && t3.restart.isCallback ? MathJax.Callback.After(function() {
                return e2(r, n);
              }, t3.restart) : n(t3);
            }
          });
        }, e.retryAfter = function(t2) {
          var e2 = new Error("MathJax retry");
          throw e2.retry = t2, e2;
        };
      }, 4139: function(t, e) {
        var r = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.CssStyles = void 0;
        var n = function() {
          function t2(t3) {
            void 0 === t3 && (t3 = null), this.styles = {}, this.addStyles(t3);
          }
          return Object.defineProperty(t2.prototype, "cssText", { get: function() {
            return this.getStyleString();
          }, enumerable: false, configurable: true }), t2.prototype.addStyles = function(t3) {
            var e2, n2;
            if (t3)
              try {
                for (var o = r(Object.keys(t3)), i = o.next(); !i.done; i = o.next()) {
                  var a = i.value;
                  this.styles[a] || (this.styles[a] = {}), Object.assign(this.styles[a], t3[a]);
                }
              } catch (t4) {
                e2 = { error: t4 };
              } finally {
                try {
                  i && !i.done && (n2 = o.return) && n2.call(o);
                } finally {
                  if (e2)
                    throw e2.error;
                }
              }
          }, t2.prototype.removeStyles = function() {
            for (var t3, e2, n2 = [], o = 0; o < arguments.length; o++)
              n2[o] = arguments[o];
            try {
              for (var i = r(n2), a = i.next(); !a.done; a = i.next()) {
                var s = a.value;
                delete this.styles[s];
              }
            } catch (e3) {
              t3 = { error: e3 };
            } finally {
              try {
                a && !a.done && (e2 = i.return) && e2.call(i);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
          }, t2.prototype.clear = function() {
            this.styles = {};
          }, t2.prototype.getStyleString = function() {
            return this.getStyleRules().join("\n\n");
          }, t2.prototype.getStyleRules = function() {
            var t3, e2, n2 = Object.keys(this.styles), o = new Array(n2.length), i = 0;
            try {
              for (var a = r(n2), s = a.next(); !s.done; s = a.next()) {
                var l = s.value;
                o[i++] = l + " {\n" + this.getStyleDefString(this.styles[l]) + "\n}";
              }
            } catch (e3) {
              t3 = { error: e3 };
            } finally {
              try {
                s && !s.done && (e2 = a.return) && e2.call(a);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return o;
          }, t2.prototype.getStyleDefString = function(t3) {
            var e2, n2, o = Object.keys(t3), i = new Array(o.length), a = 0;
            try {
              for (var s = r(o), l = s.next(); !l.done; l = s.next()) {
                var c = l.value;
                i[a++] = "  " + c + ": " + t3[c] + ";";
              }
            } catch (t4) {
              e2 = { error: t4 };
            } finally {
              try {
                l && !l.done && (n2 = s.return) && n2.call(s);
              } finally {
                if (e2)
                  throw e2.error;
              }
            }
            return i.join("\n");
          }, t2;
        }();
        e.CssStyles = n;
      }, 8054: function(t, e) {
        var r = this && this.__values || function(t2) {
          var e2 = "function" == typeof Symbol && Symbol.iterator, r2 = e2 && t2[e2], n2 = 0;
          if (r2)
            return r2.call(t2);
          if (t2 && "number" == typeof t2.length)
            return { next: function() {
              return t2 && n2 >= t2.length && (t2 = void 0), { value: t2 && t2[n2++], done: !t2 };
            } };
          throw new TypeError(e2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }, n = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o2, i2 = r2.call(t2), a2 = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i2.next()).done; )
              a2.push(n2.value);
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i2.return) && r2.call(i2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
          return a2;
        }, o = this && this.__spreadArray || function(t2, e2, r2) {
          if (r2 || 2 === arguments.length)
            for (var n2, o2 = 0, i2 = e2.length; o2 < i2; o2++)
              !n2 && o2 in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, o2)), n2[o2] = e2[o2]);
          return t2.concat(n2 || Array.prototype.slice.call(e2));
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.Styles = void 0;
        var i = ["top", "right", "bottom", "left"], a = ["width", "style", "color"];
        function s(t2) {
          for (var e2 = t2.split(/((?:'[^']*'|"[^"]*"|,[\s\n]|[^\s\n])*)/g), r2 = []; e2.length > 1; )
            e2.shift(), r2.push(e2.shift());
          return r2;
        }
        function l(t2) {
          var e2, n2, o2 = s(this.styles[t2]);
          0 === o2.length && o2.push(""), 1 === o2.length && o2.push(o2[0]), 2 === o2.length && o2.push(o2[0]), 3 === o2.length && o2.push(o2[1]);
          try {
            for (var i2 = r(M.connect[t2].children), a2 = i2.next(); !a2.done; a2 = i2.next()) {
              var l2 = a2.value;
              this.setStyle(this.childName(t2, l2), o2.shift());
            }
          } catch (t3) {
            e2 = { error: t3 };
          } finally {
            try {
              a2 && !a2.done && (n2 = i2.return) && n2.call(i2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
        }
        function c(t2) {
          var e2, n2, o2 = M.connect[t2].children, i2 = [];
          try {
            for (var a2 = r(o2), s2 = a2.next(); !s2.done; s2 = a2.next()) {
              var l2 = s2.value, c2 = this.styles[t2 + "-" + l2];
              if (!c2)
                return void delete this.styles[t2];
              i2.push(c2);
            }
          } catch (t3) {
            e2 = { error: t3 };
          } finally {
            try {
              s2 && !s2.done && (n2 = a2.return) && n2.call(a2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          i2[3] === i2[1] && (i2.pop(), i2[2] === i2[0] && (i2.pop(), i2[1] === i2[0] && i2.pop())), this.styles[t2] = i2.join(" ");
        }
        function u(t2) {
          var e2, n2;
          try {
            for (var o2 = r(M.connect[t2].children), i2 = o2.next(); !i2.done; i2 = o2.next()) {
              var a2 = i2.value;
              this.setStyle(this.childName(t2, a2), this.styles[t2]);
            }
          } catch (t3) {
            e2 = { error: t3 };
          } finally {
            try {
              i2 && !i2.done && (n2 = o2.return) && n2.call(o2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
        }
        function p(t2) {
          var e2, i2, a2 = o([], n(M.connect[t2].children), false), s2 = this.styles[this.childName(t2, a2.shift())];
          try {
            for (var l2 = r(a2), c2 = l2.next(); !c2.done; c2 = l2.next()) {
              var u2 = c2.value;
              if (this.styles[this.childName(t2, u2)] !== s2)
                return void delete this.styles[t2];
            }
          } catch (t3) {
            e2 = { error: t3 };
          } finally {
            try {
              c2 && !c2.done && (i2 = l2.return) && i2.call(l2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          this.styles[t2] = s2;
        }
        var f = /^(?:[\d.]+(?:[a-z]+)|thin|medium|thick|inherit|initial|unset)$/, h = /^(?:none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset|inherit|initial|unset)$/;
        function d(t2) {
          var e2, n2, o2, i2, a2 = { width: "", style: "", color: "" };
          try {
            for (var l2 = r(s(this.styles[t2])), c2 = l2.next(); !c2.done; c2 = l2.next()) {
              var u2 = c2.value;
              u2.match(f) && "" === a2.width ? a2.width = u2 : u2.match(h) && "" === a2.style ? a2.style = u2 : a2.color = u2;
            }
          } catch (t3) {
            e2 = { error: t3 };
          } finally {
            try {
              c2 && !c2.done && (n2 = l2.return) && n2.call(l2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          try {
            for (var p2 = r(M.connect[t2].children), d2 = p2.next(); !d2.done; d2 = p2.next()) {
              var y2 = d2.value;
              this.setStyle(this.childName(t2, y2), a2[y2]);
            }
          } catch (t3) {
            o2 = { error: t3 };
          } finally {
            try {
              d2 && !d2.done && (i2 = p2.return) && i2.call(p2);
            } finally {
              if (o2)
                throw o2.error;
            }
          }
        }
        function y(t2) {
          var e2, n2, o2 = [];
          try {
            for (var i2 = r(M.connect[t2].children), a2 = i2.next(); !a2.done; a2 = i2.next()) {
              var s2 = a2.value, l2 = this.styles[this.childName(t2, s2)];
              l2 && o2.push(l2);
            }
          } catch (t3) {
            e2 = { error: t3 };
          } finally {
            try {
              a2 && !a2.done && (n2 = i2.return) && n2.call(i2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          o2.length ? this.styles[t2] = o2.join(" ") : delete this.styles[t2];
        }
        var O = { style: /^(?:normal|italic|oblique|inherit|initial|unset)$/, variant: new RegExp("^(?:" + ["normal|none", "inherit|initial|unset", "common-ligatures|no-common-ligatures", "discretionary-ligatures|no-discretionary-ligatures", "historical-ligatures|no-historical-ligatures", "contextual|no-contextual", "(?:stylistic|character-variant|swash|ornaments|annotation)\\([^)]*\\)", "small-caps|all-small-caps|petite-caps|all-petite-caps|unicase|titling-caps", "lining-nums|oldstyle-nums|proportional-nums|tabular-nums", "diagonal-fractions|stacked-fractions", "ordinal|slashed-zero", "jis78|jis83|jis90|jis04|simplified|traditional", "full-width|proportional-width", "ruby"].join("|") + ")$"), weight: /^(?:normal|bold|bolder|lighter|[1-9]00|inherit|initial|unset)$/, stretch: new RegExp("^(?:" + ["normal", "(?:(?:ultra|extra|semi)-)?condensed", "(?:(?:semi|extra|ulta)-)?expanded", "inherit|initial|unset"].join("|") + ")$"), size: new RegExp("^(?:" + ["xx-small|x-small|small|medium|large|x-large|xx-large|larger|smaller", "[d.]+%|[d.]+[a-z]+", "inherit|initial|unset"].join("|") + ")(?:/(?:normal|[d.+](?:%|[a-z]+)?))?$") };
        function m(t2) {
          var e2, o2, i2, a2, l2 = s(this.styles[t2]), c2 = { style: "", variant: [], weight: "", stretch: "", size: "", family: "", "line-height": "" };
          try {
            for (var u2 = r(l2), p2 = u2.next(); !p2.done; p2 = u2.next()) {
              var f2 = p2.value;
              c2.family = f2;
              try {
                for (var h2 = (i2 = void 0, r(Object.keys(O))), d2 = h2.next(); !d2.done; d2 = h2.next()) {
                  var y2 = d2.value;
                  if ((Array.isArray(c2[y2]) || "" === c2[y2]) && f2.match(O[y2]))
                    if ("size" === y2) {
                      var m2 = n(f2.split(/\//), 2), v2 = m2[0], b = m2[1];
                      c2[y2] = v2, b && (c2["line-height"] = b);
                    } else
                      "" === c2.size && (Array.isArray(c2[y2]) ? c2[y2].push(f2) : c2[y2] = f2);
                }
              } catch (t3) {
                i2 = { error: t3 };
              } finally {
                try {
                  d2 && !d2.done && (a2 = h2.return) && a2.call(h2);
                } finally {
                  if (i2)
                    throw i2.error;
                }
              }
            }
          } catch (t3) {
            e2 = { error: t3 };
          } finally {
            try {
              p2 && !p2.done && (o2 = u2.return) && o2.call(u2);
            } finally {
              if (e2)
                throw e2.error;
            }
          }
          !function(t3, e3) {
            var n2, o3;
            try {
              for (var i3 = r(M.connect[t3].children), a3 = i3.next(); !a3.done; a3 = i3.next()) {
                var s2 = a3.value, l3 = this.childName(t3, s2);
                if (Array.isArray(e3[s2])) {
                  var c3 = e3[s2];
                  c3.length && (this.styles[l3] = c3.join(" "));
                } else
                  "" !== e3[s2] && (this.styles[l3] = e3[s2]);
              }
            } catch (t4) {
              n2 = { error: t4 };
            } finally {
              try {
                a3 && !a3.done && (o3 = i3.return) && o3.call(i3);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
          }(t2, c2), delete this.styles[t2];
        }
        function v(t2) {
        }
        var M = function() {
          function t2(t3) {
            void 0 === t3 && (t3 = ""), this.parse(t3);
          }
          return Object.defineProperty(t2.prototype, "cssText", { get: function() {
            var t3, e2, n2 = [];
            try {
              for (var o2 = r(Object.keys(this.styles)), i2 = o2.next(); !i2.done; i2 = o2.next()) {
                var a2 = i2.value, s2 = this.parentName(a2);
                this.styles[s2] || n2.push(a2 + ": " + this.styles[a2] + ";");
              }
            } catch (e3) {
              t3 = { error: e3 };
            } finally {
              try {
                i2 && !i2.done && (e2 = o2.return) && e2.call(o2);
              } finally {
                if (t3)
                  throw t3.error;
              }
            }
            return n2.join(" ");
          }, enumerable: false, configurable: true }), t2.prototype.set = function(e2, r2) {
            for (e2 = this.normalizeName(e2), this.setStyle(e2, r2), t2.connect[e2] && !t2.connect[e2].combine && (this.combineChildren(e2), delete this.styles[e2]); e2.match(/-/) && (e2 = this.parentName(e2), t2.connect[e2]); )
              t2.connect[e2].combine.call(this, e2);
          }, t2.prototype.get = function(t3) {
            return t3 = this.normalizeName(t3), this.styles.hasOwnProperty(t3) ? this.styles[t3] : "";
          }, t2.prototype.setStyle = function(e2, r2) {
            this.styles[e2] = r2, t2.connect[e2] && t2.connect[e2].children && t2.connect[e2].split.call(this, e2), "" === r2 && delete this.styles[e2];
          }, t2.prototype.combineChildren = function(e2) {
            var n2, o2, i2 = this.parentName(e2);
            try {
              for (var a2 = r(t2.connect[e2].children), s2 = a2.next(); !s2.done; s2 = a2.next()) {
                var l2 = s2.value, c2 = this.childName(i2, l2);
                t2.connect[c2].combine.call(this, c2);
              }
            } catch (t3) {
              n2 = { error: t3 };
            } finally {
              try {
                s2 && !s2.done && (o2 = a2.return) && o2.call(a2);
              } finally {
                if (n2)
                  throw n2.error;
              }
            }
          }, t2.prototype.parentName = function(t3) {
            var e2 = t3.replace(/-[^-]*$/, "");
            return t3 === e2 ? "" : e2;
          }, t2.prototype.childName = function(e2, r2) {
            return r2.match(/-/) ? r2 : (t2.connect[e2] && !t2.connect[e2].combine && (r2 += e2.replace(/.*-/, "-"), e2 = this.parentName(e2)), e2 + "-" + r2);
          }, t2.prototype.normalizeName = function(t3) {
            return t3.replace(/[A-Z]/g, function(t4) {
              return "-" + t4.toLowerCase();
            });
          }, t2.prototype.parse = function(t3) {
            void 0 === t3 && (t3 = "");
            var e2 = this.constructor.pattern;
            this.styles = {};
            for (var r2 = t3.replace(e2.comment, "").split(e2.style); r2.length > 1; ) {
              var o2 = n(r2.splice(0, 3), 3), i2 = o2[0], a2 = o2[1], s2 = o2[2];
              if (i2.match(/[^\s\n]/))
                return;
              this.set(a2, s2);
            }
          }, t2.pattern = { style: /([-a-z]+)[\s\n]*:[\s\n]*((?:'[^']*'|"[^"]*"|\n|.)*?)[\s\n]*(?:;|$)/g, comment: /\/\*[^]*?\*\//g }, t2.connect = { padding: { children: i, split: l, combine: c }, border: { children: i, split: u, combine: p }, "border-top": { children: a, split: d, combine: y }, "border-right": { children: a, split: d, combine: y }, "border-bottom": { children: a, split: d, combine: y }, "border-left": { children: a, split: d, combine: y }, "border-width": { children: i, split: l, combine: null }, "border-style": { children: i, split: l, combine: null }, "border-color": { children: i, split: l, combine: null }, font: { children: ["style", "variant", "weight", "stretch", "line-height", "size", "family"], split: m, combine: v } }, t2;
        }();
        e.Styles = M;
      }, 6010: function(t, e) {
        Object.defineProperty(e, "__esModule", { value: true }), e.px = e.emRounded = e.em = e.percent = e.length2em = e.MATHSPACE = e.RELUNITS = e.UNITS = e.BIGDIMEN = void 0, e.BIGDIMEN = 1e6, e.UNITS = { px: 1, in: 96, cm: 96 / 2.54, mm: 96 / 25.4 }, e.RELUNITS = { em: 1, ex: 0.431, pt: 0.1, pc: 1.2, mu: 1 / 18 }, e.MATHSPACE = { veryverythinmathspace: 1 / 18, verythinmathspace: 2 / 18, thinmathspace: 3 / 18, mediummathspace: 4 / 18, thickmathspace: 5 / 18, verythickmathspace: 6 / 18, veryverythickmathspace: 7 / 18, negativeveryverythinmathspace: -1 / 18, negativeverythinmathspace: -2 / 18, negativethinmathspace: -3 / 18, negativemediummathspace: -4 / 18, negativethickmathspace: -5 / 18, negativeverythickmathspace: -6 / 18, negativeveryverythickmathspace: -7 / 18, thin: 0.04, medium: 0.06, thick: 0.1, normal: 1, big: 2, small: 1 / Math.sqrt(2), infinity: e.BIGDIMEN }, e.length2em = function(t2, r, n, o) {
          if (void 0 === r && (r = 0), void 0 === n && (n = 1), void 0 === o && (o = 16), "string" != typeof t2 && (t2 = String(t2)), "" === t2 || null == t2)
            return r;
          if (e.MATHSPACE[t2])
            return e.MATHSPACE[t2];
          var i = t2.match(/^\s*([-+]?(?:\.\d+|\d+(?:\.\d*)?))?(pt|em|ex|mu|px|pc|in|mm|cm|%)?/);
          if (!i)
            return r;
          var a = parseFloat(i[1] || "1"), s = i[2];
          return e.UNITS.hasOwnProperty(s) ? a * e.UNITS[s] / o / n : e.RELUNITS.hasOwnProperty(s) ? a * e.RELUNITS[s] : "%" === s ? a / 100 * r : a * r;
        }, e.percent = function(t2) {
          return (100 * t2).toFixed(1).replace(/\.?0+$/, "") + "%";
        }, e.em = function(t2) {
          return Math.abs(t2) < 1e-3 ? "0" : t2.toFixed(3).replace(/\.?0+$/, "") + "em";
        }, e.emRounded = function(t2, e2) {
          return void 0 === e2 && (e2 = 16), t2 = (Math.round(t2 * e2) + 0.05) / e2, Math.abs(t2) < 1e-3 ? "0em" : t2.toFixed(3).replace(/\.?0+$/, "") + "em";
        }, e.px = function(t2, r, n) {
          return void 0 === r && (r = -e.BIGDIMEN), void 0 === n && (n = 16), t2 *= n, r && t2 < r && (t2 = r), Math.abs(t2) < 0.1 ? "0" : t2.toFixed(1).replace(/\.0$/, "") + "px";
        };
      }, 7875: function(t, e) {
        Object.defineProperty(e, "__esModule", { value: true }), e.max = e.sum = void 0, e.sum = function(t2) {
          return t2.reduce(function(t3, e2) {
            return t3 + e2;
          }, 0);
        }, e.max = function(t2) {
          return t2.reduce(function(t3, e2) {
            return Math.max(t3, e2);
          }, 0);
        };
      }, 505: function(t, e) {
        var r = this && this.__read || function(t2, e2) {
          var r2 = "function" == typeof Symbol && t2[Symbol.iterator];
          if (!r2)
            return t2;
          var n2, o, i = r2.call(t2), a = [];
          try {
            for (; (void 0 === e2 || e2-- > 0) && !(n2 = i.next()).done; )
              a.push(n2.value);
          } catch (t3) {
            o = { error: t3 };
          } finally {
            try {
              n2 && !n2.done && (r2 = i.return) && r2.call(i);
            } finally {
              if (o)
                throw o.error;
            }
          }
          return a;
        }, n = this && this.__spreadArray || function(t2, e2, r2) {
          if (r2 || 2 === arguments.length)
            for (var n2, o = 0, i = e2.length; o < i; o++)
              !n2 && o in e2 || (n2 || (n2 = Array.prototype.slice.call(e2, 0, o)), n2[o] = e2[o]);
          return t2.concat(n2 || Array.prototype.slice.call(e2));
        };
        Object.defineProperty(e, "__esModule", { value: true }), e.split = e.isPercent = e.unicodeString = e.unicodeChars = e.quotePattern = e.sortLength = void 0, e.sortLength = function(t2, e2) {
          return t2.length !== e2.length ? e2.length - t2.length : t2 === e2 ? 0 : t2 < e2 ? -1 : 1;
        }, e.quotePattern = function(t2) {
          return t2.replace(/([\^$(){}+*?\-|\[\]\:\\])/g, "\\$1");
        }, e.unicodeChars = function(t2) {
          return Array.from(t2).map(function(t3) {
            return t3.codePointAt(0);
          });
        }, e.unicodeString = function(t2) {
          return String.fromCodePoint.apply(String, n([], r(t2), false));
        }, e.isPercent = function(t2) {
          return !!t2.match(/%\s*$/);
        }, e.split = function(t2) {
          return t2.trim().split(/\s+/);
        };
      }, 8671: function(t, e, r) {
        r.r(e);
        var n = r(9515), o = r(3282), i = r(4907), a = r(7062), s = r(1168), l = r(315), c = r(5020), u = r(2560), p = r(1248);
        MathJax.loader && MathJax.loader.checkVersion("adaptors/liteDOM", o.VERSION, "adaptors"), (0, n.combineWithMathJax)({ _: { adaptors: { liteAdaptor: i, lite: { Document: a, Element: s, List: l, Parser: c, Text: u, Window: p } } } }), MathJax.startup && (MathJax.startup.registerConstructor("liteAdaptor", i.liteAdaptor), MathJax.startup.useAdaptor("liteAdaptor", true));
      }, 7187: function(t, e, r) {
        r.r(e);
        var n = r(9515), o = r(3282), i = r(444), a = r(6191), s = r(5009), l = r(3494), c = r(3670), u = r(805), p = r(9206), f = r(5722), h = r(4474), d = r(9e3), y = r(91), O = r(6336), m = r(1759), v = r(3909), M = r(9007), b = r(3948), E = r(9145), g = r(142), L = r(7590), x = r(3233), N = r(1334), _ = r(6661), T = r(1581), R = r(5410), A = r(6850), S = r(3985), C = r(450), w = r(6405), I = r(3050), P = r(2756), j = r(7238), D = r(5741), k = r(6145), B = r(9878), X = r(7265), F = r(6030), H = r(7131), J = r(1314), W = r(4461), q = r(1349), G = r(4359), z = r(4770), V = r(5022), U = r(5184), K = r(9102), $ = r(6325), Y = r(4082), Q = r(9259), Z = r(2975), tt = r(4574), et = r(4596), rt = r(7860), nt = r(8823), ot = r(8912), it = r(3811), at = r(6272), st = r(3683), lt = r(5138), ct = r(3726), ut = r(3363), pt = r(3335), ft = r(5713), ht = r(9923), dt = r(6469), yt = r(6751), Ot = r(5368), mt = r(7525), vt = r(103), Mt = r(7233), bt = r(8666), Et = r(4542), gt = r(4139), Lt = r(8054), xt = r(6010), Nt = r(7875), _t = r(505);
        MathJax.loader && MathJax.loader.checkVersion("core", o.VERSION, "core"), (0, n.combineWithMathJax)({ _: { adaptors: { HTMLAdaptor: i, browserAdaptor: a }, components: { global: n }, core: { DOMAdaptor: s, FindMath: l, Handler: c, HandlerList: u, InputJax: p, MathDocument: f, MathItem: h, MathList: d, MmlTree: { Attributes: y, MML: O, MathMLVisitor: m, MmlFactory: v, MmlNode: M, MmlNodes: { TeXAtom: b, maction: E, maligngroup: g, malignmark: L, math: x, mathchoice: N, menclose: _, merror: T, mfenced: R, mfrac: A, mglyph: S, mi: C, mmultiscripts: w, mn: I, mo: P, mpadded: j, mphantom: D, mroot: k, mrow: B, ms: X, mspace: F, msqrt: H, mstyle: J, msubsup: W, mtable: q, mtd: G, mtext: z, mtr: V, munderover: U, semantics: K }, MmlVisitor: $, OperatorDictionary: Y, SerializedMmlVisitor: Q }, OutputJax: Z, Tree: { Factory: tt, Node: et, NodeFactory: rt, Visitor: nt, Wrapper: ot, WrapperFactory: it } }, handlers: { html_ts: at, html: { HTMLDocument: st, HTMLDomStrings: lt, HTMLHandler: ct, HTMLMathItem: ut, HTMLMathList: pt } }, mathjax: ft, util: { AsyncLoad: ht, BBox: dt, BitField: yt, Entities: Ot, FunctionList: mt, LinkedList: vt, Options: Mt, PrioritizedList: bt, Retries: Et, StyleList: gt, Styles: Lt, lengths: xt, numeric: Nt, string: _t } } }), MathJax.startup && (MathJax.startup.registerConstructor("HTMLHandler", ct.HTMLHandler), MathJax.startup.registerConstructor("browserAdaptor", a.browserAdaptor), MathJax.startup.useHandler("HTMLHandler"), MathJax.startup.useAdaptor("browserAdaptor")), MathJax.loader && (MathJax._.mathjax.mathjax.asyncLoad = function(t2) {
          return MathJax.loader.load(t2);
        });
      }, 3226: function(t, e, r) {
        r.d(e, { q: function() {
          return o;
        } });
        var n = "/", o = { core: "".concat(n, "/core/core.js"), "adaptors/liteDOM": "".concat(n, "/adaptors/liteDOM/liteDOM.js"), "input/tex": "".concat(n, "/input/tex/tex.js"), "input/tex-base": "".concat(n, "/input/tex-base/tex-base.js"), "input/tex-full": "".concat(n, "/input/tex-full/tex-full.js"), "[tex]/action": "".concat(n, "/input/tex/extensions/action/action.js"), "[tex]/all-packages": "".concat(n, "/input/tex/extensions/all-packages/all-packages.js"), "[tex]/autoload": "".concat(n, "/input/tex/extensions/autoload/autoload.js"), "[tex]/ams": "".concat(n, "/input/tex/extensions/ams/ams.js"), "[tex]/amscd": "".concat(n, "/input/tex/extensions/amscd/amscd.js"), "[tex]/bbox": "".concat(n, "/input/tex/extensions/bbox/bbox.js"), "[tex]/boldsymbol": "".concat(n, "/input/tex/extensions/boldsymbol/boldsymbol.js"), "[tex]/braket": "".concat(n, "/input/tex/extensions/braket/braket.js"), "[tex]/bussproofs": "".concat(n, "/input/tex/extensions/bussproofs/bussproofs.js"), "[tex]/cancel": "".concat(n, "/input/tex/extensions/cancel/cancel.js"), "[tex]/centernot": "".concat(n, "/input/tex/extensions/centernot/centernot.js"), "[tex]/color": "".concat(n, "/input/tex/extensions/color/color.js"), "[tex]/colorv2": "".concat(n, "/input/tex/extensions/colorv2/colorv2.js"), "[tex]/configmacros": "".concat(n, "/input/tex/extensions/configmacros/configmacros.js"), "[tex]/enclose": "".concat(n, "/input/tex/extensions/enclose/enclose.js"), "[tex]/extpfeil": "".concat(n, "/input/tex/extensions/extpfeil/extpfeil.js"), "[tex]/html": "".concat(n, "/input/tex/extensions/html/html.js"), "[tex]/mathtools": "".concat(n, "/input/tex/extensions/mathtools/mathtools.js"), "[tex]/mhchem": "".concat(n, "/input/tex/extensions/mhchem/mhchem.js"), "[tex]/newcommand": "".concat(n, "/input/tex/extensions/newcommand/newcommand.js"), "[tex]/noerrors": "".concat(n, "/input/tex/extensions/noerrors/noerrors.js"), "[tex]/noundefined": "".concat(n, "/input/tex/extensions/noundefined/noundefined.js"), "[tex]/physics": "".concat(n, "/input/tex/extensions/physics/physics.js"), "[tex]/require": "".concat(n, "/input/tex/extensions/require/require.js"), "[tex]/setoptions": "".concat(n, "/input/tex/extensions/setoptions/setoptions.js"), "[tex]/tagformat": "".concat(n, "/input/tex/extensions/tagformat/tagformat.js"), "[tex]/textmacros": "".concat(n, "/input/tex/extensions/textmacros/textmacros.js"), "[tex]/unicode": "".concat(n, "/input/tex/extensions/unicode/unicode.js"), "[tex]/verb": "".concat(n, "/input/tex/extensions/verb/verb.js"), "[tex]/cases": "".concat(n, "/input/tex/extensions/cases/cases.js"), "[tex]/empheq": "".concat(n, "/input/tex/extensions/empheq/empheq.js"), "input/mml": "".concat(n, "/input/mml/mml.js"), "input/mml/entities": "".concat(n, "/input/mml/entities/entities.js"), "[mml]/mml3": "".concat(n, "/input/mml/extensions/mml3/mml3.js"), "input/asciimath": "".concat(n, "/input/asciimath/asciimath.js"), "output/chtml": "".concat(n, "/output/chtml/chtml.js"), "output/chtml/fonts/tex": "".concat(n, "/output/chtml/fonts/tex/tex.js"), "output/svg": "".concat(n, "/output/svg/svg.js"), "output/svg/fonts/tex": "".concat(n, "/output/svg/fonts/tex/tex.js"), "a11y/assistive-mml": "".concat(n, "/a11y/assistive-mml/assistive-mml.js"), "a11y/semantic-enrich": "".concat(n, "/a11y/semantic-enrich/semantic-enrich.js"), "a11y/complexity": "".concat(n, "/a11y/complexity/complexity.js"), "a11y/explorer": "".concat(n, "/a11y/explorer/explorer.js"), "a11y/sre": "".concat(n, "/a11y/sre/sre.js"), "ui/lazy": "".concat(n, "/ui/lazy/lazy.js"), "ui/menu": "".concat(n, "/ui/menu/menu.js"), "ui/safe": "".concat(n, "/ui/safe/safe.js"), "mml-chtml": "".concat(n, "/mml-chtml/mml-chtml.js"), "mml-svg": "".concat(n, "/mml-svg/mml-svg.js"), "tex-chtml": "".concat(n, "/tex-chtml/tex-chtml.js"), "tex-svg": "".concat(n, "/tex-svg/tex-svg.js"), "tex-mml-chtml": "".concat(n, "/tex-mml-chtml/tex-mml-chtml.js"), "tex-mml-svg": "".concat(n, "/tex-mml-svg/tex-mml-svg.js"), loader: "".concat(n, "/loader/loader.js"), startup: "".concat(n, "/startup/startup.js") };
      }, 1585: function(t, e, r) {
        r.r(e);
        var n = r(9515), o = r(3282), i = r(235), a = r(265), s = r(2388);
        function l(t2, e2) {
          (null == e2 || e2 > t2.length) && (e2 = t2.length);
          for (var r2 = 0, n2 = new Array(e2); r2 < e2; r2++)
            n2[r2] = t2[r2];
          return n2;
        }
        MathJax.loader && MathJax.loader.checkVersion("startup", o.VERSION, "startup"), (0, n.combineWithMathJax)({ _: { components: { loader: i, package: a, startup: s } } });
        var c, u = { "a11y/semantic-enrich": ["input/mml", "a11y/sre"], "a11y/complexity": ["a11y/semantic-enrich"], "a11y/explorer": ["a11y/semantic-enrich", "ui/menu"], "[mml]/mml3": ["input/mml"], "[tex]/all-packages": ["input/tex-base"], "[tex]/action": ["input/tex-base", "[tex]/newcommand"], "[tex]/autoload": ["input/tex-base", "[tex]/require"], "[tex]/ams": ["input/tex-base"], "[tex]/amscd": ["input/tex-base"], "[tex]/bbox": ["input/tex-base", "[tex]/ams", "[tex]/newcommand"], "[tex]/boldsymbol": ["input/tex-base"], "[tex]/braket": ["input/tex-base"], "[tex]/bussproofs": ["input/tex-base"], "[tex]/cancel": ["input/tex-base", "[tex]/enclose"], "[tex]/centernot": ["input/tex-base"], "[tex]/color": ["input/tex-base"], "[tex]/colorv2": ["input/tex-base"], "[tex]/colortbl": ["input/tex-base", "[tex]/color"], "[tex]/configmacros": ["input/tex-base", "[tex]/newcommand"], "[tex]/enclose": ["input/tex-base"], "[tex]/extpfeil": ["input/tex-base", "[tex]/newcommand", "[tex]/ams"], "[tex]/html": ["input/tex-base"], "[tex]/mathtools": ["input/tex-base", "[tex]/newcommand", "[tex]/ams"], "[tex]/mhchem": ["input/tex-base", "[tex]/ams"], "[tex]/newcommand": ["input/tex-base"], "[tex]/noerrors": ["input/tex-base"], "[tex]/noundefined": ["input/tex-base"], "[tex]/physics": ["input/tex-base"], "[tex]/require": ["input/tex-base"], "[tex]/setoptions": ["input/tex-base"], "[tex]/tagformat": ["input/tex-base"], "[tex]/textcomp": ["input/tex-base", "[tex]/textmacros"], "[tex]/textmacros": ["input/tex-base"], "[tex]/unicode": ["input/tex-base"], "[tex]/verb": ["input/tex-base"], "[tex]/cases": ["[tex]/empheq"], "[tex]/empheq": ["input/tex-base", "[tex]/ams"] }, p = Array.from(Object.keys(u)).filter(function(t2) {
          return "[tex]" === t2.substr(0, 5) && "[tex]/autoload" !== t2 && "[tex]/colorv2" !== t2 && "[tex]/all-packages" !== t2;
        }), f = { startup: ["loader"], "input/tex": ["input/tex-base", "[tex]/ams", "[tex]/newcommand", "[tex]/noundefined", "[tex]/require", "[tex]/autoload", "[tex]/configmacros"], "input/tex-full": ["input/tex-base", "[tex]/all-packages"].concat((c = p, function(t2) {
          if (Array.isArray(t2))
            return l(t2);
        }(c) || function(t2) {
          if ("undefined" != typeof Symbol && null != t2[Symbol.iterator] || null != t2["@@iterator"])
            return Array.from(t2);
        }(c) || function(t2, e2) {
          if (t2) {
            if ("string" == typeof t2)
              return l(t2, e2);
            var r2 = Object.prototype.toString.call(t2).slice(8, -1);
            return "Object" === r2 && t2.constructor && (r2 = t2.constructor.name), "Map" === r2 || "Set" === r2 ? Array.from(t2) : "Arguments" === r2 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r2) ? l(t2, e2) : void 0;
          }
        }(c) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }())), "[tex]/all-packages": p };
        (0, n.combineDefaults)(MathJax.config.loader, "dependencies", u), (0, n.combineDefaults)(MathJax.config.loader, "paths", { tex: "[mathjax]/input/tex/extensions", mml: "[mathjax]/input/mml/extensions", sre: "[mathjax]/sre/mathmaps" }), (0, n.combineDefaults)(MathJax.config.loader, "provides", f), (0, n.combineDefaults)(MathJax.config.loader, "source", { "[tex]/amsCd": "[tex]/amscd", "[tex]/colorV2": "[tex]/colorv2", "[tex]/configMacros": "[tex]/configmacros", "[tex]/tagFormat": "[tex]/tagformat" });
      } }, __webpack_module_cache__ = {};
      function __webpack_require__(t) {
        var e = __webpack_module_cache__[t];
        if (void 0 !== e)
          return e.exports;
        var r = __webpack_module_cache__[t] = { exports: {} };
        return __webpack_modules__[t].call(r.exports, r, r.exports, __webpack_require__), r.exports;
      }
      __webpack_require__.d = function(t, e) {
        for (var r in e)
          __webpack_require__.o(e, r) && !__webpack_require__.o(t, r) && Object.defineProperty(t, r, { enumerable: true, get: e[r] });
      }, __webpack_require__.g = function() {
        if ("object" == typeof globalThis)
          return globalThis;
        try {
          return this || new Function("return this")();
        } catch (t) {
          if ("object" == typeof window)
            return window;
        }
      }(), __webpack_require__.o = function(t, e) {
        return Object.prototype.hasOwnProperty.call(t, e);
      }, __webpack_require__.r = function(t) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: true });
      };
      var __webpack_exports__ = {};
      !function() {
        function _toConsumableArray(t) {
          return _arrayWithoutHoles(t) || _iterableToArray(t) || _unsupportedIterableToArray(t) || _nonIterableSpread();
        }
        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _unsupportedIterableToArray(t, e) {
          if (t) {
            if ("string" == typeof t)
              return _arrayLikeToArray(t, e);
            var r = Object.prototype.toString.call(t).slice(8, -1);
            return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? _arrayLikeToArray(t, e) : void 0;
          }
        }
        function _iterableToArray(t) {
          if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"])
            return Array.from(t);
        }
        function _arrayWithoutHoles(t) {
          if (Array.isArray(t))
            return _arrayLikeToArray(t);
        }
        function _arrayLikeToArray(t, e) {
          (null == e || e > t.length) && (e = t.length);
          for (var r = 0, n = new Array(e); r < e; r++)
            n[r] = t[r];
          return n;
        }
        __webpack_require__.d(__webpack_exports__, { init: function() {
          return init;
        } });
        var path = eval("require('path')");
        __webpack_require__(1585);
        var _require = __webpack_require__(235), Loader = _require.Loader, CONFIG = _require.CONFIG, _require2 = __webpack_require__(9515), combineDefaults = _require2.combineDefaults, combineConfig = _require2.combineConfig;
        combineDefaults(MathJax.config, "loader", { require: eval("require"), failed: function(t) {
          throw t;
        } }), Loader.preLoad("loader", "startup", "core", "adaptors/liteDOM"), __webpack_require__(7187), __webpack_require__(8671);
        var dir = CONFIG.paths.mathjax = eval("__dirname");
        if ("node-main" === path.basename(dir)) {
          CONFIG.paths.mathjax = path.dirname(dir), combineDefaults(CONFIG, "source", __webpack_require__(3226).q);
          var ROOT = path.resolve(dir, "../../../js"), REQUIRE = MathJax.config.loader.require;
          MathJax._.mathjax.mathjax.asyncLoad = function(t) {
            return REQUIRE("." === t.charAt(0) ? path.resolve(ROOT, t) : t);
          };
        }
        var init = function() {
          var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
          return combineConfig(MathJax.config, t), Loader.load.apply(Loader, _toConsumableArray(CONFIG.load)).then(function() {
            return CONFIG.ready();
          }).then(function() {
            return MathJax;
          }).catch(function(t2) {
            return CONFIG.failed(t2);
          });
        };
      }(), exports.init = __webpack_exports__.init;
    })();
  }
});

// node_modules/texsvg/cjs/config.js
var require_config2 = __commonJS({
  "node_modules/texsvg/cjs/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.mathjaxInitOptions = exports2.svgoOptimizeOptions = void 0;
    exports2.svgoOptimizeOptions = {
      plugins: [
        "cleanupAttrs",
        "inlineStyles",
        "removeDoctype",
        "removeXMLProcInst",
        "removeComments",
        "removeMetadata",
        "removeTitle",
        "removeDesc",
        "removeUselessDefs",
        "removeEditorsNSData",
        "removeEmptyAttrs",
        "removeHiddenElems",
        "removeEmptyText",
        "removeEmptyContainers",
        "removeViewBox",
        "cleanupEnableBackground",
        "minifyStyles",
        "convertStyleToAttrs",
        "convertColors",
        "convertPathData",
        "convertTransform",
        "removeUnknownsAndDefaults",
        "removeNonInheritableGroupAttrs",
        "removeUselessStrokeAndFill",
        "removeUnusedNS",
        "cleanupIDs",
        "cleanupNumericValues",
        "moveElemsAttrsToGroup",
        "moveGroupAttrsToElems",
        "collapseGroups",
        "mergePaths",
        "convertShapeToPath",
        "convertEllipseToCircle",
        "sortDefsChildren",
        {
          name: "removeAttrs",
          params: { attrs: "(data-mml-node)" }
        }
      ]
    };
    exports2.mathjaxInitOptions = {
      loader: {
        load: ["input/tex", "output/svg"]
      }
    };
  }
});

// node_modules/texsvg/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/texsvg/cjs/index.js"(exports2, module2) {
    "use strict";
    var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports2 && exports2.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var svgo_1 = require_svgo_node();
    var mathjax_1 = __importDefault(require_node_main());
    var config_1 = require_config2();
    var tex2svg;
    function texsvg(tex) {
      return __awaiter(this, void 0, void 0, function() {
        var MathJax_1, svg, result;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (typeof tex !== "string") {
                throw new TypeError("First argument must be a string");
              }
              if (!!tex2svg)
                return [3, 2];
              return [4, mathjax_1.default.init(config_1.mathjaxInitOptions)];
            case 1:
              MathJax_1 = _a.sent();
              tex2svg = function(tex2) {
                return MathJax_1.startup.adaptor.innerHTML(MathJax_1.tex2svg(tex2));
              };
              _a.label = 2;
            case 2:
              svg = tex2svg(tex);
              result = (0, svgo_1.optimize)(svg, config_1.svgoOptimizeOptions);
              if (result.error) {
                throw result.error;
              }
              return [2, result.data];
          }
        });
      });
    }
    texsvg.default = texsvg;
    module2.exports = texsvg;
  }
});

// tex2svg_renderer/utils/svg_converter.js
var require_svg_converter = __commonJS({
  "tex2svg_renderer/utils/svg_converter.js"(exports2, module2) {
    var texsvg = require_cjs();
    var crypto = require("crypto");
    var path3 = require("path");
    var fs2 = require("fs");
    var SvgConverter = class {
      constructor(debugDir, logger) {
        this.debugDir = debugDir;
        this.logger = logger;
      }
      async convertLatexToSvg(latex, options) {
        var _a;
        return await texsvg(latex, {
          displayMode: options.display,
          container: ((_a = options.svgOptions) == null ? void 0 : _a.containerWidth) || 300,
          useStandardSize: true
        });
      }
      saveSvg(latex, svg, id) {
        const hash = crypto.createHash("md5").update(latex).digest("hex").slice(0, 8);
        const sanitizedLatex = latex.replace(/[^a-zA-Z0-9]/g, "_").slice(0, 20);
        const filename = `${sanitizedLatex}-${hash}-${id}.svg`;
        const filepath = path3.join(this.debugDir, filename);
        fs2.writeFileSync(filepath, svg);
        this.logger(`Saved SVG: ${filename}`);
      }
      unescapeLatex(latex) {
        return latex.replace(/\\\\(?![a-zA-Z{}\s])/g, "\\");
      }
    };
    module2.exports = SvgConverter;
  }
});

// tex2svg_renderer/impl/math_server.js
var require_math_server = __commonJS({
  "tex2svg_renderer/impl/math_server.js"(exports2, module2) {
    var fs2 = require("fs");
    var path3 = require("path");
    var JsonRpcHandler = require_json_rpc_handler();
    var SvgConverter = require_svg_converter();
    var MathServer2 = class {
      constructor(options) {
        if (!options.baseDir || !options.logDir || !options.debugDir || !options.inputStream || !options.outputStream) {
          throw new Error("Missing required options");
        }
        this.options = options;
        this.isRunning = false;
        this.setupPaths();
      }
      setupPaths() {
        this.logsDir = path3.join(this.options.baseDir, this.options.logDir, "math");
        this.debugDir = path3.join(this.options.baseDir, this.options.debugDir, "math", "node");
      }
      async start() {
        if (this.isRunning) {
          throw new Error("Server is already running");
        }
        fs2.mkdirSync(this.logsDir, { recursive: true });
        fs2.mkdirSync(this.debugDir, { recursive: true });
        const timestamp = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
        this.rpcLogFile = path3.join(this.logsDir, `math-renderer-rpc-${timestamp}.log`);
        this.processLogFile = path3.join(this.logsDir, `math-renderer-process-${timestamp}.log`);
        this.logProcess = (msg) => {
          const entry = `[${(/* @__PURE__ */ new Date()).toISOString()}] ${msg}
`;
          fs2.appendFileSync(this.processLogFile, entry);
        };
        this.svgConverter = new SvgConverter(this.debugDir, this.logProcess.bind(this));
        this.rpcServer = new JsonRpcHandler(this, this.logProcess.bind(this), {
          inputStream: this.options.inputStream,
          outputStream: this.options.outputStream
        });
        this.isRunning = true;
        this.logProcess("Math server started");
        return this;
      }
      async stop() {
        if (!this.isRunning) {
          return;
        }
        if (this.rpcServer) {
          await this.rpcServer.close();
        }
        this.isRunning = false;
        this.logProcess("Math server stopped");
      }
      async renderMath(params) {
        if (!this.isRunning) {
          throw new Error("Server is not running");
        }
        const latex = params.latex;
        this.logProcess(`Rendering LaTeX: ${latex}`);
        return await this.svgConverter.convertLatexToSvg(latex, params);
      }
      isActive() {
        return this.isRunning;
      }
    };
    module2.exports = MathServer2;
  }
});

// tex2svg_renderer/index.js
var fs = require("fs");
var path2 = require("path");
var MathServer = require_math_server();
async function main() {
  const io = {
    inputStream: process.stdin,
    outputStream: process.stdout
  };
  const serverConfig = {
    baseDir: process.env.BASE_DIR || path2.resolve(__dirname, ".."),
    logDir: process.env.LOG_DIR || "_logs",
    debugDir: process.env.DEBUG_DIR || "_debug",
    ...io
  };
  const server = new MathServer(serverConfig);
  try {
    await server.start();
    const signals = ["SIGINT", "SIGTERM", "SIGHUP"];
    signals.forEach((signal) => {
      process.on(signal, async () => {
        console.log(`
Received ${signal}. Shutting down...`);
        await server.stop();
        process.exit(0);
      });
    });
    process.on("uncaughtException", async (error) => {
      console.error("Uncaught Exception:", error);
      await server.stop();
      process.exit(1);
    });
    process.on("unhandledRejection", async (reason, promise) => {
      console.error("Unhandled Rejection at:", promise, "reason:", reason);
      await server.stop();
      process.exit(1);
    });
  } catch (error) {
    console.error("Failed to start server:", error);
    process.exit(1);
  }
}
if (require.main === module) {
  main().catch((error) => {
    console.error("Fatal error:", error);
    process.exit(1);
  });
}
module.exports = main;
/*! Bundled license information:

stable/stable.js:
  (*! stable.js 0.1.8, https://github.com/Two-Screen/stable *)
  (*! © 2018 Angry Bytes and contributors. MIT licensed. *)
*/
//# sourceMappingURL=tex2svg_renderer__index.bundled.js.map
